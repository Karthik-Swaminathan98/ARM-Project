
build/APP_CY8CKIT-062-WIFI-BT/Release/mtb-example-hal-hello-world.elf:     file format elf32-littlearm


Disassembly of section .text:

10002000 <__Vectors>:
10002000:	08047800 	.word	0x08047800
10002004:	1000231d 	.word	0x1000231d
10002008:	0000000d 	.word	0x0000000d
1000200c:	10002391 	.word	0x10002391
10002010:	10002391 	.word	0x10002391
10002014:	10002391 	.word	0x10002391
10002018:	10002391 	.word	0x10002391
	...
1000202c:	1000238d 	.word	0x1000238d
10002030:	1000238d 	.word	0x1000238d
10002034:	00000000 	.word	0x00000000
10002038:	1000238d 	.word	0x1000238d
1000203c:	1000238d 	.word	0x1000238d
10002040:	1000238d 	.word	0x1000238d
10002044:	1000238d 	.word	0x1000238d
10002048:	1000238d 	.word	0x1000238d
1000204c:	1000238d 	.word	0x1000238d
10002050:	1000238d 	.word	0x1000238d
10002054:	1000238d 	.word	0x1000238d
10002058:	1000238d 	.word	0x1000238d
1000205c:	1000238d 	.word	0x1000238d
10002060:	1000238d 	.word	0x1000238d
10002064:	1000238d 	.word	0x1000238d
10002068:	1000238d 	.word	0x1000238d
1000206c:	1000238d 	.word	0x1000238d
10002070:	1000238d 	.word	0x1000238d
10002074:	1000238d 	.word	0x1000238d
10002078:	1000238d 	.word	0x1000238d
1000207c:	1000238d 	.word	0x1000238d
10002080:	1000238d 	.word	0x1000238d
10002084:	1000238d 	.word	0x1000238d
10002088:	1000238d 	.word	0x1000238d
1000208c:	1000238d 	.word	0x1000238d
10002090:	1000238d 	.word	0x1000238d
10002094:	1000238d 	.word	0x1000238d
10002098:	1000238d 	.word	0x1000238d
1000209c:	1000238d 	.word	0x1000238d
100020a0:	1000238d 	.word	0x1000238d
100020a4:	1000238d 	.word	0x1000238d
100020a8:	1000238d 	.word	0x1000238d
100020ac:	1000238d 	.word	0x1000238d
100020b0:	1000238d 	.word	0x1000238d
100020b4:	1000238d 	.word	0x1000238d
100020b8:	1000238d 	.word	0x1000238d
100020bc:	1000238d 	.word	0x1000238d
100020c0:	1000238d 	.word	0x1000238d
100020c4:	1000238d 	.word	0x1000238d
100020c8:	1000238d 	.word	0x1000238d
100020cc:	1000238d 	.word	0x1000238d
100020d0:	1000238d 	.word	0x1000238d
100020d4:	1000238d 	.word	0x1000238d
100020d8:	1000238d 	.word	0x1000238d
100020dc:	1000238d 	.word	0x1000238d
100020e0:	1000238d 	.word	0x1000238d
100020e4:	1000238d 	.word	0x1000238d
100020e8:	1000238d 	.word	0x1000238d
100020ec:	1000238d 	.word	0x1000238d
100020f0:	1000238d 	.word	0x1000238d
100020f4:	1000238d 	.word	0x1000238d
100020f8:	1000238d 	.word	0x1000238d
100020fc:	1000238d 	.word	0x1000238d
10002100:	1000238d 	.word	0x1000238d
10002104:	1000238d 	.word	0x1000238d
10002108:	1000238d 	.word	0x1000238d
1000210c:	1000238d 	.word	0x1000238d
10002110:	1000238d 	.word	0x1000238d
10002114:	1000238d 	.word	0x1000238d
10002118:	1000238d 	.word	0x1000238d
1000211c:	1000238d 	.word	0x1000238d
10002120:	1000238d 	.word	0x1000238d
10002124:	1000238d 	.word	0x1000238d
10002128:	1000238d 	.word	0x1000238d
1000212c:	1000238d 	.word	0x1000238d
10002130:	1000238d 	.word	0x1000238d
10002134:	1000238d 	.word	0x1000238d
10002138:	1000238d 	.word	0x1000238d
1000213c:	1000238d 	.word	0x1000238d
10002140:	1000238d 	.word	0x1000238d
10002144:	1000238d 	.word	0x1000238d
10002148:	1000238d 	.word	0x1000238d
1000214c:	1000238d 	.word	0x1000238d
10002150:	1000238d 	.word	0x1000238d
10002154:	1000238d 	.word	0x1000238d
10002158:	1000238d 	.word	0x1000238d
1000215c:	1000238d 	.word	0x1000238d
10002160:	1000238d 	.word	0x1000238d
10002164:	1000238d 	.word	0x1000238d
10002168:	1000238d 	.word	0x1000238d
1000216c:	1000238d 	.word	0x1000238d
10002170:	1000238d 	.word	0x1000238d
10002174:	1000238d 	.word	0x1000238d
10002178:	1000238d 	.word	0x1000238d
1000217c:	1000238d 	.word	0x1000238d
10002180:	1000238d 	.word	0x1000238d
10002184:	1000238d 	.word	0x1000238d
10002188:	1000238d 	.word	0x1000238d
1000218c:	1000238d 	.word	0x1000238d
10002190:	1000238d 	.word	0x1000238d
10002194:	1000238d 	.word	0x1000238d
10002198:	1000238d 	.word	0x1000238d
1000219c:	1000238d 	.word	0x1000238d
100021a0:	1000238d 	.word	0x1000238d
100021a4:	1000238d 	.word	0x1000238d
100021a8:	1000238d 	.word	0x1000238d
100021ac:	1000238d 	.word	0x1000238d
100021b0:	1000238d 	.word	0x1000238d
100021b4:	1000238d 	.word	0x1000238d
100021b8:	1000238d 	.word	0x1000238d
100021bc:	1000238d 	.word	0x1000238d
100021c0:	1000238d 	.word	0x1000238d
100021c4:	1000238d 	.word	0x1000238d
100021c8:	1000238d 	.word	0x1000238d
100021cc:	1000238d 	.word	0x1000238d
100021d0:	1000238d 	.word	0x1000238d
100021d4:	1000238d 	.word	0x1000238d
100021d8:	1000238d 	.word	0x1000238d
100021dc:	1000238d 	.word	0x1000238d
100021e0:	1000238d 	.word	0x1000238d
100021e4:	1000238d 	.word	0x1000238d
100021e8:	1000238d 	.word	0x1000238d
100021ec:	1000238d 	.word	0x1000238d
100021f0:	1000238d 	.word	0x1000238d
100021f4:	1000238d 	.word	0x1000238d
100021f8:	1000238d 	.word	0x1000238d
100021fc:	1000238d 	.word	0x1000238d
10002200:	1000238d 	.word	0x1000238d
10002204:	1000238d 	.word	0x1000238d
10002208:	1000238d 	.word	0x1000238d
1000220c:	1000238d 	.word	0x1000238d
10002210:	1000238d 	.word	0x1000238d
10002214:	1000238d 	.word	0x1000238d
10002218:	1000238d 	.word	0x1000238d
1000221c:	1000238d 	.word	0x1000238d
10002220:	1000238d 	.word	0x1000238d
10002224:	1000238d 	.word	0x1000238d
10002228:	1000238d 	.word	0x1000238d
1000222c:	1000238d 	.word	0x1000238d
10002230:	1000238d 	.word	0x1000238d
10002234:	1000238d 	.word	0x1000238d
10002238:	1000238d 	.word	0x1000238d
1000223c:	1000238d 	.word	0x1000238d
10002240:	1000238d 	.word	0x1000238d
10002244:	1000238d 	.word	0x1000238d
10002248:	1000238d 	.word	0x1000238d
1000224c:	1000238d 	.word	0x1000238d
10002250:	1000238d 	.word	0x1000238d
10002254:	1000238d 	.word	0x1000238d
10002258:	1000238d 	.word	0x1000238d
1000225c:	1000238d 	.word	0x1000238d
10002260:	1000238d 	.word	0x1000238d
10002264:	1000238d 	.word	0x1000238d
10002268:	1000238d 	.word	0x1000238d
1000226c:	1000238d 	.word	0x1000238d
10002270:	1000238d 	.word	0x1000238d
10002274:	1000238d 	.word	0x1000238d
10002278:	1000238d 	.word	0x1000238d
1000227c:	1000238d 	.word	0x1000238d
10002280:	1000238d 	.word	0x1000238d
10002284:	1000238d 	.word	0x1000238d
10002288:	1000238d 	.word	0x1000238d

1000228c <deregister_tm_clones>:
1000228c:	4803      	ldr	r0, [pc, #12]	@ (1000229c <deregister_tm_clones+0x10>)
1000228e:	4b04      	ldr	r3, [pc, #16]	@ (100022a0 <deregister_tm_clones+0x14>)
10002290:	4283      	cmp	r3, r0
10002292:	d002      	beq.n	1000229a <deregister_tm_clones+0xe>
10002294:	4b03      	ldr	r3, [pc, #12]	@ (100022a4 <deregister_tm_clones+0x18>)
10002296:	b103      	cbz	r3, 1000229a <deregister_tm_clones+0xe>
10002298:	4718      	bx	r3
1000229a:	4770      	bx	lr
1000229c:	08002830 	.word	0x08002830
100022a0:	08002830 	.word	0x08002830
100022a4:	00000000 	.word	0x00000000

100022a8 <register_tm_clones>:
100022a8:	4805      	ldr	r0, [pc, #20]	@ (100022c0 <register_tm_clones+0x18>)
100022aa:	4b06      	ldr	r3, [pc, #24]	@ (100022c4 <register_tm_clones+0x1c>)
100022ac:	1a1b      	subs	r3, r3, r0
100022ae:	0fd9      	lsrs	r1, r3, #31
100022b0:	eb01 01a3 	add.w	r1, r1, r3, asr #2
100022b4:	1049      	asrs	r1, r1, #1
100022b6:	d002      	beq.n	100022be <register_tm_clones+0x16>
100022b8:	4b03      	ldr	r3, [pc, #12]	@ (100022c8 <register_tm_clones+0x20>)
100022ba:	b103      	cbz	r3, 100022be <register_tm_clones+0x16>
100022bc:	4718      	bx	r3
100022be:	4770      	bx	lr
100022c0:	08002830 	.word	0x08002830
100022c4:	08002830 	.word	0x08002830
100022c8:	00000000 	.word	0x00000000

100022cc <__do_global_dtors_aux>:
100022cc:	b510      	push	{r4, lr}
100022ce:	4c06      	ldr	r4, [pc, #24]	@ (100022e8 <__do_global_dtors_aux+0x1c>)
100022d0:	7823      	ldrb	r3, [r4, #0]
100022d2:	b943      	cbnz	r3, 100022e6 <__do_global_dtors_aux+0x1a>
100022d4:	f7ff ffda 	bl	1000228c <deregister_tm_clones>
100022d8:	4b04      	ldr	r3, [pc, #16]	@ (100022ec <__do_global_dtors_aux+0x20>)
100022da:	b113      	cbz	r3, 100022e2 <__do_global_dtors_aux+0x16>
100022dc:	4804      	ldr	r0, [pc, #16]	@ (100022f0 <__do_global_dtors_aux+0x24>)
100022de:	f3af 8000 	nop.w
100022e2:	2301      	movs	r3, #1
100022e4:	7023      	strb	r3, [r4, #0]
100022e6:	bd10      	pop	{r4, pc}
100022e8:	0800290c 	.word	0x0800290c
100022ec:	00000000 	.word	0x00000000
100022f0:	10016f6c 	.word	0x10016f6c

100022f4 <frame_dummy>:
100022f4:	b508      	push	{r3, lr}
100022f6:	4b05      	ldr	r3, [pc, #20]	@ (1000230c <frame_dummy+0x18>)
100022f8:	b11b      	cbz	r3, 10002302 <frame_dummy+0xe>
100022fa:	4905      	ldr	r1, [pc, #20]	@ (10002310 <frame_dummy+0x1c>)
100022fc:	4805      	ldr	r0, [pc, #20]	@ (10002314 <frame_dummy+0x20>)
100022fe:	f3af 8000 	nop.w
10002302:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
10002306:	f7ff bfcf 	b.w	100022a8 <register_tm_clones>
1000230a:	bf00      	nop
1000230c:	00000000 	.word	0x00000000
10002310:	08002910 	.word	0x08002910
10002314:	10016f6c 	.word	0x10016f6c

10002318 <Cy_OnResetUser>:
    .weak   Cy_OnResetUser
    .func   Cy_OnResetUser, Cy_OnResetUser
    .type   Cy_OnResetUser, %function

Cy_OnResetUser:
    bx lr
10002318:	4770      	bx	lr

1000231a <cy_toolchain_init>:
    .weak   cy_toolchain_init
    .func   cy_toolchain_init, cy_toolchain_init
    .type   cy_toolchain_init, %function

cy_toolchain_init:
    bx lr
1000231a:	4770      	bx	lr

1000231c <Reset_Handler>:
    /* Reset handler */
    .weak    Reset_Handler
    .type    Reset_Handler, %function

Reset_Handler:
    bl Cy_OnResetUser
1000231c:	f7ff fffc 	bl	10002318 <Cy_OnResetUser>
    cpsid i
10002320:	b672      	cpsid	i
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
    ldr    r4, =__copy_table_start__
10002322:	4c14      	ldr	r4, [pc, #80]	@ (10002374 <Reset_Handler+0x58>)
    ldr    r5, =__copy_table_end__
10002324:	4d14      	ldr	r5, [pc, #80]	@ (10002378 <Reset_Handler+0x5c>)

.L_loop0:
    cmp    r4, r5
10002326:	42ac      	cmp	r4, r5
    bge    .L_loop0_done
10002328:	da09      	bge.n	1000233e <Reset_Handler+0x22>
    ldr    r1, [r4]
1000232a:	6821      	ldr	r1, [r4, #0]
    ldr    r2, [r4, #4]
1000232c:	6862      	ldr	r2, [r4, #4]
    ldr    r3, [r4, #8]
1000232e:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
    subs    r3, #4
10002330:	3b04      	subs	r3, #4
    ittt    ge
10002332:	bfa2      	ittt	ge
    ldrge    r0, [r1, r3]
10002334:	58c8      	ldrge	r0, [r1, r3]
    strge    r0, [r2, r3]
10002336:	50d0      	strge	r0, [r2, r3]
    bge    .L_loop0_0
10002338:	e7fa      	bge.n	10002330 <Reset_Handler+0x14>

    adds    r4, #12
1000233a:	340c      	adds	r4, #12
    b    .L_loop0
1000233c:	e7f3      	b.n	10002326 <Reset_Handler+0xa>
 *    __bss_start__: start of the BSS section.
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
    ldr    r1, =__bss_start__
1000233e:	490f      	ldr	r1, [pc, #60]	@ (1000237c <Reset_Handler+0x60>)
    ldr    r2, =__bss_end__
10002340:	4a0f      	ldr	r2, [pc, #60]	@ (10002380 <Reset_Handler+0x64>)

    movs    r0, 0
10002342:	2000      	movs	r0, #0
.L_loop3:
    cmp    r1, r2
10002344:	4291      	cmp	r1, r2
    itt    lt
10002346:	bfbc      	itt	lt
    strlt    r0, [r1], #4
10002348:	f841 0b04 	strlt.w	r0, [r1], #4
    blt    .L_loop3
1000234c:	e7fa      	blt.n	10002344 <Reset_Handler+0x28>
#endif /* __STARTUP_CLEAR_BSS_MULTIPLE || __STARTUP_CLEAR_BSS */

    /* Update Vector Table Offset Register. */
    ldr r0, =__ramVectors
1000234e:	480d      	ldr	r0, [pc, #52]	@ (10002384 <Reset_Handler+0x68>)
    ldr r1, =CY_CPU_VTOR_ADDR
10002350:	490d      	ldr	r1, [pc, #52]	@ (10002388 <Reset_Handler+0x6c>)
    str r0, [r1]
10002352:	6008      	str	r0, [r1, #0]
    dsb 0xF
10002354:	f3bf 8f4f 	dsb	sy

    /* Enable the FPU if used */
    bl Cy_SystemInitFpuEnable
10002358:	f000 f882 	bl	10002460 <Cy_SystemInitFpuEnable>

#ifndef __NO_SYSTEM_INIT
    bl    SystemInit
1000235c:	f000 f862 	bl	10002424 <SystemInit>
#endif

    /* OS-specific low-level initialization */
    bl    cy_toolchain_init
10002360:	f7ff ffdb 	bl	1000231a <cy_toolchain_init>

    /* Call C/C++ static constructors */
    bl    __libc_init_array
10002364:	f007 fc0a 	bl	10009b7c <__libc_init_array>

    /* Execute main application */
    bl    main
10002368:	f000 fb14 	bl	10002994 <main>

    /* Call C/C++ static destructors */
    bl    __libc_fini_array
1000236c:	f007 fc2a 	bl	10009bc4 <__libc_fini_array>

    /* Should never get here */
    b   .
10002370:	e7fe      	b.n	10002370 <Reset_Handler+0x54>
10002372:	0000      	.short	0x0000
    ldr    r4, =__copy_table_start__
10002374:	10016f78 	.word	0x10016f78
    ldr    r5, =__copy_table_end__
10002378:	10016f90 	.word	0x10016f90
    ldr    r1, =__bss_start__
1000237c:	0800290c 	.word	0x0800290c
    ldr    r2, =__bss_end__
10002380:	08002f94 	.word	0x08002f94
    ldr r0, =__ramVectors
10002384:	08002000 	.word	0x08002000
    ldr r1, =CY_CPU_VTOR_ADDR
10002388:	e000ed08 	.word	0xe000ed08

1000238c <DebugMon_Handler>:
    .thumb_func
    .weak    Default_Handler
    .type    Default_Handler, %function

Default_Handler:
    b    .
1000238c:	e7fe      	b.n	1000238c <DebugMon_Handler>

    .weak    Cy_SysLib_FaultHandler
    .type    Cy_SysLib_FaultHandler, %function

Cy_SysLib_FaultHandler:
    b    .
1000238e:	e7fe      	b.n	1000238e <DebugMon_Handler+0x2>

10002390 <BusFault_Handler>:
    .size    Cy_SysLib_FaultHandler, . - Cy_SysLib_FaultHandler
    .type Fault_Handler, %function

Fault_Handler:
    /* Storing LR content for Creator call stack trace */
    push {LR}
10002390:	b500      	push	{lr}
    movs r0, #4
10002392:	2004      	movs	r0, #4
    mov r1, LR
10002394:	4671      	mov	r1, lr
    tst r0, r1
10002396:	4208      	tst	r0, r1
    beq .L_MSP
10002398:	d002      	beq.n	100023a0 <BusFault_Handler+0x10>
    mrs r0, PSP
1000239a:	f3ef 8009 	mrs	r0, PSP
    b .L_API_call
1000239e:	e002      	b.n	100023a6 <BusFault_Handler+0x16>
.L_MSP:
    mrs r0, MSP
100023a0:	f3ef 8008 	mrs	r0, MSP
    /* Compensation of stack pointer address due to pushing 4 bytes of LR */
    adds r0, r0, #4
100023a4:	3004      	adds	r0, #4
.L_API_call:
    bl Cy_SysLib_FaultHandler
100023a6:	f003 fd7f 	bl	10005ea8 <Cy_SysLib_FaultHandler>
    b   .
100023aa:	e7fe      	b.n	100023aa <BusFault_Handler+0x1a>

100023ac <Cy_SysIpcPipeIsrCm4>:
* This is the interrupt service routine for the system pipe.
*
*******************************************************************************/
void Cy_SysIpcPipeIsrCm4(void)
{
    Cy_IPC_Pipe_ExecuteCallback(CY_IPC_EP_CYPIPE_CM4_ADDR);
100023ac:	2001      	movs	r0, #1
100023ae:	f002 bad1 	b.w	10004954 <Cy_IPC_Pipe_ExecuteCallback>

100023b2 <Cy_SystemInit>:
}
100023b2:	4770      	bx	lr

100023b4 <SystemCoreClockUpdate>:
{
100023b4:	b510      	push	{r4, lr}
    uint32 locHf0Clock = Cy_SysClk_ClkHfGetFrequency(0UL);
100023b6:	2000      	movs	r0, #0
100023b8:	f003 fcbe 	bl	10005d38 <Cy_SysClk_ClkHfGetFrequency>
    if (0UL != locHf0Clock)
100023bc:	4604      	mov	r4, r0
100023be:	b310      	cbz	r0, 10002406 <SystemCoreClockUpdate+0x52>
        cy_Hfclk0FreqHz = locHf0Clock;
100023c0:	4b11      	ldr	r3, [pc, #68]	@ (10002408 <SystemCoreClockUpdate+0x54>)
100023c2:	6018      	str	r0, [r3, #0]
        cy_PeriClkFreqHz = locHf0Clock / (1UL + (uint32_t)Cy_SysClk_ClkPeriGetDivider());
100023c4:	f002 ffe4 	bl	10005390 <Cy_SysClk_ClkPeriGetDivider>
100023c8:	4b10      	ldr	r3, [pc, #64]	@ (1000240c <SystemCoreClockUpdate+0x58>)
100023ca:	3001      	adds	r0, #1
100023cc:	fbb4 f0f0 	udiv	r0, r4, r0
100023d0:	6018      	str	r0, [r3, #0]
        SystemCoreClock = locHf0Clock / (1UL + (uint32_t)Cy_SysClk_ClkFastGetDivider());
100023d2:	f002 fff5 	bl	100053c0 <Cy_SysClk_ClkFastGetDivider>
100023d6:	4b0e      	ldr	r3, [pc, #56]	@ (10002410 <SystemCoreClockUpdate+0x5c>)
        cy_delayFreqMhz = (uint8_t)CY_SYSLIB_DIV_ROUNDUP(SystemCoreClock, CY_DELAY_1M_THRESHOLD);
100023d8:	4a0e      	ldr	r2, [pc, #56]	@ (10002414 <SystemCoreClockUpdate+0x60>)
        SystemCoreClock = locHf0Clock / (1UL + (uint32_t)Cy_SysClk_ClkFastGetDivider());
100023da:	3001      	adds	r0, #1
100023dc:	fbb4 f4f0 	udiv	r4, r4, r0
100023e0:	601c      	str	r4, [r3, #0]
        cy_delayFreqMhz = (uint8_t)CY_SYSLIB_DIV_ROUNDUP(SystemCoreClock, CY_DELAY_1M_THRESHOLD);
100023e2:	3c01      	subs	r4, #1
100023e4:	4b0c      	ldr	r3, [pc, #48]	@ (10002418 <SystemCoreClockUpdate+0x64>)
100023e6:	fbb4 f3f3 	udiv	r3, r4, r3
100023ea:	3301      	adds	r3, #1
100023ec:	7013      	strb	r3, [r2, #0]
        cy_delayFreqKhz = CY_SYSLIB_DIV_ROUNDUP(SystemCoreClock, CY_DELAY_1K_THRESHOLD);
100023ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
100023f2:	fbb4 f4f3 	udiv	r4, r4, r3
100023f6:	4b09      	ldr	r3, [pc, #36]	@ (1000241c <SystemCoreClockUpdate+0x68>)
100023f8:	3401      	adds	r4, #1
        cy_AhbFreqHz = Cy_SysClk_ClkHfGetFrequency(0UL);
100023fa:	2000      	movs	r0, #0
        cy_delayFreqKhz = CY_SYSLIB_DIV_ROUNDUP(SystemCoreClock, CY_DELAY_1K_THRESHOLD);
100023fc:	601c      	str	r4, [r3, #0]
        cy_AhbFreqHz = Cy_SysClk_ClkHfGetFrequency(0UL);
100023fe:	f003 fc9b 	bl	10005d38 <Cy_SysClk_ClkHfGetFrequency>
10002402:	4b07      	ldr	r3, [pc, #28]	@ (10002420 <SystemCoreClockUpdate+0x6c>)
10002404:	6018      	str	r0, [r3, #0]
}
10002406:	bd10      	pop	{r4, pc}
10002408:	08002294 	.word	0x08002294
1000240c:	08002298 	.word	0x08002298
10002410:	0800228c 	.word	0x0800228c
10002414:	080022a0 	.word	0x080022a0
10002418:	000f4240 	.word	0x000f4240
1000241c:	0800229c 	.word	0x0800229c
10002420:	08002290 	.word	0x08002290

10002424 <SystemInit>:
{
10002424:	b508      	push	{r3, lr}
    Cy_PDL_Init(CY_DEVICE_CFG);
10002426:	480b      	ldr	r0, [pc, #44]	@ (10002454 <SystemInit+0x30>)
10002428:	f001 ffb6 	bl	10004398 <Cy_PDL_Init>
    Cy_SystemInit();
1000242c:	f7ff ffc1 	bl	100023b2 <Cy_SystemInit>
    SystemCoreClockUpdate();
10002430:	f7ff ffc0 	bl	100023b4 <SystemCoreClockUpdate>
        (void) Cy_IPC_Sema_Init(CY_IPC_CHAN_SEMA, 0ul, NULL);
10002434:	2200      	movs	r2, #0
10002436:	4611      	mov	r1, r2
10002438:	2003      	movs	r0, #3
1000243a:	f002 facd 	bl	100049d8 <Cy_IPC_Sema_Init>
    Cy_IPC_Pipe_Config(systemIpcPipeEpArray);
1000243e:	4806      	ldr	r0, [pc, #24]	@ (10002458 <SystemInit+0x34>)
10002440:	f002 f992 	bl	10004768 <Cy_IPC_Pipe_Config>
    Cy_IPC_Pipe_Init(&systemIpcPipeConfigCm4);
10002444:	4805      	ldr	r0, [pc, #20]	@ (1000245c <SystemInit+0x38>)
10002446:	f002 f9cb 	bl	100047e0 <Cy_IPC_Pipe_Init>
}
1000244a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Cy_Flash_Init();
1000244e:	f002 b87b 	b.w	10004548 <Cy_Flash_Init>
10002452:	bf00      	nop
10002454:	1000c87c 	.word	0x1000c87c
10002458:	08002928 	.word	0x08002928
1000245c:	1000b9c0 	.word	0x1000b9c0

10002460 <Cy_SystemInitFpuEnable>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10002460:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
10002464:	b672      	cpsid	i
        SCB->CPACR |= SCB_CPACR_CP10_CP11_ENABLE;
10002466:	4a07      	ldr	r2, [pc, #28]	@ (10002484 <Cy_SystemInitFpuEnable+0x24>)
10002468:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
1000246c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
10002470:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
10002474:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
10002478:	f3bf 8f6f 	isb	sy
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1000247c:	f381 8810 	msr	PRIMASK, r1
}
10002480:	4770      	bx	lr
10002482:	bf00      	nop
10002484:	e000ed00 	.word	0xe000ed00

10002488 <cycfg_config_init>:
{
    cycfg_config_init();
    cycfg_config_reservations();
}
void cycfg_config_init(void)
{
10002488:	b508      	push	{r3, lr}
    init_cycfg_system();
1000248a:	f000 f8cd 	bl	10002628 <init_cycfg_system>
    init_cycfg_clocks();
1000248e:	f000 f80f 	bl	100024b0 <init_cycfg_clocks>
    init_cycfg_routing();
10002492:	f000 f8bf 	bl	10002614 <init_cycfg_routing>
    init_cycfg_peripherals();
10002496:	f000 f847 	bl	10002528 <init_cycfg_peripherals>
    init_cycfg_pins();
}
1000249a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    init_cycfg_pins();
1000249e:	f000 b849 	b.w	10002534 <init_cycfg_pins>

100024a2 <cycfg_config_reservations>:
void cycfg_config_reservations(void)
{
100024a2:	b508      	push	{r3, lr}
    reserve_cycfg_clocks();
100024a4:	f000 f82e 	bl	10002504 <reserve_cycfg_clocks>
    reserve_cycfg_pins();
}
100024a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    reserve_cycfg_pins();
100024ac:	f000 b85e 	b.w	1000256c <reserve_cycfg_pins>

100024b0 <init_cycfg_clocks>:
    .channel_num = CYBSP_TRACE_CLK_DIV_NUM,
};
#endif /* defined (CY_USING_HAL) */

void init_cycfg_clocks(void)
{
100024b0:	b508      	push	{r3, lr}
    Cy_SysClk_PeriphDisableDivider(CY_SYSCLK_DIV_16_BIT, 15U);
100024b2:	210f      	movs	r1, #15
100024b4:	2001      	movs	r0, #1
100024b6:	f002 fecf 	bl	10005258 <Cy_SysClk_PeriphDisableDivider>
    Cy_SysClk_PeriphSetDivider(CY_SYSCLK_DIV_16_BIT, 15U, 0U);
100024ba:	2200      	movs	r2, #0
100024bc:	210f      	movs	r1, #15
100024be:	2001      	movs	r0, #1
100024c0:	f002 fdec 	bl	1000509c <Cy_SysClk_PeriphSetDivider>
    Cy_SysClk_PeriphEnableDivider(CY_SYSCLK_DIV_16_BIT, 15U);
100024c4:	210f      	movs	r1, #15
100024c6:	2001      	movs	r0, #1
100024c8:	f002 fe90 	bl	100051ec <Cy_SysClk_PeriphEnableDivider>
    Cy_SysClk_PeriphDisableDivider(CY_SYSCLK_DIV_8_BIT, 3U);
100024cc:	2103      	movs	r1, #3
100024ce:	2000      	movs	r0, #0
100024d0:	f002 fec2 	bl	10005258 <Cy_SysClk_PeriphDisableDivider>
    Cy_SysClk_PeriphSetDivider(CY_SYSCLK_DIV_8_BIT, 3U, 255U);
100024d4:	22ff      	movs	r2, #255	@ 0xff
100024d6:	2103      	movs	r1, #3
100024d8:	2000      	movs	r0, #0
100024da:	f002 fddf 	bl	1000509c <Cy_SysClk_PeriphSetDivider>
    Cy_SysClk_PeriphEnableDivider(CY_SYSCLK_DIV_8_BIT, 3U);
100024de:	2103      	movs	r1, #3
100024e0:	2000      	movs	r0, #0
100024e2:	f002 fe83 	bl	100051ec <Cy_SysClk_PeriphEnableDivider>
    Cy_SysClk_PeriphDisableDivider(CY_SYSCLK_DIV_8_BIT, 7U);
100024e6:	2107      	movs	r1, #7
100024e8:	2000      	movs	r0, #0
100024ea:	f002 feb5 	bl	10005258 <Cy_SysClk_PeriphDisableDivider>
    Cy_SysClk_PeriphSetDivider(CY_SYSCLK_DIV_8_BIT, 7U, 0U);
100024ee:	2200      	movs	r2, #0
100024f0:	2107      	movs	r1, #7
100024f2:	4610      	mov	r0, r2
100024f4:	f002 fdd2 	bl	1000509c <Cy_SysClk_PeriphSetDivider>
    Cy_SysClk_PeriphEnableDivider(CY_SYSCLK_DIV_8_BIT, 7U);
}
100024f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Cy_SysClk_PeriphEnableDivider(CY_SYSCLK_DIV_8_BIT, 7U);
100024fc:	2107      	movs	r1, #7
100024fe:	2000      	movs	r0, #0
10002500:	f002 be74 	b.w	100051ec <Cy_SysClk_PeriphEnableDivider>

10002504 <reserve_cycfg_clocks>:
void reserve_cycfg_clocks(void)
{
10002504:	b508      	push	{r3, lr}
#if defined (CY_USING_HAL)
    cyhal_hwmgr_reserve(&peri_0_div_16_15_obj);
10002506:	4805      	ldr	r0, [pc, #20]	@ (1000251c <reserve_cycfg_clocks+0x18>)
10002508:	f000 fd54 	bl	10002fb4 <cyhal_hwmgr_reserve>
    cyhal_hwmgr_reserve(&CYBSP_CSD_CLK_DIV_obj);
1000250c:	4804      	ldr	r0, [pc, #16]	@ (10002520 <reserve_cycfg_clocks+0x1c>)
1000250e:	f000 fd51 	bl	10002fb4 <cyhal_hwmgr_reserve>
    cyhal_hwmgr_reserve(&CYBSP_TRACE_CLK_DIV_obj);
#endif /* defined (CY_USING_HAL) */
}
10002512:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    cyhal_hwmgr_reserve(&CYBSP_TRACE_CLK_DIV_obj);
10002516:	4803      	ldr	r0, [pc, #12]	@ (10002524 <reserve_cycfg_clocks+0x20>)
10002518:	f000 bd4c 	b.w	10002fb4 <cyhal_hwmgr_reserve>
1000251c:	1000b9fa 	.word	0x1000b9fa
10002520:	1000b9f4 	.word	0x1000b9f4
10002524:	1000b9f7 	.word	0x1000b9f7

10002528 <init_cycfg_peripherals>:
    .lockKey = CY_CSD_NONE_KEY,
};

void init_cycfg_peripherals(void)
{
    Cy_SysClk_PeriphAssignDivider(PCLK_CSD_CLOCK, CY_SYSCLK_DIV_8_BIT, 3U);
10002528:	2203      	movs	r2, #3
1000252a:	2100      	movs	r1, #0
1000252c:	2033      	movs	r0, #51	@ 0x33
1000252e:	f002 be31 	b.w	10005194 <Cy_SysClk_PeriphAssignDivider>
	...

10002534 <init_cycfg_pins>:
    .channel_num = CYBSP_CSD_SLD4_PIN,
};
#endif /* defined (CY_USING_HAL) || (CY_USING_HAL_LITE) */

void init_cycfg_pins(void)
{
10002534:	b510      	push	{r4, lr}
    Cy_GPIO_Pin_Init(CYBSP_SWO_PORT, CYBSP_SWO_PIN, &CYBSP_SWO_config);
10002536:	4c09      	ldr	r4, [pc, #36]	@ (1000255c <init_cycfg_pins+0x28>)
10002538:	4a09      	ldr	r2, [pc, #36]	@ (10002560 <init_cycfg_pins+0x2c>)
1000253a:	2104      	movs	r1, #4
1000253c:	4620      	mov	r0, r4
1000253e:	f002 f831 	bl	100045a4 <Cy_GPIO_Pin_Init>
    Cy_GPIO_Pin_Init(CYBSP_SWDIO_PORT, CYBSP_SWDIO_PIN, &CYBSP_SWDIO_config);
10002542:	4a08      	ldr	r2, [pc, #32]	@ (10002564 <init_cycfg_pins+0x30>)
10002544:	2106      	movs	r1, #6
10002546:	4620      	mov	r0, r4
10002548:	f002 f82c 	bl	100045a4 <Cy_GPIO_Pin_Init>
    Cy_GPIO_Pin_Init(CYBSP_SWDCK_PORT, CYBSP_SWDCK_PIN, &CYBSP_SWDCK_config);
1000254c:	4620      	mov	r0, r4
1000254e:	4a06      	ldr	r2, [pc, #24]	@ (10002568 <init_cycfg_pins+0x34>)
}
10002550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Cy_GPIO_Pin_Init(CYBSP_SWDCK_PORT, CYBSP_SWDCK_PIN, &CYBSP_SWDCK_config);
10002554:	2107      	movs	r1, #7
10002556:	f002 b825 	b.w	100045a4 <Cy_GPIO_Pin_Init>
1000255a:	bf00      	nop
1000255c:	40320300 	.word	0x40320300
10002560:	1000ba90 	.word	0x1000ba90
10002564:	1000ba58 	.word	0x1000ba58
10002568:	1000ba20 	.word	0x1000ba20

1000256c <reserve_cycfg_pins>:
void reserve_cycfg_pins(void)
{
1000256c:	b508      	push	{r3, lr}
#if defined (CY_USING_HAL)
    cyhal_hwmgr_reserve(&CYBSP_WCO_IN_obj);
1000256e:	4819      	ldr	r0, [pc, #100]	@ (100025d4 <reserve_cycfg_pins+0x68>)
10002570:	f000 fd20 	bl	10002fb4 <cyhal_hwmgr_reserve>
    cyhal_hwmgr_reserve(&CYBSP_WCO_OUT_obj);
10002574:	4818      	ldr	r0, [pc, #96]	@ (100025d8 <reserve_cycfg_pins+0x6c>)
10002576:	f000 fd1d 	bl	10002fb4 <cyhal_hwmgr_reserve>
    cyhal_hwmgr_reserve(&CYBSP_CSD_TX_obj);
1000257a:	4818      	ldr	r0, [pc, #96]	@ (100025dc <reserve_cycfg_pins+0x70>)
1000257c:	f000 fd1a 	bl	10002fb4 <cyhal_hwmgr_reserve>
    cyhal_hwmgr_reserve(&CYBSP_SWO_obj);
10002580:	4817      	ldr	r0, [pc, #92]	@ (100025e0 <reserve_cycfg_pins+0x74>)
10002582:	f000 fd17 	bl	10002fb4 <cyhal_hwmgr_reserve>
    cyhal_hwmgr_reserve(&CYBSP_SWDIO_obj);
10002586:	4817      	ldr	r0, [pc, #92]	@ (100025e4 <reserve_cycfg_pins+0x78>)
10002588:	f000 fd14 	bl	10002fb4 <cyhal_hwmgr_reserve>
    cyhal_hwmgr_reserve(&CYBSP_SWDCK_obj);
1000258c:	4816      	ldr	r0, [pc, #88]	@ (100025e8 <reserve_cycfg_pins+0x7c>)
1000258e:	f000 fd11 	bl	10002fb4 <cyhal_hwmgr_reserve>
    cyhal_hwmgr_reserve(&CYBSP_CINA_obj);
10002592:	4816      	ldr	r0, [pc, #88]	@ (100025ec <reserve_cycfg_pins+0x80>)
10002594:	f000 fd0e 	bl	10002fb4 <cyhal_hwmgr_reserve>
    cyhal_hwmgr_reserve(&CYBSP_CINB_obj);
10002598:	4815      	ldr	r0, [pc, #84]	@ (100025f0 <reserve_cycfg_pins+0x84>)
1000259a:	f000 fd0b 	bl	10002fb4 <cyhal_hwmgr_reserve>
    cyhal_hwmgr_reserve(&CYBSP_CMOD_obj);
1000259e:	4815      	ldr	r0, [pc, #84]	@ (100025f4 <reserve_cycfg_pins+0x88>)
100025a0:	f000 fd08 	bl	10002fb4 <cyhal_hwmgr_reserve>
    cyhal_hwmgr_reserve(&CYBSP_CSD_BTN0_obj);
100025a4:	4814      	ldr	r0, [pc, #80]	@ (100025f8 <reserve_cycfg_pins+0x8c>)
100025a6:	f000 fd05 	bl	10002fb4 <cyhal_hwmgr_reserve>
    cyhal_hwmgr_reserve(&CYBSP_CSD_BTN1_obj);
100025aa:	4814      	ldr	r0, [pc, #80]	@ (100025fc <reserve_cycfg_pins+0x90>)
100025ac:	f000 fd02 	bl	10002fb4 <cyhal_hwmgr_reserve>
    cyhal_hwmgr_reserve(&CYBSP_CSD_SLD0_obj);
100025b0:	4813      	ldr	r0, [pc, #76]	@ (10002600 <reserve_cycfg_pins+0x94>)
100025b2:	f000 fcff 	bl	10002fb4 <cyhal_hwmgr_reserve>
    cyhal_hwmgr_reserve(&CYBSP_CSD_SLD1_obj);
100025b6:	4813      	ldr	r0, [pc, #76]	@ (10002604 <reserve_cycfg_pins+0x98>)
100025b8:	f000 fcfc 	bl	10002fb4 <cyhal_hwmgr_reserve>
    cyhal_hwmgr_reserve(&CYBSP_CSD_SLD2_obj);
100025bc:	4812      	ldr	r0, [pc, #72]	@ (10002608 <reserve_cycfg_pins+0x9c>)
100025be:	f000 fcf9 	bl	10002fb4 <cyhal_hwmgr_reserve>
    cyhal_hwmgr_reserve(&CYBSP_CSD_SLD3_obj);
100025c2:	4812      	ldr	r0, [pc, #72]	@ (1000260c <reserve_cycfg_pins+0xa0>)
100025c4:	f000 fcf6 	bl	10002fb4 <cyhal_hwmgr_reserve>
    cyhal_hwmgr_reserve(&CYBSP_CSD_SLD4_obj);
#endif /* defined (CY_USING_HAL) */
}
100025c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    cyhal_hwmgr_reserve(&CYBSP_CSD_SLD4_obj);
100025cc:	4810      	ldr	r0, [pc, #64]	@ (10002610 <reserve_cycfg_pins+0xa4>)
100025ce:	f000 bcf1 	b.w	10002fb4 <cyhal_hwmgr_reserve>
100025d2:	bf00      	nop
100025d4:	1000bac7 	.word	0x1000bac7
100025d8:	1000baca 	.word	0x1000baca
100025dc:	1000ba1b 	.word	0x1000ba1b
100025e0:	1000bac4 	.word	0x1000bac4
100025e4:	1000ba8c 	.word	0x1000ba8c
100025e8:	1000ba54 	.word	0x1000ba54
100025ec:	1000b9fd 	.word	0x1000b9fd
100025f0:	1000ba00 	.word	0x1000ba00
100025f4:	1000ba03 	.word	0x1000ba03
100025f8:	1000ba06 	.word	0x1000ba06
100025fc:	1000ba09 	.word	0x1000ba09
10002600:	1000ba0c 	.word	0x1000ba0c
10002604:	1000ba0f 	.word	0x1000ba0f
10002608:	1000ba12 	.word	0x1000ba12
1000260c:	1000ba15 	.word	0x1000ba15
10002610:	1000ba18 	.word	0x1000ba18

10002614 <init_cycfg_routing>:
#include "stdbool.h"
#include "cy_device_headers.h"

void init_cycfg_routing(void)
{
    HSIOM->AMUX_SPLIT_CTL[2] = HSIOM_AMUX_SPLIT_CTL_SWITCH_AA_SL_Msk |
10002614:	4b02      	ldr	r3, [pc, #8]	@ (10002620 <init_cycfg_routing+0xc>)
10002616:	2233      	movs	r2, #51	@ 0x33
10002618:	609a      	str	r2, [r3, #8]
        HSIOM_AMUX_SPLIT_CTL_SWITCH_AA_SR_Msk |
        HSIOM_AMUX_SPLIT_CTL_SWITCH_BB_SL_Msk |
        HSIOM_AMUX_SPLIT_CTL_SWITCH_BB_SR_Msk;
    HSIOM->AMUX_SPLIT_CTL[4] = HSIOM_AMUX_SPLIT_CTL_SWITCH_AA_SL_Msk |
1000261a:	611a      	str	r2, [r3, #16]
        HSIOM_AMUX_SPLIT_CTL_SWITCH_AA_SR_Msk |
        HSIOM_AMUX_SPLIT_CTL_SWITCH_BB_SL_Msk |
        HSIOM_AMUX_SPLIT_CTL_SWITCH_BB_SR_Msk;
}
1000261c:	4770      	bx	lr
1000261e:	bf00      	nop
10002620:	40312000 	.word	0x40312000

10002624 <cycfg_ClockStartupError>:
#endif /* (!defined(CY_DEVICE_SECURE)) */

__WEAK void __NO_RETURN cycfg_ClockStartupError(uint32_t error)
{
    (void)error; /* Suppress the compiler warning */
    while(1);
10002624:	e7fe      	b.n	10002624 <cycfg_ClockStartupError>
	...

10002628 <init_cycfg_system>:
    #endif /* CY_CFG_PWR_USING_PMIC */
}
#endif /* (!defined(CY_DEVICE_SECURE)) */

void init_cycfg_system(void)
{
10002628:	b530      	push	{r4, r5, lr}
    Cy_SysClk_PeriphAssignDivider(PCLK_CPUSS_CLOCK_TRACE_IN, CY_SYSCLK_DIV_8_BIT, 7U);
1000262a:	2207      	movs	r2, #7
{
1000262c:	b085      	sub	sp, #20
    Cy_SysClk_PeriphAssignDivider(PCLK_CPUSS_CLOCK_TRACE_IN, CY_SYSCLK_DIV_8_BIT, 7U);
1000262e:	2100      	movs	r1, #0
10002630:	2036      	movs	r0, #54	@ 0x36
10002632:	f002 fdaf 	bl	10005194 <Cy_SysClk_PeriphAssignDivider>
            Cy_SysClk_ExtClkSetFrequency(CY_CFG_SYSCLK_EXTCLK_FREQ);
        #endif /* CY_CFG_SYSCLK_EXTCLK_FREQ */
    #else /* defined(CY_DEVICE_SECURE) */
    
    /* Set worst case memory wait states (! ultra low power, 180 MHz), will update at the end */
    Cy_SysLib_SetWaitStates(false, 180UL);
10002636:	21b4      	movs	r1, #180	@ 0xb4
10002638:	2000      	movs	r0, #0
1000263a:	f003 fc81 	bl	10005f40 <Cy_SysLib_SetWaitStates>
             if (0u == Cy_SysLib_GetResetReason() /* POR, XRES, or BOD */)
1000263e:	f003 fc19 	bl	10005e74 <Cy_SysLib_GetResetReason>
10002642:	b9d0      	cbnz	r0, 1000267a <init_cycfg_system+0x52>
__STATIC_INLINE uint32_t Cy_SysLib_GetWcoTrim (void)
{
#if defined (CY_IP_MXS40SRSS) && (CY_IP_MXS40SRSS_VERSION >= 2)
    return 0;
#else
    return (BACKUP_TRIM & BACKUP_TRIM_TRIM_Msk);
10002644:	4d74      	ldr	r5, [pc, #464]	@ (10002818 <init_cycfg_system+0x1f0>)
10002646:	f8d5 4f00 	ldr.w	r4, [r5, #3840]	@ 0xf00
1000264a:	f004 043f 	and.w	r4, r4, #63	@ 0x3f
                 if (CY_SYSLIB_SUCCESS != Cy_SysLib_ResetBackupDomain())
1000264e:	f003 fc03 	bl	10005e58 <Cy_SysLib_ResetBackupDomain>
10002652:	b148      	cbz	r0, 10002668 <init_cycfg_system+0x40>
                     Cy_SysLib_DelayUs(1U);
10002654:	2001      	movs	r0, #1
10002656:	f003 fbf7 	bl	10005e48 <Cy_SysLib_DelayUs>
    return ((0UL == (BACKUP_RESET & BACKUP_RESET_RESET_Msk)) ? CY_SYSLIB_SUCCESS : CY_SYSLIB_INVALID_STATE);
1000265a:	4b70      	ldr	r3, [pc, #448]	@ (1000281c <init_cycfg_system+0x1f4>)
1000265c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1000265e:	2b00      	cmp	r3, #0
10002660:	da02      	bge.n	10002668 <init_cycfg_system+0x40>
                         cycfg_ClockStartupError(CY_CFG_PWR_BKP_ERROR);
10002662:	2006      	movs	r0, #6
        cycfg_ClockStartupError(CY_CFG_SYSCLK_WCO_ERROR);
10002664:	f7ff ffde 	bl	10002624 <cycfg_ClockStartupError>
*******************************************************************************/
__STATIC_INLINE void Cy_SysLib_SetWcoTrim (uint32_t wcoTrim)
{
    CY_UNUSED_PARAMETER(wcoTrim);
#if  defined (CY_IP_MXS40SSRSS) || defined (CY_IP_MXS28SRSS) || (defined (CY_IP_MXS40SRSS) && (CY_IP_MXS40SRSS_VERSION < 2))
    BACKUP_TRIM = wcoTrim & BACKUP_TRIM_TRIM_Msk;
10002668:	f8c5 4f00 	str.w	r4, [r5, #3840]	@ 0xf00
                Cy_SysClk_IloDisable();
1000266c:	f002 ff76 	bl	1000555c <Cy_SysClk_IloDisable>
    Cy_SysClk_IloEnable();
10002670:	f002 ff6a 	bl	10005548 <Cy_SysClk_IloEnable>
    Cy_SysClk_IloHibernateOn(true);
10002674:	2001      	movs	r0, #1
10002676:	f002 ff83 	bl	10005580 <Cy_SysClk_IloHibernateOn>
                Cy_SysPm_LdoSetVoltage(CY_SYSPM_LDO_VOLTAGE_LP);
1000267a:	2001      	movs	r0, #1
1000267c:	f003 ff08 	bl	10006490 <Cy_SysPm_LdoSetVoltage>
            Cy_SysPm_SystemSetNormalRegulatorCurrent();
10002680:	f003 feb4 	bl	100063ec <Cy_SysPm_SystemSetNormalRegulatorCurrent>
    Cy_SysPm_UnlockPmic();
10002684:	f003 ff7c 	bl	10006580 <Cy_SysPm_PmicUnlock>
        Cy_SysPm_PmicDisableOutput();
10002688:	f003 ff68 	bl	1000655c <Cy_SysPm_PmicDisableOutput>
    Cy_SysClk_FllDisable();
1000268c:	f003 f80e 	bl	100056ac <Cy_SysClk_FllDisable>
    #ifdef CY_CFG_SYSCLK_FLL_ENABLED
        Cy_SysClk_FllDeInit();
    #endif
    
        /* Reset the core clock path to default and disable all the FLLs/PLLs */
        Cy_SysClk_ClkHfSetDivider(0U, CY_SYSCLK_CLKHF_NO_DIVIDE);
10002690:	2100      	movs	r1, #0
10002692:	4608      	mov	r0, r1
10002694:	f002 ff0c 	bl	100054b0 <Cy_SysClk_ClkHfSetDivider>
        Cy_SysClk_ClkFastSetDivider(0U);
10002698:	2000      	movs	r0, #0
1000269a:	f002 fe83 	bl	100053a4 <Cy_SysClk_ClkFastSetDivider>
        Cy_SysClk_ClkPeriSetDivider(1U);
1000269e:	2001      	movs	r0, #1
100026a0:	f002 fe68 	bl	10005374 <Cy_SysClk_ClkPeriSetDivider>
        Cy_SysClk_ClkSlowSetDivider(0U);
100026a4:	2000      	movs	r0, #0
100026a6:	f002 fdff 	bl	100052a8 <Cy_SysClk_ClkSlowSetDivider>
        for (uint32_t pll = CY_SRSS_NUM_PLL; pll > 0UL; --pll) /* PLL 1 is the first PLL. 0 is invalid. */
100026aa:	4b5d      	ldr	r3, [pc, #372]	@ (10002820 <init_cycfg_system+0x1f8>)
100026ac:	681b      	ldr	r3, [r3, #0]
100026ae:	f893 4043 	ldrb.w	r4, [r3, #67]	@ 0x43
100026b2:	bb74      	cbnz	r4, 10002712 <init_cycfg_system+0xea>
        {
            (void)Cy_SysClk_PllDisable(pll);
        }
        Cy_SysClk_ClkPathSetSource(CY_SYSCLK_CLKHF_IN_CLKPATH1, CY_SYSCLK_CLKPATH_IN_IMO);
100026b4:	4621      	mov	r1, r4
100026b6:	2001      	movs	r0, #1
100026b8:	f002 ff8a 	bl	100055d0 <Cy_SysClk_ClkPathSetSource>
    
        if ((CY_SYSCLK_CLKHF_IN_CLKPATH0 == Cy_SysClk_ClkHfGetSource(0UL)) &&
100026bc:	4620      	mov	r0, r4
100026be:	f002 feed 	bl	1000549c <Cy_SysClk_ClkHfGetSource>
100026c2:	b948      	cbnz	r0, 100026d8 <init_cycfg_system+0xb0>
            (CY_SYSCLK_CLKPATH_IN_WCO == Cy_SysClk_ClkPathGetSource(CY_SYSCLK_CLKHF_IN_CLKPATH0)))
100026c4:	f002 ffac 	bl	10005620 <Cy_SysClk_ClkPathGetSource>
        if ((CY_SYSCLK_CLKHF_IN_CLKPATH0 == Cy_SysClk_ClkHfGetSource(0UL)) &&
100026c8:	f240 1311 	movw	r3, #273	@ 0x111
100026cc:	4298      	cmp	r0, r3
100026ce:	d103      	bne.n	100026d8 <init_cycfg_system+0xb0>
        {
            Cy_SysClk_ClkHfSetSource(0U, CY_SYSCLK_CLKHF_IN_CLKPATH1);
100026d0:	2101      	movs	r1, #1
100026d2:	4620      	mov	r0, r4
100026d4:	f002 fec6 	bl	10005464 <Cy_SysClk_ClkHfSetSource>
        }
    
        Cy_SysClk_ClkPathSetSource(CY_SYSCLK_CLKHF_IN_CLKPATH0, CY_SYSCLK_CLKPATH_IN_IMO);
100026d8:	2100      	movs	r1, #0
100026da:	4608      	mov	r0, r1
100026dc:	f002 ff78 	bl	100055d0 <Cy_SysClk_ClkPathSetSource>
        Cy_SysClk_ClkHfSetSource(0UL, CY_SYSCLK_CLKHF_IN_CLKPATH0);
100026e0:	2100      	movs	r1, #0
100026e2:	4608      	mov	r0, r1
100026e4:	f002 febe 	bl	10005464 <Cy_SysClk_ClkHfSetSource>
    (void)Cy_GPIO_Pin_FastInit(GPIO_PRT0, 0U, 0x00U, 0x00U, HSIOM_SEL_GPIO);
100026e8:	2300      	movs	r3, #0
100026ea:	461a      	mov	r2, r3
100026ec:	4619      	mov	r1, r3
100026ee:	484d      	ldr	r0, [pc, #308]	@ (10002824 <init_cycfg_system+0x1fc>)
100026f0:	9300      	str	r3, [sp, #0]
100026f2:	f001 ffe7 	bl	100046c4 <Cy_GPIO_Pin_FastInit>
    (void)Cy_GPIO_Pin_FastInit(GPIO_PRT0, 1U, 0x00U, 0x00U, HSIOM_SEL_GPIO);
100026f6:	2300      	movs	r3, #0
100026f8:	484a      	ldr	r0, [pc, #296]	@ (10002824 <init_cycfg_system+0x1fc>)
100026fa:	9300      	str	r3, [sp, #0]
100026fc:	461a      	mov	r2, r3
100026fe:	2101      	movs	r1, #1
10002700:	f001 ffe0 	bl	100046c4 <Cy_GPIO_Pin_FastInit>
    if (CY_SYSCLK_SUCCESS != Cy_SysClk_WcoEnable(1000000UL))
10002704:	4848      	ldr	r0, [pc, #288]	@ (10002828 <init_cycfg_system+0x200>)
10002706:	f002 ff03 	bl	10005510 <Cy_SysClk_WcoEnable>
1000270a:	4604      	mov	r4, r0
1000270c:	b130      	cbz	r0, 1000271c <init_cycfg_system+0xf4>
        cycfg_ClockStartupError(CY_CFG_SYSCLK_WCO_ERROR);
1000270e:	2005      	movs	r0, #5
10002710:	e7a8      	b.n	10002664 <init_cycfg_system+0x3c>
            (void)Cy_SysClk_PllDisable(pll);
10002712:	4620      	mov	r0, r4
10002714:	f003 f8b0 	bl	10005878 <Cy_SysClk_PllDisable>
        for (uint32_t pll = CY_SRSS_NUM_PLL; pll > 0UL; --pll) /* PLL 1 is the first PLL. 0 is invalid. */
10002718:	3c01      	subs	r4, #1
1000271a:	e7ca      	b.n	100026b2 <init_cycfg_system+0x8a>
    Cy_SysClk_ClkLfSetSource(CY_SYSCLK_CLKLF_IN_WCO);
1000271c:	2001      	movs	r0, #1
1000271e:	f002 fe1b 	bl	10005358 <Cy_SysClk_ClkLfSetSource>
    Cy_SysClk_ClkFastSetDivider(0U);
10002722:	4620      	mov	r0, r4
10002724:	f002 fe3e 	bl	100053a4 <Cy_SysClk_ClkFastSetDivider>
    Cy_SysClk_ClkPeriSetDivider(0U);
10002728:	4620      	mov	r0, r4
1000272a:	f002 fe23 	bl	10005374 <Cy_SysClk_ClkPeriSetDivider>
    Cy_SysClk_ClkSlowSetDivider(0U);
1000272e:	4620      	mov	r0, r4
10002730:	f002 fdba 	bl	100052a8 <Cy_SysClk_ClkSlowSetDivider>
    Cy_SysClk_ClkPathSetSource(1U, CY_CFG_SYSCLK_CLKPATH1_SOURCE);
10002734:	4621      	mov	r1, r4
10002736:	2001      	movs	r0, #1
10002738:	f002 ff4a 	bl	100055d0 <Cy_SysClk_ClkPathSetSource>
    Cy_SysClk_ClkPathSetSource(0U, CY_CFG_SYSCLK_CLKPATH0_SOURCE);
1000273c:	4621      	mov	r1, r4
1000273e:	4620      	mov	r0, r4
10002740:	f002 ff46 	bl	100055d0 <Cy_SysClk_ClkPathSetSource>
    Cy_SysClk_ClkPathSetSource(2U, CY_CFG_SYSCLK_CLKPATH2_SOURCE);
10002744:	4621      	mov	r1, r4
10002746:	2002      	movs	r0, #2
10002748:	f002 ff42 	bl	100055d0 <Cy_SysClk_ClkPathSetSource>
    Cy_SysClk_ClkPathSetSource(3U, CY_CFG_SYSCLK_CLKPATH3_SOURCE);
1000274c:	4621      	mov	r1, r4
1000274e:	2003      	movs	r0, #3
10002750:	f002 ff3e 	bl	100055d0 <Cy_SysClk_ClkPathSetSource>
    Cy_SysClk_ClkPathSetSource(4U, CY_CFG_SYSCLK_CLKPATH4_SOURCE);
10002754:	4621      	mov	r1, r4
10002756:	2004      	movs	r0, #4
10002758:	f002 ff3a 	bl	100055d0 <Cy_SysClk_ClkPathSetSource>
    if (CY_SYSCLK_SUCCESS != Cy_SysClk_FllManualConfigure(&srss_0_clock_0_fll_0_fllConfig))
1000275c:	4833      	ldr	r0, [pc, #204]	@ (1000282c <init_cycfg_system+0x204>)
1000275e:	f002 ffbf 	bl	100056e0 <Cy_SysClk_FllManualConfigure>
10002762:	b108      	cbz	r0, 10002768 <init_cycfg_system+0x140>
        cycfg_ClockStartupError(CY_CFG_SYSCLK_FLL_ERROR);
10002764:	2004      	movs	r0, #4
10002766:	e77d      	b.n	10002664 <init_cycfg_system+0x3c>
    if (CY_SYSCLK_SUCCESS != Cy_SysClk_FllEnable(200000UL))
10002768:	4831      	ldr	r0, [pc, #196]	@ (10002830 <init_cycfg_system+0x208>)
1000276a:	f003 f831 	bl	100057d0 <Cy_SysClk_FllEnable>
1000276e:	4601      	mov	r1, r0
10002770:	2800      	cmp	r0, #0
10002772:	d1f7      	bne.n	10002764 <init_cycfg_system+0x13c>
    Cy_SysClk_ClkHfSetSource(0U, CY_CFG_SYSCLK_CLKHF0_CLKPATH);
10002774:	9003      	str	r0, [sp, #12]
10002776:	f002 fe75 	bl	10005464 <Cy_SysClk_ClkHfSetSource>
    Cy_SysClk_ClkHfSetDivider(0U, CY_SYSCLK_CLKHF_NO_DIVIDE);
1000277a:	9903      	ldr	r1, [sp, #12]
1000277c:	4608      	mov	r0, r1
1000277e:	f002 fe97 	bl	100054b0 <Cy_SysClk_ClkHfSetDivider>
    if (CY_SYSCLK_SUCCESS != Cy_SysClk_PllManualConfigure(1U, &srss_0_clock_0_pll_0_pllConfig))
10002782:	492c      	ldr	r1, [pc, #176]	@ (10002834 <init_cycfg_system+0x20c>)
10002784:	2001      	movs	r0, #1
10002786:	f003 f89d 	bl	100058c4 <Cy_SysClk_PllManualConfigure>
1000278a:	b108      	cbz	r0, 10002790 <init_cycfg_system+0x168>
        cycfg_ClockStartupError(CY_CFG_SYSCLK_PLL_ERROR);
1000278c:	2003      	movs	r0, #3
1000278e:	e769      	b.n	10002664 <init_cycfg_system+0x3c>
    if (CY_SYSCLK_SUCCESS != Cy_SysClk_PllEnable(1U, 10000u))
10002790:	f242 7110 	movw	r1, #10000	@ 0x2710
10002794:	2001      	movs	r0, #1
10002796:	f003 f907 	bl	100059a8 <Cy_SysClk_PllEnable>
1000279a:	4604      	mov	r4, r0
1000279c:	2800      	cmp	r0, #0
1000279e:	d1f5      	bne.n	1000278c <init_cycfg_system+0x164>
    Cy_SysClk_ClkTimerDisable();
100027a0:	f002 fdd0 	bl	10005344 <Cy_SysClk_ClkTimerDisable>
    Cy_SysClk_ClkTimerSetSource(CY_SYSCLK_CLKTIMER_IN_IMO);
100027a4:	4620      	mov	r0, r4
100027a6:	f002 fda5 	bl	100052f4 <Cy_SysClk_ClkTimerSetSource>
    Cy_SysClk_ClkTimerSetDivider(0U);
100027aa:	4620      	mov	r0, r4
100027ac:	f002 fdb4 	bl	10005318 <Cy_SysClk_ClkTimerSetDivider>
    Cy_SysClk_ClkTimerEnable();
100027b0:	f002 fdbe 	bl	10005330 <Cy_SysClk_ClkTimerEnable>
    Cy_SysTick_Init(CY_CFG_SYSCLK_CLKALTSYSTICK_SOURCE, CY_CFG_SYSCLK_CLKALTSYSTICK_TICKS);
100027b4:	4621      	mov	r1, r4
100027b6:	4620      	mov	r0, r4
100027b8:	f003 ff2a 	bl	10006610 <Cy_SysTick_Init>
    Cy_SysClk_ClkBakSetSource(CY_SYSCLK_BAK_IN_WCO);
100027bc:	4620      	mov	r0, r4
100027be:	f002 fd8d 	bl	100052dc <Cy_SysClk_ClkBakSetSource>
    Cy_SysClk_IloEnable();
100027c2:	f002 fec1 	bl	10005548 <Cy_SysClk_IloEnable>
    Cy_SysClk_IloHibernateOn(true);
100027c6:	2001      	movs	r0, #1
100027c8:	f002 feda 	bl	10005580 <Cy_SysClk_IloHibernateOn>
    #endif
    
    #if (!defined(CY_DEVICE_SECURE))
        /* Set accurate flash wait states */
        #if (defined (CY_CFG_PWR_ENABLED) && defined (CY_CFG_SYSCLK_CLKHF0_ENABLED))
            Cy_SysLib_SetWaitStates(CY_CFG_PWR_USING_ULP != 0, CY_CFG_SYSCLK_CLKHF0_FREQ_MHZ);
100027cc:	2164      	movs	r1, #100	@ 0x64
100027ce:	4620      	mov	r0, r4
100027d0:	f003 fbb6 	bl	10005f40 <Cy_SysLib_SetWaitStates>
        #endif
    
        /* Update System Core Clock values for correct Cy_SysLib_Delay functioning */
        SystemCoreClockUpdate();
100027d4:	f7ff fdee 	bl	100023b4 <SystemCoreClockUpdate>
    Cy_SysTick_Init(CY_CFG_SYSCLK_CLKALTSYSTICK_SOURCE, CY_CFG_SYSCLK_CLKALTSYSTICK_TICKS);
100027d8:	4620      	mov	r0, r4
100027da:	4621      	mov	r1, r4
100027dc:	f003 ff18 	bl	10006610 <Cy_SysTick_Init>
    /* Configure LF clocks CSV */
    #ifdef CY_CFG_SYSCLK_CLKLF_CSV_ENABLED
        Cy_SysClk_ClkLfCsvInit();
    #endif
#if defined (CY_USING_HAL)
    if(CY_RSLT_SUCCESS != (cyhal_hwmgr_reserve(&srss_0_clock_0_pathmux_0_obj)))
100027e0:	4815      	ldr	r0, [pc, #84]	@ (10002838 <init_cycfg_system+0x210>)
100027e2:	f000 fbe7 	bl	10002fb4 <cyhal_hwmgr_reserve>
100027e6:	b100      	cbz	r0, 100027ea <init_cycfg_system+0x1c2>
    {
        CY_HALT();
100027e8:	be01      	bkpt	0x0001
    }
    if(CY_RSLT_SUCCESS != (cyhal_hwmgr_reserve(&srss_0_clock_0_pathmux_1_obj)))
100027ea:	4814      	ldr	r0, [pc, #80]	@ (1000283c <init_cycfg_system+0x214>)
100027ec:	f000 fbe2 	bl	10002fb4 <cyhal_hwmgr_reserve>
100027f0:	b100      	cbz	r0, 100027f4 <init_cycfg_system+0x1cc>
    {
        CY_HALT();
100027f2:	be01      	bkpt	0x0001
    }
    if(CY_RSLT_SUCCESS != (cyhal_hwmgr_reserve(&srss_0_clock_0_pathmux_2_obj)))
100027f4:	4812      	ldr	r0, [pc, #72]	@ (10002840 <init_cycfg_system+0x218>)
100027f6:	f000 fbdd 	bl	10002fb4 <cyhal_hwmgr_reserve>
100027fa:	b100      	cbz	r0, 100027fe <init_cycfg_system+0x1d6>
    {
        CY_HALT();
100027fc:	be01      	bkpt	0x0001
    }
    if(CY_RSLT_SUCCESS != (cyhal_hwmgr_reserve(&srss_0_clock_0_pathmux_3_obj)))
100027fe:	4811      	ldr	r0, [pc, #68]	@ (10002844 <init_cycfg_system+0x21c>)
10002800:	f000 fbd8 	bl	10002fb4 <cyhal_hwmgr_reserve>
10002804:	b100      	cbz	r0, 10002808 <init_cycfg_system+0x1e0>
    {
        CY_HALT();
10002806:	be01      	bkpt	0x0001
    }
    if(CY_RSLT_SUCCESS != (cyhal_hwmgr_reserve(&srss_0_clock_0_pathmux_4_obj)))
10002808:	480f      	ldr	r0, [pc, #60]	@ (10002848 <init_cycfg_system+0x220>)
1000280a:	f000 fbd3 	bl	10002fb4 <cyhal_hwmgr_reserve>
1000280e:	b100      	cbz	r0, 10002812 <init_cycfg_system+0x1ea>
    {
        CY_HALT();
10002810:	be01      	bkpt	0x0001
    }
#endif /* defined (CY_USING_HAL) */
}
10002812:	b005      	add	sp, #20
10002814:	bd30      	pop	{r4, r5, pc}
10002816:	bf00      	nop
10002818:	4027f000 	.word	0x4027f000
1000281c:	40270000 	.word	0x40270000
10002820:	08002c40 	.word	0x08002c40
10002824:	40320000 	.word	0x40320000
10002828:	000f4240 	.word	0x000f4240
1000282c:	1000bad0 	.word	0x1000bad0
10002830:	00030d40 	.word	0x00030d40
10002834:	1000baf3 	.word	0x1000baf3
10002838:	1000bae4 	.word	0x1000bae4
1000283c:	1000bae7 	.word	0x1000bae7
10002840:	1000baea 	.word	0x1000baea
10002844:	1000baed 	.word	0x1000baed
10002848:	1000baf0 	.word	0x1000baf0

1000284c <cybsp_init>:

//--------------------------------------------------------------------------------------------------
// cybsp_init
//--------------------------------------------------------------------------------------------------
cy_rslt_t cybsp_init(void)
{
1000284c:	b510      	push	{r4, lr}
    #if defined(CY_USING_HAL)
    // Setup hardware manager to track resource usage then initialize all system (clock/power) board
    // configuration
    cy_rslt_t result = cyhal_hwmgr_init();
1000284e:	f000 fbaf 	bl	10002fb0 <cyhal_hwmgr_init>

    if (CY_RSLT_SUCCESS == result)
10002852:	4604      	mov	r4, r0
10002854:	b938      	cbnz	r0, 10002866 <cybsp_init+0x1a>
    {
        result = cyhal_syspm_init();
10002856:	f001 f811 	bl	1000387c <cyhal_syspm_init>
    #else // if defined(CY_USING_HAL)
    cy_rslt_t result = CY_RSLT_SUCCESS;
    #endif /* defined(CY_USING_HAL) */

    #ifdef CY_CFG_PWR_VDDA_MV
    if (CY_RSLT_SUCCESS == result)
1000285a:	4604      	mov	r4, r0
1000285c:	b918      	cbnz	r0, 10002866 <cybsp_init+0x1a>
        #if defined(CY_USING_HAL)
        // Old versions of classic HAL have this API in the Syspm HAL. In versions of HAL which
        // support HAL-Lite configuration, this is moved to the System HAL, with compatibility
        // macros that exist in classic HAL configuration only (HAL-Lite configuration does
        // not include SysPm HAL)
        cyhal_syspm_set_supply_voltage(CYHAL_VOLTAGE_SUPPLY_VDDA, CY_CFG_PWR_VDDA_MV);
1000285e:	f640 41e4 	movw	r1, #3300	@ 0xce4
10002862:	f001 f84f 	bl	10003904 <cyhal_system_set_supply_voltage>
    // This is done to ensure configuration is available for all cores that might need to use it.
    // In the case of a dual core project, this can be changed below to perform initialization on
    // the CM4 if necessary.
    #if defined(CORE_NAME_CM0P_0) || !(__CM0P_PRESENT) || (defined(CORE_NAME_CM4_0) && \
    defined(CY_USING_PREBUILT_CM0P_IMAGE))
    cycfg_config_init();
10002866:	f7ff fe0f 	bl	10002488 <cycfg_config_init>
    #endif

    // Do any additional configuration reservations that are needed on all cores.
    cycfg_config_reservations();
1000286a:	f7ff fe1a 	bl	100024a2 <cycfg_config_reservations>

    if (CY_RSLT_SUCCESS == result)
1000286e:	b934      	cbnz	r4, 1000287e <cybsp_init+0x32>
    if (!Cy_SysPm_RegisterCallback(&cybsp_sysclk_pm_callback))
10002870:	4804      	ldr	r0, [pc, #16]	@ (10002884 <cybsp_init+0x38>)
10002872:	f003 fcbf 	bl	100061f4 <Cy_SysPm_RegisterCallback>
        result = CYBSP_RSLT_ERR_SYSCLK_PM_CALLBACK;
10002876:	4b04      	ldr	r3, [pc, #16]	@ (10002888 <cybsp_init+0x3c>)
10002878:	2800      	cmp	r0, #0
1000287a:	bf08      	it	eq
1000287c:	461c      	moveq	r4, r3

    // CYHAL_HWMGR_RSLT_ERR_INUSE error code could be returned if any needed for BSP resource was
    // reserved by user previously. Please review the Device Configurator (design.modus) and the BSP
    // reservation list (cyreservedresources.list) to make sure no resources are reserved by both.
    return result;
}
1000287e:	4620      	mov	r0, r4
10002880:	bd10      	pop	{r4, pc}
10002882:	bf00      	nop
10002884:	080022a4 	.word	0x080022a4
10002888:	06020000 	.word	0x06020000

1000288c <enable_cycle_counter>:

extern uint32_t __StackLimit;
extern uint32_t __StackTop;

void enable_cycle_counter() {
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // Enable DWT
1000288c:	4a07      	ldr	r2, [pc, #28]	@ (100028ac <enable_cycle_counter+0x20>)
1000288e:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
10002892:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
10002896:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
    DWT->CYCCNT = 0;                                // Reset cycle counter
1000289a:	4b05      	ldr	r3, [pc, #20]	@ (100028b0 <enable_cycle_counter+0x24>)
1000289c:	2200      	movs	r2, #0
1000289e:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;            // Enable cycle counter
100028a0:	681a      	ldr	r2, [r3, #0]
100028a2:	f042 0201 	orr.w	r2, r2, #1
100028a6:	601a      	str	r2, [r3, #0]
}
100028a8:	4770      	bx	lr
100028aa:	bf00      	nop
100028ac:	e000ed00 	.word	0xe000ed00
100028b0:	e0001000 	.word	0xe0001000

100028b4 <fill_stack_pattern_to_sp>:
    return DWT->CYCCNT;
}

void fill_stack_pattern_to_sp() {
    register uint32_t *sp;
    __asm volatile ("mov %0, sp" : "=r" (sp));
100028b4:	466b      	mov	r3, sp

    uint32_t *p = (uint32_t*)&__StackLimit;
    while (p < sp) {
        *p++ = 0xAAAAAAAA;
100028b6:	4806      	ldr	r0, [pc, #24]	@ (100028d0 <fill_stack_pattern_to_sp+0x1c>)
100028b8:	f1c0 0203 	rsb	r2, r0, #3
100028bc:	441a      	add	r2, r3
100028be:	1ec1      	subs	r1, r0, #3
100028c0:	f022 0203 	bic.w	r2, r2, #3
100028c4:	4299      	cmp	r1, r3
100028c6:	bf88      	it	hi
100028c8:	2200      	movhi	r2, #0
100028ca:	21aa      	movs	r1, #170	@ 0xaa
100028cc:	f007 b8f3 	b.w	10009ab6 <memset>
100028d0:	08046800 	.word	0x08046800

100028d4 <measure_stack_usage>:
    }
}

uint32_t measure_stack_usage() {
    register uint32_t *sp;
    __asm volatile ("mov %0, sp" : "=r" (sp));
100028d4:	4668      	mov	r0, sp

    uint32_t *p = (uint32_t*)&__StackLimit;
    while (p < sp) {
100028d6:	4b06      	ldr	r3, [pc, #24]	@ (100028f0 <measure_stack_usage+0x1c>)
100028d8:	4283      	cmp	r3, r0
100028da:	d301      	bcc.n	100028e0 <measure_stack_usage+0xc>
            break;
        }
        p++;
    }

    return ((uint32_t)sp - (uint32_t)p); // Stack usage in bytes
100028dc:	1ac0      	subs	r0, r0, r3
}
100028de:	4770      	bx	lr
        if (*p != 0xAAAAAAAA) {
100028e0:	461a      	mov	r2, r3
100028e2:	f852 1b04 	ldr.w	r1, [r2], #4
100028e6:	f1b1 3faa 	cmp.w	r1, #2863311530	@ 0xaaaaaaaa
100028ea:	d1f7      	bne.n	100028dc <measure_stack_usage+0x8>
100028ec:	4613      	mov	r3, r2
100028ee:	e7f3      	b.n	100028d8 <measure_stack_usage+0x4>
100028f0:	08046800 	.word	0x08046800
100028f4:	00000000 	.word	0x00000000

100028f8 <generate_sine_wave_q15>:

void generate_sine_wave_q15(q15_t* input, int N, float signal_freq, float sampling_freq) {
100028f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
100028fc:	ed2d 8b02 	vpush	{d8}
10002900:	b083      	sub	sp, #12
    for (int i = 0; i < N; i++) {
10002902:	2400      	movs	r4, #0
        float value = sinf(2 * M_PI * signal_freq * i / sampling_freq);
        input[2 * i] = (q15_t)(value * 32767.0f);  // Real part (scaled to Q15 format)
10002904:	ed9f 8a22 	vldr	s16, [pc, #136]	@ 10002990 <generate_sine_wave_q15+0x98>
void generate_sine_wave_q15(q15_t* input, int N, float signal_freq, float sampling_freq) {
10002908:	9101      	str	r1, [sp, #4]
1000290a:	4605      	mov	r5, r0
1000290c:	4692      	mov	sl, r2
1000290e:	461e      	mov	r6, r3
        input[2 * i + 1] = 0;                     // Imaginary part (set to 0)
10002910:	1c87      	adds	r7, r0, #2
10002912:	46a3      	mov	fp, r4
    for (int i = 0; i < N; i++) {
10002914:	9b01      	ldr	r3, [sp, #4]
10002916:	429c      	cmp	r4, r3
10002918:	db04      	blt.n	10002924 <generate_sine_wave_q15+0x2c>
    }
}
1000291a:	b003      	add	sp, #12
1000291c:	ecbd 8b02 	vpop	{d8}
10002920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        float value = sinf(2 * M_PI * signal_freq * i / sampling_freq);
10002924:	4650      	mov	r0, sl
10002926:	f005 fda1 	bl	1000846c <__aeabi_f2d>
1000292a:	a317      	add	r3, pc, #92	@ (adr r3, 10002988 <generate_sine_wave_q15+0x90>)
1000292c:	e9d3 2300 	ldrd	r2, r3, [r3]
10002930:	f005 fdf4 	bl	1000851c <__aeabi_dmul>
10002934:	4680      	mov	r8, r0
10002936:	4620      	mov	r0, r4
10002938:	4689      	mov	r9, r1
1000293a:	f005 fd85 	bl	10008448 <__aeabi_i2d>
1000293e:	4602      	mov	r2, r0
10002940:	460b      	mov	r3, r1
10002942:	4640      	mov	r0, r8
10002944:	4649      	mov	r1, r9
10002946:	f005 fde9 	bl	1000851c <__aeabi_dmul>
1000294a:	4680      	mov	r8, r0
1000294c:	4630      	mov	r0, r6
1000294e:	4689      	mov	r9, r1
10002950:	f005 fd8c 	bl	1000846c <__aeabi_f2d>
10002954:	460b      	mov	r3, r1
10002956:	4602      	mov	r2, r0
10002958:	4649      	mov	r1, r9
1000295a:	4640      	mov	r0, r8
1000295c:	f005 ff08 	bl	10008770 <__aeabi_ddiv>
10002960:	f006 f8b4 	bl	10008acc <__aeabi_d2f>
10002964:	f004 fdd6 	bl	10007514 <sinf>
        input[2 * i] = (q15_t)(value * 32767.0f);  // Real part (scaled to Q15 format)
10002968:	ee07 0a90 	vmov	s15, r0
1000296c:	ee67 7a88 	vmul.f32	s15, s15, s16
10002970:	eefd 7ae7 	vcvt.s32.f32	s15, s15
10002974:	ee17 3a90 	vmov	r3, s15
10002978:	f825 3024 	strh.w	r3, [r5, r4, lsl #2]
        input[2 * i + 1] = 0;                     // Imaginary part (set to 0)
1000297c:	f827 b024 	strh.w	fp, [r7, r4, lsl #2]
    for (int i = 0; i < N; i++) {
10002980:	3401      	adds	r4, #1
10002982:	e7c7      	b.n	10002914 <generate_sine_wave_q15+0x1c>
10002984:	f3af 8000 	nop.w
10002988:	54442d18 	.word	0x54442d18
1000298c:	401921fb 	.word	0x401921fb
10002990:	46fffe00 	.word	0x46fffe00

10002994 <main>:

int main(void) {
10002994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10002998:	b089      	sub	sp, #36	@ 0x24
    cy_rslt_t result;

    // Initialize the device and board peripherals
    result = cybsp_init();
1000299a:	f7ff ff57 	bl	1000284c <cybsp_init>
  __ASM volatile ("cpsie i" : : : "memory");
1000299e:	b662      	cpsie	i

    // Enable global interrupts
    __enable_irq();

    // Initialize retarget-io to use the debug UART port
    result = cy_retarget_io_init_fc(CYBSP_DEBUG_UART_TX, CYBSP_DEBUG_UART_RX,
100029a0:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
100029a4:	9300      	str	r3, [sp, #0]
100029a6:	23ff      	movs	r3, #255	@ 0xff
100029a8:	461a      	mov	r2, r3
100029aa:	2128      	movs	r1, #40	@ 0x28
100029ac:	2029      	movs	r0, #41	@ 0x29
100029ae:	f003 febf 	bl	10006730 <cy_retarget_io_init_fc>

    if (result != CY_RSLT_SUCCESS) {
        CY_ASSERT(0);
    }

    printf("****************** \n\r");
100029b2:	4834      	ldr	r0, [pc, #208]	@ (10002a84 <main+0xf0>)
100029b4:	f8df 80e8 	ldr.w	r8, [pc, #232]	@ 10002aa0 <main+0x10c>
            printf("Memory allocation failed for FFT size N = %d\n\r", N);
            return -1;
        }

        // Generate 50 Hz sine wave
        generate_sine_wave_q15(input, N, SINE_FREQ, SAMPLING_FREQ);
100029b8:	f8df a0e8 	ldr.w	sl, [pc, #232]	@ 10002aa4 <main+0x110>
            free(input);
            free(output);
            continue;
        }

        printf("FFT Size: %d\n\r", N);
100029bc:	f8df b0e8 	ldr.w	fp, [pc, #232]	@ 10002aa8 <main+0x114>
    printf("****************** \n\r");
100029c0:	f007 f81c 	bl	100099fc <iprintf>
    printf("Starting FFT Stack Usage Benchmark Program (Q15)\n\r");
100029c4:	4830      	ldr	r0, [pc, #192]	@ (10002a88 <main+0xf4>)
100029c6:	f007 f819 	bl	100099fc <iprintf>
    enable_cycle_counter();
100029ca:	f7ff ff5f 	bl	1000288c <enable_cycle_counter>
    for (int size_idx = 0; size_idx < FFT_SIZES_COUNT; size_idx++) {
100029ce:	2700      	movs	r7, #0
        generate_sine_wave_q15(input, N, SINE_FREQ, SAMPLING_FREQ);
100029d0:	f04f 4987 	mov.w	r9, #1132462080	@ 0x43800000
        int N = FFT_SIZES[size_idx];
100029d4:	f858 5b04 	ldr.w	r5, [r8], #4
        q15_t* input = (q15_t*)malloc(2 * N * sizeof(q15_t));
100029d8:	00ae      	lsls	r6, r5, #2
100029da:	4630      	mov	r0, r6
100029dc:	f006 fa44 	bl	10008e68 <malloc>
100029e0:	4604      	mov	r4, r0
        q15_t* output = (q15_t*)malloc(2 * N * sizeof(q15_t)); // Output buffer for magnitudes
100029e2:	4630      	mov	r0, r6
100029e4:	f006 fa40 	bl	10008e68 <malloc>
100029e8:	4606      	mov	r6, r0
        if (input == NULL || output == NULL) {
100029ea:	b104      	cbz	r4, 100029ee <main+0x5a>
100029ec:	b940      	cbnz	r0, 10002a00 <main+0x6c>
            printf("Memory allocation failed for FFT size N = %d\n\r", N);
100029ee:	4827      	ldr	r0, [pc, #156]	@ (10002a8c <main+0xf8>)
100029f0:	4629      	mov	r1, r5
100029f2:	f007 f803 	bl	100099fc <iprintf>
            return -1;
100029f6:	f04f 30ff 	mov.w	r0, #4294967295
        free(input);
        free(output);
    }

    return 0;
}
100029fa:	b009      	add	sp, #36	@ 0x24
100029fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        generate_sine_wave_q15(input, N, SINE_FREQ, SAMPLING_FREQ);
10002a00:	4629      	mov	r1, r5
10002a02:	4620      	mov	r0, r4
10002a04:	464b      	mov	r3, r9
10002a06:	4652      	mov	r2, sl
10002a08:	f7ff ff76 	bl	100028f8 <generate_sine_wave_q15>
        if (arm_cfft_init_q15(&fft_instance, N) != ARM_MATH_SUCCESS) {
10002a0c:	b2a9      	uxth	r1, r5
10002a0e:	a804      	add	r0, sp, #16
10002a10:	f004 fd36 	bl	10007480 <arm_cfft_init_q15>
10002a14:	b170      	cbz	r0, 10002a34 <main+0xa0>
            printf("FFT initialization failed for N = %d\n\r", N);
10002a16:	481e      	ldr	r0, [pc, #120]	@ (10002a90 <main+0xfc>)
10002a18:	4629      	mov	r1, r5
10002a1a:	f006 ffef 	bl	100099fc <iprintf>
        free(input);
10002a1e:	4620      	mov	r0, r4
10002a20:	f006 fa2a 	bl	10008e78 <free>
    for (int size_idx = 0; size_idx < FFT_SIZES_COUNT; size_idx++) {
10002a24:	3701      	adds	r7, #1
        free(output);
10002a26:	4630      	mov	r0, r6
10002a28:	f006 fa26 	bl	10008e78 <free>
    for (int size_idx = 0; size_idx < FFT_SIZES_COUNT; size_idx++) {
10002a2c:	2f06      	cmp	r7, #6
10002a2e:	d1d1      	bne.n	100029d4 <main+0x40>
    return 0;
10002a30:	2000      	movs	r0, #0
10002a32:	e7e2      	b.n	100029fa <main+0x66>
10002a34:	9003      	str	r0, [sp, #12]
        printf("FFT Size: %d\n\r", N);
10002a36:	4629      	mov	r1, r5
10002a38:	4658      	mov	r0, fp
10002a3a:	f006 ffdf 	bl	100099fc <iprintf>
        arm_cfft_q15(&fft_instance, input, 0, 1);
10002a3e:	9a03      	ldr	r2, [sp, #12]
10002a40:	2301      	movs	r3, #1
10002a42:	4621      	mov	r1, r4
10002a44:	a804      	add	r0, sp, #16
10002a46:	f004 fa53 	bl	10006ef0 <arm_cfft_q15>
        fill_stack_pattern_to_sp();
10002a4a:	f7ff ff33 	bl	100028b4 <fill_stack_pattern_to_sp>
        __asm volatile ("mov %0, sp" : "=r" (sp_before));
10002a4e:	466b      	mov	r3, sp
    return DWT->CYCCNT;
10002a50:	4b10      	ldr	r3, [pc, #64]	@ (10002a94 <main+0x100>)
10002a52:	685a      	ldr	r2, [r3, #4]
10002a54:	9203      	str	r2, [sp, #12]
        arm_cmplx_mag_q15(input, output, N);
10002a56:	4631      	mov	r1, r6
10002a58:	462a      	mov	r2, r5
10002a5a:	4620      	mov	r0, r4
10002a5c:	f003 fe8c 	bl	10006778 <arm_cmplx_mag_q15>
    return DWT->CYCCNT;
10002a60:	4b0c      	ldr	r3, [pc, #48]	@ (10002a94 <main+0x100>)
10002a62:	685d      	ldr	r5, [r3, #4]
        uint32_t stack_used = measure_stack_usage();
10002a64:	f7ff ff36 	bl	100028d4 <measure_stack_usage>
10002a68:	4601      	mov	r1, r0
        printf("  Stack Used: %lu bytes\n\r", (unsigned long)stack_used);
10002a6a:	480b      	ldr	r0, [pc, #44]	@ (10002a98 <main+0x104>)
10002a6c:	f006 ffc6 	bl	100099fc <iprintf>
        printf("  Cycle Count: %lu\n\r", (unsigned long)cycle_count);
10002a70:	9b03      	ldr	r3, [sp, #12]
10002a72:	480a      	ldr	r0, [pc, #40]	@ (10002a9c <main+0x108>)
10002a74:	1ae9      	subs	r1, r5, r3
10002a76:	f006 ffc1 	bl	100099fc <iprintf>
        printf("\n");
10002a7a:	200a      	movs	r0, #10
10002a7c:	f006 ffd0 	bl	10009a20 <putchar>
10002a80:	e7cd      	b.n	10002a1e <main+0x8a>
10002a82:	bf00      	nop
10002a84:	1000baf8 	.word	0x1000baf8
10002a88:	1000bb0e 	.word	0x1000bb0e
10002a8c:	1000bb41 	.word	0x1000bb41
10002a90:	1000bb70 	.word	0x1000bb70
10002a94:	e0001000 	.word	0xe0001000
10002a98:	1000bba6 	.word	0x1000bba6
10002a9c:	1000bbc0 	.word	0x1000bbc0
10002aa0:	1000bbd8 	.word	0x1000bbd8
10002aa4:	42480000 	.word	0x42480000
10002aa8:	1000bb97 	.word	0x1000bb97
10002aac:	00000000 	.word	0x00000000

10002ab0 <Cy_SysLib_DelayCycles>:
.func Cy_SysLib_DelayCycles, Cy_SysLib_DelayCycles
.type Cy_SysLib_DelayCycles, %function
.thumb_func
Cy_SysLib_DelayCycles:      /* cycles bytes */

    ADDS r0, r0, #2         /*    1    2    Round to nearest multiple of 4 */
10002ab0:	3002      	adds	r0, #2
    LSRS r0, r0, #2         /*    1    2    Divide by 4 and set flags */
10002ab2:	0880      	lsrs	r0, r0, #2
    BEQ Cy_DelayCycles_done /*    2    2    Skip if 0 */
10002ab4:	d003      	beq.n	10002abe <Cy_DelayCycles_done>

10002ab6 <Cy_DelayCycles_loop>:

Cy_DelayCycles_loop:
    ADDS r0, r0, #1         /*    1    2    Increment counter */
10002ab6:	3001      	adds	r0, #1
    SUBS r0, r0, #2         /*    1    2    Decrement counter by 2 */
10002ab8:	3802      	subs	r0, #2
    BNE Cy_DelayCycles_loop /*   (1)2  2    2 CPU cycles (if branch is taken) */
10002aba:	d1fc      	bne.n	10002ab6 <Cy_DelayCycles_loop>
    NOP                     /*    1    2    Loop alignment padding */
10002abc:	bf00      	nop

10002abe <Cy_DelayCycles_done>:

Cy_DelayCycles_done:
    NOP                     /*    1    2    Loop alignment padding */
10002abe:	bf00      	nop
    BX lr                   /*    3    2 */
10002ac0:	4770      	bx	lr

10002ac2 <Cy_SysLib_EnterCriticalSection>:
.func Cy_SysLib_EnterCriticalSection, Cy_SysLib_EnterCriticalSection
.type Cy_SysLib_EnterCriticalSection, %function
.thumb_func

Cy_SysLib_EnterCriticalSection:
    MRS r0, PRIMASK         /* Save and return interrupt state */
10002ac2:	f3ef 8010 	mrs	r0, PRIMASK
    cpsid i                 /* Disable interrupts */
10002ac6:	b672      	cpsid	i
    BX lr
10002ac8:	4770      	bx	lr

10002aca <Cy_SysLib_ExitCriticalSection>:
.func Cy_SysLib_ExitCriticalSection, Cy_SysLib_ExitCriticalSection
.type Cy_SysLib_ExitCriticalSection, %function
.thumb_func

Cy_SysLib_ExitCriticalSection:
    MSR PRIMASK, r0         /* Restore interrupt state */
10002aca:	f380 8810 	msr	PRIMASK, r0
    BX lr
10002ace:	4770      	bx	lr

10002ad0 <_cyhal_clock_set_frequency_unsupported>:
    CY_UNUSED_PARAMETER(clock);
    CY_UNUSED_PARAMETER(hz);
    CY_UNUSED_PARAMETER(tolerance);
    CY_ASSERT(false); // Unhandled clock
    return CYHAL_CLOCK_RSLT_ERR_NOT_SUPPORTED;
}
10002ad0:	4800      	ldr	r0, [pc, #0]	@ (10002ad4 <_cyhal_clock_set_frequency_unsupported+0x4>)
10002ad2:	4770      	bx	lr
10002ad4:	04020202 	.word	0x04020202

10002ad8 <_cyhal_clock_get_sources_hf>:
    return rslt;
}
static cy_rslt_t _cyhal_clock_get_sources_hf(const cyhal_clock_t *clock, const cyhal_resource_inst_t **sources[], uint32_t *count)
{
    CY_UNUSED_PARAMETER(clock);
    *sources = _CYHAL_CLOCK_SOURCE_HF;
10002ad8:	4b02      	ldr	r3, [pc, #8]	@ (10002ae4 <_cyhal_clock_get_sources_hf+0xc>)
10002ada:	600b      	str	r3, [r1, #0]
    *count = sizeof(_CYHAL_CLOCK_SOURCE_HF) / sizeof(_CYHAL_CLOCK_SOURCE_HF[0]);
10002adc:	2307      	movs	r3, #7
10002ade:	6013      	str	r3, [r2, #0]
    return CY_RSLT_SUCCESS;
}
10002ae0:	2000      	movs	r0, #0
10002ae2:	4770      	bx	lr
10002ae4:	080022fc 	.word	0x080022fc

10002ae8 <_cyhal_clock_get_frequency_hf>:
    return Cy_SysClk_ClkHfGetFrequency(clock->channel);
10002ae8:	7840      	ldrb	r0, [r0, #1]
10002aea:	f003 b925 	b.w	10005d38 <Cy_SysClk_ClkHfGetFrequency>
	...

10002af0 <_cyhal_clock_update_system_state>:
    if ((before_change == (bool)(new_sysclk_freq_hz > old_sysclk_freq_hz)) ||
10002af0:	428a      	cmp	r2, r1
{
10002af2:	b538      	push	{r3, r4, r5, lr}
10002af4:	4615      	mov	r5, r2
    if ((before_change == (bool)(new_sysclk_freq_hz > old_sysclk_freq_hz)) ||
10002af6:	bf94      	ite	ls
10002af8:	2200      	movls	r2, #0
10002afa:	2201      	movhi	r2, #1
10002afc:	4282      	cmp	r2, r0
{
10002afe:	4604      	mov	r4, r0
10002b00:	460b      	mov	r3, r1
    if ((before_change == (bool)(new_sysclk_freq_hz > old_sysclk_freq_hz)) ||
10002b02:	d007      	beq.n	10002b14 <_cyhal_clock_update_system_state+0x24>
10002b04:	428d      	cmp	r5, r1
10002b06:	bf2c      	ite	cs
10002b08:	2300      	movcs	r3, #0
10002b0a:	2301      	movcc	r3, #1
10002b0c:	f080 0201 	eor.w	r2, r0, #1
10002b10:	4293      	cmp	r3, r2
10002b12:	d106      	bne.n	10002b22 <_cyhal_clock_update_system_state+0x32>
        bool is_ulp = Cy_SysPm_IsSystemUlp();
10002b14:	f003 fc64 	bl	100063e0 <Cy_SysPm_IsSystemUlp>
        Cy_SysLib_SetWaitStates(is_ulp, new_sysclk_freq_hz / 1000000);
10002b18:	4905      	ldr	r1, [pc, #20]	@ (10002b30 <_cyhal_clock_update_system_state+0x40>)
10002b1a:	fbb5 f1f1 	udiv	r1, r5, r1
10002b1e:	f003 fa0f 	bl	10005f40 <Cy_SysLib_SetWaitStates>
    if (!before_change)
10002b22:	b91c      	cbnz	r4, 10002b2c <_cyhal_clock_update_system_state+0x3c>
}
10002b24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        SystemCoreClockUpdate();
10002b28:	f7ff bc44 	b.w	100023b4 <SystemCoreClockUpdate>
}
10002b2c:	bd38      	pop	{r3, r4, r5, pc}
10002b2e:	bf00      	nop
10002b30:	000f4240 	.word	0x000f4240

10002b34 <_cyhal_clock_set_source_hf>:
static cy_rslt_t _cyhal_clock_set_source_hf(cyhal_clock_t *clock, const cyhal_clock_t *source)
{
10002b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t new_src;
    if (source->block == CYHAL_CLOCK_BLOCK_PATHMUX
10002b36:	780b      	ldrb	r3, [r1, #0]
10002b38:	f1a3 020d 	sub.w	r2, r3, #13
10002b3c:	2a01      	cmp	r2, #1
{
10002b3e:	4607      	mov	r7, r0
    if (source->block == CYHAL_CLOCK_BLOCK_PATHMUX
10002b40:	d825      	bhi.n	10002b8e <_cyhal_clock_set_source_hf+0x5a>
#if !defined(COMPONENT_CAT1D)
        || source->block == CYHAL_CLOCK_BLOCK_FLL
#endif
    )
        new_src = source->channel;
10002b42:	784c      	ldrb	r4, [r1, #1]
    }
    else
        return CYHAL_CLOCK_RSLT_ERR_SOURCE;

    /* Only used if updating HFClk 0 */
    uint32_t div_cpu = (uint32_t)Cy_SysClk_ClkHfGetDivider(_CYHAL_CLOCK_CPU_HFCLK_IDX);
10002b44:	2000      	movs	r0, #0
10002b46:	f002 fcd1 	bl	100054ec <Cy_SysClk_ClkHfGetDivider>
10002b4a:	4605      	mov	r5, r0
    uint32_t old_src_cpu = (uint32_t)Cy_SysClk_ClkHfGetSource(_CYHAL_CLOCK_CPU_HFCLK_IDX);
10002b4c:	2000      	movs	r0, #0
10002b4e:	f002 fca5 	bl	1000549c <Cy_SysClk_ClkHfGetSource>
    uint32_t old_freq_cpu = Cy_SysClk_ClkPathGetFrequency(old_src_cpu) >> div_cpu;
10002b52:	f003 f8d9 	bl	10005d08 <Cy_SysClk_ClkPathGetFrequency>
10002b56:	fa20 f605 	lsr.w	r6, r0, r5
    uint32_t new_freq_cpu = Cy_SysClk_ClkPathGetFrequency(new_src) >> div_cpu;
10002b5a:	4620      	mov	r0, r4
10002b5c:	f003 f8d4 	bl	10005d08 <Cy_SysClk_ClkPathGetFrequency>

    if (_CYHAL_CLOCK_CPU_HFCLK_IDX == clock->channel)
10002b60:	787b      	ldrb	r3, [r7, #1]
    uint32_t new_freq_cpu = Cy_SysClk_ClkPathGetFrequency(new_src) >> div_cpu;
10002b62:	fa20 f505 	lsr.w	r5, r0, r5
    if (_CYHAL_CLOCK_CPU_HFCLK_IDX == clock->channel)
10002b66:	b923      	cbnz	r3, 10002b72 <_cyhal_clock_set_source_hf+0x3e>
        _cyhal_clock_update_system_state(true, old_freq_cpu, new_freq_cpu);
10002b68:	462a      	mov	r2, r5
10002b6a:	4631      	mov	r1, r6
10002b6c:	2001      	movs	r0, #1
10002b6e:	f7ff ffbf 	bl	10002af0 <_cyhal_clock_update_system_state>

    cy_rslt_t rslt = Cy_SysClk_ClkHfSetSource(clock->channel, (cy_en_clkhf_in_sources_t)new_src);
10002b72:	b2e1      	uxtb	r1, r4
10002b74:	7878      	ldrb	r0, [r7, #1]
10002b76:	f002 fc75 	bl	10005464 <Cy_SysClk_ClkHfSetSource>

    if (_CYHAL_CLOCK_CPU_HFCLK_IDX == clock->channel)
10002b7a:	787b      	ldrb	r3, [r7, #1]
    cy_rslt_t rslt = Cy_SysClk_ClkHfSetSource(clock->channel, (cy_en_clkhf_in_sources_t)new_src);
10002b7c:	4604      	mov	r4, r0
    if (_CYHAL_CLOCK_CPU_HFCLK_IDX == clock->channel)
10002b7e:	b923      	cbnz	r3, 10002b8a <_cyhal_clock_set_source_hf+0x56>
    {
        if (CY_RSLT_SUCCESS == rslt)
10002b80:	b950      	cbnz	r0, 10002b98 <_cyhal_clock_set_source_hf+0x64>
            _cyhal_clock_update_system_state(false, old_freq_cpu, new_freq_cpu);
10002b82:	462a      	mov	r2, r5
10002b84:	4631      	mov	r1, r6
        else // revert the change if there was one
            _cyhal_clock_update_system_state(false, new_freq_cpu, old_freq_cpu);
10002b86:	f7ff ffb3 	bl	10002af0 <_cyhal_clock_update_system_state>
    }

    return rslt;
}
10002b8a:	4620      	mov	r0, r4
10002b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (source->block == CYHAL_CLOCK_BLOCK_PLL)
10002b8e:	2b0f      	cmp	r3, #15
10002b90:	d106      	bne.n	10002ba0 <_cyhal_clock_set_source_hf+0x6c>
        new_src = source->channel + 1;
10002b92:	784c      	ldrb	r4, [r1, #1]
10002b94:	3401      	adds	r4, #1
10002b96:	e7d5      	b.n	10002b44 <_cyhal_clock_set_source_hf+0x10>
            _cyhal_clock_update_system_state(false, new_freq_cpu, old_freq_cpu);
10002b98:	4632      	mov	r2, r6
10002b9a:	4629      	mov	r1, r5
10002b9c:	4618      	mov	r0, r3
10002b9e:	e7f2      	b.n	10002b86 <_cyhal_clock_set_source_hf+0x52>
        return CYHAL_CLOCK_RSLT_ERR_SOURCE;
10002ba0:	4c00      	ldr	r4, [pc, #0]	@ (10002ba4 <_cyhal_clock_set_source_hf+0x70>)
10002ba2:	e7f2      	b.n	10002b8a <_cyhal_clock_set_source_hf+0x56>
10002ba4:	04020201 	.word	0x04020201

10002ba8 <_cyhal_clock_set_divider_hf>:
    switch (divider)
10002ba8:	3901      	subs	r1, #1
{
10002baa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10002bac:	4607      	mov	r7, r0
    switch (divider)
10002bae:	2907      	cmp	r1, #7
10002bb0:	d832      	bhi.n	10002c18 <_cyhal_clock_set_divider_hf+0x70>
10002bb2:	e8df f001 	tbb	[pc, r1]
10002bb6:	042b      	.short	0x042b
10002bb8:	31312731 	.word	0x31312731
10002bbc:	2931      	.short	0x2931
10002bbe:	2601      	movs	r6, #1
    uint32_t old_div = (uint32_t)Cy_SysClk_ClkHfGetDivider(0);
10002bc0:	2000      	movs	r0, #0
10002bc2:	f002 fc93 	bl	100054ec <Cy_SysClk_ClkHfGetDivider>
10002bc6:	4605      	mov	r5, r0
    uint32_t src = (uint32_t)Cy_SysClk_ClkHfGetSource(0);
10002bc8:	2000      	movs	r0, #0
10002bca:	f002 fc67 	bl	1000549c <Cy_SysClk_ClkHfGetSource>
    uint32_t path_freq = Cy_SysClk_ClkPathGetFrequency(src);
10002bce:	f003 f89b 	bl	10005d08 <Cy_SysClk_ClkPathGetFrequency>
    if (0 == clock->channel)
10002bd2:	787b      	ldrb	r3, [r7, #1]
    uint32_t path_freq = Cy_SysClk_ClkPathGetFrequency(src);
10002bd4:	4604      	mov	r4, r0
    uint32_t old_freq = path_freq >> old_div;
10002bd6:	fa20 f505 	lsr.w	r5, r0, r5
    uint32_t new_freq = path_freq >> ((uint32_t)new_div);
10002bda:	40f4      	lsrs	r4, r6
    if (0 == clock->channel)
10002bdc:	b923      	cbnz	r3, 10002be8 <_cyhal_clock_set_divider_hf+0x40>
        _cyhal_clock_update_system_state(true, old_freq, new_freq);
10002bde:	4622      	mov	r2, r4
10002be0:	4629      	mov	r1, r5
10002be2:	2001      	movs	r0, #1
10002be4:	f7ff ff84 	bl	10002af0 <_cyhal_clock_update_system_state>
    cy_rslt_t rslt = (cy_rslt_t)Cy_SysClk_ClkHfSetDivider(clock->channel, new_div);
10002be8:	4631      	mov	r1, r6
10002bea:	7878      	ldrb	r0, [r7, #1]
10002bec:	f002 fc60 	bl	100054b0 <Cy_SysClk_ClkHfSetDivider>
    if (0 == clock->channel)
10002bf0:	787b      	ldrb	r3, [r7, #1]
    cy_rslt_t rslt = (cy_rslt_t)Cy_SysClk_ClkHfSetDivider(clock->channel, new_div);
10002bf2:	4606      	mov	r6, r0
    if (0 == clock->channel)
10002bf4:	b923      	cbnz	r3, 10002c00 <_cyhal_clock_set_divider_hf+0x58>
        if (CY_RSLT_SUCCESS == rslt)
10002bf6:	b958      	cbnz	r0, 10002c10 <_cyhal_clock_set_divider_hf+0x68>
            _cyhal_clock_update_system_state(false, old_freq, new_freq);
10002bf8:	4622      	mov	r2, r4
10002bfa:	4629      	mov	r1, r5
            _cyhal_clock_update_system_state(false, new_freq, old_freq);
10002bfc:	f7ff ff78 	bl	10002af0 <_cyhal_clock_update_system_state>
}
10002c00:	4630      	mov	r0, r6
10002c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            new_div = CY_SYSCLK_CLKHF_DIVIDE_BY_4;
10002c04:	2602      	movs	r6, #2
            break;
10002c06:	e7db      	b.n	10002bc0 <_cyhal_clock_set_divider_hf+0x18>
            new_div = CY_SYSCLK_CLKHF_DIVIDE_BY_8;
10002c08:	2603      	movs	r6, #3
            break;
10002c0a:	e7d9      	b.n	10002bc0 <_cyhal_clock_set_divider_hf+0x18>
            new_div = CY_SYSCLK_CLKHF_NO_DIVIDE;
10002c0c:	2600      	movs	r6, #0
10002c0e:	e7d7      	b.n	10002bc0 <_cyhal_clock_set_divider_hf+0x18>
            _cyhal_clock_update_system_state(false, new_freq, old_freq);
10002c10:	462a      	mov	r2, r5
10002c12:	4621      	mov	r1, r4
10002c14:	4618      	mov	r0, r3
10002c16:	e7f1      	b.n	10002bfc <_cyhal_clock_set_divider_hf+0x54>
    switch (divider)
10002c18:	4e00      	ldr	r6, [pc, #0]	@ (10002c1c <_cyhal_clock_set_divider_hf+0x74>)
10002c1a:	e7f1      	b.n	10002c00 <_cyhal_clock_set_divider_hf+0x58>
10002c1c:	04020200 	.word	0x04020200

10002c20 <_cyhal_clock_is_enabled_hf>:
    return Cy_SysClk_ClkHfIsEnabled(clock->channel);
10002c20:	7840      	ldrb	r0, [r0, #1]
10002c22:	f002 bbf3 	b.w	1000540c <Cy_SysClk_ClkHfIsEnabled>

10002c26 <_cyhal_clock_set_enabled_peripheral>:
    }
    #endif
    return _cyhal_utils_peri_pclk_is_divider_enabled(_CYHAL_CLOCK_GET_PCLK_GR_NUM(clock->block), clock);
}
static cy_rslt_t _cyhal_clock_set_enabled_peripheral(cyhal_clock_t *clock, bool enabled, bool wait_for_lock)
{
10002c26:	b410      	push	{r4}
10002c28:	4602      	mov	r2, r0
{
    #if defined(COMPONENT_CAT1B) || defined(COMPONENT_CAT1C) || defined(COMPONENT_CAT1D)
    return Cy_SysClk_PeriPclkEnableDivider(clk_dest, _CYHAL_PERIPHERAL_GROUP_GET_DIVIDER_TYPE(clock->block), clock->channel);
    #else
    CY_UNUSED_PARAMETER(clk_dest);
    return Cy_SysClk_PeriphEnableDivider(_CYHAL_PERIPHERAL_GROUP_GET_DIVIDER_TYPE(clock->block), clock->channel);
10002c2a:	7803      	ldrb	r3, [r0, #0]
10002c2c:	460c      	mov	r4, r1
10002c2e:	f003 0003 	and.w	r0, r3, #3
10002c32:	7851      	ldrb	r1, [r2, #1]
    }
    #endif

    return (enabled)
        ? _cyhal_utils_peri_pclk_enable_divider(_CYHAL_CLOCK_GET_PCLK_GR_NUM(clock->block), clock)
        : _cyhal_utils_peri_pclk_disable_divider(_CYHAL_CLOCK_GET_PCLK_GR_NUM(clock->block), clock);
10002c34:	b11c      	cbz	r4, 10002c3e <_cyhal_clock_set_enabled_peripheral+0x18>
}
10002c36:	f85d 4b04 	ldr.w	r4, [sp], #4
10002c3a:	f002 bad7 	b.w	100051ec <Cy_SysClk_PeriphEnableDivider>
10002c3e:	f85d 4b04 	ldr.w	r4, [sp], #4
{
    #if defined(COMPONENT_CAT1B) || defined(COMPONENT_CAT1C) || defined(COMPONENT_CAT1D)
    return Cy_SysClk_PeriPclkDisableDivider(clk_dest, _CYHAL_PERIPHERAL_GROUP_GET_DIVIDER_TYPE(clock->block), clock->channel);
    #else
    CY_UNUSED_PARAMETER(clk_dest);
    return Cy_SysClk_PeriphDisableDivider(_CYHAL_PERIPHERAL_GROUP_GET_DIVIDER_TYPE(clock->block), clock->channel);
10002c42:	f002 bb09 	b.w	10005258 <Cy_SysClk_PeriphDisableDivider>

10002c46 <_cyhal_clock_set_enabled_hf>:
        ? Cy_SysClk_ClkHfEnable(clock->channel)
10002c46:	7840      	ldrb	r0, [r0, #1]
        : Cy_SysClk_ClkHfDisable(clock->channel);
10002c48:	b109      	cbz	r1, 10002c4e <_cyhal_clock_set_enabled_hf+0x8>
        ? Cy_SysClk_ClkHfEnable(clock->channel)
10002c4a:	f002 bbc5 	b.w	100053d8 <Cy_SysClk_ClkHfEnable>
        : Cy_SysClk_ClkHfDisable(clock->channel);
10002c4e:	f002 bbef 	b.w	10005430 <Cy_SysClk_ClkHfDisable>

10002c52 <_cyhal_clock_set_divider_peripheral>:
        else
            return rslt;
    }
}
static cy_rslt_t _cyhal_clock_set_divider_peripheral(cyhal_clock_t *clock, uint32_t divider)
{
10002c52:	b410      	push	{r4}
10002c54:	4603      	mov	r3, r0
        return CYHAL_CLOCK_RSLT_ERR_SOURCE_DISABLED;
    }
    #endif

    // blocks 0b00 & 0b01 are integer, 0b10 & 0b11 are fractional
    return ((clock->block & 0x02) == 0)
10002c56:	7804      	ldrb	r4, [r0, #0]
        ? _cyhal_utils_peri_pclk_set_divider(_CYHAL_CLOCK_GET_PCLK_GR_NUM(clock->block), clock, divider - 1)
10002c58:	1e4a      	subs	r2, r1, #1
    return Cy_SysClk_PeriphSetDivider(_CYHAL_PERIPHERAL_GROUP_GET_DIVIDER_TYPE(clock->block), clock->channel, div);
10002c5a:	7859      	ldrb	r1, [r3, #1]
        : _cyhal_utils_peri_pclk_set_frac_divider(_CYHAL_CLOCK_GET_PCLK_GR_NUM(clock->block), clock, divider - 1, 0);
10002c5c:	07a3      	lsls	r3, r4, #30
10002c5e:	f004 0003 	and.w	r0, r4, #3
10002c62:	d403      	bmi.n	10002c6c <_cyhal_clock_set_divider_peripheral+0x1a>
}
10002c64:	f85d 4b04 	ldr.w	r4, [sp], #4
10002c68:	f002 ba18 	b.w	1000509c <Cy_SysClk_PeriphSetDivider>
10002c6c:	f85d 4b04 	ldr.w	r4, [sp], #4
    return Cy_SysClk_PeriphSetFracDivider(_CYHAL_PERIPHERAL_GROUP_GET_DIVIDER_TYPE(clock->block), clock->channel, div_int, div_frac);
10002c70:	2300      	movs	r3, #0
10002c72:	f002 ba47 	b.w	10005104 <Cy_SysClk_PeriphSetFracDivider>
	...

10002c78 <_cyhal_clock_get_funcs_peripheral>:
10002c78:	4800      	ldr	r0, [pc, #0]	@ (10002c7c <_cyhal_clock_get_funcs_peripheral+0x4>)
10002c7a:	4770      	bx	lr
10002c7c:	1000c62c 	.word	0x1000c62c

10002c80 <_cyhal_clock_allocate_channel>:
/******************************************************************************
 **************************** Public API (clocks) *****************************
 *****************************************************************************/

cy_rslt_t _cyhal_clock_allocate_channel(cyhal_clock_t *clock, cyhal_clock_block_t block, const void* funcs)
{
10002c80:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
10002c84:	4604      	mov	r4, r0
    uint8_t maxChannels = (uint8_t)_cyhal_utils_get_clock_count(block);
10002c86:	4608      	mov	r0, r1
{
10002c88:	460d      	mov	r5, r1
10002c8a:	4690      	mov	r8, r2
    uint8_t maxChannels = (uint8_t)_cyhal_utils_get_clock_count(block);
10002c8c:	f001 fb34 	bl	100042f8 <_cyhal_utils_get_clock_count>
    for (uint8_t i = 0; i < maxChannels; i++)
10002c90:	f04f 0900 	mov.w	r9, #0
    uint8_t maxChannels = (uint8_t)_cyhal_utils_get_clock_count(block);
10002c94:	b2c7      	uxtb	r7, r0
    {
        cyhal_resource_inst_t clock_resource = { CYHAL_RSC_CLOCK, block, i };
10002c96:	f04f 0a05 	mov.w	sl, #5
10002c9a:	fa5f f689 	uxtb.w	r6, r9
    for (uint8_t i = 0; i < maxChannels; i++)
10002c9e:	42b7      	cmp	r7, r6
10002ca0:	d801      	bhi.n	10002ca6 <_cyhal_clock_allocate_channel+0x26>
            clock->reserved = true;
            clock->funcs = funcs;
            return CY_RSLT_SUCCESS;
        }
    }
    return CYHAL_HWMGR_RSLT_ERR_NONE_FREE;
10002ca2:	480c      	ldr	r0, [pc, #48]	@ (10002cd4 <_cyhal_clock_allocate_channel+0x54>)
10002ca4:	e012      	b.n	10002ccc <_cyhal_clock_allocate_channel+0x4c>
        if (CY_RSLT_SUCCESS == cyhal_hwmgr_reserve(&clock_resource))
10002ca6:	a801      	add	r0, sp, #4
        cyhal_resource_inst_t clock_resource = { CYHAL_RSC_CLOCK, block, i };
10002ca8:	f88d a004 	strb.w	sl, [sp, #4]
10002cac:	f88d 5005 	strb.w	r5, [sp, #5]
10002cb0:	f88d 6006 	strb.w	r6, [sp, #6]
        if (CY_RSLT_SUCCESS == cyhal_hwmgr_reserve(&clock_resource))
10002cb4:	f000 f97e 	bl	10002fb4 <cyhal_hwmgr_reserve>
10002cb8:	f109 0901 	add.w	r9, r9, #1
10002cbc:	2800      	cmp	r0, #0
10002cbe:	d1ec      	bne.n	10002c9a <_cyhal_clock_allocate_channel+0x1a>
            clock->reserved = true;
10002cc0:	2301      	movs	r3, #1
            clock->block = block;
10002cc2:	7025      	strb	r5, [r4, #0]
            clock->channel = i;
10002cc4:	7066      	strb	r6, [r4, #1]
            clock->reserved = true;
10002cc6:	70a3      	strb	r3, [r4, #2]
            clock->funcs = funcs;
10002cc8:	f8c4 8004 	str.w	r8, [r4, #4]
}
10002ccc:	b002      	add	sp, #8
10002cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
10002cd2:	bf00      	nop
10002cd4:	04020d02 	.word	0x04020d02

10002cd8 <cyhal_clock_reserve>:

    return CY_RSLT_SUCCESS;
}

cy_rslt_t cyhal_clock_reserve(cyhal_clock_t *clock, const cyhal_clock_t *clock_)
{
10002cd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    CY_ASSERT(NULL != clock);
    CY_ASSERT(NULL != clock_);

    cyhal_resource_inst_t clock_resource = { CYHAL_RSC_CLOCK, clock_->block, clock_->channel };
10002cda:	2305      	movs	r3, #5
10002cdc:	f88d 3004 	strb.w	r3, [sp, #4]
10002ce0:	780b      	ldrb	r3, [r1, #0]
10002ce2:	f88d 3005 	strb.w	r3, [sp, #5]
{
10002ce6:	4605      	mov	r5, r0
    cyhal_resource_inst_t clock_resource = { CYHAL_RSC_CLOCK, clock_->block, clock_->channel };
10002ce8:	784b      	ldrb	r3, [r1, #1]
10002cea:	f88d 3006 	strb.w	r3, [sp, #6]
    cy_rslt_t rslt = cyhal_hwmgr_reserve(&clock_resource);
10002cee:	a801      	add	r0, sp, #4
{
10002cf0:	460c      	mov	r4, r1
    cy_rslt_t rslt = cyhal_hwmgr_reserve(&clock_resource);
10002cf2:	f000 f95f 	bl	10002fb4 <cyhal_hwmgr_reserve>
    if (CY_RSLT_SUCCESS == rslt)
10002cf6:	b928      	cbnz	r0, 10002d04 <cyhal_clock_reserve+0x2c>
    {
        memcpy(clock, clock_, sizeof(cyhal_clock_t));
10002cf8:	6823      	ldr	r3, [r4, #0]
10002cfa:	602b      	str	r3, [r5, #0]
10002cfc:	6863      	ldr	r3, [r4, #4]
10002cfe:	606b      	str	r3, [r5, #4]
        clock->reserved = true;
10002d00:	2301      	movs	r3, #1
10002d02:	70ab      	strb	r3, [r5, #2]
    }
    return rslt;
}
10002d04:	b003      	add	sp, #12
10002d06:	bd30      	pop	{r4, r5, pc}

10002d08 <cyhal_clock_set_enabled>:
    else
        return ((cyhal_clock_funcs_t*)clock->funcs)->is_enabled(clock);
}

cy_rslt_t cyhal_clock_set_enabled(cyhal_clock_t *clock, bool enabled, bool wait_for_lock)
{
10002d08:	b410      	push	{r4}
    CY_ASSERT(NULL != clock);

    if (clock->block == CYHAL_CLOCK_BLOCK_HF)
10002d0a:	7804      	ldrb	r4, [r0, #0]
10002d0c:	2c12      	cmp	r4, #18
10002d0e:	d103      	bne.n	10002d18 <cyhal_clock_set_enabled+0x10>
        return _cyhal_clock_set_enabled_hf(clock, enabled, wait_for_lock);
    else if (clock->block < 4 * _CYHAL_CLOCK_PERI_GROUPS)
        return _cyhal_clock_set_enabled_peripheral(clock, enabled, wait_for_lock);
    else
        return ((cyhal_clock_funcs_t*)clock->funcs)->set_enabled(clock, enabled, wait_for_lock);
}
10002d10:	f85d 4b04 	ldr.w	r4, [sp], #4
        return _cyhal_clock_set_enabled_hf(clock, enabled, wait_for_lock);
10002d14:	f7ff bf97 	b.w	10002c46 <_cyhal_clock_set_enabled_hf>
    else if (clock->block < 4 * _CYHAL_CLOCK_PERI_GROUPS)
10002d18:	2c03      	cmp	r4, #3
10002d1a:	d803      	bhi.n	10002d24 <cyhal_clock_set_enabled+0x1c>
}
10002d1c:	f85d 4b04 	ldr.w	r4, [sp], #4
        return _cyhal_clock_set_enabled_peripheral(clock, enabled, wait_for_lock);
10002d20:	f7ff bf81 	b.w	10002c26 <_cyhal_clock_set_enabled_peripheral>
        return ((cyhal_clock_funcs_t*)clock->funcs)->set_enabled(clock, enabled, wait_for_lock);
10002d24:	6843      	ldr	r3, [r0, #4]
}
10002d26:	f85d 4b04 	ldr.w	r4, [sp], #4
        return ((cyhal_clock_funcs_t*)clock->funcs)->set_enabled(clock, enabled, wait_for_lock);
10002d2a:	685b      	ldr	r3, [r3, #4]
10002d2c:	4718      	bx	r3

10002d2e <cyhal_clock_set_divider>:

cy_rslt_t cyhal_clock_set_divider(cyhal_clock_t *clock, uint32_t divider)
{
    CY_ASSERT(NULL != clock);

    if (clock->block == CYHAL_CLOCK_BLOCK_HF)
10002d2e:	7802      	ldrb	r2, [r0, #0]
10002d30:	2a12      	cmp	r2, #18
10002d32:	d101      	bne.n	10002d38 <cyhal_clock_set_divider+0xa>
        return _cyhal_clock_set_divider_hf(clock, divider);
10002d34:	f7ff bf38 	b.w	10002ba8 <_cyhal_clock_set_divider_hf>
    else if (clock->block < 4 * _CYHAL_CLOCK_PERI_GROUPS)
10002d38:	2a03      	cmp	r2, #3
10002d3a:	d801      	bhi.n	10002d40 <cyhal_clock_set_divider+0x12>
        return _cyhal_clock_set_divider_peripheral(clock, divider);
10002d3c:	f7ff bf89 	b.w	10002c52 <_cyhal_clock_set_divider_peripheral>
    else
        return ((cyhal_clock_funcs_t*)clock->funcs)->set_divider(clock, divider);
10002d40:	6843      	ldr	r3, [r0, #4]
10002d42:	691b      	ldr	r3, [r3, #16]
10002d44:	4718      	bx	r3

10002d46 <cyhal_clock_free>:
    else
        return ((cyhal_clock_funcs_t*)clock->funcs)->set_source(clock, source);
}

void cyhal_clock_free(cyhal_clock_t *clock)
{
10002d46:	b513      	push	{r0, r1, r4, lr}
    CY_ASSERT(NULL != clock);
    CY_ASSERT(clock->reserved);

    cyhal_resource_inst_t rsc = { CYHAL_RSC_CLOCK, clock->block, clock->channel };
10002d48:	2305      	movs	r3, #5
10002d4a:	f88d 3004 	strb.w	r3, [sp, #4]
10002d4e:	7803      	ldrb	r3, [r0, #0]
10002d50:	f88d 3005 	strb.w	r3, [sp, #5]
{
10002d54:	4604      	mov	r4, r0
    cyhal_resource_inst_t rsc = { CYHAL_RSC_CLOCK, clock->block, clock->channel };
10002d56:	7843      	ldrb	r3, [r0, #1]
10002d58:	f88d 3006 	strb.w	r3, [sp, #6]
    cyhal_hwmgr_free(&rsc);
10002d5c:	a801      	add	r0, sp, #4
10002d5e:	f000 f969 	bl	10003034 <cyhal_hwmgr_free>
    clock->reserved = false;
10002d62:	2300      	movs	r3, #0
10002d64:	70a3      	strb	r3, [r4, #2]
}
10002d66:	b002      	add	sp, #8
10002d68:	bd10      	pop	{r4, pc}

10002d6a <cyhal_dma_free>:
    return _cyhal_dma_dw_init_cfg(obj, cfg);
#endif
}

void cyhal_dma_free(cyhal_dma_t *obj)
{
10002d6a:	b510      	push	{r4, lr}
10002d6c:	4604      	mov	r4, r0
        return _cyhal_dma_dmac_disable_output(obj, output);
    }
#endif
#if (_CYHAL_DRIVER_AVAILABLE_DMA_DW)
    CY_ASSERT(obj->resource.type == CYHAL_RSC_DW);
    return _cyhal_dma_dw_disable_output(obj, output);
10002d6e:	2102      	movs	r1, #2
10002d70:	f000 f8c8 	bl	10002f04 <_cyhal_dma_dw_disable_output>
    if (CYHAL_TRIGGER_CPUSS_ZERO != obj->source)
10002d74:	f8b4 1070 	ldrh.w	r1, [r4, #112]	@ 0x70
10002d78:	b119      	cbz	r1, 10002d82 <cyhal_dma_free+0x18>
    return _cyhal_dma_dw_disconnect_digital(obj, source, input);
10002d7a:	2202      	movs	r2, #2
10002d7c:	4620      	mov	r0, r4
10002d7e:	f000 f8a7 	bl	10002ed0 <_cyhal_dma_dw_disconnect_digital>
        _cyhal_dma_dw_free(obj);
10002d82:	4620      	mov	r0, r4
10002d84:	f000 f82a 	bl	10002ddc <_cyhal_dma_dw_free>
    if (!obj->owned_by_configurator)
10002d88:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
10002d8c:	b923      	cbnz	r3, 10002d98 <cyhal_dma_free+0x2e>
        cyhal_hwmgr_free(&obj->resource);
10002d8e:	4620      	mov	r0, r4
}
10002d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        cyhal_hwmgr_free(&obj->resource);
10002d94:	f000 b94e 	b.w	10003034 <cyhal_hwmgr_free>
}
10002d98:	bd10      	pop	{r4, pc}
	...

10002d9c <_cyhal_dma_dw_has_enabled>:
    .ignore_modes = (cyhal_syspm_callback_mode_t)(CYHAL_SYSPM_BEFORE_TRANSITION | CYHAL_SYSPM_AFTER_DS_WFI_TRANSITION),
};

static bool _cyhal_dma_dw_has_enabled(void)
{
    for (uint8_t i = 0; i < _CYHAL_DMA_DW_NUM_CHANNELS; i++)
10002d9c:	4b05      	ldr	r3, [pc, #20]	@ (10002db4 <_cyhal_dma_dw_has_enabled+0x18>)
{
10002d9e:	2020      	movs	r0, #32
        if (NULL != _cyhal_dma_dw_config_structs[i])
10002da0:	f853 2b04 	ldr.w	r2, [r3], #4
10002da4:	b922      	cbnz	r2, 10002db0 <_cyhal_dma_dw_has_enabled+0x14>
    for (uint8_t i = 0; i < _CYHAL_DMA_DW_NUM_CHANNELS; i++)
10002da6:	3801      	subs	r0, #1
10002da8:	f010 00ff 	ands.w	r0, r0, #255	@ 0xff
10002dac:	d1f8      	bne.n	10002da0 <_cyhal_dma_dw_has_enabled+0x4>
10002dae:	4770      	bx	lr
            return true;
10002db0:	2001      	movs	r0, #1
    return false;
}
10002db2:	4770      	bx	lr
10002db4:	08002ab0 	.word	0x08002ab0

10002db8 <_cyhal_dma_dw_get_irqn>:
/** Gets the irqn corresponding to a particular cyhal_dma_t config struct */
static inline _cyhal_system_irq_t _cyhal_dma_dw_get_irqn(cyhal_dma_t *obj)
{
    // Some devices do not have contigious interrupts for all channels.
#if (CPUSS_DW0_PRESENT==1)
    if (obj->resource.block_num == 0 && obj->resource.channel_num < CYHAL_DMA_DW0_MAX_CONTIGUOUS_IRQ)
10002db8:	7843      	ldrb	r3, [r0, #1]
10002dba:	b92b      	cbnz	r3, 10002dc8 <_cyhal_dma_dw_get_irqn+0x10>
10002dbc:	7880      	ldrb	r0, [r0, #2]
10002dbe:	280f      	cmp	r0, #15
10002dc0:	d809      	bhi.n	10002dd6 <_cyhal_dma_dw_get_irqn+0x1e>
    {
#if defined(COMPONENT_CAT1D)
        return (_cyhal_system_irq_t)((uint8_t)m33syscpuss_interrupts_dw0_0_IRQn + obj->resource.channel_num);
#else
        return (_cyhal_system_irq_t)((uint8_t)cpuss_interrupts_dw0_0_IRQn + obj->resource.channel_num);
10002dc2:	3032      	adds	r0, #50	@ 0x32
    #endif
#endif
#if (CPUSS_DW1_PRESENT==1)
    if (obj->resource.block_num == 1 && obj->resource.channel_num < CYHAL_DMA_DW1_MAX_CONTIGUOUS_IRQ)
    {
        return (_cyhal_system_irq_t)((uint16_t)cpuss_interrupts_dw1_0_IRQn + obj->resource.channel_num);
10002dc4:	b2c0      	uxtb	r0, r0
10002dc6:	4770      	bx	lr
    if (obj->resource.block_num == 1 && obj->resource.channel_num < CYHAL_DMA_DW1_MAX_CONTIGUOUS_IRQ)
10002dc8:	2b01      	cmp	r3, #1
10002dca:	d104      	bne.n	10002dd6 <_cyhal_dma_dw_get_irqn+0x1e>
10002dcc:	7880      	ldrb	r0, [r0, #2]
10002dce:	280f      	cmp	r0, #15
10002dd0:	d801      	bhi.n	10002dd6 <_cyhal_dma_dw_get_irqn+0x1e>
        return (_cyhal_system_irq_t)((uint16_t)cpuss_interrupts_dw1_0_IRQn + obj->resource.channel_num);
10002dd2:	3042      	adds	r0, #66	@ 0x42
10002dd4:	e7f6      	b.n	10002dc4 <_cyhal_dma_dw_get_irqn+0xc>

    CY_ASSERT(false);
#if (_CYHAL_IRQ_MUXING)
    return disconnected_IRQn;
#else
    return unconnected_IRQn;
10002dd6:	20f0      	movs	r0, #240	@ 0xf0
#endif
}
10002dd8:	4770      	bx	lr
	...

10002ddc <_cyhal_dma_dw_free>:

    return _cyhal_dma_dw_stage(obj);
}

void _cyhal_dma_dw_free(cyhal_dma_t *obj)
{
10002ddc:	b510      	push	{r4, lr}
10002dde:	4604      	mov	r4, r0
    Cy_DMA_Descriptor_DeInit(&obj->descriptor.dw);
10002de0:	3044      	adds	r0, #68	@ 0x44
10002de2:	f001 fadf 	bl	100043a4 <Cy_DMA_Descriptor_DeInit>
    Cy_DMA_Channel_DeInit(_cyhal_dma_dw_get_base(obj->resource.block_num), obj->resource.channel_num);
10002de6:	4b17      	ldr	r3, [pc, #92]	@ (10002e44 <_cyhal_dma_dw_free+0x68>)
    return block_num == 0 ? DW0 : DW1;
10002de8:	7860      	ldrb	r0, [r4, #1]
    Cy_DMA_Channel_DeInit(_cyhal_dma_dw_get_base(obj->resource.block_num), obj->resource.channel_num);
10002dea:	4a17      	ldr	r2, [pc, #92]	@ (10002e48 <_cyhal_dma_dw_free+0x6c>)
10002dec:	78a1      	ldrb	r1, [r4, #2]
10002dee:	2800      	cmp	r0, #0
10002df0:	bf0c      	ite	eq
10002df2:	4610      	moveq	r0, r2
10002df4:	4618      	movne	r0, r3
10002df6:	f001 fadd 	bl	100043b4 <Cy_DMA_Channel_DeInit>

    _cyhal_irq_free(_cyhal_dma_dw_get_irqn(obj));
10002dfa:	4620      	mov	r0, r4
10002dfc:	f7ff ffdc 	bl	10002db8 <_cyhal_dma_dw_get_irqn>
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
10002e00:	2800      	cmp	r0, #0
10002e02:	db0c      	blt.n	10002e1e <_cyhal_dma_dw_free+0x42>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10002e04:	0943      	lsrs	r3, r0, #5
10002e06:	4911      	ldr	r1, [pc, #68]	@ (10002e4c <_cyhal_dma_dw_free+0x70>)
10002e08:	f000 001f 	and.w	r0, r0, #31
10002e0c:	3320      	adds	r3, #32
10002e0e:	2201      	movs	r2, #1
10002e10:	4082      	lsls	r2, r0
10002e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
10002e16:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
10002e1a:	f3bf 8f6f 	isb	sy
    _cyhal_dma_dw_config_structs[obj->resource.block_num * CPUSS_DW0_CH_NR + obj->resource.channel_num] = NULL;
10002e1e:	7862      	ldrb	r2, [r4, #1]
10002e20:	78a3      	ldrb	r3, [r4, #2]
10002e22:	eb03 1302 	add.w	r3, r3, r2, lsl #4
10002e26:	4a0a      	ldr	r2, [pc, #40]	@ (10002e50 <_cyhal_dma_dw_free+0x74>)
10002e28:	2100      	movs	r1, #0
10002e2a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    _cyhal_dma_dw_free_obj(obj);
#if CYHAL_DRIVER_AVAILABLE_SYSPM
    if (!_cyhal_dma_dw_has_enabled())
10002e2e:	f7ff ffb5 	bl	10002d9c <_cyhal_dma_dw_has_enabled>
10002e32:	4604      	mov	r4, r0
10002e34:	b920      	cbnz	r0, 10002e40 <_cyhal_dma_dw_free+0x64>
    {
        _cyhal_syspm_unregister_peripheral_callback(&cyhal_dma_dw_pm_callback_args);
10002e36:	4807      	ldr	r0, [pc, #28]	@ (10002e54 <_cyhal_dma_dw_free+0x78>)
10002e38:	f000 fd1a 	bl	10003870 <_cyhal_syspm_unregister_peripheral_callback>
        _cyhal_dma_dw_pm_transition_pending = false;
10002e3c:	4b06      	ldr	r3, [pc, #24]	@ (10002e58 <_cyhal_dma_dw_free+0x7c>)
10002e3e:	701c      	strb	r4, [r3, #0]
    }
#endif
}
10002e40:	bd10      	pop	{r4, pc}
10002e42:	bf00      	nop
10002e44:	40281000 	.word	0x40281000
10002e48:	40280000 	.word	0x40280000
10002e4c:	e000e100 	.word	0xe000e100
10002e50:	08002ab0 	.word	0x08002ab0
10002e54:	08002318 	.word	0x08002318
10002e58:	08002b30 	.word	0x08002b30

10002e5c <_cyhal_dma_dw_is_busy>:
    return block_num == 0 ? DW0 : DW1;
10002e5c:	7841      	ldrb	r1, [r0, #1]
10002e5e:	4a07      	ldr	r2, [pc, #28]	@ (10002e7c <_cyhal_dma_dw_is_busy+0x20>)
10002e60:	4b07      	ldr	r3, [pc, #28]	@ (10002e80 <_cyhal_dma_dw_is_busy+0x24>)
10002e62:	2900      	cmp	r1, #0
10002e64:	bf18      	it	ne
10002e66:	4613      	movne	r3, r2
{
#if CY_IP_M4CPUSS_DMA_VERSION == 1
    /* In DW_V1 the pending channel information is stored in the PENDING
     * register of the DW block and is a bit field of all pending or active
     * channels */
    return _cyhal_dma_dw_get_base(obj->resource.block_num)->PENDING & (1 << obj->resource.channel_num);
10002e68:	7881      	ldrb	r1, [r0, #2]
10002e6a:	689a      	ldr	r2, [r3, #8]
10002e6c:	2301      	movs	r3, #1
10002e6e:	408b      	lsls	r3, r1
10002e70:	4213      	tst	r3, r2
#else
    // Should never reach here. Just silencing compiler warnings.
    CY_ASSERT(false);
    return false;
#endif
}
10002e72:	bf14      	ite	ne
10002e74:	2001      	movne	r0, #1
10002e76:	2000      	moveq	r0, #0
10002e78:	4770      	bx	lr
10002e7a:	bf00      	nop
10002e7c:	40281000 	.word	0x40281000
10002e80:	40280000 	.word	0x40280000

10002e84 <_cyhal_dma_dw_pm_callback>:
    switch(mode)
10002e84:	2902      	cmp	r1, #2
{
10002e86:	b538      	push	{r3, r4, r5, lr}
    switch(mode)
10002e88:	d01a      	beq.n	10002ec0 <_cyhal_dma_dw_pm_callback+0x3c>
10002e8a:	2908      	cmp	r1, #8
10002e8c:	d018      	beq.n	10002ec0 <_cyhal_dma_dw_pm_callback+0x3c>
10002e8e:	2901      	cmp	r1, #1
10002e90:	d113      	bne.n	10002eba <_cyhal_dma_dw_pm_callback+0x36>
10002e92:	4d0d      	ldr	r5, [pc, #52]	@ (10002ec8 <_cyhal_dma_dw_pm_callback+0x44>)
            for (uint8_t i = 0; i < _CYHAL_DMA_DW_NUM_CHANNELS && !block_transition; i++)
10002e94:	2400      	movs	r4, #0
                block_transition |= (_cyhal_dma_dw_config_structs[i] != NULL) && _cyhal_dma_dw_is_busy(_cyhal_dma_dw_config_structs[i]);
10002e96:	f855 0b04 	ldr.w	r0, [r5], #4
10002e9a:	b108      	cbz	r0, 10002ea0 <_cyhal_dma_dw_pm_callback+0x1c>
10002e9c:	f7ff ffde 	bl	10002e5c <_cyhal_dma_dw_is_busy>
            for (uint8_t i = 0; i < _CYHAL_DMA_DW_NUM_CHANNELS && !block_transition; i++)
10002ea0:	3401      	adds	r4, #1
10002ea2:	b2e4      	uxtb	r4, r4
10002ea4:	2c20      	cmp	r4, #32
                block_transition |= (_cyhal_dma_dw_config_structs[i] != NULL) && _cyhal_dma_dw_is_busy(_cyhal_dma_dw_config_structs[i]);
10002ea6:	f000 0301 	and.w	r3, r0, #1
            for (uint8_t i = 0; i < _CYHAL_DMA_DW_NUM_CHANNELS && !block_transition; i++)
10002eaa:	d002      	beq.n	10002eb2 <_cyhal_dma_dw_pm_callback+0x2e>
10002eac:	2800      	cmp	r0, #0
10002eae:	d0f2      	beq.n	10002e96 <_cyhal_dma_dw_pm_callback+0x12>
10002eb0:	2301      	movs	r3, #1
            _cyhal_dma_dw_pm_transition_pending = !block_transition;
10002eb2:	4a06      	ldr	r2, [pc, #24]	@ (10002ecc <_cyhal_dma_dw_pm_callback+0x48>)
10002eb4:	f083 0301 	eor.w	r3, r3, #1
10002eb8:	7013      	strb	r3, [r2, #0]
}
10002eba:	4b04      	ldr	r3, [pc, #16]	@ (10002ecc <_cyhal_dma_dw_pm_callback+0x48>)
10002ebc:	7818      	ldrb	r0, [r3, #0]
10002ebe:	bd38      	pop	{r3, r4, r5, pc}
            _cyhal_dma_dw_pm_transition_pending = false;
10002ec0:	4b02      	ldr	r3, [pc, #8]	@ (10002ecc <_cyhal_dma_dw_pm_callback+0x48>)
10002ec2:	2200      	movs	r2, #0
10002ec4:	701a      	strb	r2, [r3, #0]
            break;
10002ec6:	e7f8      	b.n	10002eba <_cyhal_dma_dw_pm_callback+0x36>
10002ec8:	08002ab0 	.word	0x08002ab0
10002ecc:	08002b30 	.word	0x08002b30

10002ed0 <_cyhal_dma_dw_disconnect_digital>:
    return CY_RSLT_SUCCESS;
}

cy_rslt_t _cyhal_dma_dw_disconnect_digital(cyhal_dma_t *obj, cyhal_source_t source, cyhal_dma_input_t input)
{
    if(input != CYHAL_DMA_INPUT_TRIGGER_SINGLE_ELEMENT &&
10002ed0:	2a02      	cmp	r2, #2
{
10002ed2:	b510      	push	{r4, lr}
10002ed4:	4604      	mov	r4, r0
10002ed6:	4608      	mov	r0, r1
    if(input != CYHAL_DMA_INPUT_TRIGGER_SINGLE_ELEMENT &&
10002ed8:	d810      	bhi.n	10002efc <_cyhal_dma_dw_disconnect_digital+0x2c>
    CY_ASSERT(obj->source != CYHAL_TRIGGER_CPUSS_ZERO);

    // There is no option to totally disable. Just reset to default.
    // NOTE: Use .interruptType since it matches the desired .triggerInType from configure(), but
    // is not modified by connect/disconnect functions
    obj->descriptor.dw.ctl &= ~CY_DMA_CTL_TR_IN_TYPE_Msk;
10002eda:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    return (cyhal_dest_t)(CYHAL_TRIGGER_CPUSS_DW0_TR_IN0 + (block_num * CPUSS_DW0_CH_NR) + channel_num);
10002edc:	7861      	ldrb	r1, [r4, #1]
    obj->descriptor.dw.ctl &= ~CY_DMA_CTL_TR_IN_TYPE_Msk;
10002ede:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
    obj->descriptor.dw.ctl |= _VAL2FLD(CY_DMA_CTL_TR_IN_TYPE, _cyhal_dma_dw_default_descriptor_config.interruptType);
10002ee2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
10002ee6:	6463      	str	r3, [r4, #68]	@ 0x44
    return (cyhal_dest_t)(CYHAL_TRIGGER_CPUSS_DW0_TR_IN0 + (block_num * CPUSS_DW0_CH_NR) + channel_num);
10002ee8:	78a3      	ldrb	r3, [r4, #2]
10002eea:	3302      	adds	r3, #2
    SCB_CleanDCache_by_Addr((void *)&(obj->descriptor), sizeof(obj->descriptor));
    #endif /* defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U) */

    cyhal_dest_t dest = _cyhal_dma_dw_get_dest(obj->resource.block_num, obj->resource.channel_num);

    cy_rslt_t rslt = _cyhal_disconnect_signal(source, dest);
10002eec:	eb03 1101 	add.w	r1, r3, r1, lsl #4
10002ef0:	f000 fa32 	bl	10003358 <_cyhal_disconnect_signal>
    if (CY_RSLT_SUCCESS == rslt)
10002ef4:	b908      	cbnz	r0, 10002efa <_cyhal_dma_dw_disconnect_digital+0x2a>
    {
        obj->source = CYHAL_TRIGGER_CPUSS_ZERO;
10002ef6:	f8a4 0070 	strh.w	r0, [r4, #112]	@ 0x70
    }

    return rslt;
}
10002efa:	bd10      	pop	{r4, pc}
        return CYHAL_DMA_RSLT_ERR_INVALID_PARAMETER;
10002efc:	4800      	ldr	r0, [pc, #0]	@ (10002f00 <_cyhal_dma_dw_disconnect_digital+0x30>)
10002efe:	e7fc      	b.n	10002efa <_cyhal_dma_dw_disconnect_digital+0x2a>
10002f00:	04020601 	.word	0x04020601

10002f04 <_cyhal_dma_dw_disable_output>:

cy_rslt_t _cyhal_dma_dw_disable_output(cyhal_dma_t *obj, cyhal_dma_output_t output)
{
    if(output != CYHAL_DMA_OUTPUT_TRIGGER_SINGLE_ELEMENT &&
10002f04:	2902      	cmp	r1, #2
       output != CYHAL_DMA_OUTPUT_TRIGGER_SINGLE_BURST &&
       output != CYHAL_DMA_OUTPUT_TRIGGER_ALL_ELEMENTS)
        return CYHAL_DMA_RSLT_ERR_INVALID_PARAMETER;

    // There is no option to totally disable. Just reset to default.
    obj->descriptor.dw.ctl &= ~CY_DMA_CTL_TR_OUT_TYPE_Msk;
10002f06:	bf9f      	itttt	ls
10002f08:	6c43      	ldrls	r3, [r0, #68]	@ 0x44
    obj->descriptor.dw.ctl |= _VAL2FLD(CY_DMA_CTL_TR_OUT_TYPE, _cyhal_dma_dw_default_descriptor_config.triggerOutType);
10002f0a:	f043 0330 	orrls.w	r3, r3, #48	@ 0x30
10002f0e:	6443      	strls	r3, [r0, #68]	@ 0x44
    #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    SCB_CleanDCache_by_Addr((void *)&(obj->descriptor), sizeof(obj->descriptor));
    #endif /* defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U) */

    return CY_RSLT_SUCCESS;
10002f10:	2000      	movls	r0, #0
        return CYHAL_DMA_RSLT_ERR_INVALID_PARAMETER;
10002f12:	bf88      	it	hi
10002f14:	4800      	ldrhi	r0, [pc, #0]	@ (10002f18 <_cyhal_dma_dw_disable_output+0x14>)
}
10002f16:	4770      	bx	lr
10002f18:	04020601 	.word	0x04020601

10002f1c <_cyhal_get_bit_position>:
static cy_rslt_t _cyhal_get_bit_position(cyhal_resource_t type, uint8_t block, uint8_t channel, uint16_t* bitPosition)
{
    cy_rslt_t result;
#if defined(COMPONENT_CAT1A) || defined(COMPONENT_CAT1B) || defined(COMPONENT_CAT1C) || defined(COMPONENT_CAT1D)
    /* For backwards compatability. */
    if (type == CYHAL_RSC_CLKPATH)
10002f1c:	2804      	cmp	r0, #4
{
10002f1e:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (type == CYHAL_RSC_CLKPATH)
10002f20:	d016      	beq.n	10002f50 <_cyhal_get_bit_position+0x34>
        channel = block;
        block = CYHAL_CLOCK_BLOCK_PATHMUX;
        type = CYHAL_RSC_CLOCK;
    }
#endif
    result =  (type < CYHAL_RSC_INVALID) ? CY_RSLT_SUCCESS : CYHAL_HWMGR_RSLT_ERR_INVALID;
10002f22:	281d      	cmp	r0, #29
10002f24:	d812      	bhi.n	10002f4c <_cyhal_get_bit_position+0x30>
    return (cyhal_has_channels & (1 << type)) > 0;
}

static inline uint16_t _cyhal_get_resource_offset(cyhal_resource_t type)
{
    return cyhal_resource_offsets[type];
10002f26:	4d1d      	ldr	r5, [pc, #116]	@ (10002f9c <_cyhal_get_bit_position+0x80>)
    if( result == CY_RSLT_SUCCESS )
    {
        uint16_t offsetRsc = _cyhal_get_resource_offset(type);
        // Offset that is one past the beginning of the next resource (or one past the end of the array).
        // Our offset must be strictly less than that
        uint16_t offsetEndOfRsc = ((1u + type) < _CYHAL_RESOURCES)
10002f28:	281d      	cmp	r0, #29
10002f2a:	f835 6010 	ldrh.w	r6, [r5, r0, lsl #1]
10002f2e:	d02f      	beq.n	10002f90 <_cyhal_get_bit_position+0x74>
            ? _cyhal_get_resource_offset((cyhal_resource_t)(type + 1))
10002f30:	1c44      	adds	r4, r0, #1
10002f32:	b2e4      	uxtb	r4, r4
    return (cyhal_has_channels & (1 << type)) > 0;
10002f34:	2701      	movs	r7, #1
    return cyhal_resource_offsets[type];
10002f36:	f835 4014 	ldrh.w	r4, [r5, r4, lsl #1]
    return (cyhal_has_channels & (1 << type)) > 0;
10002f3a:	4d19      	ldr	r5, [pc, #100]	@ (10002fa0 <_cyhal_get_bit_position+0x84>)
10002f3c:	4087      	lsls	r7, r0
10002f3e:	403d      	ands	r5, r7
            : CY_TOTAL_ALLOCATABLE_ITEMS;

        if (_cyhal_uses_channels(type))
10002f40:	b345      	cbz	r5, 10002f94 <_cyhal_get_bit_position+0x78>
}

static inline const _cyhal_hwmgr_offset_t* _cyhal_get_block_offsets(cyhal_resource_t type)
{
    switch (type)
10002f42:	3803      	subs	r0, #3
10002f44:	b2c0      	uxtb	r0, r0
10002f46:	2818      	cmp	r0, #24
10002f48:	d906      	bls.n	10002f58 <_cyhal_get_bit_position+0x3c>
        {
            const _cyhal_hwmgr_offset_t* blockOffsets = _cyhal_get_block_offsets(type);
            *bitPosition = offsetEndOfRsc;
10002f4a:	801c      	strh	r4, [r3, #0]
            *bitPosition = offsetRsc + block;
        }

        result = (*bitPosition < offsetEndOfRsc)
            ? CY_RSLT_SUCCESS
            : CYHAL_HWMGR_RSLT_ERR_INVALID;
10002f4c:	4815      	ldr	r0, [pc, #84]	@ (10002fa4 <_cyhal_get_bit_position+0x88>)
    }
    return result;
}
10002f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        channel = block;
10002f50:	460a      	mov	r2, r1
        type = CYHAL_RSC_CLOCK;
10002f52:	2005      	movs	r0, #5
        block = CYHAL_CLOCK_BLOCK_PATHMUX;
10002f54:	210d      	movs	r1, #13
10002f56:	e7e6      	b.n	10002f26 <_cyhal_get_bit_position+0xa>
10002f58:	4d13      	ldr	r5, [pc, #76]	@ (10002fa8 <_cyhal_get_bit_position+0x8c>)
            *bitPosition = offsetEndOfRsc;
10002f5a:	801c      	strh	r4, [r3, #0]
10002f5c:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
            if (blockOffsets != NULL)
10002f60:	2d00      	cmp	r5, #0
10002f62:	d0f3      	beq.n	10002f4c <_cyhal_get_bit_position+0x30>
}

// Gets the number of block offset entries, only valid for blocks which have channels.
static inline uint8_t _cyhal_get_block_offset_length(cyhal_resource_t type)
{
    switch (type)
10002f64:	4f11      	ldr	r7, [pc, #68]	@ (10002fac <_cyhal_get_bit_position+0x90>)
10002f66:	5c38      	ldrb	r0, [r7, r0]
                if (block < blocks)
10002f68:	4288      	cmp	r0, r1
10002f6a:	d9ef      	bls.n	10002f4c <_cyhal_get_bit_position+0x30>
                    *bitPosition = offsetRsc + blockOffsets[block] + channel;
10002f6c:	f835 c011 	ldrh.w	ip, [r5, r1, lsl #1]
10002f70:	004f      	lsls	r7, r1, #1
10002f72:	4432      	add	r2, r6
                    if ((block + 1) < blocks)
10002f74:	3101      	adds	r1, #1
                    *bitPosition = offsetRsc + blockOffsets[block] + channel;
10002f76:	4462      	add	r2, ip
                    if ((block + 1) < blocks)
10002f78:	4281      	cmp	r1, r0
                    *bitPosition = offsetRsc + blockOffsets[block] + channel;
10002f7a:	801a      	strh	r2, [r3, #0]
                    if ((block + 1) < blocks)
10002f7c:	da03      	bge.n	10002f86 <_cyhal_get_bit_position+0x6a>
                        offsetEndOfRsc = offsetRsc + blockOffsets[block + 1];
10002f7e:	443d      	add	r5, r7
10002f80:	886c      	ldrh	r4, [r5, #2]
10002f82:	4434      	add	r4, r6
10002f84:	b2a4      	uxth	r4, r4
            : CYHAL_HWMGR_RSLT_ERR_INVALID;
10002f86:	881b      	ldrh	r3, [r3, #0]
10002f88:	42a3      	cmp	r3, r4
10002f8a:	d2df      	bcs.n	10002f4c <_cyhal_get_bit_position+0x30>
10002f8c:	2000      	movs	r0, #0
    return result;
10002f8e:	e7de      	b.n	10002f4e <_cyhal_get_bit_position+0x32>
        uint16_t offsetEndOfRsc = ((1u + type) < _CYHAL_RESOURCES)
10002f90:	f44f 7486 	mov.w	r4, #268	@ 0x10c
            *bitPosition = offsetRsc + block;
10002f94:	1872      	adds	r2, r6, r1
10002f96:	801a      	strh	r2, [r3, #0]
10002f98:	e7f5      	b.n	10002f86 <_cyhal_get_bit_position+0x6a>
10002f9a:	bf00      	nop
10002f9c:	1000c750 	.word	0x1000c750
10002fa0:	0c0a0b28 	.word	0x0c0a0b28
10002fa4:	04020d00 	.word	0x04020d00
10002fa8:	1000c66c 	.word	0x1000c66c
10002fac:	1000c6d0 	.word	0x1000c6d0

10002fb0 <cyhal_hwmgr_init>:
*******************************************************************************/

cy_rslt_t cyhal_hwmgr_init(void)
{
    return CY_RSLT_SUCCESS;
}
10002fb0:	2000      	movs	r0, #0
10002fb2:	4770      	bx	lr

10002fb4 <cyhal_hwmgr_reserve>:

cy_rslt_t cyhal_hwmgr_reserve(const cyhal_resource_inst_t* resource)
{
10002fb4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
10002fb8:	4604      	mov	r4, r0
    bool isSet;
    uint32_t state = cyhal_system_critical_section_enter();
10002fba:	f7ff fd82 	bl	10002ac2 <Cy_SysLib_EnterCriticalSection>
    cy_rslt_t rslt = _cyhal_is_set(cyhal_used, resource->type, resource->block_num, resource->channel_num, &isSet);
10002fbe:	f894 8000 	ldrb.w	r8, [r4]
10002fc2:	7861      	ldrb	r1, [r4, #1]
10002fc4:	78a2      	ldrb	r2, [r4, #2]
    uint32_t state = cyhal_system_critical_section_enter();
10002fc6:	4606      	mov	r6, r0
    cy_rslt_t status = _cyhal_get_bit_position(type, block, channel, &bitPosition);
10002fc8:	f10d 030e 	add.w	r3, sp, #14
10002fcc:	4640      	mov	r0, r8
10002fce:	e9cd 1200 	strd	r1, r2, [sp]
10002fd2:	f7ff ffa3 	bl	10002f1c <_cyhal_get_bit_position>
    if (status == CY_RSLT_SUCCESS)
10002fd6:	4604      	mov	r4, r0
10002fd8:	b9f8      	cbnz	r0, 1000301a <cyhal_hwmgr_reserve+0x66>
        uint8_t byte = (uint8_t)(bitPosition >> CY_BYTE_NUM_SHIFT);
10002fda:	f8bd 300e 	ldrh.w	r3, [sp, #14]
        *isSet = (used[byte] & (1 << bit));
10002fde:	4f13      	ldr	r7, [pc, #76]	@ (1000302c <cyhal_hwmgr_reserve+0x78>)
10002fe0:	f3c3 00c7 	ubfx	r0, r3, #3, #8
10002fe4:	2501      	movs	r5, #1
10002fe6:	5c38      	ldrb	r0, [r7, r0]
10002fe8:	f003 0307 	and.w	r3, r3, #7
10002fec:	fa05 f303 	lsl.w	r3, r5, r3
    if (rslt == CY_RSLT_SUCCESS && isSet)
10002ff0:	4218      	tst	r0, r3
10002ff2:	d119      	bne.n	10003028 <cyhal_hwmgr_reserve+0x74>
    cy_rslt_t status = _cyhal_get_bit_position(type, block, channel, &bitPosition);
10002ff4:	e9dd 1200 	ldrd	r1, r2, [sp]
10002ff8:	f10d 030e 	add.w	r3, sp, #14
10002ffc:	4640      	mov	r0, r8
10002ffe:	f7ff ff8d 	bl	10002f1c <_cyhal_get_bit_position>
    if (status == CY_RSLT_SUCCESS)
10003002:	4604      	mov	r4, r0
10003004:	b948      	cbnz	r0, 1000301a <cyhal_hwmgr_reserve+0x66>
        uint8_t byte = (uint8_t)(bitPosition >> CY_BYTE_NUM_SHIFT);
10003006:	f8bd 300e 	ldrh.w	r3, [sp, #14]
        used[byte] |= (1 << bit);
1000300a:	f3c3 02c7 	ubfx	r2, r3, #3, #8
1000300e:	f003 0307 	and.w	r3, r3, #7
10003012:	409d      	lsls	r5, r3
10003014:	5cbb      	ldrb	r3, [r7, r2]
10003016:	431d      	orrs	r5, r3
10003018:	54bd      	strb	r5, [r7, r2]

    if (rslt == CY_RSLT_SUCCESS)
    {
        rslt = _cyhal_set_bit(cyhal_used, resource->type, resource->block_num, resource->channel_num);
    }
    cyhal_system_critical_section_exit(state);
1000301a:	4630      	mov	r0, r6
1000301c:	f7ff fd55 	bl	10002aca <Cy_SysLib_ExitCriticalSection>

    return rslt;
}
10003020:	4620      	mov	r0, r4
10003022:	b004      	add	sp, #16
10003024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rslt = CYHAL_HWMGR_RSLT_ERR_INUSE;
10003028:	4c01      	ldr	r4, [pc, #4]	@ (10003030 <cyhal_hwmgr_reserve+0x7c>)
1000302a:	e7f6      	b.n	1000301a <cyhal_hwmgr_reserve+0x66>
1000302c:	08002b31 	.word	0x08002b31
10003030:	04020d01 	.word	0x04020d01

10003034 <cyhal_hwmgr_free>:

void cyhal_hwmgr_free(const cyhal_resource_inst_t* resource)
{
10003034:	b537      	push	{r0, r1, r2, r4, r5, lr}
10003036:	4604      	mov	r4, r0
    uint32_t state = cyhal_system_critical_section_enter();
10003038:	f7ff fd43 	bl	10002ac2 <Cy_SysLib_EnterCriticalSection>
    cy_rslt_t status = _cyhal_get_bit_position(type, block, channel, &bitPosition);
1000303c:	78a2      	ldrb	r2, [r4, #2]
1000303e:	7861      	ldrb	r1, [r4, #1]
    uint32_t state = cyhal_system_critical_section_enter();
10003040:	4605      	mov	r5, r0
    cy_rslt_t status = _cyhal_get_bit_position(type, block, channel, &bitPosition);
10003042:	f10d 0306 	add.w	r3, sp, #6
10003046:	7820      	ldrb	r0, [r4, #0]
10003048:	f7ff ff68 	bl	10002f1c <_cyhal_get_bit_position>
    if (status == CY_RSLT_SUCCESS)
1000304c:	b960      	cbnz	r0, 10003068 <cyhal_hwmgr_free+0x34>
        uint8_t byte = (uint8_t)(bitPosition >> CY_BYTE_NUM_SHIFT);
1000304e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        used[byte] &= ~(1 << bit);
10003052:	4808      	ldr	r0, [pc, #32]	@ (10003074 <cyhal_hwmgr_free+0x40>)
10003054:	f3c3 01c7 	ubfx	r1, r3, #3, #8
10003058:	2201      	movs	r2, #1
1000305a:	f003 0307 	and.w	r3, r3, #7
1000305e:	409a      	lsls	r2, r3
10003060:	5c43      	ldrb	r3, [r0, r1]
10003062:	ea23 0302 	bic.w	r3, r3, r2
10003066:	5443      	strb	r3, [r0, r1]
    cy_rslt_t rslt = _cyhal_clear_bit(cyhal_used, resource->type, resource->block_num, resource->channel_num);
    CY_UNUSED_PARAMETER(rslt); /* CY_ASSERT only processes in DEBUG, ignores for others */
    CY_ASSERT(CY_RSLT_SUCCESS == rslt);
    cyhal_system_critical_section_exit(state);
10003068:	4628      	mov	r0, r5
}
1000306a:	b003      	add	sp, #12
1000306c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    cyhal_system_critical_section_exit(state);
10003070:	f7ff bd2b 	b.w	10002aca <Cy_SysLib_ExitCriticalSection>
10003074:	08002b31 	.word	0x08002b31

10003078 <get_peri_block_from_trigger>:
        {
            blk_idx=i;
        }
    }
    return blk_idx;
}
10003078:	2000      	movs	r0, #0
1000307a:	4770      	bx	lr

1000307c <_cyhal_read_mux_input_idx>:
    else
    {
        mux_reg = PERI_TR_GR_TR_CTL(mux_group, mux_output_idx);
    }
#else // CY_IP_MXPERI_VERSION == 1
    mux_reg = PERI_TR_GR_TR_CTL(mux_group, mux_output_idx);
1000307c:	4b07      	ldr	r3, [pc, #28]	@ (1000309c <_cyhal_read_mux_input_idx+0x20>)
1000307e:	681a      	ldr	r2, [r3, #0]
{
10003080:	b510      	push	{r4, lr}
    mux_reg = PERI_TR_GR_TR_CTL(mux_group, mux_output_idx);
10003082:	f8b2 3074 	ldrh.w	r3, [r2, #116]	@ 0x74
10003086:	6894      	ldr	r4, [r2, #8]
10003088:	f8b2 2076 	ldrh.w	r2, [r2, #118]	@ 0x76
1000308c:	4423      	add	r3, r4
1000308e:	fb00 3002 	mla	r0, r0, r2, r3
10003092:	eb00 0181 	add.w	r1, r0, r1, lsl #2
10003096:	6808      	ldr	r0, [r1, #0]
#if (CY_IP_MXPERI_VERSION >= 1u) || (CY_IP_MXSPERI >= 1u)
    return _FLD2VAL(PERI_TR_GR_TR_OUT_CTL_TR_SEL, mux_reg);
#elif CY_IP_M0S8PERI_VERSION == 1u
    return _FLD2VAL(PERI_TR_CTL_TR_SEL, mux_reg);
#endif
}
10003098:	b2c0      	uxtb	r0, r0
1000309a:	bd10      	pop	{r4, pc}
1000309c:	08002c40 	.word	0x08002c40

100030a0 <_cyhal_interconnect_change_connection_direct>:
    }
}
#elif CY_IP_MXPERI_VERSION == 1u
/* Change a HAL trigger connection where a mux is involved */
static cy_rslt_t _cyhal_interconnect_change_connection_direct(uint8_t mux, uint8_t input_idx, uint8_t output_idx, cyhal_signal_type_t type, bool connect)
{
100030a0:	b570      	push	{r4, r5, r6, lr}
100030a2:	f89d 5010 	ldrb.w	r5, [sp, #16]
100030a6:	4604      	mov	r4, r0
    if (connect)
100030a8:	b185      	cbz	r5, 100030cc <_cyhal_interconnect_change_connection_direct+0x2c>
    return ((uint32_t)(mux_group - _CYHAL_INTERCONNECT_BASE_IDX[get_peri_block_from_trigger(mux_group)]));
100030aa:	f7ff ffe5 	bl	10003078 <get_peri_block_from_trigger>
    {
        uint32_t in_trig = CY_TRIGMUX_INPUT_LINE(mux, input_idx);
        uint32_t out_trig = CY_TRIGMUX_OUTPUT_LINE(mux, output_idx);
100030ae:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
100030b2:	ea42 4500 	orr.w	r5, r2, r0, lsl #16
        uint32_t in_trig = CY_TRIGMUX_INPUT_LINE(mux, input_idx);
100030b6:	ea41 2404 	orr.w	r4, r1, r4, lsl #8

        return Cy_TrigMux_Connect(in_trig, out_trig, false, (en_trig_type_t)type);
100030ba:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
100030be:	f045 4180 	orr.w	r1, r5, #1073741824	@ 0x40000000
100030c2:	2200      	movs	r2, #0
    else
    {
        PERI_TR_GR_TR_CTL(mux, output_idx) = 0;
        return CY_RSLT_SUCCESS;
    }
}
100030c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return Cy_TrigMux_Connect(in_trig, out_trig, false, (en_trig_type_t)type);
100030c8:	f003 bac2 	b.w	10006650 <Cy_TrigMux_Connect>
        PERI_TR_GR_TR_CTL(mux, output_idx) = 0;
100030cc:	4b07      	ldr	r3, [pc, #28]	@ (100030ec <_cyhal_interconnect_change_connection_direct+0x4c>)
100030ce:	6819      	ldr	r1, [r3, #0]
100030d0:	6888      	ldr	r0, [r1, #8]
100030d2:	f8b1 3074 	ldrh.w	r3, [r1, #116]	@ 0x74
100030d6:	f8b1 1076 	ldrh.w	r1, [r1, #118]	@ 0x76
100030da:	4403      	add	r3, r0
100030dc:	fb04 3001 	mla	r0, r4, r1, r3
100030e0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
100030e4:	6005      	str	r5, [r0, #0]
}
100030e6:	4628      	mov	r0, r5
100030e8:	bd70      	pop	{r4, r5, r6, pc}
100030ea:	bf00      	nop
100030ec:	08002c40 	.word	0x08002c40

100030f0 <_cyhal_interconnect_check_connection>:
#endif /* #if CY_IP_MXPERI_VERSION >= 2u || CY_IP_M0S8PERI_VERSION == 1u */

// Since both connect and disconnect need to derive mux group(s) and trigger
// indices, use this func to avoid duplicate code.
static cy_rslt_t _cyhal_interconnect_check_connection(cyhal_source_t source, cyhal_dest_t dest, cyhal_connect_type_t connect)
{
100030f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
100030f4:	4614      	mov	r4, r2
                : _cyhal_interconnect_change_connection_direct(mux_group, mux_group_1to1_offset, source_idx, dest_idx, type, connect == CYHAL_CONNECT_TYPE_CONNECT);
        }
    }
    return CYHAL_INTERCONNECT_RSLT_INVALID_CONNECTION;
#elif CY_IP_MXPERI_VERSION == 1u
    uint8_t dest_mux_group = cyhal_dest_to_mux[dest];
100030f6:	4a8e      	ldr	r2, [pc, #568]	@ (10003330 <_cyhal_interconnect_check_connection+0x240>)
100030f8:	5c57      	ldrb	r7, [r2, r1]
    uint8_t dest_mux_output_idx = cyhal_mux_dest_index[dest];
100030fa:	4a8e      	ldr	r2, [pc, #568]	@ (10003334 <_cyhal_interconnect_check_connection+0x244>)
{
100030fc:	b087      	sub	sp, #28
    uint8_t dest_mux_output_idx = cyhal_mux_dest_index[dest];
100030fe:	5c53      	ldrb	r3, [r2, r1]
10003100:	9302      	str	r3, [sp, #8]

    // Special case 1: DW sources connect to USB_DMA_BURSTEND destinations directly
    // through mux 9 so handle here.
    if(dest_mux_group == 9)
10003102:	2f09      	cmp	r7, #9
    cyhal_internal_source_t internal_src = _CYHAL_TRIGGER_GET_SOURCE_SIGNAL(source);
10003104:	ea4f 0650 	mov.w	r6, r0, lsr #1
    cyhal_signal_type_t type = _CYHAL_TRIGGER_GET_SOURCE_TYPE(source);
10003108:	f000 0b01 	and.w	fp, r0, #1
    if(dest_mux_group == 9)
1000310c:	d12b      	bne.n	10003166 <_cyhal_interconnect_check_connection+0x76>
    {
        if((internal_src < _CYHAL_TRIGGER_CPUSS_DW0_TR_OUT0) || (internal_src > _CYHAL_TRIGGER_CPUSS_DW1_TR_OUT15))
1000310e:	1fb2      	subs	r2, r6, #6
10003110:	2a1f      	cmp	r2, #31
10003112:	d904      	bls.n	1000311e <_cyhal_interconnect_check_connection+0x2e>
            return CYHAL_INTERCONNECT_RSLT_INVALID_CONNECTION;
10003114:	4a88      	ldr	r2, [pc, #544]	@ (10003338 <_cyhal_interconnect_check_connection+0x248>)
        : _cyhal_interconnect_change_connection_indirect(source_mux_group, source_mux_input_idx, source_mux_output_idx,
            dest_mux_group, dest_mux_input_idx, dest_mux_output_idx, type, connect == CYHAL_CONNECT_TYPE_CONNECT);
#else
#error Unrecognized PERI version
#endif
}
10003116:	4610      	mov	r0, r2
10003118:	b007      	add	sp, #28
1000311a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if((dest < CYHAL_TRIGGER_USB_DMA_BURSTEND0) || (dest > CYHAL_TRIGGER_USB_DMA_BURSTEND7))
1000311e:	f46f 75eb 	mvn.w	r5, #470	@ 0x1d6
10003122:	194a      	adds	r2, r1, r5
10003124:	b292      	uxth	r2, r2
10003126:	2a07      	cmp	r2, #7
10003128:	d8f4      	bhi.n	10003114 <_cyhal_interconnect_check_connection+0x24>
        uint8_t set_input_idx = _cyhal_read_mux_input_idx(9, mux9_output_idx);
1000312a:	b2d2      	uxtb	r2, r2
1000312c:	4611      	mov	r1, r2
1000312e:	4638      	mov	r0, r7
10003130:	9202      	str	r2, [sp, #8]
10003132:	f7ff ffa3 	bl	1000307c <_cyhal_read_mux_input_idx>
        if ((CYHAL_CONNECT_TYPE_DISCONNECT != connect) && (set_input_idx != 0))
10003136:	2c02      	cmp	r4, #2
10003138:	9a02      	ldr	r2, [sp, #8]
1000313a:	d002      	beq.n	10003142 <_cyhal_interconnect_check_connection+0x52>
1000313c:	b120      	cbz	r0, 10003148 <_cyhal_interconnect_check_connection+0x58>
            return CYHAL_INTERCONNECT_RSLT_ALREADY_CONNECTED;
1000313e:	4a7f      	ldr	r2, [pc, #508]	@ (1000333c <_cyhal_interconnect_check_connection+0x24c>)
10003140:	e7e9      	b.n	10003116 <_cyhal_interconnect_check_connection+0x26>
        else if ((CYHAL_CONNECT_TYPE_DISCONNECT == connect) && (set_input_idx == 0))
10003142:	b920      	cbnz	r0, 1000314e <_cyhal_interconnect_check_connection+0x5e>
            : CYHAL_INTERCONNECT_RSLT_INVALID_CONNECTION;
10003144:	4a7e      	ldr	r2, [pc, #504]	@ (10003340 <_cyhal_interconnect_check_connection+0x250>)
10003146:	e7e6      	b.n	10003116 <_cyhal_interconnect_check_connection+0x26>
                : _cyhal_interconnect_change_connection_direct(9, mux9_input_idx, mux9_output_idx, type, connect == CYHAL_CONNECT_TYPE_CONNECT);
10003148:	b90c      	cbnz	r4, 1000314e <_cyhal_interconnect_check_connection+0x5e>
1000314a:	2200      	movs	r2, #0
1000314c:	e7e3      	b.n	10003116 <_cyhal_interconnect_check_connection+0x26>
1000314e:	1e60      	subs	r0, r4, #1
10003150:	4244      	negs	r4, r0
10003152:	4144      	adcs	r4, r0
        uint16_t mux9_input_idx = (uint16_t)(internal_src - _CYHAL_TRIGGER_CPUSS_DW0_TR_OUT0) + 1;
10003154:	1f71      	subs	r1, r6, #5
                : _cyhal_interconnect_change_connection_direct(9, mux9_input_idx, mux9_output_idx, type, connect == CYHAL_CONNECT_TYPE_CONNECT);
10003156:	9400      	str	r4, [sp, #0]
10003158:	465b      	mov	r3, fp
1000315a:	b2c9      	uxtb	r1, r1
1000315c:	2009      	movs	r0, #9
                : _cyhal_interconnect_change_connection_direct(10, mux10_input_idx, mux10_output_idx, type, connect == CYHAL_CONNECT_TYPE_CONNECT);
1000315e:	f7ff ff9f 	bl	100030a0 <_cyhal_interconnect_change_connection_direct>
10003162:	4602      	mov	r2, r0
10003164:	e7d7      	b.n	10003116 <_cyhal_interconnect_check_connection+0x26>
    if((dest_mux_group == 10) && (dest >= CYHAL_TRIGGER_UDB_TR_DW_ACK0) && (dest <= CYHAL_TRIGGER_UDB_TR_DW_ACK7))
10003166:	2f0a      	cmp	r7, #10
10003168:	d134      	bne.n	100031d4 <_cyhal_interconnect_check_connection+0xe4>
1000316a:	f46f 72e6 	mvn.w	r2, #460	@ 0x1cc
1000316e:	188a      	adds	r2, r1, r2
10003170:	b292      	uxth	r2, r2
10003172:	2a07      	cmp	r2, #7
10003174:	d839      	bhi.n	100031ea <_cyhal_interconnect_check_connection+0xfa>
        if((internal_src < _CYHAL_TRIGGER_CPUSS_DW0_TR_OUT0) || (internal_src > _CYHAL_TRIGGER_CPUSS_DW1_TR_OUT15))
10003176:	1fb1      	subs	r1, r6, #6
10003178:	291f      	cmp	r1, #31
1000317a:	d8cb      	bhi.n	10003114 <_cyhal_interconnect_check_connection+0x24>
        uint8_t set_input_idx = _cyhal_read_mux_input_idx(10, mux10_output_idx);
1000317c:	b2d2      	uxtb	r2, r2
1000317e:	4611      	mov	r1, r2
10003180:	4638      	mov	r0, r7
10003182:	9202      	str	r2, [sp, #8]
10003184:	f7ff ff7a 	bl	1000307c <_cyhal_read_mux_input_idx>
        if ((CYHAL_CONNECT_TYPE_DISCONNECT != connect) && (set_input_idx != 0))
10003188:	2c02      	cmp	r4, #2
1000318a:	9a02      	ldr	r2, [sp, #8]
1000318c:	d004      	beq.n	10003198 <_cyhal_interconnect_check_connection+0xa8>
1000318e:	2800      	cmp	r0, #0
10003190:	d1d5      	bne.n	1000313e <_cyhal_interconnect_check_connection+0x4e>
                : _cyhal_interconnect_change_connection_direct(10, mux10_input_idx, mux10_output_idx, type, connect == CYHAL_CONNECT_TYPE_CONNECT);
10003192:	2c00      	cmp	r4, #0
10003194:	d0d9      	beq.n	1000314a <_cyhal_interconnect_check_connection+0x5a>
10003196:	e001      	b.n	1000319c <_cyhal_interconnect_check_connection+0xac>
        else if ((CYHAL_CONNECT_TYPE_DISCONNECT == connect) && (set_input_idx == 0))
10003198:	2800      	cmp	r0, #0
1000319a:	d0d3      	beq.n	10003144 <_cyhal_interconnect_check_connection+0x54>
                : _cyhal_interconnect_change_connection_direct(10, mux10_input_idx, mux10_output_idx, type, connect == CYHAL_CONNECT_TYPE_CONNECT);
1000319c:	1e63      	subs	r3, r4, #1
1000319e:	425c      	negs	r4, r3
100031a0:	415c      	adcs	r4, r3
        uint16_t mux10_input_idx = (uint16_t)(internal_src - _CYHAL_TRIGGER_CPUSS_DW0_TR_OUT0) + 1;
100031a2:	1f71      	subs	r1, r6, #5
                : _cyhal_interconnect_change_connection_direct(10, mux10_input_idx, mux10_output_idx, type, connect == CYHAL_CONNECT_TYPE_CONNECT);
100031a4:	9400      	str	r4, [sp, #0]
100031a6:	465b      	mov	r3, fp
100031a8:	b2c9      	uxtb	r1, r1
100031aa:	200a      	movs	r0, #10
100031ac:	e7d7      	b.n	1000315e <_cyhal_interconnect_check_connection+0x6e>
            if(cyhal_mux_to_sources[source_mux_group][source_mux_input_idx] == internal_src)
100031ae:	f8de 1000 	ldr.w	r1, [lr]
100031b2:	f831 1019 	ldrh.w	r1, [r1, r9, lsl #1]
100031b6:	42b1      	cmp	r1, r6
100031b8:	f109 0a01 	add.w	sl, r9, #1
100031bc:	f000 80a7 	beq.w	1000330e <_cyhal_interconnect_check_connection+0x21e>
100031c0:	46d1      	mov	r9, sl
100031c2:	fa1f f189 	uxth.w	r1, r9
        for(source_mux_input_idx = 0; source_mux_input_idx < cyhal_sources_per_mux[source_mux_group]; source_mux_input_idx++)
100031c6:	4588      	cmp	r8, r1
100031c8:	9104      	str	r1, [sp, #16]
100031ca:	d8f0      	bhi.n	100031ae <_cyhal_interconnect_check_connection+0xbe>
    for(source_mux_group = 10; source_mux_group < 15; source_mux_group++)
100031cc:	3501      	adds	r5, #1
100031ce:	2d0f      	cmp	r5, #15
100031d0:	d103      	bne.n	100031da <_cyhal_interconnect_check_connection+0xea>
100031d2:	e79f      	b.n	10003114 <_cyhal_interconnect_check_connection+0x24>
100031d4:	250a      	movs	r5, #10
        for(source_mux_input_idx = 0; source_mux_input_idx < cyhal_sources_per_mux[source_mux_group]; source_mux_input_idx++)
100031d6:	485b      	ldr	r0, [pc, #364]	@ (10003344 <_cyhal_interconnect_check_connection+0x254>)
            if(cyhal_mux_to_sources[source_mux_group][source_mux_input_idx] == internal_src)
100031d8:	4b5b      	ldr	r3, [pc, #364]	@ (10003348 <_cyhal_interconnect_check_connection+0x258>)
        for(source_mux_input_idx = 0; source_mux_input_idx < cyhal_sources_per_mux[source_mux_group]; source_mux_input_idx++)
100031da:	f830 8015 	ldrh.w	r8, [r0, r5, lsl #1]
100031de:	b2aa      	uxth	r2, r5
100031e0:	f04f 0900 	mov.w	r9, #0
            if(cyhal_mux_to_sources[source_mux_group][source_mux_input_idx] == internal_src)
100031e4:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
100031e8:	e7eb      	b.n	100031c2 <_cyhal_interconnect_check_connection+0xd2>
100031ea:	463d      	mov	r5, r7
100031ec:	e7f3      	b.n	100031d6 <_cyhal_interconnect_check_connection+0xe6>
        if((cyhal_mux_to_sources[dest_mux_group][i] >= dest_mux_input_line_low) &&
100031ee:	4a56      	ldr	r2, [pc, #344]	@ (10003348 <_cyhal_interconnect_check_connection+0x258>)
100031f0:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
100031f4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
100031f8:	4596      	cmp	lr, r2
100031fa:	d80b      	bhi.n	10003214 <_cyhal_interconnect_check_connection+0x124>
100031fc:	429a      	cmp	r2, r3
100031fe:	d809      	bhi.n	10003214 <_cyhal_interconnect_check_connection+0x124>
            if(dest_mux_input_line_low_idx > i)
10003200:	4286      	cmp	r6, r0
                source_mux_start_idx = (uint16_t)(cyhal_mux_to_sources[dest_mux_group][i] - dest_mux_input_line_low);
10003202:	bf82      	ittt	hi
10003204:	eba2 020e 	subhi.w	r2, r2, lr
10003208:	fa1f fc82 	uxthhi.w	ip, r2
1000320c:	4606      	movhi	r6, r0
            if(dest_mux_input_line_high_idx < i)
1000320e:	4582      	cmp	sl, r0
10003210:	bf38      	it	cc
10003212:	4682      	movcc	sl, r0
    for(uint16_t i = 0; i < cyhal_sources_per_mux[dest_mux_group]; i++)
10003214:	3101      	adds	r1, #1
10003216:	b288      	uxth	r0, r1
10003218:	4580      	cmp	r8, r0
1000321a:	d8e8      	bhi.n	100031ee <_cyhal_interconnect_check_connection+0xfe>
    for(source_mux_output_idx = source_mux_start_idx; source_mux_output_idx < (source_mux_start_idx + (dest_mux_input_line_high_idx - dest_mux_input_line_low_idx + 1)); source_mux_output_idx++)
1000321c:	ebaa 0a06 	sub.w	sl, sl, r6
10003220:	fa5f f38c 	uxtb.w	r3, ip
10003224:	f10a 0a01 	add.w	sl, sl, #1
10003228:	9303      	str	r3, [sp, #12]
1000322a:	4698      	mov	r8, r3
1000322c:	eb0a 030c 	add.w	r3, sl, ip
10003230:	9305      	str	r3, [sp, #20]
        if((connect != CYHAL_CONNECT_TYPE_DISCONNECT) && _cyhal_read_mux_input_idx(source_mux_group, source_mux_output_idx) == 0)
10003232:	fa5f fa85 	uxtb.w	sl, r5
    for(source_mux_output_idx = source_mux_start_idx; source_mux_output_idx < (source_mux_start_idx + (dest_mux_input_line_high_idx - dest_mux_input_line_low_idx + 1)); source_mux_output_idx++)
10003236:	9b05      	ldr	r3, [sp, #20]
10003238:	4598      	cmp	r8, r3
1000323a:	db03      	blt.n	10003244 <_cyhal_interconnect_check_connection+0x154>
            : CYHAL_INTERCONNECT_RSLT_INVALID_CONNECTION;
1000323c:	2c02      	cmp	r4, #2
1000323e:	f47f af69 	bne.w	10003114 <_cyhal_interconnect_check_connection+0x24>
10003242:	e77f      	b.n	10003144 <_cyhal_interconnect_check_connection+0x54>
        if((connect != CYHAL_CONNECT_TYPE_DISCONNECT) && _cyhal_read_mux_input_idx(source_mux_group, source_mux_output_idx) == 0)
10003244:	2c02      	cmp	r4, #2
10003246:	4641      	mov	r1, r8
10003248:	4650      	mov	r0, sl
1000324a:	d043      	beq.n	100032d4 <_cyhal_interconnect_check_connection+0x1e4>
1000324c:	f7ff ff16 	bl	1000307c <_cyhal_read_mux_input_idx>
10003250:	2800      	cmp	r0, #0
10003252:	d13a      	bne.n	100032ca <_cyhal_interconnect_check_connection+0x1da>
        : _cyhal_interconnect_change_connection_indirect(source_mux_group, source_mux_input_idx, source_mux_output_idx,
10003254:	2c00      	cmp	r4, #0
10003256:	f43f af78 	beq.w	1000314a <_cyhal_interconnect_check_connection+0x5a>
            dest_mux_input_idx = dest_mux_input_line_low_idx + source_mux_output_idx - source_mux_start_idx;
1000325a:	9b03      	ldr	r3, [sp, #12]
1000325c:	1af6      	subs	r6, r6, r3
1000325e:	4446      	add	r6, r8
    if(connect)
10003260:	2c01      	cmp	r4, #1
            dest_mux_input_idx = dest_mux_input_line_low_idx + source_mux_output_idx - source_mux_start_idx;
10003262:	b2f6      	uxtb	r6, r6
    if(connect)
10003264:	d13c      	bne.n	100032e0 <_cyhal_interconnect_check_connection+0x1f0>
        if(_cyhal_read_mux_input_idx(dest_mux_group, dest_mux_output_idx) != 0)
10003266:	9902      	ldr	r1, [sp, #8]
10003268:	4638      	mov	r0, r7
1000326a:	f7ff ff07 	bl	1000307c <_cyhal_read_mux_input_idx>
1000326e:	4602      	mov	r2, r0
10003270:	2800      	cmp	r0, #0
10003272:	f47f af64 	bne.w	1000313e <_cyhal_interconnect_check_connection+0x4e>
    return ((uint32_t)(mux_group - _CYHAL_INTERCONNECT_BASE_IDX[get_peri_block_from_trigger(mux_group)]));
10003276:	4650      	mov	r0, sl
10003278:	f7ff fefe 	bl	10003078 <get_peri_block_from_trigger>
        uint32_t source_mux_in_trig = CY_TRIGMUX_INPUT_LINE(source_mux_group, source_mux_input_idx);
1000327c:	022d      	lsls	r5, r5, #8
        uint32_t source_mux_out_trig = CY_TRIGMUX_OUTPUT_LINE(source_mux_group, source_mux_output_idx);
1000327e:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
        uint32_t source_mux_in_trig = CY_TRIGMUX_INPUT_LINE(source_mux_group, source_mux_input_idx);
10003282:	fa5f f989 	uxtb.w	r9, r9
        uint32_t source_mux_out_trig = CY_TRIGMUX_OUTPUT_LINE(source_mux_group, source_mux_output_idx);
10003286:	ea41 0108 	orr.w	r1, r1, r8
        uint32_t source_mux_in_trig = CY_TRIGMUX_INPUT_LINE(source_mux_group, source_mux_input_idx);
1000328a:	ea49 0905 	orr.w	r9, r9, r5
        cy_rslt_t result = Cy_TrigMux_Connect(source_mux_in_trig, source_mux_out_trig, false, (en_trig_type_t)type);
1000328e:	465b      	mov	r3, fp
10003290:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
10003294:	ea49 4000 	orr.w	r0, r9, r0, lsl #16
10003298:	f003 f9da 	bl	10006650 <Cy_TrigMux_Connect>
        if (CY_RSLT_SUCCESS == result)
1000329c:	4602      	mov	r2, r0
1000329e:	2800      	cmp	r0, #0
100032a0:	f47f af39 	bne.w	10003116 <_cyhal_interconnect_check_connection+0x26>
    return ((uint32_t)(mux_group - _CYHAL_INTERCONNECT_BASE_IDX[get_peri_block_from_trigger(mux_group)]));
100032a4:	4638      	mov	r0, r7
100032a6:	f7ff fee7 	bl	10003078 <get_peri_block_from_trigger>
        uint32_t dest_mux_out_trig = CY_TRIGMUX_OUTPUT_LINE(dest_mux_group, dest_mux_output_idx);
100032aa:	9b02      	ldr	r3, [sp, #8]
        uint32_t dest_mux_in_trig = CY_TRIGMUX_INPUT_LINE(dest_mux_group, dest_mux_input_idx);
100032ac:	023c      	lsls	r4, r7, #8
        uint32_t dest_mux_out_trig = CY_TRIGMUX_OUTPUT_LINE(dest_mux_group, dest_mux_output_idx);
100032ae:	ea43 4100 	orr.w	r1, r3, r0, lsl #16
100032b2:	4321      	orrs	r1, r4
        uint32_t dest_mux_in_trig = CY_TRIGMUX_INPUT_LINE(dest_mux_group, dest_mux_input_idx);
100032b4:	4326      	orrs	r6, r4
            result = Cy_TrigMux_Connect(dest_mux_in_trig, dest_mux_out_trig, false, (en_trig_type_t)type);
100032b6:	465b      	mov	r3, fp
100032b8:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
100032bc:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
}
100032c0:	b007      	add	sp, #28
100032c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            result = Cy_TrigMux_Connect(dest_mux_in_trig, dest_mux_out_trig, false, (en_trig_type_t)type);
100032c6:	f003 b9c3 	b.w	10006650 <Cy_TrigMux_Connect>
    for(source_mux_output_idx = source_mux_start_idx; source_mux_output_idx < (source_mux_start_idx + (dest_mux_input_line_high_idx - dest_mux_input_line_low_idx + 1)); source_mux_output_idx++)
100032ca:	f108 0801 	add.w	r8, r8, #1
100032ce:	fa5f f888 	uxtb.w	r8, r8
100032d2:	e7b0      	b.n	10003236 <_cyhal_interconnect_check_connection+0x146>
        else if((connect == CYHAL_CONNECT_TYPE_DISCONNECT) && _cyhal_read_mux_input_idx(source_mux_group, source_mux_output_idx) == source_mux_input_idx)
100032d4:	f7ff fed2 	bl	1000307c <_cyhal_read_mux_input_idx>
100032d8:	9b04      	ldr	r3, [sp, #16]
100032da:	b280      	uxth	r0, r0
100032dc:	4298      	cmp	r0, r3
100032de:	d1f4      	bne.n	100032ca <_cyhal_interconnect_check_connection+0x1da>
        PERI_TR_GR_TR_CTL(source_mux_group, source_mux_output_idx) = 0;
100032e0:	4b1a      	ldr	r3, [pc, #104]	@ (1000334c <_cyhal_interconnect_check_connection+0x25c>)
100032e2:	681e      	ldr	r6, [r3, #0]
100032e4:	f8b6 4074 	ldrh.w	r4, [r6, #116]	@ 0x74
100032e8:	68b3      	ldr	r3, [r6, #8]
100032ea:	f8b6 1076 	ldrh.w	r1, [r6, #118]	@ 0x76
100032ee:	4423      	add	r3, r4
100032f0:	fb01 3305 	mla	r3, r1, r5, r3
100032f4:	2004      	movs	r0, #4
100032f6:	fb10 3308 	smlabb	r3, r0, r8, r3
100032fa:	2200      	movs	r2, #0
100032fc:	601a      	str	r2, [r3, #0]
        PERI_TR_GR_TR_CTL(dest_mux_group, dest_mux_output_idx) = 0;
100032fe:	68b3      	ldr	r3, [r6, #8]
10003300:	441c      	add	r4, r3
10003302:	9b02      	ldr	r3, [sp, #8]
10003304:	4379      	muls	r1, r7
10003306:	fb10 4003 	smlabb	r0, r0, r3, r4
1000330a:	5042      	str	r2, [r0, r1]
        return CY_RSLT_SUCCESS;
1000330c:	e703      	b.n	10003116 <_cyhal_interconnect_check_connection+0x26>
    switch (source_mux_group)
1000330e:	3a0a      	subs	r2, #10
10003310:	b292      	uxth	r2, r2
10003312:	490f      	ldr	r1, [pc, #60]	@ (10003350 <_cyhal_interconnect_check_connection+0x260>)
10003314:	f811 e002 	ldrb.w	lr, [r1, r2]
10003318:	490e      	ldr	r1, [pc, #56]	@ (10003354 <_cyhal_interconnect_check_connection+0x264>)
1000331a:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
    for(uint16_t i = 0; i < cyhal_sources_per_mux[dest_mux_group]; i++)
1000331e:	4a09      	ldr	r2, [pc, #36]	@ (10003344 <_cyhal_interconnect_check_connection+0x254>)
10003320:	2100      	movs	r1, #0
10003322:	f832 8017 	ldrh.w	r8, [r2, r7, lsl #1]
    uint16_t source_mux_start_idx = 0;
10003326:	468c      	mov	ip, r1
    uint16_t dest_mux_input_line_high_idx = 0;
10003328:	468a      	mov	sl, r1
    uint16_t dest_mux_input_line_low_idx = 10000;
1000332a:	f242 7610 	movw	r6, #10000	@ 0x2710
    for(uint16_t i = 0; i < cyhal_sources_per_mux[dest_mux_group]; i++)
1000332e:	e772      	b.n	10003216 <_cyhal_interconnect_check_connection+0x126>
10003330:	1000bcd8 	.word	0x1000bcd8
10003334:	1000c3ee 	.word	0x1000c3ee
10003338:	04020c01 	.word	0x04020c01
1000333c:	04020c00 	.word	0x04020c00
10003340:	04020c02 	.word	0x04020c02
10003344:	1000c5ce 	.word	0x1000c5ce
10003348:	080022c0 	.word	0x080022c0
1000334c:	08002c40 	.word	0x08002c40
10003350:	1000c78c 	.word	0x1000c78c
10003354:	1000c792 	.word	0x1000c792

10003358 <_cyhal_disconnect_signal>:
}

cy_rslt_t _cyhal_disconnect_signal(cyhal_source_t source, cyhal_dest_t dest)
{
#if defined(CY_IP_M0S8PERI_TR) || defined(CY_IP_MXPERI_TR) || defined(CY_IP_MXSPERI)
    return _cyhal_interconnect_check_connection(source, dest, CYHAL_CONNECT_TYPE_DISCONNECT);
10003358:	2202      	movs	r2, #2
1000335a:	f7ff bec9 	b.w	100030f0 <_cyhal_interconnect_check_connection>
	...

10003360 <cyhal_connect_pin>:
}

#endif /* CYHAL_DRIVER_AVAILABLE_INTERCONNECT */

cy_rslt_t cyhal_connect_pin(const cyhal_resource_pin_mapping_t *pin_connection, uint8_t drive_mode)
{
10003360:	b573      	push	{r0, r1, r4, r5, r6, lr}
{
    GPIO_PRT_Type* portBase;

    if(portNum < (uint32_t)IOSS_GPIO_GPIO_PORT_NR)
    {
        portBase = (GPIO_PRT_Type *)(CY_GPIO_BASE + (GPIO_PRT_SECTION_SIZE * portNum));
10003362:	4a12      	ldr	r2, [pc, #72]	@ (100033ac <cyhal_connect_pin+0x4c>)
    cyhal_gpio_t pin = pin_connection->pin;
10003364:	7885      	ldrb	r5, [r0, #2]
10003366:	6812      	ldr	r2, [r2, #0]
10003368:	6994      	ldr	r4, [r2, #24]
    if(portNum < (uint32_t)IOSS_GPIO_GPIO_PORT_NR)
1000336a:	2d77      	cmp	r5, #119	@ 0x77
    GPIO_PRT_Type *port = Cy_GPIO_PortToAddr(CYHAL_GET_PORT(pin));
1000336c:	ea4f 03d5 	mov.w	r3, r5, lsr #3
        portBase = (GPIO_PRT_Type *)(CY_GPIO_BASE + (GPIO_PRT_SECTION_SIZE * portNum));
10003370:	bf98      	it	ls
10003372:	eb04 14c3 	addls.w	r4, r4, r3, lsl #7
    en_hsiom_sel_t hsiom = pin_connection->hsiom;

    Cy_GPIO_Pin_FastInit(port, CYHAL_GET_PIN(pin), drive_mode, 1, hsiom);
10003376:	f005 0507 	and.w	r5, r5, #7
1000337a:	78c3      	ldrb	r3, [r0, #3]
1000337c:	9300      	str	r3, [sp, #0]
{
1000337e:	460e      	mov	r6, r1
    Cy_GPIO_Pin_FastInit(port, CYHAL_GET_PIN(pin), drive_mode, 1, hsiom);
10003380:	460a      	mov	r2, r1
10003382:	2301      	movs	r3, #1
10003384:	4629      	mov	r1, r5
10003386:	4620      	mov	r0, r4
10003388:	f001 f99c 	bl	100046c4 <Cy_GPIO_Pin_FastInit>
    // Force output to enable pulls.
    switch (drive_mode)
1000338c:	2e0a      	cmp	r6, #10
1000338e:	d004      	beq.n	1000339a <cyhal_connect_pin+0x3a>
10003390:	2e0b      	cmp	r6, #11
10003392:	d006      	beq.n	100033a2 <cyhal_connect_pin+0x42>
            /* do nothing */
            break;
    }

    return CY_RSLT_SUCCESS;
}
10003394:	2000      	movs	r0, #0
10003396:	b002      	add	sp, #8
10003398:	bd70      	pop	{r4, r5, r6, pc}
    {
        GPIO_PRT_OUT_CLR(base) = CY_GPIO_OUT_MASK << pinNum;
    }
    else
    {
        GPIO_PRT_OUT_SET(base) = CY_GPIO_OUT_MASK << pinNum;
1000339a:	2301      	movs	r3, #1
1000339c:	40ab      	lsls	r3, r5
1000339e:	60a3      	str	r3, [r4, #8]
100033a0:	e7f8      	b.n	10003394 <cyhal_connect_pin+0x34>
        GPIO_PRT_OUT_CLR(base) = CY_GPIO_OUT_MASK << pinNum;
100033a2:	2301      	movs	r3, #1
100033a4:	40ab      	lsls	r3, r5
100033a6:	6063      	str	r3, [r4, #4]
100033a8:	e7f4      	b.n	10003394 <cyhal_connect_pin+0x34>
100033aa:	bf00      	nop
100033ac:	08002c40 	.word	0x08002c40

100033b0 <cyhal_disconnect_pin>:

cy_rslt_t cyhal_disconnect_pin(cyhal_gpio_t pin)
{
100033b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
        portBase = (GPIO_PRT_Type *)(CY_GPIO_BASE + (GPIO_PRT_SECTION_SIZE * portNum));
100033b2:	4a0a      	ldr	r2, [pc, #40]	@ (100033dc <cyhal_disconnect_pin+0x2c>)
100033b4:	6812      	ldr	r2, [r2, #0]
100033b6:	6994      	ldr	r4, [r2, #24]
    if(portNum < (uint32_t)IOSS_GPIO_GPIO_PORT_NR)
100033b8:	2877      	cmp	r0, #119	@ 0x77
    GPIO_PRT_Type *port = Cy_GPIO_PortToAddr(CYHAL_GET_PORT(pin));
100033ba:	ea4f 03d0 	mov.w	r3, r0, lsr #3
        portBase = (GPIO_PRT_Type *)(CY_GPIO_BASE + (GPIO_PRT_SECTION_SIZE * portNum));
100033be:	bf98      	it	ls
100033c0:	eb04 14c3 	addls.w	r4, r4, r3, lsl #7

    Cy_GPIO_Pin_FastInit(port, CYHAL_GET_PIN(pin), CY_GPIO_DM_HIGHZ, 1, HSIOM_SEL_GPIO);
100033c4:	2500      	movs	r5, #0
100033c6:	f000 0107 	and.w	r1, r0, #7
100033ca:	9500      	str	r5, [sp, #0]
100033cc:	4620      	mov	r0, r4
100033ce:	2301      	movs	r3, #1
100033d0:	2208      	movs	r2, #8
100033d2:	f001 f977 	bl	100046c4 <Cy_GPIO_Pin_FastInit>

    return CY_RSLT_SUCCESS;
}
100033d6:	4628      	mov	r0, r5
100033d8:	b003      	add	sp, #12
100033da:	bd30      	pop	{r4, r5, pc}
100033dc:	08002c40 	.word	0x08002c40

100033e0 <_cyhal_irq_register>:
#if (_CYHAL_IRQ_MUXING) && defined(COMPONENT_CAT1A) && (!_CYHAL_IRQ_LEGACY_M0) && !defined(CY_DEVICE_TVIIBE)
uint8_t _cpu_irq_tracker = 0u; // TODO: This is a temporary workaround to assign 1:1 CPU to system mapping.
#endif

cy_rslt_t _cyhal_irq_register(_cyhal_system_irq_t system_intr, uint8_t intr_priority, cy_israddress irq_handler)
{
100033e0:	b507      	push	{r0, r1, r2, lr}
                cy_stc_sysint_t intr_cfg = { (IRQn_Type)intr_src, lowest_priority };
            #endif
        #endif
    #endif
#else
    cy_stc_sysint_t intr_cfg = { system_intr, intr_priority };
100033e2:	f8ad 0000 	strh.w	r0, [sp]
100033e6:	9101      	str	r1, [sp, #4]
#endif
    return Cy_SysInt_Init(&intr_cfg, irq_handler);
100033e8:	4668      	mov	r0, sp
100033ea:	4611      	mov	r1, r2
100033ec:	f002 fcea 	bl	10005dc4 <Cy_SysInt_Init>
}
100033f0:	b003      	add	sp, #12
100033f2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

100033f8 <_cyhal_scb_pm_callback_index>:
    return __cyhal_scb_pm_transition_pending_value;
}

static bool _cyhal_scb_pm_callback_index(uint8_t index, cyhal_syspm_callback_state_t state, cy_en_syspm_callback_mode_t pdl_mode)
{
    void *obj = _cyhal_scb_config_structs[index];
100033f8:	4b08      	ldr	r3, [pc, #32]	@ (1000341c <_cyhal_scb_pm_callback_index+0x24>)
{
100033fa:	b410      	push	{r4}
    void *obj = _cyhal_scb_config_structs[index];
100033fc:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    cyhal_scb_instance_pm_callback callback = _cyhal_scb_config_pm_callback[index];
    return ((NULL != obj) && (callback != NULL)) ? callback(obj, state, pdl_mode) : true;
10003400:	b13c      	cbz	r4, 10003412 <_cyhal_scb_pm_callback_index+0x1a>
    cyhal_scb_instance_pm_callback callback = _cyhal_scb_config_pm_callback[index];
10003402:	4b07      	ldr	r3, [pc, #28]	@ (10003420 <_cyhal_scb_pm_callback_index+0x28>)
10003404:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    return ((NULL != obj) && (callback != NULL)) ? callback(obj, state, pdl_mode) : true;
10003408:	b11b      	cbz	r3, 10003412 <_cyhal_scb_pm_callback_index+0x1a>
1000340a:	4620      	mov	r0, r4
}
1000340c:	f85d 4b04 	ldr.w	r4, [sp], #4
    return ((NULL != obj) && (callback != NULL)) ? callback(obj, state, pdl_mode) : true;
10003410:	4718      	bx	r3
}
10003412:	2001      	movs	r0, #1
10003414:	f85d 4b04 	ldr.w	r4, [sp], #4
10003418:	4770      	bx	lr
1000341a:	bf00      	nop
1000341c:	08002b78 	.word	0x08002b78
10003420:	08002b54 	.word	0x08002b54

10003424 <_cyhal_scb_pm_callback_common>:

static bool _cyhal_scb_pm_callback_common(cyhal_syspm_callback_state_t state, cyhal_syspm_callback_mode_t mode, void* callback_arg)
{
10003424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
10003428:	4606      	mov	r6, r0
    CY_UNUSED_PARAMETER(callback_arg);
    bool allow = true;
    cy_en_syspm_callback_mode_t pdl_mode = _cyhal_utils_convert_haltopdl_pm_mode(mode);
1000342a:	4608      	mov	r0, r1
{
1000342c:	460c      	mov	r4, r1
    cy_en_syspm_callback_mode_t pdl_mode = _cyhal_utils_convert_haltopdl_pm_mode(mode);
1000342e:	f000 ff4f 	bl	100042d0 <_cyhal_utils_convert_haltopdl_pm_mode>
10003432:	2500      	movs	r5, #0
10003434:	4607      	mov	r7, r0
    for (uint8_t instance_idx = 0; instance_idx < _SCB_ARRAY_SIZE; instance_idx++)
10003436:	fa5f f885 	uxtb.w	r8, r5
    {
        allow = _cyhal_scb_pm_callback_index(instance_idx, state, pdl_mode);
1000343a:	463a      	mov	r2, r7
1000343c:	4631      	mov	r1, r6
1000343e:	4640      	mov	r0, r8
10003440:	f7ff ffda 	bl	100033f8 <_cyhal_scb_pm_callback_index>
10003444:	4603      	mov	r3, r0

        if (!allow && mode == CYHAL_SYSPM_CHECK_READY)
10003446:	b970      	cbnz	r0, 10003466 <_cyhal_scb_pm_callback_common+0x42>
10003448:	2c01      	cmp	r4, #1
1000344a:	d10c      	bne.n	10003466 <_cyhal_scb_pm_callback_common+0x42>
1000344c:	4604      	mov	r4, r0
1000344e:	e004      	b.n	1000345a <_cyhal_scb_pm_callback_common+0x36>
        {
            for (uint8_t revert_idx = 0; revert_idx < instance_idx; revert_idx++)
            {
                _cyhal_scb_pm_callback_index(revert_idx, state, CY_SYSPM_CHECK_FAIL);
10003450:	2202      	movs	r2, #2
10003452:	4631      	mov	r1, r6
10003454:	f7ff ffd0 	bl	100033f8 <_cyhal_scb_pm_callback_index>
            for (uint8_t revert_idx = 0; revert_idx < instance_idx; revert_idx++)
10003458:	3401      	adds	r4, #1
1000345a:	b2e0      	uxtb	r0, r4
1000345c:	4580      	cmp	r8, r0
1000345e:	d8f7      	bhi.n	10003450 <_cyhal_scb_pm_callback_common+0x2c>
10003460:	2000      	movs	r0, #0
    else if (mode == CYHAL_SYSPM_CHECK_READY && allow)
    {
        __cyhal_scb_pm_transition_pending_value = true;
    }
    return allow;
}
10003462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for (uint8_t instance_idx = 0; instance_idx < _SCB_ARRAY_SIZE; instance_idx++)
10003466:	3501      	adds	r5, #1
10003468:	2d09      	cmp	r5, #9
1000346a:	d1e4      	bne.n	10003436 <_cyhal_scb_pm_callback_common+0x12>
    if (mode == CYHAL_SYSPM_CHECK_FAIL || mode == CYHAL_SYSPM_AFTER_TRANSITION)
1000346c:	2c02      	cmp	r4, #2
1000346e:	d001      	beq.n	10003474 <_cyhal_scb_pm_callback_common+0x50>
10003470:	2c08      	cmp	r4, #8
10003472:	d103      	bne.n	1000347c <_cyhal_scb_pm_callback_common+0x58>
        __cyhal_scb_pm_transition_pending_value = false;
10003474:	4b05      	ldr	r3, [pc, #20]	@ (1000348c <_cyhal_scb_pm_callback_common+0x68>)
10003476:	2200      	movs	r2, #0
10003478:	701a      	strb	r2, [r3, #0]
1000347a:	e7f2      	b.n	10003462 <_cyhal_scb_pm_callback_common+0x3e>
    else if (mode == CYHAL_SYSPM_CHECK_READY && allow)
1000347c:	2c01      	cmp	r4, #1
1000347e:	d1f0      	bne.n	10003462 <_cyhal_scb_pm_callback_common+0x3e>
10003480:	2b00      	cmp	r3, #0
10003482:	d0ed      	beq.n	10003460 <_cyhal_scb_pm_callback_common+0x3c>
        __cyhal_scb_pm_transition_pending_value = true;
10003484:	4b01      	ldr	r3, [pc, #4]	@ (1000348c <_cyhal_scb_pm_callback_common+0x68>)
10003486:	701c      	strb	r4, [r3, #0]
10003488:	e7eb      	b.n	10003462 <_cyhal_scb_pm_callback_common+0x3e>
1000348a:	bf00      	nop
1000348c:	08002b53 	.word	0x08002b53

10003490 <_cyhal_scb_get_block_index>:
{
10003490:	b510      	push	{r4, lr}
10003492:	4906      	ldr	r1, [pc, #24]	@ (100034ac <_cyhal_scb_get_block_index+0x1c>)
10003494:	2300      	movs	r3, #0
        if (_CYHAL_SCB_BASE_ADDRESS_INDEX[instance_idx] == scb_block_num)
10003496:	f811 4b01 	ldrb.w	r4, [r1], #1
1000349a:	4284      	cmp	r4, r0
1000349c:	b2da      	uxtb	r2, r3
1000349e:	d003      	beq.n	100034a8 <_cyhal_scb_get_block_index+0x18>
    for (uint8_t instance_idx = 0; instance_idx < _SCB_ARRAY_SIZE; instance_idx++)
100034a0:	3301      	adds	r3, #1
100034a2:	2b09      	cmp	r3, #9
100034a4:	d1f7      	bne.n	10003496 <_cyhal_scb_get_block_index+0x6>
    uint8_t arr_index = _CYHAL_SCB_BLOCK_ID_INVALID;
100034a6:	22ff      	movs	r2, #255	@ 0xff
}
100034a8:	4610      	mov	r0, r2
100034aa:	bd10      	pop	{r4, pc}
100034ac:	1000c7e4 	.word	0x1000c7e4

100034b0 <_cyhal_scb_get_irq_obj>:
{
100034b0:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
100034b2:	f3ef 8305 	mrs	r3, IPSR
#endif
}

static inline _cyhal_system_irq_t _cyhal_irq_get_active(void)
{
    IRQn_Type irqn = _CYHAL_UTILS_GET_CURRENT_IRQN();
100034b6:	b29b      	uxth	r3, r3
    if ((_cyhal_system_irq_t)unconnected_IRQn == irqn)
100034b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
100034bc:	d00c      	beq.n	100034d8 <_cyhal_scb_get_irq_obj+0x28>
    switch (irqn)
100034be:	3b22      	subs	r3, #34	@ 0x22
100034c0:	b29b      	uxth	r3, r3
100034c2:	2b1e      	cmp	r3, #30
100034c4:	bf96      	itet	ls
100034c6:	4a05      	ldrls	r2, [pc, #20]	@ (100034dc <_cyhal_scb_get_irq_obj+0x2c>)
    if ((_cyhal_system_irq_t)unconnected_IRQn == irqn)
100034c8:	20ff      	movhi	r0, #255	@ 0xff
100034ca:	5cd0      	ldrbls	r0, [r2, r3]
    return _cyhal_scb_get_block_index(scb_block_num);
100034cc:	f7ff ffe0 	bl	10003490 <_cyhal_scb_get_block_index>
        return _cyhal_scb_config_structs[block];
100034d0:	4b03      	ldr	r3, [pc, #12]	@ (100034e0 <_cyhal_scb_get_irq_obj+0x30>)
100034d2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
100034d6:	bd08      	pop	{r3, pc}
        return NULL;
100034d8:	2000      	movs	r0, #0
100034da:	e7fc      	b.n	100034d6 <_cyhal_scb_get_irq_obj+0x26>
100034dc:	1000c79c 	.word	0x1000c79c
100034e0:	08002b78 	.word	0x08002b78

100034e4 <_cyhal_scb_find_map>:
{
100034e4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
100034e8:	4680      	mov	r8, r0
100034ea:	4616      	mov	r6, r2
100034ec:	461d      	mov	r5, r3
100034ee:	460c      	mov	r4, r1
    for (size_t i = 0; i < count; i++)
100034f0:	2700      	movs	r7, #0
                cyhal_resource_inst_t rsc = { CYHAL_RSC_SCB, pin_map[i].block_num, pin_map[i].channel_num };
100034f2:	f04f 0a17 	mov.w	sl, #23
    for (size_t i = 0; i < count; i++)
100034f6:	42b7      	cmp	r7, r6
100034f8:	d102      	bne.n	10003500 <_cyhal_scb_find_map+0x1c>
    return NULL;
100034fa:	f04f 0900 	mov.w	r9, #0
100034fe:	e00f      	b.n	10003520 <_cyhal_scb_find_map+0x3c>
        if (pin == pin_map[i].pin)
10003500:	78a3      	ldrb	r3, [r4, #2]
10003502:	4543      	cmp	r3, r8
10003504:	46a1      	mov	r9, r4
10003506:	d11e      	bne.n	10003546 <_cyhal_scb_find_map+0x62>
 * @return Boolean indicating whether two resources are the same
 */
static inline bool _cyhal_utils_map_resource_equal(const cyhal_resource_inst_t *resource, const cyhal_resource_pin_mapping_t *map,
    bool ignore_channel)
{
    return (resource->block_num == map->block_num) && (ignore_channel || resource->channel_num == map->channel_num);
10003508:	7823      	ldrb	r3, [r4, #0]
            if ((NULL != block_res) && (CYHAL_RSC_SCB == block_res->type))
1000350a:	b16d      	cbz	r5, 10003528 <_cyhal_scb_find_map+0x44>
1000350c:	782a      	ldrb	r2, [r5, #0]
1000350e:	2a17      	cmp	r2, #23
10003510:	d10a      	bne.n	10003528 <_cyhal_scb_find_map+0x44>
10003512:	786a      	ldrb	r2, [r5, #1]
10003514:	429a      	cmp	r2, r3
10003516:	d116      	bne.n	10003546 <_cyhal_scb_find_map+0x62>
10003518:	78aa      	ldrb	r2, [r5, #2]
1000351a:	7863      	ldrb	r3, [r4, #1]
1000351c:	429a      	cmp	r2, r3
1000351e:	d112      	bne.n	10003546 <_cyhal_scb_find_map+0x62>
}
10003520:	4648      	mov	r0, r9
10003522:	b002      	add	sp, #8
10003524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                cyhal_resource_inst_t rsc = { CYHAL_RSC_SCB, pin_map[i].block_num, pin_map[i].channel_num };
10003528:	f88d 3005 	strb.w	r3, [sp, #5]
                if (CY_RSLT_SUCCESS == cyhal_hwmgr_reserve(&rsc))
1000352c:	a801      	add	r0, sp, #4
                cyhal_resource_inst_t rsc = { CYHAL_RSC_SCB, pin_map[i].block_num, pin_map[i].channel_num };
1000352e:	7863      	ldrb	r3, [r4, #1]
10003530:	f88d a004 	strb.w	sl, [sp, #4]
10003534:	f88d 3006 	strb.w	r3, [sp, #6]
                if (CY_RSLT_SUCCESS == cyhal_hwmgr_reserve(&rsc))
10003538:	f7ff fd3c 	bl	10002fb4 <cyhal_hwmgr_reserve>
1000353c:	b918      	cbnz	r0, 10003546 <_cyhal_scb_find_map+0x62>
                    cyhal_hwmgr_free(&rsc);
1000353e:	a801      	add	r0, sp, #4
10003540:	f7ff fd78 	bl	10003034 <cyhal_hwmgr_free>
                    return &pin_map[i];
10003544:	e7ec      	b.n	10003520 <_cyhal_scb_find_map+0x3c>
    for (size_t i = 0; i < count; i++)
10003546:	3701      	adds	r7, #1
10003548:	3404      	adds	r4, #4
1000354a:	e7d4      	b.n	100034f6 <_cyhal_scb_find_map+0x12>

1000354c <_cyhal_scb_check_pin_affiliation>:
{
1000354c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    for (size_t i = 0; i < count; i++)
10003550:	2500      	movs	r5, #0
{
10003552:	4680      	mov	r8, r0
10003554:	4617      	mov	r7, r2
10003556:	460c      	mov	r4, r1
    uint32_t bitband_blocks = 0;
10003558:	462e      	mov	r6, r5
            cyhal_resource_inst_t rsc = { CYHAL_RSC_SCB, scb_arr_index, pin_map[i].channel_num };
1000355a:	f04f 0917 	mov.w	r9, #23
                bitband_blocks |= 1 << pin_map[i].block_num;
1000355e:	f04f 0a01 	mov.w	sl, #1
    for (size_t i = 0; i < count; i++)
10003562:	42bd      	cmp	r5, r7
10003564:	d103      	bne.n	1000356e <_cyhal_scb_check_pin_affiliation+0x22>
}
10003566:	4630      	mov	r0, r6
10003568:	b002      	add	sp, #8
1000356a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (pin == pin_map[i].pin)
1000356e:	78a3      	ldrb	r3, [r4, #2]
10003570:	4543      	cmp	r3, r8
10003572:	d114      	bne.n	1000359e <_cyhal_scb_check_pin_affiliation+0x52>
            uint8_t scb_arr_index = _cyhal_scb_get_block_index(pin_map[i].block_num);
10003574:	7820      	ldrb	r0, [r4, #0]
10003576:	f7ff ff8b 	bl	10003490 <_cyhal_scb_get_block_index>
            cyhal_resource_inst_t rsc = { CYHAL_RSC_SCB, scb_arr_index, pin_map[i].channel_num };
1000357a:	7863      	ldrb	r3, [r4, #1]
1000357c:	f88d 0005 	strb.w	r0, [sp, #5]
            if (CY_RSLT_SUCCESS == cyhal_hwmgr_reserve(&rsc))
10003580:	a801      	add	r0, sp, #4
            cyhal_resource_inst_t rsc = { CYHAL_RSC_SCB, scb_arr_index, pin_map[i].channel_num };
10003582:	f88d 9004 	strb.w	r9, [sp, #4]
10003586:	f88d 3006 	strb.w	r3, [sp, #6]
            if (CY_RSLT_SUCCESS == cyhal_hwmgr_reserve(&rsc))
1000358a:	f7ff fd13 	bl	10002fb4 <cyhal_hwmgr_reserve>
1000358e:	b930      	cbnz	r0, 1000359e <_cyhal_scb_check_pin_affiliation+0x52>
                cyhal_hwmgr_free(&rsc);
10003590:	a801      	add	r0, sp, #4
10003592:	f7ff fd4f 	bl	10003034 <cyhal_hwmgr_free>
                bitband_blocks |= 1 << pin_map[i].block_num;
10003596:	7823      	ldrb	r3, [r4, #0]
10003598:	fa0a f303 	lsl.w	r3, sl, r3
1000359c:	431e      	orrs	r6, r3
    for (size_t i = 0; i < count; i++)
1000359e:	3501      	adds	r5, #1
100035a0:	3404      	adds	r4, #4
100035a2:	e7de      	b.n	10003562 <_cyhal_scb_check_pin_affiliation+0x16>

100035a4 <_cyhal_scb_pm_transition_pending>:
}
100035a4:	4b01      	ldr	r3, [pc, #4]	@ (100035ac <_cyhal_scb_pm_transition_pending+0x8>)
100035a6:	7818      	ldrb	r0, [r3, #0]
100035a8:	4770      	bx	lr
100035aa:	bf00      	nop
100035ac:	08002b53 	.word	0x08002b53

100035b0 <_cyhal_scb_update_instance_data>:
    .next = NULL,
    .ignore_modes = (cyhal_syspm_callback_mode_t)0,
};

void _cyhal_scb_update_instance_data(uint8_t block_num, void *obj, cyhal_scb_instance_pm_callback pm_callback)
{
100035b0:	b538      	push	{r3, r4, r5, lr}
100035b2:	460c      	mov	r4, r1
100035b4:	4615      	mov	r5, r2
    uint8_t scb_arr_index = _cyhal_scb_get_block_index(block_num);
100035b6:	f7ff ff6b 	bl	10003490 <_cyhal_scb_get_block_index>

    _cyhal_scb_config_structs[scb_arr_index] = obj;
100035ba:	4b0f      	ldr	r3, [pc, #60]	@ (100035f8 <_cyhal_scb_update_instance_data+0x48>)
    _cyhal_scb_config_pm_callback[scb_arr_index] = pm_callback;
100035bc:	4a0f      	ldr	r2, [pc, #60]	@ (100035fc <_cyhal_scb_update_instance_data+0x4c>)
    _cyhal_scb_config_structs[scb_arr_index] = obj;
100035be:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
    _cyhal_scb_config_pm_callback[scb_arr_index] = pm_callback;
100035c2:	f842 5020 	str.w	r5, [r2, r0, lsl #2]

    uint8_t count = 0;
100035c6:	2100      	movs	r1, #0
100035c8:	461a      	mov	r2, r3
    _cyhal_scb_config_pm_callback[scb_arr_index] = pm_callback;
100035ca:	2309      	movs	r3, #9
    for (uint8_t i = 0; i < _SCB_ARRAY_SIZE; i++)
    {
        if (NULL != _cyhal_scb_config_structs[i])
100035cc:	f852 0b04 	ldr.w	r0, [r2], #4
100035d0:	b108      	cbz	r0, 100035d6 <_cyhal_scb_update_instance_data+0x26>
        {
            if (count == 1)
100035d2:	b981      	cbnz	r1, 100035f6 <_cyhal_scb_update_instance_data+0x46>
            {
                return;
            }
            count++;
100035d4:	2101      	movs	r1, #1
    for (uint8_t i = 0; i < _SCB_ARRAY_SIZE; i++)
100035d6:	3b01      	subs	r3, #1
100035d8:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
100035dc:	d1f6      	bne.n	100035cc <_cyhal_scb_update_instance_data+0x1c>
        }
    }

    if (count == 0)
100035de:	b921      	cbnz	r1, 100035ea <_cyhal_scb_update_instance_data+0x3a>
    {
        #if (CYHAL_DRIVER_AVAILABLE_SYSPM)
        _cyhal_syspm_register_peripheral_callback(&_cyhal_scb_pm_callback_data);
        #endif
    }
}
100035e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        _cyhal_syspm_unregister_peripheral_callback(&_cyhal_scb_pm_callback_data);
100035e4:	4806      	ldr	r0, [pc, #24]	@ (10003600 <_cyhal_scb_update_instance_data+0x50>)
100035e6:	f000 b943 	b.w	10003870 <_cyhal_syspm_unregister_peripheral_callback>
    else if (count == 1 && obj != NULL)
100035ea:	b124      	cbz	r4, 100035f6 <_cyhal_scb_update_instance_data+0x46>
}
100035ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        _cyhal_syspm_register_peripheral_callback(&_cyhal_scb_pm_callback_data);
100035f0:	4803      	ldr	r0, [pc, #12]	@ (10003600 <_cyhal_scb_update_instance_data+0x50>)
100035f2:	f000 b92d 	b.w	10003850 <_cyhal_syspm_register_peripheral_callback>
}
100035f6:	bd38      	pop	{r3, r4, r5, pc}
100035f8:	08002b78 	.word	0x08002b78
100035fc:	08002b54 	.word	0x08002b54
10003600:	08002328 	.word	0x08002328

10003604 <_cyhal_syspm_call_all_pm_callbacks>:
static cy_stc_syspm_callback_t _cyhal_syspm_deepsleep_off;
#endif /* defined(COMPONENT_CAT1A)  && !(defined(SRSS_ULP_VARIANT) && (SRSS_ULP_VARIANT == 0u)))*/

static cyhal_syspm_callback_data_t* _cyhal_syspm_call_all_pm_callbacks(
    cyhal_syspm_callback_data_t* entry, bool* allow, cyhal_syspm_callback_state_t state, cyhal_syspm_callback_mode_t mode)
{
10003604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
10003608:	460e      	mov	r6, r1
1000360a:	4617      	mov	r7, r2
1000360c:	461d      	mov	r5, r3
    while(entry != CYHAL_SYSPM_END_OF_LIST)
1000360e:	4604      	mov	r4, r0
10003610:	f240 7889 	movw	r8, #1929	@ 0x789
    {
        if (entry->callback != NULL &&
            (entry->states & state) == state &&
            (entry->ignore_modes & mode) != mode)
        {
            *allow = entry->callback(state, mode, entry->args) || mode != CYHAL_SYSPM_CHECK_READY;
10003614:	f04f 0901 	mov.w	r9, #1
    while(entry != CYHAL_SYSPM_END_OF_LIST)
10003618:	4544      	cmp	r4, r8
1000361a:	d018      	beq.n	1000364e <_cyhal_syspm_call_all_pm_callbacks+0x4a>
        if (entry->callback != NULL &&
1000361c:	6823      	ldr	r3, [r4, #0]
1000361e:	b173      	cbz	r3, 1000363e <_cyhal_syspm_call_all_pm_callbacks+0x3a>
            (entry->states & state) == state &&
10003620:	7922      	ldrb	r2, [r4, #4]
        if (entry->callback != NULL &&
10003622:	ea37 0202 	bics.w	r2, r7, r2
10003626:	d10a      	bne.n	1000363e <_cyhal_syspm_call_all_pm_callbacks+0x3a>
            (entry->ignore_modes & mode) != mode)
10003628:	7962      	ldrb	r2, [r4, #5]
            (entry->states & state) == state &&
1000362a:	ea35 0202 	bics.w	r2, r5, r2
1000362e:	d006      	beq.n	1000363e <_cyhal_syspm_call_all_pm_callbacks+0x3a>
            *allow = entry->callback(state, mode, entry->args) || mode != CYHAL_SYSPM_CHECK_READY;
10003630:	68a2      	ldr	r2, [r4, #8]
10003632:	4629      	mov	r1, r5
10003634:	4638      	mov	r0, r7
10003636:	4798      	blx	r3
10003638:	b118      	cbz	r0, 10003642 <_cyhal_syspm_call_all_pm_callbacks+0x3e>
1000363a:	f886 9000 	strb.w	r9, [r6]
            {
                // Do not increment pointer so that backtracking stop at the correct location
                break;
            }
        }
        entry = entry->next;
1000363e:	68e4      	ldr	r4, [r4, #12]
10003640:	e7ea      	b.n	10003618 <_cyhal_syspm_call_all_pm_callbacks+0x14>
            *allow = entry->callback(state, mode, entry->args) || mode != CYHAL_SYSPM_CHECK_READY;
10003642:	2d01      	cmp	r5, #1
10003644:	bf14      	ite	ne
10003646:	2301      	movne	r3, #1
10003648:	2300      	moveq	r3, #0
1000364a:	7033      	strb	r3, [r6, #0]
            if (!(*allow))
1000364c:	d1f7      	bne.n	1000363e <_cyhal_syspm_call_all_pm_callbacks+0x3a>
    }
    return entry;
}
1000364e:	4620      	mov	r0, r4
10003650:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

10003654 <_cyhal_syspm_backtrack_all_pm_callbacks>:

static void _cyhal_syspm_backtrack_all_pm_callbacks(cyhal_syspm_callback_data_t* start, cyhal_syspm_callback_data_t* end, cyhal_syspm_callback_state_t state)
{
10003654:	b570      	push	{r4, r5, r6, lr}
10003656:	4604      	mov	r4, r0
10003658:	460e      	mov	r6, r1
1000365a:	4615      	mov	r5, r2
    while(start != end)
1000365c:	42b4      	cmp	r4, r6
1000365e:	d100      	bne.n	10003662 <_cyhal_syspm_backtrack_all_pm_callbacks+0xe>
        {
            start->callback(state, CYHAL_SYSPM_CHECK_FAIL, start->args);
        }
        start = start->next;
    }
}
10003660:	bd70      	pop	{r4, r5, r6, pc}
        if (start->callback != NULL &&
10003662:	6823      	ldr	r3, [r4, #0]
10003664:	b153      	cbz	r3, 1000367c <_cyhal_syspm_backtrack_all_pm_callbacks+0x28>
            (start->states & state) == state &&
10003666:	7922      	ldrb	r2, [r4, #4]
        if (start->callback != NULL &&
10003668:	ea35 0202 	bics.w	r2, r5, r2
1000366c:	d106      	bne.n	1000367c <_cyhal_syspm_backtrack_all_pm_callbacks+0x28>
            (start->states & state) == state &&
1000366e:	7962      	ldrb	r2, [r4, #5]
10003670:	0792      	lsls	r2, r2, #30
10003672:	d403      	bmi.n	1000367c <_cyhal_syspm_backtrack_all_pm_callbacks+0x28>
            start->callback(state, CYHAL_SYSPM_CHECK_FAIL, start->args);
10003674:	68a2      	ldr	r2, [r4, #8]
10003676:	2102      	movs	r1, #2
10003678:	4628      	mov	r0, r5
1000367a:	4798      	blx	r3
        start = start->next;
1000367c:	68e4      	ldr	r4, [r4, #12]
1000367e:	e7ed      	b.n	1000365c <_cyhal_syspm_backtrack_all_pm_callbacks+0x8>

10003680 <_cyhal_syspm_remove_callback_from_list>:
    }
    cyhal_system_critical_section_exit(intr_status);
}

static void _cyhal_syspm_remove_callback_from_list(cyhal_syspm_callback_data_t **list, cyhal_syspm_callback_data_t *rmv)
{
10003680:	b538      	push	{r3, r4, r5, lr}
10003682:	4604      	mov	r4, r0
10003684:	460d      	mov	r5, r1
    uint32_t intr_status = cyhal_system_critical_section_enter();
10003686:	f7ff fa1c 	bl	10002ac2 <Cy_SysLib_EnterCriticalSection>
    while(*list != CYHAL_SYSPM_END_OF_LIST)
1000368a:	f240 7289 	movw	r2, #1929	@ 0x789
1000368e:	6823      	ldr	r3, [r4, #0]
10003690:	4293      	cmp	r3, r2
10003692:	d005      	beq.n	100036a0 <_cyhal_syspm_remove_callback_from_list+0x20>
    {
        if (*list == rmv)
10003694:	42ab      	cmp	r3, r5
10003696:	d107      	bne.n	100036a8 <_cyhal_syspm_remove_callback_from_list+0x28>
        {
            *list = rmv->next;
10003698:	68eb      	ldr	r3, [r5, #12]
1000369a:	6023      	str	r3, [r4, #0]
            rmv->next = NULL;
1000369c:	2300      	movs	r3, #0
1000369e:	60eb      	str	r3, [r5, #12]
            break;
        }
        list = &((*list)->next);
    }
    cyhal_system_critical_section_exit(intr_status);
}
100036a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    cyhal_system_critical_section_exit(intr_status);
100036a4:	f7ff ba11 	b.w	10002aca <Cy_SysLib_ExitCriticalSection>
        list = &((*list)->next);
100036a8:	f103 040c 	add.w	r4, r3, #12
100036ac:	e7ef      	b.n	1000368e <_cyhal_syspm_remove_callback_from_list+0xe>
	...

100036b0 <_cyhal_syspm_common_cb>:
{
100036b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
100036b4:	460e      	mov	r6, r1
    cyhal_syspm_callback_mode_t hal_mode = _cyhal_utils_convert_pdltohal_pm_mode(mode);
100036b6:	f000 fe15 	bl	100042e4 <_cyhal_utils_convert_pdltohal_pm_mode>
    bool allow = true;
100036ba:	2401      	movs	r4, #1
    if (hal_mode == CYHAL_SYSPM_CHECK_FAIL || hal_mode == CYHAL_SYSPM_AFTER_TRANSITION || hal_mode == CYHAL_SYSPM_AFTER_DS_WFI_TRANSITION)
100036bc:	2810      	cmp	r0, #16
    bool allow = true;
100036be:	f88d 4007 	strb.w	r4, [sp, #7]
        first = _cyhal_syspm_peripheral_callback_ptr;
100036c2:	4b1c      	ldr	r3, [pc, #112]	@ (10003734 <_cyhal_syspm_common_cb+0x84>)
    if (hal_mode == CYHAL_SYSPM_CHECK_FAIL || hal_mode == CYHAL_SYSPM_AFTER_TRANSITION || hal_mode == CYHAL_SYSPM_AFTER_DS_WFI_TRANSITION)
100036c4:	bf98      	it	ls
100036c6:	4c1c      	ldrls	r4, [pc, #112]	@ (10003738 <_cyhal_syspm_common_cb+0x88>)
        first = _cyhal_syspm_peripheral_callback_ptr;
100036c8:	681f      	ldr	r7, [r3, #0]
        second = _cyhal_syspm_callback_ptr;
100036ca:	4b1c      	ldr	r3, [pc, #112]	@ (1000373c <_cyhal_syspm_common_cb+0x8c>)
    if (hal_mode == CYHAL_SYSPM_CHECK_FAIL || hal_mode == CYHAL_SYSPM_AFTER_TRANSITION || hal_mode == CYHAL_SYSPM_AFTER_DS_WFI_TRANSITION)
100036cc:	bf9c      	itt	ls
100036ce:	4104      	asrls	r4, r0
100036d0:	f004 0401 	andls.w	r4, r4, #1
        second = _cyhal_syspm_callback_ptr;
100036d4:	f8d3 8000 	ldr.w	r8, [r3]
    cyhal_syspm_callback_mode_t hal_mode = _cyhal_utils_convert_pdltohal_pm_mode(mode);
100036d8:	4605      	mov	r5, r0
    if (hal_mode == CYHAL_SYSPM_CHECK_FAIL || hal_mode == CYHAL_SYSPM_AFTER_TRANSITION || hal_mode == CYHAL_SYSPM_AFTER_DS_WFI_TRANSITION)
100036da:	b914      	cbnz	r4, 100036e2 <_cyhal_syspm_common_cb+0x32>
100036dc:	4643      	mov	r3, r8
        first = _cyhal_syspm_peripheral_callback_ptr;
100036de:	46b8      	mov	r8, r7
        second = _cyhal_syspm_callback_ptr;
100036e0:	461f      	mov	r7, r3
    cyhal_syspm_callback_data_t* first_current = _cyhal_syspm_call_all_pm_callbacks(first, &allow, state, hal_mode);
100036e2:	462b      	mov	r3, r5
100036e4:	4632      	mov	r2, r6
100036e6:	f10d 0107 	add.w	r1, sp, #7
100036ea:	4640      	mov	r0, r8
100036ec:	f7ff ff8a 	bl	10003604 <_cyhal_syspm_call_all_pm_callbacks>
        : second;
100036f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cyhal_syspm_callback_data_t* first_current = _cyhal_syspm_call_all_pm_callbacks(first, &allow, state, hal_mode);
100036f4:	4604      	mov	r4, r0
        : second;
100036f6:	b1bb      	cbz	r3, 10003728 <_cyhal_syspm_common_cb+0x78>
        ? _cyhal_syspm_call_all_pm_callbacks(second, &allow, state, hal_mode)
100036f8:	462b      	mov	r3, r5
100036fa:	f10d 0107 	add.w	r1, sp, #7
100036fe:	4632      	mov	r2, r6
10003700:	4638      	mov	r0, r7
10003702:	f7ff ff7f 	bl	10003604 <_cyhal_syspm_call_all_pm_callbacks>
    if (!allow && (CYHAL_SYSPM_CHECK_READY == hal_mode))
10003706:	f89d 3007 	ldrb.w	r3, [sp, #7]
        ? _cyhal_syspm_call_all_pm_callbacks(second, &allow, state, hal_mode)
1000370a:	4601      	mov	r1, r0
    if (!allow && (CYHAL_SYSPM_CHECK_READY == hal_mode))
1000370c:	b973      	cbnz	r3, 1000372c <_cyhal_syspm_common_cb+0x7c>
1000370e:	2d01      	cmp	r5, #1
10003710:	d108      	bne.n	10003724 <_cyhal_syspm_common_cb+0x74>
        _cyhal_syspm_backtrack_all_pm_callbacks(second, second_current, state);
10003712:	4632      	mov	r2, r6
10003714:	4638      	mov	r0, r7
10003716:	f7ff ff9d 	bl	10003654 <_cyhal_syspm_backtrack_all_pm_callbacks>
        _cyhal_syspm_backtrack_all_pm_callbacks(first, first_current, state);
1000371a:	4632      	mov	r2, r6
1000371c:	4621      	mov	r1, r4
1000371e:	4640      	mov	r0, r8
10003720:	f7ff ff98 	bl	10003654 <_cyhal_syspm_backtrack_all_pm_callbacks>
    return allow ? CY_SYSPM_SUCCESS : CY_SYSPM_FAIL;
10003724:	4806      	ldr	r0, [pc, #24]	@ (10003740 <_cyhal_syspm_common_cb+0x90>)
10003726:	e002      	b.n	1000372e <_cyhal_syspm_common_cb+0x7e>
        : second;
10003728:	4639      	mov	r1, r7
1000372a:	e7f0      	b.n	1000370e <_cyhal_syspm_common_cb+0x5e>
    return allow ? CY_SYSPM_SUCCESS : CY_SYSPM_FAIL;
1000372c:	2000      	movs	r0, #0
}
1000372e:	b002      	add	sp, #8
10003730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
10003734:	0800233c 	.word	0x0800233c
10003738:	fffefefb 	.word	0xfffefefb
1000373c:	08002338 	.word	0x08002338
10003740:	004200ff 	.word	0x004200ff

10003744 <_cyhal_syspm_cb_hibernate>:
{
10003744:	4608      	mov	r0, r1
    return _cyhal_syspm_common_cb(mode, CYHAL_SYSPM_CB_SYSTEM_HIBERNATE);
10003746:	2108      	movs	r1, #8
10003748:	f7ff bfb2 	b.w	100036b0 <_cyhal_syspm_common_cb>

1000374c <_cyhal_syspm_register_cb>:
    CY_ASSERT(callback_data != NULL);
    _cyhal_syspm_remove_callback_from_list(&_cyhal_syspm_peripheral_callback_ptr, callback_data);
}

static bool _cyhal_syspm_register_cb(cy_stc_syspm_callback_t *data, cy_en_syspm_callback_type_t type, Cy_SysPmCallback callback)
{
1000374c:	b4f0      	push	{r4, r5, r6, r7}
    memcpy(data, &_cyhal_syspm_cb_default, sizeof(cy_stc_syspm_callback_t));
1000374e:	4d09      	ldr	r5, [pc, #36]	@ (10003774 <_cyhal_syspm_register_cb+0x28>)
{
10003750:	4606      	mov	r6, r0
10003752:	460f      	mov	r7, r1
10003754:	4694      	mov	ip, r2
    memcpy(data, &_cyhal_syspm_cb_default, sizeof(cy_stc_syspm_callback_t));
10003756:	1d04      	adds	r4, r0, #4
10003758:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1000375a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1000375c:	e895 0003 	ldmia.w	r5, {r0, r1}
10003760:	e884 0003 	stmia.w	r4, {r0, r1}
    data->callback = callback;
10003764:	f8c6 c000 	str.w	ip, [r6]
    data->type = type;
10003768:	7137      	strb	r7, [r6, #4]
    return Cy_SysPm_RegisterCallback(data);
1000376a:	4630      	mov	r0, r6
}
1000376c:	bcf0      	pop	{r4, r5, r6, r7}
    return Cy_SysPm_RegisterCallback(data);
1000376e:	f002 bd41 	b.w	100061f4 <Cy_SysPm_RegisterCallback>
10003772:	bf00      	nop
10003774:	1000c804 	.word	0x1000c804

10003778 <_cyhal_syspm_cb_lp>:
{
10003778:	b538      	push	{r3, r4, r5, lr}
1000377a:	460c      	mov	r4, r1
    cy_en_syspm_status_t status = _cyhal_syspm_common_cb(mode, CYHAL_SYSPM_CB_SYSTEM_LOW);
1000377c:	4620      	mov	r0, r4
1000377e:	2120      	movs	r1, #32
10003780:	f7ff ff96 	bl	100036b0 <_cyhal_syspm_common_cb>
    if (mode == CY_SYSPM_BEFORE_TRANSITION)
10003784:	2c04      	cmp	r4, #4
    cy_en_syspm_status_t status = _cyhal_syspm_common_cb(mode, CYHAL_SYSPM_CB_SYSTEM_LOW);
10003786:	4605      	mov	r5, r0
    if (mode == CY_SYSPM_BEFORE_TRANSITION)
10003788:	d108      	bne.n	1000379c <_cyhal_syspm_cb_lp+0x24>
        uint32_t hfclk_freq_mhz = Cy_SysClk_ClkHfGetFrequency(0) / 1000000;
1000378a:	2000      	movs	r0, #0
1000378c:	f002 fad4 	bl	10005d38 <Cy_SysClk_ClkHfGetFrequency>
        Cy_SysLib_SetWaitStates(true, hfclk_freq_mhz);
10003790:	4903      	ldr	r1, [pc, #12]	@ (100037a0 <_cyhal_syspm_cb_lp+0x28>)
10003792:	fbb0 f1f1 	udiv	r1, r0, r1
10003796:	2001      	movs	r0, #1
10003798:	f002 fbd2 	bl	10005f40 <Cy_SysLib_SetWaitStates>
}
1000379c:	4628      	mov	r0, r5
1000379e:	bd38      	pop	{r3, r4, r5, pc}
100037a0:	000f4240 	.word	0x000f4240

100037a4 <_cyhal_syspm_cb_normal>:
{
100037a4:	b538      	push	{r3, r4, r5, lr}
100037a6:	460c      	mov	r4, r1
    cy_en_syspm_status_t status = _cyhal_syspm_common_cb(mode, CYHAL_SYSPM_CB_SYSTEM_NORMAL);
100037a8:	4620      	mov	r0, r4
100037aa:	2110      	movs	r1, #16
100037ac:	f7ff ff80 	bl	100036b0 <_cyhal_syspm_common_cb>
    if (mode == CY_SYSPM_AFTER_TRANSITION)
100037b0:	2c08      	cmp	r4, #8
    cy_en_syspm_status_t status = _cyhal_syspm_common_cb(mode, CYHAL_SYSPM_CB_SYSTEM_NORMAL);
100037b2:	4605      	mov	r5, r0
    if (mode == CY_SYSPM_AFTER_TRANSITION)
100037b4:	d108      	bne.n	100037c8 <_cyhal_syspm_cb_normal+0x24>
        uint32_t hfclk_freq_mhz = Cy_SysClk_ClkHfGetFrequency(0) / 1000000;
100037b6:	2000      	movs	r0, #0
100037b8:	f002 fabe 	bl	10005d38 <Cy_SysClk_ClkHfGetFrequency>
        Cy_SysLib_SetWaitStates(false, hfclk_freq_mhz);
100037bc:	4903      	ldr	r1, [pc, #12]	@ (100037cc <_cyhal_syspm_cb_normal+0x28>)
100037be:	fbb0 f1f1 	udiv	r1, r0, r1
100037c2:	2000      	movs	r0, #0
100037c4:	f002 fbbc 	bl	10005f40 <Cy_SysLib_SetWaitStates>
}
100037c8:	4628      	mov	r0, r5
100037ca:	bd38      	pop	{r3, r4, r5, pc}
100037cc:	000f4240 	.word	0x000f4240

100037d0 <_cyhal_syspm_cb_sleep_deepsleep>:
{
100037d0:	b510      	push	{r4, lr}
100037d2:	4604      	mov	r4, r0
    cy_en_syspm_status_t status = _cyhal_syspm_common_cb(mode, state);
100037d4:	f7ff ff6c 	bl	100036b0 <_cyhal_syspm_common_cb>
    if (mode == CY_SYSPM_BEFORE_TRANSITION)
100037d8:	2c04      	cmp	r4, #4
100037da:	d113      	bne.n	10003804 <_cyhal_syspm_cb_sleep_deepsleep+0x34>
        _cyhal_systick_disable = _cyhal_syspm_is_systick_enabled() && _cyhal_disable_systick_before_sleep_deepsleep;
100037dc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
100037e0:	691a      	ldr	r2, [r3, #16]
100037e2:	f012 0f01 	tst.w	r2, #1
100037e6:	4a0e      	ldr	r2, [pc, #56]	@ (10003820 <_cyhal_syspm_cb_sleep_deepsleep+0x50>)
100037e8:	d009      	beq.n	100037fe <_cyhal_syspm_cb_sleep_deepsleep+0x2e>
100037ea:	490e      	ldr	r1, [pc, #56]	@ (10003824 <_cyhal_syspm_cb_sleep_deepsleep+0x54>)
100037ec:	7809      	ldrb	r1, [r1, #0]
100037ee:	b131      	cbz	r1, 100037fe <_cyhal_syspm_cb_sleep_deepsleep+0x2e>
100037f0:	2101      	movs	r1, #1
100037f2:	7011      	strb	r1, [r2, #0]
            _cyhal_syspm_disable_systick();
100037f4:	691a      	ldr	r2, [r3, #16]
100037f6:	f022 0201 	bic.w	r2, r2, #1
100037fa:	611a      	str	r2, [r3, #16]
}
100037fc:	bd10      	pop	{r4, pc}
        _cyhal_systick_disable = _cyhal_syspm_is_systick_enabled() && _cyhal_disable_systick_before_sleep_deepsleep;
100037fe:	2300      	movs	r3, #0
10003800:	7013      	strb	r3, [r2, #0]
        if (_cyhal_systick_disable)
10003802:	e7fb      	b.n	100037fc <_cyhal_syspm_cb_sleep_deepsleep+0x2c>
    else if (mode == CY_SYSPM_AFTER_TRANSITION)
10003804:	2c08      	cmp	r4, #8
10003806:	d1f9      	bne.n	100037fc <_cyhal_syspm_cb_sleep_deepsleep+0x2c>
        if (_cyhal_systick_disable)
10003808:	4b05      	ldr	r3, [pc, #20]	@ (10003820 <_cyhal_syspm_cb_sleep_deepsleep+0x50>)
1000380a:	781b      	ldrb	r3, [r3, #0]
1000380c:	2b00      	cmp	r3, #0
1000380e:	d0f5      	beq.n	100037fc <_cyhal_syspm_cb_sleep_deepsleep+0x2c>
            _cyhal_syspm_enable_systick();
10003810:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
10003814:	6913      	ldr	r3, [r2, #16]
10003816:	f043 0301 	orr.w	r3, r3, #1
1000381a:	6113      	str	r3, [r2, #16]
    return status;
1000381c:	e7ee      	b.n	100037fc <_cyhal_syspm_cb_sleep_deepsleep+0x2c>
1000381e:	bf00      	nop
10003820:	08002c34 	.word	0x08002c34
10003824:	08002b9e 	.word	0x08002b9e

10003828 <_cyhal_syspm_cb_deepsleep>:
    if((mode == CY_SYSPM_CHECK_READY) && (_cyhal_deep_sleep_lock != 0))
10003828:	2901      	cmp	r1, #1
{
1000382a:	4608      	mov	r0, r1
    if((mode == CY_SYSPM_CHECK_READY) && (_cyhal_deep_sleep_lock != 0))
1000382c:	d102      	bne.n	10003834 <_cyhal_syspm_cb_deepsleep+0xc>
1000382e:	4b04      	ldr	r3, [pc, #16]	@ (10003840 <_cyhal_syspm_cb_deepsleep+0x18>)
10003830:	881b      	ldrh	r3, [r3, #0]
10003832:	b913      	cbnz	r3, 1000383a <_cyhal_syspm_cb_deepsleep+0x12>
    return _cyhal_syspm_cb_sleep_deepsleep(mode, CYHAL_SYSPM_CB_CPU_DEEPSLEEP);
10003834:	2102      	movs	r1, #2
10003836:	f7ff bfcb 	b.w	100037d0 <_cyhal_syspm_cb_sleep_deepsleep>
}
1000383a:	4802      	ldr	r0, [pc, #8]	@ (10003844 <_cyhal_syspm_cb_deepsleep+0x1c>)
1000383c:	4770      	bx	lr
1000383e:	bf00      	nop
10003840:	08002b9c 	.word	0x08002b9c
10003844:	004200ff 	.word	0x004200ff

10003848 <_cyhal_syspm_cb_sleep>:
{
10003848:	4608      	mov	r0, r1
    return _cyhal_syspm_cb_sleep_deepsleep(mode, CYHAL_SYSPM_CB_CPU_SLEEP);
1000384a:	2101      	movs	r1, #1
1000384c:	f7ff bfc0 	b.w	100037d0 <_cyhal_syspm_cb_sleep_deepsleep>

10003850 <_cyhal_syspm_register_peripheral_callback>:
{
10003850:	b510      	push	{r4, lr}
10003852:	4604      	mov	r4, r0
    uint32_t intr_status = cyhal_system_critical_section_enter();
10003854:	f7ff f935 	bl	10002ac2 <Cy_SysLib_EnterCriticalSection>
    if(!_cyhal_syspm_is_registered(add))
10003858:	68e3      	ldr	r3, [r4, #12]
1000385a:	b91b      	cbnz	r3, 10003864 <_cyhal_syspm_register_peripheral_callback+0x14>
        add->next = *list;
1000385c:	4b03      	ldr	r3, [pc, #12]	@ (1000386c <_cyhal_syspm_register_peripheral_callback+0x1c>)
1000385e:	681a      	ldr	r2, [r3, #0]
10003860:	60e2      	str	r2, [r4, #12]
        *list = add;
10003862:	601c      	str	r4, [r3, #0]
}
10003864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cyhal_system_critical_section_exit(intr_status);
10003868:	f7ff b92f 	b.w	10002aca <Cy_SysLib_ExitCriticalSection>
1000386c:	0800233c 	.word	0x0800233c

10003870 <_cyhal_syspm_unregister_peripheral_callback>:
{
10003870:	4601      	mov	r1, r0
    _cyhal_syspm_remove_callback_from_list(&_cyhal_syspm_peripheral_callback_ptr, callback_data);
10003872:	4801      	ldr	r0, [pc, #4]	@ (10003878 <_cyhal_syspm_unregister_peripheral_callback+0x8>)
10003874:	f7ff bf04 	b.w	10003680 <_cyhal_syspm_remove_callback_from_list>
10003878:	0800233c 	.word	0x0800233c

1000387c <cyhal_syspm_init>:
/******************************************************************************
 ******************************** Public APIs *********************************
 *****************************************************************************/

cy_rslt_t cyhal_syspm_init(void)
{
1000387c:	b508      	push	{r3, lr}
#if defined(COMPONENT_CAT1A) || defined(COMPONENT_CAT1B) || defined(COMPONENT_CAT1C) || defined(COMPONENT_CAT1D)
    /* Check the IO status. If current status is frozen, unfreeze the system. */
    if (Cy_SysPm_GetIoFreezeStatus())
1000387e:	f002 fe65 	bl	1000654c <Cy_SysPm_IoIsFrozen>
10003882:	b108      	cbz	r0, 10003888 <cyhal_syspm_init+0xc>
    {
        /* Unfreeze the system */
        Cy_SysPm_IoUnfreeze();
10003884:	f002 fcee 	bl	10006264 <Cy_SysPm_IoUnfreeze>
    }

#endif /* defined(COMPONENT_CAT1A) || defined(COMPONENT_CAT1B) || defined(COMPONENT_CAT1C) || defined(COMPONENT_CAT1D) */

    cy_rslt_t rslt = CY_RSLT_SUCCESS;
    if (!_cyhal_syspm_register_cb(&_cyhal_syspm_sleep, CY_SYSPM_SLEEP, _cyhal_syspm_cb_sleep)
10003888:	4a10      	ldr	r2, [pc, #64]	@ (100038cc <cyhal_syspm_init+0x50>)
1000388a:	4811      	ldr	r0, [pc, #68]	@ (100038d0 <cyhal_syspm_init+0x54>)
1000388c:	2100      	movs	r1, #0
1000388e:	f7ff ff5d 	bl	1000374c <_cyhal_syspm_register_cb>
10003892:	b1b8      	cbz	r0, 100038c4 <cyhal_syspm_init+0x48>
        || !_cyhal_syspm_register_cb(&_cyhal_syspm_deepsleep, CY_SYSPM_DEEPSLEEP, _cyhal_syspm_cb_deepsleep)
10003894:	4a0f      	ldr	r2, [pc, #60]	@ (100038d4 <cyhal_syspm_init+0x58>)
10003896:	4810      	ldr	r0, [pc, #64]	@ (100038d8 <cyhal_syspm_init+0x5c>)
10003898:	2101      	movs	r1, #1
1000389a:	f7ff ff57 	bl	1000374c <_cyhal_syspm_register_cb>
1000389e:	b188      	cbz	r0, 100038c4 <cyhal_syspm_init+0x48>
        || !_cyhal_syspm_register_cb(&_cyhal_syspm_hibernate, CY_SYSPM_HIBERNATE, _cyhal_syspm_cb_hibernate)
100038a0:	4a0e      	ldr	r2, [pc, #56]	@ (100038dc <cyhal_syspm_init+0x60>)
100038a2:	480f      	ldr	r0, [pc, #60]	@ (100038e0 <cyhal_syspm_init+0x64>)
100038a4:	2102      	movs	r1, #2
100038a6:	f7ff ff51 	bl	1000374c <_cyhal_syspm_register_cb>
100038aa:	b158      	cbz	r0, 100038c4 <cyhal_syspm_init+0x48>
    #if (defined(COMPONENT_CAT1A) && !(defined(SRSS_ULP_VARIANT) && (SRSS_ULP_VARIANT == 0u))) || defined(COMPONENT_CAT1D)
        || !_cyhal_syspm_register_cb(&_cyhal_syspm_normal, CY_SYSPM_LP, _cyhal_syspm_cb_normal)
100038ac:	4a0d      	ldr	r2, [pc, #52]	@ (100038e4 <cyhal_syspm_init+0x68>)
100038ae:	480e      	ldr	r0, [pc, #56]	@ (100038e8 <cyhal_syspm_init+0x6c>)
100038b0:	2103      	movs	r1, #3
100038b2:	f7ff ff4b 	bl	1000374c <_cyhal_syspm_register_cb>
100038b6:	b128      	cbz	r0, 100038c4 <cyhal_syspm_init+0x48>
        || !_cyhal_syspm_register_cb(&_cyhal_syspm_lp, CY_SYSPM_ULP, _cyhal_syspm_cb_lp)
100038b8:	4a0c      	ldr	r2, [pc, #48]	@ (100038ec <cyhal_syspm_init+0x70>)
100038ba:	480d      	ldr	r0, [pc, #52]	@ (100038f0 <cyhal_syspm_init+0x74>)
100038bc:	2104      	movs	r1, #4
100038be:	f7ff ff45 	bl	1000374c <_cyhal_syspm_register_cb>
100038c2:	b908      	cbnz	r0, 100038c8 <cyhal_syspm_init+0x4c>
        || !_cyhal_syspm_register_cb(&_cyhal_syspm_deepsleep_ram, CY_SYSPM_DEEPSLEEP_RAM, _cyhal_syspm_cb_deepsleep_ram)
        || !_cyhal_syspm_register_cb(&_cyhal_syspm_deepsleep_off, CY_SYSPM_DEEPSLEEP_OFF, _cyhal_syspm_cb_deepsleep_off)
    #endif /* defined(COMPONENT_CAT1B) || defined(COMPONENT_CAT1D) */
    )
        {
            rslt = CYHAL_SYSPM_RSLT_INIT_ERROR;
100038c4:	480b      	ldr	r0, [pc, #44]	@ (100038f4 <cyhal_syspm_init+0x78>)
        }

    return rslt;
}
100038c6:	bd08      	pop	{r3, pc}
    cy_rslt_t rslt = CY_RSLT_SUCCESS;
100038c8:	2000      	movs	r0, #0
    return rslt;
100038ca:	e7fc      	b.n	100038c6 <cyhal_syspm_init+0x4a>
100038cc:	10003849 	.word	0x10003849
100038d0:	08002c18 	.word	0x08002c18
100038d4:	10003829 	.word	0x10003829
100038d8:	08002ba8 	.word	0x08002ba8
100038dc:	10003745 	.word	0x10003745
100038e0:	08002bc4 	.word	0x08002bc4
100038e4:	100037a5 	.word	0x100037a5
100038e8:	08002bfc 	.word	0x08002bfc
100038ec:	10003779 	.word	0x10003779
100038f0:	08002be0 	.word	0x08002be0
100038f4:	04021a01 	.word	0x04021a01

100038f8 <cyhal_system_delay_ms>:
    CY_UNUSED_PARAMETER(result);
}
#endif

cy_rslt_t cyhal_system_delay_ms(uint32_t milliseconds)
{
100038f8:	b508      	push	{r3, lr}
#if defined(CY_RTOS_AWARE) || defined(COMPONENT_RTOS_AWARE)
    // The RTOS is configured to round down, while this API is intended to wait at least the
    // requested time. Add 1 to the requested time to make it behave the same.
    return cy_rtos_delay_milliseconds(milliseconds + 1);
#else
    Cy_SysLib_Delay(milliseconds);
100038fa:	f002 fa8d 	bl	10005e18 <Cy_SysLib_Delay>
    return CY_RSLT_SUCCESS;
#endif
}
100038fe:	2000      	movs	r0, #0
10003900:	bd08      	pop	{r3, pc}
	...

10003904 <cyhal_system_set_supply_voltage>:
}

void cyhal_system_set_supply_voltage(cyhal_system_voltage_supply_t supply, uint32_t mvolts)
{
    CY_ASSERT((size_t)supply <= CYHAL_VOLTAGE_SUPPLY_MAX);
    _cyhal_system_supply_voltages[(size_t)supply] = mvolts;
10003904:	4b01      	ldr	r3, [pc, #4]	@ (1000390c <cyhal_system_set_supply_voltage+0x8>)
10003906:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
1000390a:	4770      	bx	lr
1000390c:	08002c38 	.word	0x08002c38

10003910 <__NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
10003910:	2800      	cmp	r0, #0
10003912:	db07      	blt.n	10003924 <__NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10003914:	4a04      	ldr	r2, [pc, #16]	@ (10003928 <__NVIC_EnableIRQ+0x18>)
10003916:	0941      	lsrs	r1, r0, #5
10003918:	2301      	movs	r3, #1
1000391a:	f000 001f 	and.w	r0, r0, #31
1000391e:	4083      	lsls	r3, r0
10003920:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
10003924:	4770      	bx	lr
10003926:	bf00      	nop
10003928:	e000e100 	.word	0xe000e100

1000392c <__NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
1000392c:	2800      	cmp	r0, #0
1000392e:	db0c      	blt.n	1000394a <__NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10003930:	0943      	lsrs	r3, r0, #5
10003932:	4906      	ldr	r1, [pc, #24]	@ (1000394c <__NVIC_DisableIRQ+0x20>)
10003934:	f000 001f 	and.w	r0, r0, #31
10003938:	3320      	adds	r3, #32
1000393a:	2201      	movs	r2, #1
1000393c:	4082      	lsls	r2, r0
1000393e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
10003942:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
10003946:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
1000394a:	4770      	bx	lr
1000394c:	e000e100 	.word	0xe000e100

10003950 <Cy_GPIO_SetHSIOM>:
    portNum = ((uint32_t)(base) - CY_GPIO_BASE) / GPIO_PRT_SECTION_SIZE;
10003950:	4b12      	ldr	r3, [pc, #72]	@ (1000399c <Cy_GPIO_SetHSIOM+0x4c>)
10003952:	681b      	ldr	r3, [r3, #0]
{
10003954:	b530      	push	{r4, r5, lr}
    portNum = ((uint32_t)(base) - CY_GPIO_BASE) / GPIO_PRT_SECTION_SIZE;
10003956:	699c      	ldr	r4, [r3, #24]
10003958:	1b00      	subs	r0, r0, r4
    portAddrHSIOM = (HSIOM_PRT_V1_Type*)(CY_HSIOM_BASE + (HSIOM_PRT_SECTION_SIZE * portNum));
1000395a:	695c      	ldr	r4, [r3, #20]
    portNum = ((uint32_t)(base) - CY_GPIO_BASE) / GPIO_PRT_SECTION_SIZE;
1000395c:	09c0      	lsrs	r0, r0, #7
    if(pinNum < CY_GPIO_PRT_HALF)
1000395e:	2903      	cmp	r1, #3
    portAddrHSIOM = (HSIOM_PRT_V1_Type*)(CY_HSIOM_BASE + (HSIOM_PRT_SECTION_SIZE * portNum));
10003960:	ea4f 1500 	mov.w	r5, r0, lsl #4
        HSIOM_PRT_PORT_SEL0(portAddrHSIOM) = tempReg | (((uint32_t)value & CY_GPIO_HSIOM_MASK) << (pinNum << CY_GPIO_HSIOM_OFFSET));
10003964:	f002 021f 	and.w	r2, r2, #31
    portAddrHSIOM = (HSIOM_PRT_V1_Type*)(CY_HSIOM_BASE + (HSIOM_PRT_SECTION_SIZE * portNum));
10003968:	eb04 1000 	add.w	r0, r4, r0, lsl #4
    if(pinNum < CY_GPIO_PRT_HALF)
1000396c:	f04f 031f 	mov.w	r3, #31
10003970:	d809      	bhi.n	10003986 <Cy_GPIO_SetHSIOM+0x36>
        tempReg = HSIOM_PRT_PORT_SEL0(portAddrHSIOM) & ~(CY_GPIO_HSIOM_MASK << (pinNum << CY_GPIO_HSIOM_OFFSET));
10003972:	5928      	ldr	r0, [r5, r4]
10003974:	00c9      	lsls	r1, r1, #3
10003976:	408b      	lsls	r3, r1
10003978:	ea20 0303 	bic.w	r3, r0, r3
        HSIOM_PRT_PORT_SEL0(portAddrHSIOM) = tempReg | (((uint32_t)value & CY_GPIO_HSIOM_MASK) << (pinNum << CY_GPIO_HSIOM_OFFSET));
1000397c:	fa02 f101 	lsl.w	r1, r2, r1
10003980:	430b      	orrs	r3, r1
10003982:	512b      	str	r3, [r5, r4]
}
10003984:	bd30      	pop	{r4, r5, pc}
        pinNum -= CY_GPIO_PRT_HALF;
10003986:	3904      	subs	r1, #4
        tempReg = HSIOM_PRT_PORT_SEL1(portAddrHSIOM) & ~(CY_GPIO_HSIOM_MASK << (pinNum << CY_GPIO_HSIOM_OFFSET));
10003988:	6844      	ldr	r4, [r0, #4]
1000398a:	00c9      	lsls	r1, r1, #3
1000398c:	408b      	lsls	r3, r1
1000398e:	ea24 0303 	bic.w	r3, r4, r3
        HSIOM_PRT_PORT_SEL1(portAddrHSIOM) = tempReg | (((uint32_t)value & CY_GPIO_HSIOM_MASK) << (pinNum << CY_GPIO_HSIOM_OFFSET));
10003992:	408a      	lsls	r2, r1
10003994:	431a      	orrs	r2, r3
10003996:	6042      	str	r2, [r0, #4]
}
10003998:	e7f4      	b.n	10003984 <Cy_GPIO_SetHSIOM+0x34>
1000399a:	bf00      	nop
1000399c:	08002c40 	.word	0x08002c40

100039a0 <Cy_GPIO_GetHSIOM>:
    portNum = ((uint32_t)(base) - CY_GPIO_BASE) / GPIO_PRT_SECTION_SIZE;
100039a0:	4b09      	ldr	r3, [pc, #36]	@ (100039c8 <Cy_GPIO_GetHSIOM+0x28>)
100039a2:	681b      	ldr	r3, [r3, #0]
100039a4:	699a      	ldr	r2, [r3, #24]
    portAddrHSIOM = (HSIOM_PRT_V1_Type*)(CY_HSIOM_BASE + (HSIOM_PRT_SECTION_SIZE * portNum));
100039a6:	695b      	ldr	r3, [r3, #20]
    portNum = ((uint32_t)(base) - CY_GPIO_BASE) / GPIO_PRT_SECTION_SIZE;
100039a8:	1a80      	subs	r0, r0, r2
100039aa:	09c0      	lsrs	r0, r0, #7
    portAddrHSIOM = (HSIOM_PRT_V1_Type*)(CY_HSIOM_BASE + (HSIOM_PRT_SECTION_SIZE * portNum));
100039ac:	0102      	lsls	r2, r0, #4
100039ae:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    if(pinNum < CY_GPIO_PRT_HALF)
100039b2:	2903      	cmp	r1, #3
        returnValue = (HSIOM_PRT_PORT_SEL0(portAddrHSIOM) >> (pinNum << CY_GPIO_HSIOM_OFFSET)) & CY_GPIO_HSIOM_MASK;
100039b4:	bf92      	itee	ls
100039b6:	58d0      	ldrls	r0, [r2, r3]
        returnValue = (HSIOM_PRT_PORT_SEL1(portAddrHSIOM) >> (pinNum << CY_GPIO_HSIOM_OFFSET)) & CY_GPIO_HSIOM_MASK;
100039b8:	6840      	ldrhi	r0, [r0, #4]
        pinNum -= CY_GPIO_PRT_HALF;
100039ba:	3904      	subhi	r1, #4
        returnValue = (HSIOM_PRT_PORT_SEL1(portAddrHSIOM) >> (pinNum << CY_GPIO_HSIOM_OFFSET)) & CY_GPIO_HSIOM_MASK;
100039bc:	00c9      	lsls	r1, r1, #3
100039be:	40c8      	lsrs	r0, r1
100039c0:	f000 001f 	and.w	r0, r0, #31
}
100039c4:	4770      	bx	lr
100039c6:	bf00      	nop
100039c8:	08002c40 	.word	0x08002c40

100039cc <Cy_SCB_GetFifoSize>:
__STATIC_INLINE uint32_t Cy_SCB_GetFifoSize(CySCB_Type const *base)
{
#if((defined (CY_IP_MXSCB_VERSION) && (CY_IP_MXSCB_VERSION>=2)) || defined (CY_IP_MXS22SCB))
    {return (((uint32_t)(CY_SCB_FIFO_SIZE)) >> _FLD2VAL(SCB_CTRL_MEM_WIDTH, SCB_CTRL(base)));}
#elif(defined (CY_IP_MXSCB_VERSION) && (CY_IP_MXSCB_VERSION==1))
    {return (_FLD2BOOL(SCB_CTRL_BYTE_MODE, SCB_CTRL(base)) ? (CY_SCB_FIFO_SIZE) : (CY_SCB_FIFO_SIZE / 2UL));}
100039cc:	6803      	ldr	r3, [r0, #0]
100039ce:	f413 6f00 	tst.w	r3, #2048	@ 0x800
#else
    return 0;
#endif /* ((CY_IP_MXSCB_VERSION>=2) || defined (CY_IP_MXS22SCB)) */

}
100039d2:	bf14      	ite	ne
100039d4:	2080      	movne	r0, #128	@ 0x80
100039d6:	2040      	moveq	r0, #64	@ 0x40
100039d8:	4770      	bx	lr
	...

100039dc <_cyhal_uart_init_hw>:

    return result;
}

static cy_rslt_t _cyhal_uart_init_hw(cyhal_uart_t *obj)
{
100039dc:	b570      	push	{r4, r5, r6, lr}
100039de:	4604      	mov	r4, r0
    uint8_t scb_arr_index = _cyhal_scb_get_block_index(obj->resource.block_num);
100039e0:	7940      	ldrb	r0, [r0, #5]
100039e2:	f7ff fd55 	bl	10003490 <_cyhal_scb_get_block_index>
    obj->base = _CYHAL_SCB_BASE_ADDRESSES[scb_arr_index];
100039e6:	4b14      	ldr	r3, [pc, #80]	@ (10003a38 <_cyhal_uart_init_hw+0x5c>)
100039e8:	4622      	mov	r2, r4
    uint8_t scb_arr_index = _cyhal_scb_get_block_index(obj->resource.block_num);
100039ea:	4606      	mov	r6, r0
    obj->base = _CYHAL_SCB_BASE_ADDRESSES[scb_arr_index];
100039ec:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
100039f0:	f842 0b18 	str.w	r0, [r2], #24
        // Ensure user-provided clock is enabled
        Cy_SCB_EnableClock(obj->base, cyhal_clock_get_frequency(&(obj->clock)), false);
    }
    #endif

    cy_rslt_t result = (cy_rslt_t) Cy_SCB_UART_Init(obj->base, &(obj->config), &(obj->context));
100039f4:	f104 0150 	add.w	r1, r4, #80	@ 0x50
100039f8:	f001 f8f0 	bl	10004bdc <Cy_SCB_UART_Init>

    if (CY_RSLT_SUCCESS == result)
100039fc:	4605      	mov	r5, r0
100039fe:	b9c0      	cbnz	r0, 10003a32 <_cyhal_uart_init_hw+0x56>
    #if defined (COMPONENT_CAT5)
        Cy_SCB_RegisterInterruptCallback(obj->base, _cyhal_irq_cb[_CYHAL_SCB_IRQ_N[scb_arr_index]]);
        Cy_SCB_EnableInterrupt(obj->base);
    #endif

        _cyhal_irq_register(_CYHAL_SCB_IRQ_N[scb_arr_index], CYHAL_ISR_PRIORITY_DEFAULT, (cy_israddress)_cyhal_uart_irq_handler);
10003a00:	4b0e      	ldr	r3, [pc, #56]	@ (10003a3c <_cyhal_uart_init_hw+0x60>)
10003a02:	4a0f      	ldr	r2, [pc, #60]	@ (10003a40 <_cyhal_uart_init_hw+0x64>)
10003a04:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
        obj->irq_cause = CYHAL_UART_IRQ_NONE;
10003a08:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
        _cyhal_irq_register(_CYHAL_SCB_IRQ_N[scb_arr_index], CYHAL_ISR_PRIORITY_DEFAULT, (cy_israddress)_cyhal_uart_irq_handler);
10003a0c:	2103      	movs	r1, #3
        obj->callback_data.callback_arg = NULL;
10003a0e:	e9c4 0026 	strd	r0, r0, [r4, #152]	@ 0x98
        _cyhal_irq_register(_CYHAL_SCB_IRQ_N[scb_arr_index], CYHAL_ISR_PRIORITY_DEFAULT, (cy_israddress)_cyhal_uart_irq_handler);
10003a12:	4630      	mov	r0, r6
10003a14:	f7ff fce4 	bl	100033e0 <_cyhal_irq_register>
    NVIC_EnableIRQ(irqn);
10003a18:	4630      	mov	r0, r6
10003a1a:	f7ff ff79 	bl	10003910 <__NVIC_EnableIRQ>
        _cyhal_irq_enable(_CYHAL_SCB_IRQ_N[scb_arr_index]);

        _cyhal_scb_update_instance_data(obj->resource.block_num, (void*)obj, &_cyhal_uart_pm_callback_instance);
10003a1e:	4a09      	ldr	r2, [pc, #36]	@ (10003a44 <_cyhal_uart_init_hw+0x68>)
10003a20:	7960      	ldrb	r0, [r4, #5]
10003a22:	4621      	mov	r1, r4
10003a24:	f7ff fdc4 	bl	100035b0 <_cyhal_scb_update_instance_data>

        Cy_SCB_UART_Enable(obj->base);
10003a28:	6822      	ldr	r2, [r4, #0]
* The pointer to the UART SCB instance.
*
*******************************************************************************/
__STATIC_INLINE void Cy_SCB_UART_Enable(CySCB_Type *base)
{
    SCB_CTRL(base) |= SCB_CTRL_ENABLED_Msk;
10003a2a:	6813      	ldr	r3, [r2, #0]
10003a2c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
10003a30:	6013      	str	r3, [r2, #0]
    }

    return result;
}
10003a32:	4628      	mov	r0, r5
10003a34:	bd70      	pop	{r4, r5, r6, pc}
10003a36:	bf00      	nop
10003a38:	1000c7c0 	.word	0x1000c7c0
10003a3c:	1000c7ee 	.word	0x1000c7ee
10003a40:	10003a49 	.word	0x10003a49
10003a44:	10003ce1 	.word	0x10003ce1

10003a48 <_cyhal_uart_irq_handler>:
{
10003a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cyhal_uart_t* old_irq_obj = (cyhal_uart_t*)_cyhal_uart_irq_obj;
10003a4c:	4e2a      	ldr	r6, [pc, #168]	@ (10003af8 <_cyhal_uart_irq_handler+0xb0>)
10003a4e:	f8d6 8000 	ldr.w	r8, [r6]
    _cyhal_uart_irq_obj = (cyhal_uart_t*) _cyhal_scb_get_irq_obj();
10003a52:	f7ff fd2d 	bl	100034b0 <_cyhal_scb_get_irq_obj>
10003a56:	4604      	mov	r4, r0
10003a58:	6030      	str	r0, [r6, #0]
    if (NULL == _cyhal_uart_irq_obj)
10003a5a:	2800      	cmp	r0, #0
10003a5c:	d04a      	beq.n	10003af4 <_cyhal_uart_irq_handler+0xac>
    uint32_t txMasked = Cy_SCB_GetTxInterruptStatusMasked(obj->base);
10003a5e:	4601      	mov	r1, r0
10003a60:	f851 0b18 	ldr.w	r0, [r1], #24
    return (SCB_INTR_TX_MASKED(base));
10003a64:	f8d0 5f8c 	ldr.w	r5, [r0, #3980]	@ 0xf8c
    return (SCB_INTR_RX_MASKED(base));
10003a68:	f8d0 7fcc 	ldr.w	r7, [r0, #4044]	@ 0xfcc
    Cy_SCB_UART_Interrupt(obj->base, &(obj->context));
10003a6c:	f001 f9bd 	bl	10004dea <Cy_SCB_UART_Interrupt>
    if (0UL != (CY_SCB_UART_TX_OVERFLOW & txMasked))
10003a70:	06aa      	lsls	r2, r5, #26
10003a72:	d508      	bpl.n	10003a86 <_cyhal_uart_irq_handler+0x3e>
        Cy_SCB_ClearTxInterrupt(obj->base, CY_SCB_UART_TX_OVERFLOW);
10003a74:	6823      	ldr	r3, [r4, #0]
    SCB_INTR_TX(base) = interruptMask;
10003a76:	2020      	movs	r0, #32
10003a78:	f8c3 0f80 	str.w	r0, [r3, #3968]	@ 0xf80
    (void) SCB_INTR_TX(base);
10003a7c:	f8d3 3f80 	ldr.w	r3, [r3, #3968]	@ 0xf80
        if (NULL != obj->context.cbEvents)
10003a80:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
10003a82:	b103      	cbz	r3, 10003a86 <_cyhal_uart_irq_handler+0x3e>
            obj->context.cbEvents(CY_SCB_UART_TRANSMIT_ERR_EVENT);
10003a84:	4798      	blx	r3
    if (0UL != (CY_SCB_UART_TX_UNDERFLOW & txMasked))
10003a86:	066b      	lsls	r3, r5, #25
10003a88:	d509      	bpl.n	10003a9e <_cyhal_uart_irq_handler+0x56>
        Cy_SCB_ClearTxInterrupt(obj->base, CY_SCB_UART_TX_UNDERFLOW);
10003a8a:	6823      	ldr	r3, [r4, #0]
    SCB_INTR_TX(base) = interruptMask;
10003a8c:	2240      	movs	r2, #64	@ 0x40
10003a8e:	f8c3 2f80 	str.w	r2, [r3, #3968]	@ 0xf80
    (void) SCB_INTR_TX(base);
10003a92:	f8d3 3f80 	ldr.w	r3, [r3, #3968]	@ 0xf80
        if (NULL != obj->context.cbEvents)
10003a96:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
10003a98:	b10b      	cbz	r3, 10003a9e <_cyhal_uart_irq_handler+0x56>
            obj->context.cbEvents(CY_SCB_UART_TRANSMIT_ERR_EVENT);
10003a9a:	2020      	movs	r0, #32
10003a9c:	4798      	blx	r3
    if (0UL != (CY_SCB_UART_TX_TRIGGER & txMasked))
10003a9e:	07e8      	lsls	r0, r5, #31
10003aa0:	d504      	bpl.n	10003aac <_cyhal_uart_irq_handler+0x64>
        if (NULL != obj->context.cbEvents)
10003aa2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
10003aa4:	b113      	cbz	r3, 10003aac <_cyhal_uart_irq_handler+0x64>
            obj->context.cbEvents(CYHAL_UART_IRQ_TX_FIFO >> 1u);
10003aa6:	f44f 7080 	mov.w	r0, #256	@ 0x100
10003aaa:	4798      	blx	r3
    if (0UL != (CY_SCB_UART_TX_DONE & txMasked))
10003aac:	05a9      	lsls	r1, r5, #22
10003aae:	d50c      	bpl.n	10003aca <_cyhal_uart_irq_handler+0x82>
        Cy_SCB_ClearTxInterrupt(obj->base, CY_SCB_UART_TX_DONE);
10003ab0:	6823      	ldr	r3, [r4, #0]
    SCB_INTR_TX(base) = interruptMask;
10003ab2:	f44f 7200 	mov.w	r2, #512	@ 0x200
10003ab6:	f8c3 2f80 	str.w	r2, [r3, #3968]	@ 0xf80
    (void) SCB_INTR_TX(base);
10003aba:	f8d3 2f80 	ldr.w	r2, [r3, #3968]	@ 0xf80
    return (SCB_INTR_TX_MASK(base));
10003abe:	f8d3 2f88 	ldr.w	r2, [r3, #3976]	@ 0xf88
        Cy_SCB_SetTxInterruptMask(obj->base, Cy_SCB_GetTxInterruptMask(obj->base) | CY_SCB_UART_TX_DONE);
10003ac2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
    SCB_INTR_TX_MASK(base) = interruptMask;
10003ac6:	f8c3 2f88 	str.w	r2, [r3, #3976]	@ 0xf88
    if (0UL != (CY_SCB_RX_INTR_UNDERFLOW & rxMasked))
10003aca:	067a      	lsls	r2, r7, #25
10003acc:	d509      	bpl.n	10003ae2 <_cyhal_uart_irq_handler+0x9a>
        Cy_SCB_ClearRxInterrupt(obj->base, CY_SCB_RX_INTR_UNDERFLOW);
10003ace:	6823      	ldr	r3, [r4, #0]
    SCB_INTR_RX(base) = interruptMask;
10003ad0:	2240      	movs	r2, #64	@ 0x40
10003ad2:	f8c3 2fc0 	str.w	r2, [r3, #4032]	@ 0xfc0
    (void) SCB_INTR_RX(base);
10003ad6:	f8d3 3fc0 	ldr.w	r3, [r3, #4032]	@ 0xfc0
        if (NULL != obj->context.cbEvents)
10003ada:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
10003adc:	b10b      	cbz	r3, 10003ae2 <_cyhal_uart_irq_handler+0x9a>
            obj->context.cbEvents(CY_SCB_UART_RECEIVE_ERR_EVENT);
10003ade:	2010      	movs	r0, #16
10003ae0:	4798      	blx	r3
    if (0UL != (CY_SCB_UART_RX_TRIGGER & rxMasked))
10003ae2:	07fb      	lsls	r3, r7, #31
10003ae4:	d504      	bpl.n	10003af0 <_cyhal_uart_irq_handler+0xa8>
        if (NULL != obj->context.cbEvents)
10003ae6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
10003ae8:	b113      	cbz	r3, 10003af0 <_cyhal_uart_irq_handler+0xa8>
            obj->context.cbEvents(CYHAL_UART_IRQ_RX_FIFO >> 1u);
10003aea:	f44f 7000 	mov.w	r0, #512	@ 0x200
10003aee:	4798      	blx	r3
    _cyhal_uart_irq_obj = old_irq_obj;
10003af0:	f8c6 8000 	str.w	r8, [r6]
}
10003af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
10003af8:	08002c3c 	.word	0x08002c3c

10003afc <cyhal_uart_free>:

    return result;
}

void cyhal_uart_free(cyhal_uart_t *obj)
{
10003afc:	b513      	push	{r0, r1, r4, lr}
10003afe:	4604      	mov	r4, r0
    CY_ASSERT(NULL != obj);

    if (NULL != obj->base)
10003b00:	6800      	ldr	r0, [r0, #0]
10003b02:	b140      	cbz	r0, 10003b16 <cyhal_uart_free+0x1a>
    {
        Cy_SCB_UART_Disable(obj->base, &obj->context);
10003b04:	f104 0118 	add.w	r1, r4, #24
10003b08:	f001 f938 	bl	10004d7c <Cy_SCB_UART_Disable>
        Cy_SCB_UART_DeInit(obj->base);
10003b0c:	6820      	ldr	r0, [r4, #0]
10003b0e:	f001 f911 	bl	10004d34 <Cy_SCB_UART_DeInit>
        obj->base = NULL;
10003b12:	2300      	movs	r3, #0
10003b14:	6023      	str	r3, [r4, #0]
    }

    if (obj->resource.type != CYHAL_RSC_INVALID)
10003b16:	7923      	ldrb	r3, [r4, #4]
10003b18:	2b1e      	cmp	r3, #30
10003b1a:	d01f      	beq.n	10003b5c <cyhal_uart_free+0x60>
    {
        uint8_t scb_arr_index = _cyhal_scb_get_block_index(obj->resource.block_num);
10003b1c:	7960      	ldrb	r0, [r4, #5]
10003b1e:	f7ff fcb7 	bl	10003490 <_cyhal_scb_get_block_index>
    NVIC_DisableIRQ(system_irq);
10003b22:	4b28      	ldr	r3, [pc, #160]	@ (10003bc4 <cyhal_uart_free+0xc8>)
10003b24:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
10003b28:	f7ff ff00 	bl	1000392c <__NVIC_DisableIRQ>
        _cyhal_system_irq_t irqn = _CYHAL_SCB_IRQ_N[scb_arr_index];
        _cyhal_irq_free(irqn);

        _cyhal_scb_update_instance_data(obj->resource.block_num, NULL, NULL);
10003b2c:	2200      	movs	r2, #0
10003b2e:	7960      	ldrb	r0, [r4, #5]
10003b30:	4611      	mov	r1, r2
10003b32:	f7ff fd3d 	bl	100035b0 <_cyhal_scb_update_instance_data>

        if (false == obj->dc_configured)
10003b36:	f894 30a0 	ldrb.w	r3, [r4, #160]	@ 0xa0
10003b3a:	b96b      	cbnz	r3, 10003b58 <cyhal_uart_free+0x5c>
        {
            cyhal_resource_inst_t rsc_to_free = { CYHAL_RSC_SCB, _cyhal_scb_get_block_index(obj->resource.block_num), obj->resource.channel_num };
10003b3c:	2317      	movs	r3, #23
10003b3e:	7960      	ldrb	r0, [r4, #5]
10003b40:	f88d 3004 	strb.w	r3, [sp, #4]
10003b44:	f7ff fca4 	bl	10003490 <_cyhal_scb_get_block_index>
10003b48:	79a3      	ldrb	r3, [r4, #6]
10003b4a:	f88d 0005 	strb.w	r0, [sp, #5]
            cyhal_hwmgr_free(&(rsc_to_free));
10003b4e:	a801      	add	r0, sp, #4
            cyhal_resource_inst_t rsc_to_free = { CYHAL_RSC_SCB, _cyhal_scb_get_block_index(obj->resource.block_num), obj->resource.channel_num };
10003b50:	f88d 3006 	strb.w	r3, [sp, #6]
            cyhal_hwmgr_free(&(rsc_to_free));
10003b54:	f7ff fa6e 	bl	10003034 <cyhal_hwmgr_free>
        }

        obj->resource.type = CYHAL_RSC_INVALID;
10003b58:	231e      	movs	r3, #30
10003b5a:	7123      	strb	r3, [r4, #4]
    }

    if (false == obj->dc_configured)
10003b5c:	f894 30a0 	ldrb.w	r3, [r4, #160]	@ 0xa0
10003b60:	b9a3      	cbnz	r3, 10003b8c <cyhal_uart_free+0x90>
    {
        _cyhal_utils_release_if_used(&(obj->pin_rx));
10003b62:	1de0      	adds	r0, r4, #7
10003b64:	f000 fb76 	bl	10004254 <_cyhal_utils_release_if_used>
        _cyhal_utils_release_if_used(&(obj->pin_tx));
10003b68:	f104 0008 	add.w	r0, r4, #8
10003b6c:	f000 fb72 	bl	10004254 <_cyhal_utils_release_if_used>
        _cyhal_utils_release_if_used(&(obj->pin_rts));
10003b70:	f104 000a 	add.w	r0, r4, #10
10003b74:	f000 fb6e 	bl	10004254 <_cyhal_utils_release_if_used>
        _cyhal_utils_release_if_used(&(obj->pin_cts));
10003b78:	f104 0009 	add.w	r0, r4, #9
10003b7c:	f000 fb6a 	bl	10004254 <_cyhal_utils_release_if_used>

        if (obj->is_clock_owned)
10003b80:	7b63      	ldrb	r3, [r4, #13]
10003b82:	b11b      	cbz	r3, 10003b8c <cyhal_uart_free+0x90>
        {
            cyhal_clock_free(&(obj->clock));
10003b84:	f104 0010 	add.w	r0, r4, #16
10003b88:	f7ff f8dd 	bl	10002d46 <cyhal_clock_free>
        }
    }

    #if (CYHAL_DRIVER_AVAILABLE_DMA)
    if(obj->async_mode == CYHAL_ASYNC_DMA)
10003b8c:	f894 30a8 	ldrb.w	r3, [r4, #168]	@ 0xa8
10003b90:	b9ab      	cbnz	r3, 10003bbe <cyhal_uart_free+0xc2>
    {
        if(CYHAL_RSC_INVALID != obj->dma_tx.resource.type)
10003b92:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
10003b96:	2b1e      	cmp	r3, #30
10003b98:	d006      	beq.n	10003ba8 <cyhal_uart_free+0xac>
        {
            cyhal_dma_free(&obj->dma_tx);
10003b9a:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
10003b9e:	f7ff f8e4 	bl	10002d6a <cyhal_dma_free>
            obj->dma_tx.resource.type = CYHAL_RSC_INVALID;
10003ba2:	231e      	movs	r3, #30
10003ba4:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
        }
        if(CYHAL_RSC_INVALID != obj->dma_rx.resource.type)
10003ba8:	f894 3120 	ldrb.w	r3, [r4, #288]	@ 0x120
10003bac:	2b1e      	cmp	r3, #30
10003bae:	d006      	beq.n	10003bbe <cyhal_uart_free+0xc2>
        {
            cyhal_dma_free(&obj->dma_rx);
10003bb0:	f504 7090 	add.w	r0, r4, #288	@ 0x120
10003bb4:	f7ff f8d9 	bl	10002d6a <cyhal_dma_free>
            obj->dma_rx.resource.type = CYHAL_RSC_INVALID;
10003bb8:	231e      	movs	r3, #30
10003bba:	f884 3120 	strb.w	r3, [r4, #288]	@ 0x120
        }
    }
    #endif
}
10003bbe:	b002      	add	sp, #8
10003bc0:	bd10      	pop	{r4, pc}
10003bc2:	bf00      	nop
10003bc4:	1000c7ee 	.word	0x1000c7ee

10003bc8 <cyhal_uart_set_baud>:

cy_rslt_t cyhal_uart_set_baud(cyhal_uart_t *obj, uint32_t baudrate, uint32_t *actualbaud)
{
    cy_rslt_t status;
    if( obj->baud_rate != baudrate)
10003bc8:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
10003bcc:	428b      	cmp	r3, r1
    {
        obj->baud_rate = baudrate;
    }
    
    if (obj->is_clock_owned)
10003bce:	7b43      	ldrb	r3, [r0, #13]
{
10003bd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
10003bd4:	4606      	mov	r6, r0
10003bd6:	460d      	mov	r5, r1
10003bd8:	4691      	mov	r9, r2
        obj->baud_rate = baudrate;
10003bda:	bf18      	it	ne
10003bdc:	f8c0 10a4 	strne.w	r1, [r0, #164]	@ 0xa4
    if (obj->is_clock_owned)
10003be0:	2b00      	cmp	r3, #0
10003be2:	d078      	beq.n	10003cd6 <cyhal_uart_set_baud+0x10e>
    {
        uint8_t oversample_value;
        uint32_t calculated_baud;
        uint32_t divider;

        Cy_SCB_UART_Disable(obj->base, NULL);
10003be4:	4607      	mov	r7, r0
10003be6:	2100      	movs	r1, #0
10003be8:	f857 0b10 	ldr.w	r0, [r7], #16
10003bec:	f001 f8c6 	bl	10004d7c <Cy_SCB_UART_Disable>
        status = cyhal_clock_set_enabled(&(obj->clock), false, false);
10003bf0:	2200      	movs	r2, #0
10003bf2:	4611      	mov	r1, r2
10003bf4:	4638      	mov	r0, r7
10003bf6:	f7ff f887 	bl	10002d08 <cyhal_clock_set_enabled>
        if(status != CY_RSLT_SUCCESS)
10003bfa:	4680      	mov	r8, r0
10003bfc:	b140      	cbz	r0, 10003c10 <cyhal_uart_set_baud+0x48>
        status = cyhal_clock_set_divider(&(obj->clock), divider);
        #endif
        if(status != CY_RSLT_SUCCESS)
        {
            cyhal_clock_set_enabled(&(obj->clock), true, false);
            Cy_SCB_UART_Enable(obj->base);
10003bfe:	6832      	ldr	r2, [r6, #0]
10003c00:	6813      	ldr	r3, [r2, #0]
10003c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
10003c06:	6013      	str	r3, [r2, #0]
        /* Not able to make changes in user-provided clock */
        status = CYHAL_UART_RSLT_CLOCK_ERROR;
    }

    return status;
}
10003c08:	4640      	mov	r0, r8
10003c0a:	b003      	add	sp, #12
10003c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(status != CY_RSLT_SUCCESS)
10003c10:	f04f 0808 	mov.w	r8, #8
10003c14:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
    uint8_t best_oversample = _CYHAL_UART_OVERSAMPLE_MIN;
10003c18:	4644      	mov	r4, r8
    uint8_t best_difference = 0xFF;
10003c1a:	f04f 0bff 	mov.w	fp, #255	@ 0xff
10003c1e:	fa5f f188 	uxtb.w	r1, r8
10003c22:	9101      	str	r1, [sp, #4]
    return Cy_SysClk_ClkPeriGetFrequency();
10003c24:	f002 f89e 	bl	10005d64 <Cy_SysClk_ClkPeriGetFrequency>
    return ((_cyhal_utils_get_peripheral_clock_frequency(clocked_item) * (1 << frac_bits)) + (frequency / 2)) / frequency;
10003c28:	eb00 005a 	add.w	r0, r0, sl, lsr #1
10003c2c:	fbb0 f3fa 	udiv	r3, r0, sl
10003c30:	9300      	str	r3, [sp, #0]
    return Cy_SysClk_ClkPeriGetFrequency();
10003c32:	f002 f897 	bl	10005d64 <Cy_SysClk_ClkPeriGetFrequency>
    return _cyhal_utils_get_peripheral_clock_frequency(resource) / (divider * oversample);
10003c36:	9b00      	ldr	r3, [sp, #0]
        : ((desired_baud * 100) - (actual_baud * 100)) / desired_baud;
10003c38:	9901      	ldr	r1, [sp, #4]
    return _cyhal_utils_get_peripheral_clock_frequency(resource) / (divider * oversample);
10003c3a:	fb08 f303 	mul.w	r3, r8, r3
10003c3e:	fbb0 f3f3 	udiv	r3, r0, r3
        : ((desired_baud * 100) - (actual_baud * 100)) / desired_baud;
10003c42:	429d      	cmp	r5, r3
        ? ((actual_baud * 100) - (desired_baud * 100)) / desired_baud
10003c44:	bf34      	ite	cc
10003c46:	1b5b      	subcc	r3, r3, r5
        : ((desired_baud * 100) - (actual_baud * 100)) / desired_baud;
10003c48:	1aeb      	subcs	r3, r5, r3
10003c4a:	2264      	movs	r2, #100	@ 0x64
10003c4c:	4353      	muls	r3, r2
10003c4e:	fbb3 f3f5 	udiv	r3, r3, r5
        uint8_t difference = (uint8_t)_cyhal_uart_baud_perdif(baudrate, _cyhal_uart_actual_baud(resource, divider, i));
10003c52:	b2db      	uxtb	r3, r3
        if (difference < best_difference)
10003c54:	455b      	cmp	r3, fp
    for (uint8_t i = _CYHAL_UART_OVERSAMPLE_MIN; i < _CYHAL_UART_OVERSAMPLE_MAX + 1; i++)
10003c56:	f108 0801 	add.w	r8, r8, #1
        if (difference < best_difference)
10003c5a:	bf3c      	itt	cc
10003c5c:	469b      	movcc	fp, r3
10003c5e:	460c      	movcc	r4, r1
    for (uint8_t i = _CYHAL_UART_OVERSAMPLE_MIN; i < _CYHAL_UART_OVERSAMPLE_MAX + 1; i++)
10003c60:	f1b8 0f11 	cmp.w	r8, #17
10003c64:	44aa      	add	sl, r5
10003c66:	d1da      	bne.n	10003c1e <cyhal_uart_set_baud+0x56>
        obj->config.oversample = oversample_value;
10003c68:	6574      	str	r4, [r6, #84]	@ 0x54
10003c6a:	f002 f87b 	bl	10005d64 <Cy_SysClk_ClkPeriGetFrequency>
        divider = _cyhal_utils_divider_value(&(obj->resource), baudrate * oversample_value, 0);
10003c6e:	4365      	muls	r5, r4
    return ((_cyhal_utils_get_peripheral_clock_frequency(clocked_item) * (1 << frac_bits)) + (frequency / 2)) / frequency;
10003c70:	eb00 0055 	add.w	r0, r0, r5, lsr #1
10003c74:	fbb0 f5f5 	udiv	r5, r0, r5
        status = cyhal_clock_set_divider(&(obj->clock), divider);
10003c78:	4638      	mov	r0, r7
10003c7a:	4629      	mov	r1, r5
10003c7c:	f7ff f857 	bl	10002d2e <cyhal_clock_set_divider>
        if(status != CY_RSLT_SUCCESS)
10003c80:	4680      	mov	r8, r0
10003c82:	b128      	cbz	r0, 10003c90 <cyhal_uart_set_baud+0xc8>
            cyhal_clock_set_enabled(&(obj->clock), true, false);
10003c84:	2200      	movs	r2, #0
10003c86:	2101      	movs	r1, #1
10003c88:	4638      	mov	r0, r7
10003c8a:	f7ff f83d 	bl	10002d08 <cyhal_clock_set_enabled>
10003c8e:	e7b6      	b.n	10003bfe <cyhal_uart_set_baud+0x36>
    return Cy_SysClk_ClkPeriGetFrequency();
10003c90:	f002 f868 	bl	10005d64 <Cy_SysClk_ClkPeriGetFrequency>
        if (actualbaud != NULL)
10003c94:	f1b9 0f00 	cmp.w	r9, #0
10003c98:	d004      	beq.n	10003ca4 <cyhal_uart_set_baud+0xdc>
    return _cyhal_utils_get_peripheral_clock_frequency(resource) / (divider * oversample);
10003c9a:	4365      	muls	r5, r4
10003c9c:	fbb0 f0f5 	udiv	r0, r0, r5
            *actualbaud = calculated_baud;
10003ca0:	f8c9 0000 	str.w	r0, [r9]
        status = cyhal_clock_set_enabled(&(obj->clock), true, false);
10003ca4:	2200      	movs	r2, #0
10003ca6:	2101      	movs	r1, #1
10003ca8:	4638      	mov	r0, r7
10003caa:	f7ff f82d 	bl	10002d08 <cyhal_clock_set_enabled>
        SCB_CTRL(obj->base) = _BOOL2FLD(SCB_CTRL_ADDR_ACCEPT, obj->config.acceptAddrInFifo)     |
10003cae:	f896 106c 	ldrb.w	r1, [r6, #108]	@ 0x6c
10003cb2:	6832      	ldr	r2, [r6, #0]
                    _VAL2FLD(SCB_CTRL_OVS, oversample_value - 1)                                |
10003cb4:	1e63      	subs	r3, r4, #1
10003cb6:	f003 030f 	and.w	r3, r3, #15
                    _BOOL2FLD(SCB_CTRL_BYTE_MODE, (obj->config.dataWidth <= CY_SCB_BYTE_WIDTH)) |
10003cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
10003cbe:	6db1      	ldr	r1, [r6, #88]	@ 0x58
10003cc0:	2908      	cmp	r1, #8
10003cc2:	bf8c      	ite	hi
10003cc4:	2100      	movhi	r1, #0
10003cc6:	2101      	movls	r1, #1
10003cc8:	ea43 23c1 	orr.w	r3, r3, r1, lsl #11
                    _VAL2FLD(SCB_CTRL_OVS, oversample_value - 1)                                |
10003ccc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        status = cyhal_clock_set_enabled(&(obj->clock), true, false);
10003cd0:	4680      	mov	r8, r0
        SCB_CTRL(obj->base) = _BOOL2FLD(SCB_CTRL_ADDR_ACCEPT, obj->config.acceptAddrInFifo)     |
10003cd2:	6013      	str	r3, [r2, #0]
10003cd4:	e794      	b.n	10003c00 <cyhal_uart_set_baud+0x38>
        status = CYHAL_UART_RSLT_CLOCK_ERROR;
10003cd6:	f8df 8004 	ldr.w	r8, [pc, #4]	@ 10003cdc <cyhal_uart_set_baud+0x114>
10003cda:	e795      	b.n	10003c08 <cyhal_uart_set_baud+0x40>
10003cdc:	04021f06 	.word	0x04021f06

10003ce0 <_cyhal_uart_pm_callback_instance>:
{
10003ce0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    GPIO_PRT_Type *txport = obj->pin_tx != NC ? CYHAL_GET_PORTADDR(obj->pin_tx) : NULL;
10003ce4:	f890 9008 	ldrb.w	r9, [r0, #8]
10003ce8:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
{
10003cec:	4604      	mov	r4, r0
    GPIO_PRT_Type *txport = obj->pin_tx != NC ? CYHAL_GET_PORTADDR(obj->pin_tx) : NULL;
10003cee:	d049      	beq.n	10003d84 <_cyhal_uart_pm_callback_instance+0xa4>
        portBase = (GPIO_PRT_Type *)(CY_GPIO_BASE + (GPIO_PRT_SECTION_SIZE * portNum));
10003cf0:	4879      	ldr	r0, [pc, #484]	@ (10003ed8 <_cyhal_uart_pm_callback_instance+0x1f8>)
10003cf2:	6800      	ldr	r0, [r0, #0]
    if(portNum < (uint32_t)IOSS_GPIO_GPIO_PORT_NR)
10003cf4:	f1b9 0f77 	cmp.w	r9, #119	@ 0x77
        portBase = (GPIO_PRT_Type *)(CY_GPIO_BASE + (GPIO_PRT_SECTION_SIZE * portNum));
10003cf8:	f8d0 8018 	ldr.w	r8, [r0, #24]
10003cfc:	ea4f 03d9 	mov.w	r3, r9, lsr #3
    if(portNum < (uint32_t)IOSS_GPIO_GPIO_PORT_NR)
10003d00:	d801      	bhi.n	10003d06 <_cyhal_uart_pm_callback_instance+0x26>
        portBase = (GPIO_PRT_Type *)(CY_GPIO_BASE + (GPIO_PRT_SECTION_SIZE * portNum));
10003d02:	eb08 18c3 	add.w	r8, r8, r3, lsl #7
    GPIO_PRT_Type *rtsport = ((obj->pin_rts != NC) && obj->rts_enabled) ? CYHAL_GET_PORTADDR(obj->pin_rts) : NULL;
10003d06:	7aa7      	ldrb	r7, [r4, #10]
10003d08:	2fff      	cmp	r7, #255	@ 0xff
10003d0a:	d03e      	beq.n	10003d8a <_cyhal_uart_pm_callback_instance+0xaa>
10003d0c:	7b26      	ldrb	r6, [r4, #12]
10003d0e:	b146      	cbz	r6, 10003d22 <_cyhal_uart_pm_callback_instance+0x42>
10003d10:	4871      	ldr	r0, [pc, #452]	@ (10003ed8 <_cyhal_uart_pm_callback_instance+0x1f8>)
10003d12:	6800      	ldr	r0, [r0, #0]
    if(portNum < (uint32_t)IOSS_GPIO_GPIO_PORT_NR)
10003d14:	2f77      	cmp	r7, #119	@ 0x77
        portBase = (GPIO_PRT_Type *)(CY_GPIO_BASE + (GPIO_PRT_SECTION_SIZE * portNum));
10003d16:	6986      	ldr	r6, [r0, #24]
10003d18:	ea4f 03d7 	mov.w	r3, r7, lsr #3
    if(portNum < (uint32_t)IOSS_GPIO_GPIO_PORT_NR)
10003d1c:	d801      	bhi.n	10003d22 <_cyhal_uart_pm_callback_instance+0x42>
        portBase = (GPIO_PRT_Type *)(CY_GPIO_BASE + (GPIO_PRT_SECTION_SIZE * portNum));
10003d1e:	eb06 16c3 	add.w	r6, r6, r3, lsl #7
   if (state == CYHAL_SYSPM_CB_SYSTEM_NORMAL || state == CYHAL_SYSPM_CB_SYSTEM_LOW)
10003d22:	2910      	cmp	r1, #16
    uint8_t rtspin = (uint8_t)CYHAL_GET_PIN(obj->pin_rts);
10003d24:	f007 0707 	and.w	r7, r7, #7
   if (state == CYHAL_SYSPM_CB_SYSTEM_NORMAL || state == CYHAL_SYSPM_CB_SYSTEM_LOW)
10003d28:	d001      	beq.n	10003d2e <_cyhal_uart_pm_callback_instance+0x4e>
10003d2a:	2920      	cmp	r1, #32
10003d2c:	d156      	bne.n	10003ddc <_cyhal_uart_pm_callback_instance+0xfc>
        if(pdl_mode == CY_SYSPM_CHECK_READY)
10003d2e:	2a01      	cmp	r2, #1
10003d30:	d12d      	bne.n	10003d8e <_cyhal_uart_pm_callback_instance+0xae>
            if ((0UL == (CY_SCB_UART_TRANSMIT_ACTIVE & Cy_SCB_UART_GetTransmitStatus(obj->base, &(obj->context)))) &&
10003d32:	f104 0118 	add.w	r1, r4, #24
10003d36:	6820      	ldr	r0, [r4, #0]
10003d38:	9101      	str	r1, [sp, #4]
10003d3a:	f001 f854 	bl	10004de6 <Cy_SCB_UART_GetTransmitStatus>
10003d3e:	f010 0f01 	tst.w	r0, #1
10003d42:	9901      	ldr	r1, [sp, #4]
10003d44:	d127      	bne.n	10003d96 <_cyhal_uart_pm_callback_instance+0xb6>
                (0UL == (CY_SCB_UART_RECEIVE_ACTIVE  & Cy_SCB_UART_GetReceiveStatus (obj->base, &(obj->context))))
10003d46:	6820      	ldr	r0, [r4, #0]
10003d48:	f001 f84b 	bl	10004de2 <Cy_SCB_UART_GetReceiveStatus>
                & (obj->async_rx_buff == NULL) & (obj->async_tx_buff == NULL))
10003d4c:	e9d4 2367 	ldrd	r2, r3, [r4, #412]	@ 0x19c
            if ((0UL == (CY_SCB_UART_TRANSMIT_ACTIVE & Cy_SCB_UART_GetTransmitStatus(obj->base, &(obj->context)))) &&
10003d50:	4313      	orrs	r3, r2
10003d52:	d120      	bne.n	10003d96 <_cyhal_uart_pm_callback_instance+0xb6>
10003d54:	07c2      	lsls	r2, r0, #31
10003d56:	d41e      	bmi.n	10003d96 <_cyhal_uart_pm_callback_instance+0xb6>
                if (Cy_SCB_UART_IsTxComplete(obj->base))
10003d58:	6823      	ldr	r3, [r4, #0]
    return _FLD2VAL(SCB_TX_FIFO_STATUS_USED, SCB_TX_FIFO_STATUS(base));
10003d5a:	f8d3 1208 	ldr.w	r1, [r3, #520]	@ 0x208
    return _FLD2VAL(SCB_TX_FIFO_STATUS_SR_VALID, SCB_TX_FIFO_STATUS(base));
10003d5e:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
    return _FLD2VAL(SCB_TX_FIFO_STATUS_USED, SCB_TX_FIFO_STATUS(base));
10003d62:	f3c1 0108 	ubfx	r1, r1, #0, #9
    return _FLD2VAL(SCB_TX_FIFO_STATUS_SR_VALID, SCB_TX_FIFO_STATUS(base));
10003d66:	f3c2 32c0 	ubfx	r2, r2, #15, #1
10003d6a:	42ca      	cmn	r2, r1
10003d6c:	d113      	bne.n	10003d96 <_cyhal_uart_pm_callback_instance+0xb6>
    return _FLD2VAL(SCB_RX_FIFO_STATUS_USED, SCB_RX_FIFO_STATUS(base));
10003d6e:	f8d3 5308 	ldr.w	r5, [r3, #776]	@ 0x308
10003d72:	f3c5 0508 	ubfx	r5, r5, #0, #9
                    if (0UL == Cy_SCB_UART_GetNumInRxFifo(obj->base))
10003d76:	fab5 f585 	clz	r5, r5
10003d7a:	096d      	lsrs	r5, r5, #5
}
10003d7c:	4628      	mov	r0, r5
10003d7e:	b003      	add	sp, #12
10003d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    GPIO_PRT_Type *txport = obj->pin_tx != NC ? CYHAL_GET_PORTADDR(obj->pin_tx) : NULL;
10003d84:	f04f 0800 	mov.w	r8, #0
10003d88:	e7bd      	b.n	10003d06 <_cyhal_uart_pm_callback_instance+0x26>
    GPIO_PRT_Type *rtsport = ((obj->pin_rts != NC) && obj->rts_enabled) ? CYHAL_GET_PORTADDR(obj->pin_rts) : NULL;
10003d8a:	2600      	movs	r6, #0
10003d8c:	e7c9      	b.n	10003d22 <_cyhal_uart_pm_callback_instance+0x42>
        if (pdl_mode == CY_SYSPM_AFTER_TRANSITION)
10003d8e:	2a08      	cmp	r2, #8
10003d90:	d003      	beq.n	10003d9a <_cyhal_uart_pm_callback_instance+0xba>
        if (pdl_mode == CY_SYSPM_BEFORE_TRANSITION)
10003d92:	2a04      	cmp	r2, #4
10003d94:	d010      	beq.n	10003db8 <_cyhal_uart_pm_callback_instance+0xd8>
    bool allow = false;
10003d96:	2500      	movs	r5, #0
    return allow;
10003d98:	e7f0      	b.n	10003d7c <_cyhal_uart_pm_callback_instance+0x9c>
            cyhal_uart_set_baud(obj, obj->baud_rate, NULL);
10003d9a:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
10003d9e:	2200      	movs	r2, #0
10003da0:	4620      	mov	r0, r4
10003da2:	f7ff ff11 	bl	10003bc8 <cyhal_uart_set_baud>
                if (NULL != rtsport)
10003da6:	b12e      	cbz	r6, 10003db4 <_cyhal_uart_pm_callback_instance+0xd4>
                    Cy_GPIO_SetHSIOM(rtsport, rtspin, obj->saved_rts_hsiom);
10003da8:	f894 2095 	ldrb.w	r2, [r4, #149]	@ 0x95
10003dac:	4639      	mov	r1, r7
10003dae:	4630      	mov	r0, r6
10003db0:	f7ff fdce 	bl	10003950 <Cy_GPIO_SetHSIOM>
                allow = true;
10003db4:	2501      	movs	r5, #1
10003db6:	e7e1      	b.n	10003d7c <_cyhal_uart_pm_callback_instance+0x9c>
            if (NULL != rtsport)
10003db8:	2e00      	cmp	r6, #0
10003dba:	d0fb      	beq.n	10003db4 <_cyhal_uart_pm_callback_instance+0xd4>
                obj->saved_rts_hsiom = Cy_GPIO_GetHSIOM(rtsport, rtspin);
10003dbc:	4639      	mov	r1, r7
10003dbe:	4630      	mov	r0, r6
10003dc0:	f7ff fdee 	bl	100039a0 <Cy_GPIO_GetHSIOM>
*******************************************************************************/
__STATIC_INLINE void Cy_GPIO_Set(GPIO_PRT_Type* base, uint32_t pinNum)
{
    CY_ASSERT_L2(CY_GPIO_IS_PIN_VALID(pinNum));

    GPIO_PRT_OUT_SET(base) = CY_GPIO_OUT_MASK << pinNum;
10003dc4:	2501      	movs	r5, #1
10003dc6:	fa05 f307 	lsl.w	r3, r5, r7
10003dca:	f884 0095 	strb.w	r0, [r4, #149]	@ 0x95
                Cy_GPIO_SetHSIOM(rtsport, rtspin, HSIOM_SEL_GPIO);
10003dce:	2200      	movs	r2, #0
10003dd0:	60b3      	str	r3, [r6, #8]
10003dd2:	4639      	mov	r1, r7
10003dd4:	4630      	mov	r0, r6
10003dd6:	f7ff fdbb 	bl	10003950 <Cy_GPIO_SetHSIOM>
10003dda:	e7cf      	b.n	10003d7c <_cyhal_uart_pm_callback_instance+0x9c>
        switch (pdl_mode)
10003ddc:	3a01      	subs	r2, #1
    uint8_t txpin = (uint8_t)CYHAL_GET_PIN(obj->pin_tx);
10003dde:	f009 0907 	and.w	r9, r9, #7
        switch (pdl_mode)
10003de2:	2a07      	cmp	r2, #7
10003de4:	d8d7      	bhi.n	10003d96 <_cyhal_uart_pm_callback_instance+0xb6>
10003de6:	a301      	add	r3, pc, #4	@ (adr r3, 10003dec <_cyhal_uart_pm_callback_instance+0x10c>)
10003de8:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
10003dec:	10003e0d 	.word	0x10003e0d
10003df0:	10003eb7 	.word	0x10003eb7
10003df4:	10003d97 	.word	0x10003d97
10003df8:	10003db5 	.word	0x10003db5
10003dfc:	10003d97 	.word	0x10003d97
10003e00:	10003d97 	.word	0x10003d97
10003e04:	10003d97 	.word	0x10003d97
10003e08:	10003eb7 	.word	0x10003eb7
                if ((0UL == (CY_SCB_UART_TRANSMIT_ACTIVE & Cy_SCB_UART_GetTransmitStatus(obj->base, &(obj->context)))) &&
10003e0c:	f104 0b18 	add.w	fp, r4, #24
10003e10:	6820      	ldr	r0, [r4, #0]
10003e12:	4659      	mov	r1, fp
10003e14:	f000 ffe7 	bl	10004de6 <Cy_SCB_UART_GetTransmitStatus>
10003e18:	07c3      	lsls	r3, r0, #31
10003e1a:	d4bc      	bmi.n	10003d96 <_cyhal_uart_pm_callback_instance+0xb6>
                    (0UL == (CY_SCB_UART_RECEIVE_ACTIVE  & Cy_SCB_UART_GetReceiveStatus (obj->base, &(obj->context))))
10003e1c:	6820      	ldr	r0, [r4, #0]
10003e1e:	4659      	mov	r1, fp
10003e20:	f000 ffdf 	bl	10004de2 <Cy_SCB_UART_GetReceiveStatus>
                    & (obj->async_rx_buff == NULL) & (obj->async_tx_buff == NULL))
10003e24:	e9d4 2367 	ldrd	r2, r3, [r4, #412]	@ 0x19c
10003e28:	43c0      	mvns	r0, r0
10003e2a:	4313      	orrs	r3, r2
10003e2c:	f000 0501 	and.w	r5, r0, #1
10003e30:	bf18      	it	ne
10003e32:	2500      	movne	r5, #0
                if ((0UL == (CY_SCB_UART_TRANSMIT_ACTIVE & Cy_SCB_UART_GetTransmitStatus(obj->base, &(obj->context)))) &&
10003e34:	2d00      	cmp	r5, #0
10003e36:	d0ae      	beq.n	10003d96 <_cyhal_uart_pm_callback_instance+0xb6>
                    uint32_t txMasked = Cy_SCB_GetTxInterruptStatusMasked(obj->base);
10003e38:	f8d4 a000 	ldr.w	sl, [r4]
    return (SCB_INTR_TX_MASKED(base));
10003e3c:	f8da 1f8c 	ldr.w	r1, [sl, #3980]	@ 0xf8c
    return (SCB_INTR_RX_MASKED(base));
10003e40:	f8da 3fcc 	ldr.w	r3, [sl, #4044]	@ 0xfcc
    return _FLD2VAL(SCB_TX_FIFO_STATUS_USED, SCB_TX_FIFO_STATUS(base));
10003e44:	f8da 0208 	ldr.w	r0, [sl, #520]	@ 0x208
    return _FLD2VAL(SCB_TX_FIFO_STATUS_SR_VALID, SCB_TX_FIFO_STATUS(base));
10003e48:	f8da 2208 	ldr.w	r2, [sl, #520]	@ 0x208
    return _FLD2VAL(SCB_TX_FIFO_STATUS_USED, SCB_TX_FIFO_STATUS(base));
10003e4c:	f3c0 0008 	ubfx	r0, r0, #0, #9
    return _FLD2VAL(SCB_TX_FIFO_STATUS_SR_VALID, SCB_TX_FIFO_STATUS(base));
10003e50:	f3c2 32c0 	ubfx	r2, r2, #15, #1
                    if (Cy_SCB_UART_IsTxComplete(obj->base)
10003e54:	42c2      	cmn	r2, r0
10003e56:	d19e      	bne.n	10003d96 <_cyhal_uart_pm_callback_instance+0xb6>
    return _FLD2VAL(SCB_RX_FIFO_STATUS_USED, SCB_RX_FIFO_STATUS(base));
10003e58:	f8da 2308 	ldr.w	r2, [sl, #776]	@ 0x308
                         && (0UL == Cy_SCB_UART_GetNumInRxFifo(obj->base))
10003e5c:	430b      	orrs	r3, r1
10003e5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
10003e62:	431a      	orrs	r2, r3
10003e64:	9201      	str	r2, [sp, #4]
10003e66:	d196      	bne.n	10003d96 <_cyhal_uart_pm_callback_instance+0xb6>
                        if (NULL != txport)
10003e68:	f1b8 0f00 	cmp.w	r8, #0
10003e6c:	d00f      	beq.n	10003e8e <_cyhal_uart_pm_callback_instance+0x1ae>
                            obj->saved_tx_hsiom = Cy_GPIO_GetHSIOM(txport, txpin);
10003e6e:	4649      	mov	r1, r9
10003e70:	4640      	mov	r0, r8
10003e72:	f7ff fd95 	bl	100039a0 <Cy_GPIO_GetHSIOM>
10003e76:	2301      	movs	r3, #1
10003e78:	fa03 f309 	lsl.w	r3, r3, r9
10003e7c:	f884 0094 	strb.w	r0, [r4, #148]	@ 0x94
                            Cy_GPIO_SetHSIOM(txport, txpin, HSIOM_SEL_GPIO);
10003e80:	9a01      	ldr	r2, [sp, #4]
10003e82:	f8c8 3008 	str.w	r3, [r8, #8]
10003e86:	4649      	mov	r1, r9
10003e88:	4640      	mov	r0, r8
10003e8a:	f7ff fd61 	bl	10003950 <Cy_GPIO_SetHSIOM>
                        if (NULL != rtsport)
10003e8e:	b16e      	cbz	r6, 10003eac <_cyhal_uart_pm_callback_instance+0x1cc>
                            obj->saved_rts_hsiom = Cy_GPIO_GetHSIOM(rtsport, rtspin);
10003e90:	4639      	mov	r1, r7
10003e92:	4630      	mov	r0, r6
10003e94:	f7ff fd84 	bl	100039a0 <Cy_GPIO_GetHSIOM>
10003e98:	2301      	movs	r3, #1
10003e9a:	40bb      	lsls	r3, r7
10003e9c:	f884 0095 	strb.w	r0, [r4, #149]	@ 0x95
                            Cy_GPIO_SetHSIOM(rtsport, rtspin, HSIOM_SEL_GPIO);
10003ea0:	2200      	movs	r2, #0
10003ea2:	60b3      	str	r3, [r6, #8]
10003ea4:	4639      	mov	r1, r7
10003ea6:	4630      	mov	r0, r6
10003ea8:	f7ff fd52 	bl	10003950 <Cy_GPIO_SetHSIOM>
                        Cy_SCB_UART_Disable(obj->base, &(obj->context));
10003eac:	4659      	mov	r1, fp
10003eae:	4650      	mov	r0, sl
10003eb0:	f000 ff64 	bl	10004d7c <Cy_SCB_UART_Disable>
                        allow = true;
10003eb4:	e762      	b.n	10003d7c <_cyhal_uart_pm_callback_instance+0x9c>
                Cy_SCB_UART_Enable(obj->base);
10003eb6:	6822      	ldr	r2, [r4, #0]
10003eb8:	6813      	ldr	r3, [r2, #0]
10003eba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
10003ebe:	6013      	str	r3, [r2, #0]
                if (NULL != txport)
10003ec0:	f1b8 0f00 	cmp.w	r8, #0
10003ec4:	f43f af6f 	beq.w	10003da6 <_cyhal_uart_pm_callback_instance+0xc6>
                    Cy_GPIO_SetHSIOM(txport, txpin, obj->saved_tx_hsiom);
10003ec8:	f894 2094 	ldrb.w	r2, [r4, #148]	@ 0x94
10003ecc:	4649      	mov	r1, r9
10003ece:	4640      	mov	r0, r8
10003ed0:	f7ff fd3e 	bl	10003950 <Cy_GPIO_SetHSIOM>
10003ed4:	e767      	b.n	10003da6 <_cyhal_uart_pm_callback_instance+0xc6>
10003ed6:	bf00      	nop
10003ed8:	08002c40 	.word	0x08002c40

10003edc <cyhal_uart_getc>:
    Cy_SCB_UART_Enable(obj->base);
    return CY_RSLT_SUCCESS;
}

cy_rslt_t cyhal_uart_getc(cyhal_uart_t *obj, uint8_t *value, uint32_t timeout)
{
10003edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10003ede:	4604      	mov	r4, r0
10003ee0:	460e      	mov	r6, r1
10003ee2:	4615      	mov	r5, r2
    if (_cyhal_scb_pm_transition_pending())
10003ee4:	f7ff fb5e 	bl	100035a4 <_cyhal_scb_pm_transition_pending>
10003ee8:	b990      	cbnz	r0, 10003f10 <cyhal_uart_getc+0x34>
        return CYHAL_SYSPM_RSLT_ERR_PM_PENDING;

    uint32_t read_value = Cy_SCB_UART_Get(obj->base);
10003eea:	6823      	ldr	r3, [r4, #0]
    return (SCB_RX_FIFO_RD(base));
10003eec:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
    uint32_t timeoutTicks = timeout;
10003ef0:	462f      	mov	r7, r5
    while (read_value == CY_SCB_UART_RX_NO_DATA)
10003ef2:	1c5a      	adds	r2, r3, #1
10003ef4:	d002      	beq.n	10003efc <cyhal_uart_getc+0x20>
                return CY_RSLT_ERR_CSP_UART_GETC_TIMEOUT;
            }
        }
        read_value = Cy_SCB_UART_Get(obj->base);
    }
    *value = (uint8_t)read_value;
10003ef6:	7033      	strb	r3, [r6, #0]
    return CY_RSLT_SUCCESS;
10003ef8:	2000      	movs	r0, #0
}
10003efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(timeout != 0UL)
10003efc:	b125      	cbz	r5, 10003f08 <cyhal_uart_getc+0x2c>
            if(timeoutTicks > 0UL)
10003efe:	b14f      	cbz	r7, 10003f14 <cyhal_uart_getc+0x38>
                cyhal_system_delay_ms(1);
10003f00:	2001      	movs	r0, #1
10003f02:	f7ff fcf9 	bl	100038f8 <cyhal_system_delay_ms>
                timeoutTicks--;
10003f06:	3f01      	subs	r7, #1
        read_value = Cy_SCB_UART_Get(obj->base);
10003f08:	6823      	ldr	r3, [r4, #0]
10003f0a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
10003f0e:	e7f0      	b.n	10003ef2 <cyhal_uart_getc+0x16>
        return CYHAL_SYSPM_RSLT_ERR_PM_PENDING;
10003f10:	4801      	ldr	r0, [pc, #4]	@ (10003f18 <cyhal_uart_getc+0x3c>)
10003f12:	e7f2      	b.n	10003efa <cyhal_uart_getc+0x1e>
                return CY_RSLT_ERR_CSP_UART_GETC_TIMEOUT;
10003f14:	4801      	ldr	r0, [pc, #4]	@ (10003f1c <cyhal_uart_getc+0x40>)
10003f16:	e7f0      	b.n	10003efa <cyhal_uart_getc+0x1e>
10003f18:	04021a03 	.word	0x04021a03
10003f1c:	04021f02 	.word	0x04021f02

10003f20 <cyhal_uart_putc>:

cy_rslt_t cyhal_uart_putc(cyhal_uart_t *obj, uint32_t value)
{
10003f20:	b538      	push	{r3, r4, r5, lr}
10003f22:	4604      	mov	r4, r0
10003f24:	460d      	mov	r5, r1
    if (_cyhal_scb_pm_transition_pending())
10003f26:	f7ff fb3d 	bl	100035a4 <_cyhal_scb_pm_transition_pending>
10003f2a:	b938      	cbnz	r0, 10003f3c <cyhal_uart_putc+0x1c>
* The number of data elements placed in the TX FIFO: 0 or 1.
*
*******************************************************************************/
__STATIC_INLINE uint32_t Cy_SCB_UART_Put(CySCB_Type *base, uint32_t data)
{
    return Cy_SCB_Write(base, data);
10003f2c:	6820      	ldr	r0, [r4, #0]
10003f2e:	4629      	mov	r1, r5
10003f30:	f000 fe0c 	bl	10004b4c <Cy_SCB_Write>
        return CYHAL_SYSPM_RSLT_ERR_PM_PENDING;

    uint32_t count = 0;
    while (count == 0)
10003f34:	2800      	cmp	r0, #0
10003f36:	d0f9      	beq.n	10003f2c <cyhal_uart_putc+0xc>
    {
        count = Cy_SCB_UART_Put(obj->base, value);
    }

    return CY_RSLT_SUCCESS;
10003f38:	2000      	movs	r0, #0
}
10003f3a:	bd38      	pop	{r3, r4, r5, pc}
        return CYHAL_SYSPM_RSLT_ERR_PM_PENDING;
10003f3c:	4800      	ldr	r0, [pc, #0]	@ (10003f40 <cyhal_uart_putc+0x20>)
10003f3e:	e7fc      	b.n	10003f3a <cyhal_uart_putc+0x1a>
10003f40:	04021a03 	.word	0x04021a03

10003f44 <cyhal_uart_config_software_buffer>:
    CY_UNUSED_PARAMETER(obj);
    return _cyhal_scb_disable_output((cyhal_scb_output_t)output);
}

cy_rslt_t cyhal_uart_config_software_buffer(cyhal_uart_t *obj, uint8_t *rx_buffer, uint32_t rx_buffer_size)
{
10003f44:	b508      	push	{r3, lr}
    cy_rslt_t result = CY_RSLT_SUCCESS;
    CY_ASSERT(NULL != obj);
    CY_ASSERT(NULL != rx_buffer);

#if (CYHAL_DRIVER_AVAILABLE_DMA)
    if(obj->async_mode == CYHAL_ASYNC_DMA)
10003f46:	f890 30a8 	ldrb.w	r3, [r0, #168]	@ 0xa8
10003f4a:	b133      	cbz	r3, 10003f5a <cyhal_uart_config_software_buffer+0x16>
    }
    else
#endif
    {

        Cy_SCB_UART_StartRingBuffer(obj->base, rx_buffer, rx_buffer_size, &(obj->context));
10003f4c:	f100 0318 	add.w	r3, r0, #24
10003f50:	6800      	ldr	r0, [r0, #0]
10003f52:	f000 ff1e 	bl	10004d92 <Cy_SCB_UART_StartRingBuffer>
10003f56:	2000      	movs	r0, #0
    }

    return result;
}
10003f58:	bd08      	pop	{r3, pc}
        result =  CYHAL_UART_RSLT_ERR_UNSUPPORTED_CONFIG;
10003f5a:	4801      	ldr	r0, [pc, #4]	@ (10003f60 <cyhal_uart_config_software_buffer+0x1c>)
    return result;
10003f5c:	e7fc      	b.n	10003f58 <cyhal_uart_config_software_buffer+0x14>
10003f5e:	bf00      	nop
10003f60:	04021f04 	.word	0x04021f04

10003f64 <cyhal_uart_init>:
{
10003f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10003f68:	ed2d 8b04 	vpush	{d8-d9}
10003f6c:	b085      	sub	sp, #20
10003f6e:	4604      	mov	r4, r0
10003f70:	460d      	mov	r5, r1
10003f72:	4616      	mov	r6, r2
    memset(obj, 0, sizeof(cyhal_uart_t));
10003f74:	2100      	movs	r1, #0
10003f76:	f44f 72d4 	mov.w	r2, #424	@ 0x1a8
{
10003f7a:	461f      	mov	r7, r3
10003f7c:	f89d 8048 	ldrb.w	r8, [sp, #72]	@ 0x48
10003f80:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
    memset(obj, 0, sizeof(cyhal_uart_t));
10003f84:	f005 fd97 	bl	10009ab6 <memset>
    obj->async_mode = CYHAL_ASYNC_SW;
10003f88:	2301      	movs	r3, #1
10003f8a:	f884 30a8 	strb.w	r3, [r4, #168]	@ 0xa8
    obj->dma_tx.resource.type = CYHAL_RSC_INVALID;
10003f8e:	231e      	movs	r3, #30
    obj->baud_rate = CYHAL_UART_DEFAULT_BAUD;
10003f90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
    obj->dma_tx.resource.type = CYHAL_RSC_INVALID;
10003f94:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    obj->dma_rx.resource.type = CYHAL_RSC_INVALID;
10003f98:	f884 3120 	strb.w	r3, [r4, #288]	@ 0x120
    obj->resource.type = CYHAL_RSC_INVALID;
10003f9c:	7123      	strb	r3, [r4, #4]
    obj->pin_rx = CYHAL_NC_PIN_VALUE;
10003f9e:	23ff      	movs	r3, #255	@ 0xff
    obj->baud_rate = CYHAL_UART_DEFAULT_BAUD;
10003fa0:	f8c4 20a4 	str.w	r2, [r4, #164]	@ 0xa4
    if ((NC == tx && NC != rts) || (NC == rx && NC != cts) || (NC == tx && NC == rx))
10003fa4:	429d      	cmp	r5, r3
    obj->pin_tx = CYHAL_NC_PIN_VALUE;
10003fa6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
    obj->pin_rx = CYHAL_NC_PIN_VALUE;
10003faa:	71e3      	strb	r3, [r4, #7]
    obj->pin_tx = CYHAL_NC_PIN_VALUE;
10003fac:	8122      	strh	r2, [r4, #8]
    obj->pin_rts = CYHAL_NC_PIN_VALUE;
10003fae:	72a3      	strb	r3, [r4, #10]
    if ((NC == tx && NC != rts) || (NC == rx && NC != cts) || (NC == tx && NC == rx))
10003fb0:	d107      	bne.n	10003fc2 <cyhal_uart_init+0x5e>
10003fb2:	4598      	cmp	r8, r3
10003fb4:	d005      	beq.n	10003fc2 <cyhal_uart_init+0x5e>
        return CYHAL_UART_RSLT_ERR_INVALID_PIN;
10003fb6:	f8df b298 	ldr.w	fp, [pc, #664]	@ 10004250 <cyhal_uart_init+0x2ec>
        cyhal_uart_free(obj);
10003fba:	4620      	mov	r0, r4
10003fbc:	f7ff fd9e 	bl	10003afc <cyhal_uart_free>
    return result;
10003fc0:	e129      	b.n	10004216 <cyhal_uart_init+0x2b2>
    if ((NC == tx && NC != rts) || (NC == rx && NC != cts) || (NC == tx && NC == rx))
10003fc2:	2eff      	cmp	r6, #255	@ 0xff
10003fc4:	d103      	bne.n	10003fce <cyhal_uart_init+0x6a>
10003fc6:	2fff      	cmp	r7, #255	@ 0xff
10003fc8:	d1f5      	bne.n	10003fb6 <cyhal_uart_init+0x52>
10003fca:	2dff      	cmp	r5, #255	@ 0xff
10003fcc:	d0f3      	beq.n	10003fb6 <cyhal_uart_init+0x52>
    uint32_t saved_intr_status = cyhal_system_critical_section_enter();
10003fce:	f7fe fd78 	bl	10002ac2 <Cy_SysLib_EnterCriticalSection>
    uint32_t pins_blocks = _CYHAL_SCB_AVAILABLE_BLOCKS_MASK;
10003fd2:	4b99      	ldr	r3, [pc, #612]	@ (10004238 <cyhal_uart_init+0x2d4>)
    if (NC != tx)
10003fd4:	2dff      	cmp	r5, #255	@ 0xff
    uint32_t saved_intr_status = cyhal_system_critical_section_enter();
10003fd6:	ee08 0a10 	vmov	s16, r0
    uint32_t pins_blocks = _CYHAL_SCB_AVAILABLE_BLOCKS_MASK;
10003fda:	f8d3 9000 	ldr.w	r9, [r3]
    if (NC != tx)
10003fde:	d006      	beq.n	10003fee <cyhal_uart_init+0x8a>
        pins_blocks &= _CYHAL_SCB_CHECK_AFFILIATION(tx, cyhal_pin_map_scb_uart_tx);
10003fe0:	4996      	ldr	r1, [pc, #600]	@ (1000423c <cyhal_uart_init+0x2d8>)
10003fe2:	220f      	movs	r2, #15
10003fe4:	4628      	mov	r0, r5
10003fe6:	f7ff fab1 	bl	1000354c <_cyhal_scb_check_pin_affiliation>
10003fea:	ea09 0900 	and.w	r9, r9, r0
    if (NC != rx)
10003fee:	2eff      	cmp	r6, #255	@ 0xff
10003ff0:	d006      	beq.n	10004000 <cyhal_uart_init+0x9c>
        pins_blocks &= _CYHAL_SCB_CHECK_AFFILIATION(rx, cyhal_pin_map_scb_uart_rx);
10003ff2:	4993      	ldr	r1, [pc, #588]	@ (10004240 <cyhal_uart_init+0x2dc>)
10003ff4:	220f      	movs	r2, #15
10003ff6:	4630      	mov	r0, r6
10003ff8:	f7ff faa8 	bl	1000354c <_cyhal_scb_check_pin_affiliation>
10003ffc:	ea09 0900 	and.w	r9, r9, r0
    if (NC != cts)
10004000:	2fff      	cmp	r7, #255	@ 0xff
10004002:	d006      	beq.n	10004012 <cyhal_uart_init+0xae>
        pins_blocks &= _CYHAL_SCB_CHECK_AFFILIATION(cts, cyhal_pin_map_scb_uart_cts);
10004004:	498f      	ldr	r1, [pc, #572]	@ (10004244 <cyhal_uart_init+0x2e0>)
10004006:	220e      	movs	r2, #14
10004008:	4638      	mov	r0, r7
1000400a:	f7ff fa9f 	bl	1000354c <_cyhal_scb_check_pin_affiliation>
1000400e:	ea09 0900 	and.w	r9, r9, r0
    if (NC != rts)
10004012:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
10004016:	d006      	beq.n	10004026 <cyhal_uart_init+0xc2>
        pins_blocks &= _CYHAL_SCB_CHECK_AFFILIATION(rts, cyhal_pin_map_scb_uart_rts);
10004018:	498b      	ldr	r1, [pc, #556]	@ (10004248 <cyhal_uart_init+0x2e4>)
1000401a:	220e      	movs	r2, #14
1000401c:	4640      	mov	r0, r8
1000401e:	f7ff fa95 	bl	1000354c <_cyhal_scb_check_pin_affiliation>
10004022:	ea09 0900 	and.w	r9, r9, r0
    if (0 == pins_blocks)
10004026:	f1b9 0f00 	cmp.w	r9, #0
1000402a:	d104      	bne.n	10004036 <cyhal_uart_init+0xd2>
        cyhal_system_critical_section_exit(saved_intr_status);
1000402c:	ee18 0a10 	vmov	r0, s16
10004030:	f7fe fd4b 	bl	10002aca <Cy_SysLib_ExitCriticalSection>
10004034:	e7bf      	b.n	10003fb6 <cyhal_uart_init+0x52>
10004036:	2300      	movs	r3, #0
10004038:	fa5f fb83 	uxtb.w	fp, r3
    while(((pins_blocks >> found_block_idx) & 0x1) == 0)
1000403c:	fa29 f20b 	lsr.w	r2, r9, fp
10004040:	07d2      	lsls	r2, r2, #31
10004042:	f103 0301 	add.w	r3, r3, #1
10004046:	d5f7      	bpl.n	10004038 <cyhal_uart_init+0xd4>
    cyhal_resource_inst_t uart_rsc = { CYHAL_RSC_SCB, found_block_idx, 0 };
10004048:	f04f 0317 	mov.w	r3, #23
1000404c:	f04f 0200 	mov.w	r2, #0
    const cyhal_resource_pin_mapping_t *tx_map = _CYHAL_SCB_FIND_MAP_BLOCK(tx, cyhal_pin_map_scb_uart_tx, &uart_rsc);
10004050:	497a      	ldr	r1, [pc, #488]	@ (1000423c <cyhal_uart_init+0x2d8>)
    cyhal_resource_inst_t uart_rsc = { CYHAL_RSC_SCB, found_block_idx, 0 };
10004052:	f88d 3008 	strb.w	r3, [sp, #8]
10004056:	f88d 200a 	strb.w	r2, [sp, #10]
    const cyhal_resource_pin_mapping_t *tx_map = _CYHAL_SCB_FIND_MAP_BLOCK(tx, cyhal_pin_map_scb_uart_tx, &uart_rsc);
1000405a:	ab02      	add	r3, sp, #8
1000405c:	220f      	movs	r2, #15
1000405e:	4628      	mov	r0, r5
    cyhal_resource_inst_t uart_rsc = { CYHAL_RSC_SCB, found_block_idx, 0 };
10004060:	f88d b009 	strb.w	fp, [sp, #9]
    const cyhal_resource_pin_mapping_t *tx_map = _CYHAL_SCB_FIND_MAP_BLOCK(tx, cyhal_pin_map_scb_uart_tx, &uart_rsc);
10004064:	f7ff fa3e 	bl	100034e4 <_cyhal_scb_find_map>
    const cyhal_resource_pin_mapping_t *rx_map = _CYHAL_SCB_FIND_MAP_BLOCK(rx, cyhal_pin_map_scb_uart_rx, &uart_rsc);
10004068:	4975      	ldr	r1, [pc, #468]	@ (10004240 <cyhal_uart_init+0x2dc>)
1000406a:	ab02      	add	r3, sp, #8
1000406c:	220f      	movs	r2, #15
    const cyhal_resource_pin_mapping_t *tx_map = _CYHAL_SCB_FIND_MAP_BLOCK(tx, cyhal_pin_map_scb_uart_tx, &uart_rsc);
1000406e:	ee08 0a90 	vmov	s17, r0
    const cyhal_resource_pin_mapping_t *rx_map = _CYHAL_SCB_FIND_MAP_BLOCK(rx, cyhal_pin_map_scb_uart_rx, &uart_rsc);
10004072:	4630      	mov	r0, r6
10004074:	f7ff fa36 	bl	100034e4 <_cyhal_scb_find_map>
    const cyhal_resource_pin_mapping_t *cts_map = _CYHAL_SCB_FIND_MAP_BLOCK(cts, cyhal_pin_map_scb_uart_cts, &uart_rsc);
10004078:	4972      	ldr	r1, [pc, #456]	@ (10004244 <cyhal_uart_init+0x2e0>)
1000407a:	ab02      	add	r3, sp, #8
1000407c:	220e      	movs	r2, #14
    const cyhal_resource_pin_mapping_t *rx_map = _CYHAL_SCB_FIND_MAP_BLOCK(rx, cyhal_pin_map_scb_uart_rx, &uart_rsc);
1000407e:	ee09 0a10 	vmov	s18, r0
    const cyhal_resource_pin_mapping_t *cts_map = _CYHAL_SCB_FIND_MAP_BLOCK(cts, cyhal_pin_map_scb_uart_cts, &uart_rsc);
10004082:	4638      	mov	r0, r7
10004084:	f7ff fa2e 	bl	100034e4 <_cyhal_scb_find_map>
    const cyhal_resource_pin_mapping_t *rts_map = _CYHAL_SCB_FIND_MAP_BLOCK(rts, cyhal_pin_map_scb_uart_rts, &uart_rsc);
10004088:	496f      	ldr	r1, [pc, #444]	@ (10004248 <cyhal_uart_init+0x2e4>)
    const cyhal_resource_pin_mapping_t *cts_map = _CYHAL_SCB_FIND_MAP_BLOCK(cts, cyhal_pin_map_scb_uart_cts, &uart_rsc);
1000408a:	9001      	str	r0, [sp, #4]
    const cyhal_resource_pin_mapping_t *rts_map = _CYHAL_SCB_FIND_MAP_BLOCK(rts, cyhal_pin_map_scb_uart_rts, &uart_rsc);
1000408c:	220e      	movs	r2, #14
1000408e:	ab02      	add	r3, sp, #8
10004090:	4640      	mov	r0, r8
10004092:	f7ff fa27 	bl	100034e4 <_cyhal_scb_find_map>
    cyhal_resource_inst_t rsc_to_reserve = { CYHAL_RSC_SCB, _cyhal_scb_get_block_index(found_block_idx), 0 };
10004096:	f04f 0317 	mov.w	r3, #23
    const cyhal_resource_pin_mapping_t *rts_map = _CYHAL_SCB_FIND_MAP_BLOCK(rts, cyhal_pin_map_scb_uart_rts, &uart_rsc);
1000409a:	4681      	mov	r9, r0
    cyhal_resource_inst_t rsc_to_reserve = { CYHAL_RSC_SCB, _cyhal_scb_get_block_index(found_block_idx), 0 };
1000409c:	4658      	mov	r0, fp
1000409e:	f88d 300c 	strb.w	r3, [sp, #12]
100040a2:	f7ff f9f5 	bl	10003490 <_cyhal_scb_get_block_index>
100040a6:	f04f 0200 	mov.w	r2, #0
100040aa:	f88d 000d 	strb.w	r0, [sp, #13]
    result = cyhal_hwmgr_reserve(&rsc_to_reserve);
100040ae:	a803      	add	r0, sp, #12
    cyhal_resource_inst_t rsc_to_reserve = { CYHAL_RSC_SCB, _cyhal_scb_get_block_index(found_block_idx), 0 };
100040b0:	f88d 200e 	strb.w	r2, [sp, #14]
    result = cyhal_hwmgr_reserve(&rsc_to_reserve);
100040b4:	f7fe ff7e 	bl	10002fb4 <cyhal_hwmgr_reserve>
100040b8:	4683      	mov	fp, r0
    cyhal_system_critical_section_exit(saved_intr_status);
100040ba:	ee18 0a10 	vmov	r0, s16
100040be:	f7fe fd04 	bl	10002aca <Cy_SysLib_ExitCriticalSection>
    if (CY_RSLT_SUCCESS != result)
100040c2:	f1bb 0f00 	cmp.w	fp, #0
100040c6:	f47f af78 	bne.w	10003fba <cyhal_uart_init+0x56>
    obj->resource = uart_rsc;
100040ca:	9b02      	ldr	r3, [sp, #8]
100040cc:	80a3      	strh	r3, [r4, #4]
    if ((result == CY_RSLT_SUCCESS) && NC != tx)
100040ce:	2dff      	cmp	r5, #255	@ 0xff
    obj->resource = uart_rsc;
100040d0:	ea4f 4313 	mov.w	r3, r3, lsr #16
100040d4:	71a3      	strb	r3, [r4, #6]
    if ((result == CY_RSLT_SUCCESS) && NC != tx)
100040d6:	d009      	beq.n	100040ec <cyhal_uart_init+0x188>
        result = _cyhal_utils_reserve_and_connect(tx_map, (uint8_t)CYHAL_PIN_MAP_DRIVE_MODE_SCB_UART_TX);
100040d8:	ee18 0a90 	vmov	r0, s17
100040dc:	2106      	movs	r1, #6
100040de:	f000 f8c3 	bl	10004268 <_cyhal_utils_reserve_and_connect>
        if (result == CY_RSLT_SUCCESS)
100040e2:	4683      	mov	fp, r0
100040e4:	2800      	cmp	r0, #0
100040e6:	f47f af68 	bne.w	10003fba <cyhal_uart_init+0x56>
            obj->pin_tx = tx;
100040ea:	7225      	strb	r5, [r4, #8]
    if ((result == CY_RSLT_SUCCESS) && NC != rx)
100040ec:	2eff      	cmp	r6, #255	@ 0xff
100040ee:	d009      	beq.n	10004104 <cyhal_uart_init+0x1a0>
        result = _cyhal_utils_reserve_and_connect(rx_map, (uint8_t)CYHAL_PIN_MAP_DRIVE_MODE_SCB_UART_RX);
100040f0:	ee19 0a10 	vmov	r0, s18
100040f4:	2108      	movs	r1, #8
100040f6:	f000 f8b7 	bl	10004268 <_cyhal_utils_reserve_and_connect>
        if (result == CY_RSLT_SUCCESS)
100040fa:	4683      	mov	fp, r0
100040fc:	2800      	cmp	r0, #0
100040fe:	f47f af5c 	bne.w	10003fba <cyhal_uart_init+0x56>
            obj->pin_rx = rx;
10004102:	71e6      	strb	r6, [r4, #7]
    if ((result == CY_RSLT_SUCCESS) && (NULL != cts_map))
10004104:	9b01      	ldr	r3, [sp, #4]
10004106:	b153      	cbz	r3, 1000411e <cyhal_uart_init+0x1ba>
        result = _cyhal_utils_reserve_and_connect(cts_map, (uint8_t)CYHAL_PIN_MAP_DRIVE_MODE_SCB_UART_CTS);
10004108:	2108      	movs	r1, #8
1000410a:	4618      	mov	r0, r3
1000410c:	f000 f8ac 	bl	10004268 <_cyhal_utils_reserve_and_connect>
        if (result == CY_RSLT_SUCCESS)
10004110:	4683      	mov	fp, r0
10004112:	2800      	cmp	r0, #0
10004114:	f47f af51 	bne.w	10003fba <cyhal_uart_init+0x56>
            obj->cts_enabled = true;
10004118:	2301      	movs	r3, #1
1000411a:	72e3      	strb	r3, [r4, #11]
            obj->pin_cts = cts;
1000411c:	7267      	strb	r7, [r4, #9]
    if ((result == CY_RSLT_SUCCESS) && (NULL != rts_map))
1000411e:	f1b9 0f00 	cmp.w	r9, #0
10004122:	d00b      	beq.n	1000413c <cyhal_uart_init+0x1d8>
        result = _cyhal_utils_reserve_and_connect(rts_map, (uint8_t)CYHAL_PIN_MAP_DRIVE_MODE_SCB_UART_RTS);
10004124:	2106      	movs	r1, #6
10004126:	4648      	mov	r0, r9
10004128:	f000 f89e 	bl	10004268 <_cyhal_utils_reserve_and_connect>
        if (result == CY_RSLT_SUCCESS)
1000412c:	4683      	mov	fp, r0
1000412e:	2800      	cmp	r0, #0
10004130:	f47f af43 	bne.w	10003fba <cyhal_uart_init+0x56>
            obj->rts_enabled = true;
10004134:	2301      	movs	r3, #1
10004136:	7323      	strb	r3, [r4, #12]
            obj->pin_rts = rts;
10004138:	f884 800a 	strb.w	r8, [r4, #10]
        if (clk == NULL)
1000413c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
1000413e:	f104 0510 	add.w	r5, r4, #16
10004142:	2b00      	cmp	r3, #0
10004144:	d16d      	bne.n	10004222 <cyhal_uart_init+0x2be>
            result = _cyhal_utils_allocate_clock(&(obj->clock), &obj->resource, CYHAL_CLOCK_BLOCK_PERIPHERAL_16BIT, true);
10004146:	2301      	movs	r3, #1
10004148:	461a      	mov	r2, r3
1000414a:	1d21      	adds	r1, r4, #4
1000414c:	4628      	mov	r0, r5
1000414e:	f000 f8db 	bl	10004308 <_cyhal_utils_allocate_clock>
            obj->is_clock_owned = (CY_RSLT_SUCCESS == result);
10004152:	f1b0 0b00 	subs.w	fp, r0, #0
10004156:	bf0c      	ite	eq
10004158:	2201      	moveq	r2, #1
1000415a:	2200      	movne	r2, #0
1000415c:	7362      	strb	r2, [r4, #13]
    if (result == CY_RSLT_SUCCESS)
1000415e:	f47f af2c 	bne.w	10003fba <cyhal_uart_init+0x56>
        return Cy_SysClk_PeriphAssignDivider(clk_dest, _CYHAL_PERIPHERAL_GROUP_GET_DIVIDER_TYPE(clock->block), clock->channel);
10004162:	7c21      	ldrb	r1, [r4, #16]
10004164:	7c62      	ldrb	r2, [r4, #17]
10004166:	7960      	ldrb	r0, [r4, #5]
10004168:	f001 0103 	and.w	r1, r1, #3
1000416c:	f001 f812 	bl	10005194 <Cy_SysClk_PeriphAssignDivider>
    if (CY_RSLT_SUCCESS == result)
10004170:	4683      	mov	fp, r0
10004172:	2800      	cmp	r0, #0
10004174:	f47f af21 	bne.w	10003fba <cyhal_uart_init+0x56>
        obj->config = _cyhal_uart_default_config;
10004178:	4e34      	ldr	r6, [pc, #208]	@ (1000424c <cyhal_uart_init+0x2e8>)
1000417a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
1000417c:	f104 0550 	add.w	r5, r4, #80	@ 0x50
10004180:	c50f      	stmia	r5!, {r0, r1, r2, r3}
10004182:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
10004184:	c50f      	stmia	r5!, {r0, r1, r2, r3}
10004186:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
10004188:	c50f      	stmia	r5!, {r0, r1, r2, r3}
1000418a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
1000418e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
        obj->config.enableCts = obj->cts_enabled;
10004192:	7ae3      	ldrb	r3, [r4, #11]
10004194:	f884 3070 	strb.w	r3, [r4, #112]	@ 0x70
        if (cfg != NULL)
10004198:	f1ba 0f00 	cmp.w	sl, #0
1000419c:	d016      	beq.n	100041cc <cyhal_uart_init+0x268>
            obj->config.dataWidth = cfg->data_bits;
1000419e:	f8da 3000 	ldr.w	r3, [sl]
100041a2:	65a3      	str	r3, [r4, #88]	@ 0x58
            obj->config.stopBits = _cyhal_uart_convert_stopbits((uint8_t)cfg->stop_bits);
100041a4:	f89a 3004 	ldrb.w	r3, [sl, #4]
100041a8:	1e9a      	subs	r2, r3, #2
100041aa:	2a02      	cmp	r2, #2
100041ac:	bf9a      	itte	ls
100041ae:	005b      	lslls	r3, r3, #1
100041b0:	b2db      	uxtbls	r3, r3
100041b2:	2302      	movhi	r3, #2
100041b4:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
            obj->config.parity = _cyhal_uart_convert_parity(cfg->parity);
100041b8:	f89a 3008 	ldrb.w	r3, [sl, #8]
    switch (parity)
100041bc:	2b01      	cmp	r3, #1
100041be:	d038      	beq.n	10004232 <cyhal_uart_init+0x2ce>
            return CY_SCB_UART_PARITY_ODD;
100041c0:	2b02      	cmp	r3, #2
100041c2:	bf14      	ite	ne
100041c4:	2300      	movne	r3, #0
100041c6:	2303      	moveq	r3, #3
            obj->config.parity = _cyhal_uart_convert_parity(cfg->parity);
100041c8:	f884 305e 	strb.w	r3, [r4, #94]	@ 0x5e
        result = _cyhal_uart_init_hw(obj);
100041cc:	4620      	mov	r0, r4
100041ce:	f7ff fc05 	bl	100039dc <_cyhal_uart_init_hw>
    if (CY_RSLT_SUCCESS == result)
100041d2:	4683      	mov	fp, r0
100041d4:	2800      	cmp	r0, #0
100041d6:	f47f aef0 	bne.w	10003fba <cyhal_uart_init+0x56>
        if ((cfg != NULL) && (cfg->rx_buffer != NULL))
100041da:	f1ba 0f00 	cmp.w	sl, #0
100041de:	d007      	beq.n	100041f0 <cyhal_uart_init+0x28c>
100041e0:	f8da 100c 	ldr.w	r1, [sl, #12]
100041e4:	b121      	cbz	r1, 100041f0 <cyhal_uart_init+0x28c>
            cyhal_uart_config_software_buffer(obj, cfg->rx_buffer, cfg->rx_buffer_size);
100041e6:	f8da 2010 	ldr.w	r2, [sl, #16]
100041ea:	4620      	mov	r0, r4
100041ec:	f7ff feaa 	bl	10003f44 <cyhal_uart_config_software_buffer>
        if (obj->is_clock_owned)
100041f0:	7b62      	ldrb	r2, [r4, #13]
100041f2:	b132      	cbz	r2, 10004202 <cyhal_uart_init+0x29e>
            result = cyhal_uart_set_baud(obj, obj->baud_rate, NULL);
100041f4:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
100041f8:	2200      	movs	r2, #0
100041fa:	4620      	mov	r0, r4
100041fc:	f7ff fce4 	bl	10003bc8 <cyhal_uart_set_baud>
10004200:	4683      	mov	fp, r0
        obj->user_fifo_level = (Cy_SCB_GetFifoSize(obj->base) / 2);
10004202:	6820      	ldr	r0, [r4, #0]
10004204:	f7ff fbe2 	bl	100039cc <Cy_SCB_GetFifoSize>
10004208:	0840      	lsrs	r0, r0, #1
1000420a:	f8c4 01a4 	str.w	r0, [r4, #420]	@ 0x1a4
    if (CY_RSLT_SUCCESS != result)
1000420e:	f1bb 0f00 	cmp.w	fp, #0
10004212:	f47f aed2 	bne.w	10003fba <cyhal_uart_init+0x56>
}
10004216:	4658      	mov	r0, fp
10004218:	b005      	add	sp, #20
1000421a:	ecbd 8b04 	vpop	{d8-d9}
1000421e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            obj->is_clock_owned = false;
10004222:	2300      	movs	r3, #0
10004224:	7363      	strb	r3, [r4, #13]
            obj->clock = *clk;
10004226:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10004228:	e893 0003 	ldmia.w	r3, {r0, r1}
1000422c:	e885 0003 	stmia.w	r5, {r0, r1}
    if (result == CY_RSLT_SUCCESS)
10004230:	e797      	b.n	10004162 <cyhal_uart_init+0x1fe>
    switch (parity)
10004232:	2302      	movs	r3, #2
10004234:	e7c8      	b.n	100041c8 <cyhal_uart_init+0x264>
10004236:	bf00      	nop
10004238:	1000c7bc 	.word	0x1000c7bc
1000423c:	1000bc9c 	.word	0x1000bc9c
10004240:	1000bc60 	.word	0x1000bc60
10004244:	1000bbf0 	.word	0x1000bbf0
10004248:	1000bc28 	.word	0x1000bc28
1000424c:	1000c81c 	.word	0x1000c81c
10004250:	04021f00 	.word	0x04021f00

10004254 <_cyhal_utils_release_if_used>:
    }
    return NULL;
}

void _cyhal_utils_release_if_used(cyhal_gpio_t *pin)
{
10004254:	b510      	push	{r4, lr}
10004256:	4604      	mov	r4, r0
    if (CYHAL_NC_PIN_VALUE != *pin)
10004258:	7800      	ldrb	r0, [r0, #0]
1000425a:	28ff      	cmp	r0, #255	@ 0xff
1000425c:	d003      	beq.n	10004266 <_cyhal_utils_release_if_used+0x12>
    {
#if defined(COMPONENT_CAT4)
        cyhal_resource_inst_t rsc = { CYHAL_RSC_GPIO, *pin, 0 };
        cyhal_hwmgr_free(&rsc);
#else
        _cyhal_utils_disconnect_and_free(*pin);
1000425e:	f000 f823 	bl	100042a8 <_cyhal_utils_disconnect_and_free>
#endif
        *pin = CYHAL_NC_PIN_VALUE;
10004262:	23ff      	movs	r3, #255	@ 0xff
10004264:	7023      	strb	r3, [r4, #0]
    }
}
10004266:	bd10      	pop	{r4, pc}

10004268 <_cyhal_utils_reserve_and_connect>:
    case CYHAL_CLOCK_BLOCK##instance##_PERIPHERAL##gr##_16_5BIT: return PERI##instance##_PERI_PCLK_PCLK_GROUP_NR##gr##_GR_DIV_16_5_VECT; \
    case CYHAL_CLOCK_BLOCK##instance##_PERIPHERAL##gr##_24_5BIT: return PERI##instance##_PERI_PCLK_PCLK_GROUP_NR##gr##_GR_DIV_24_5_VECT;
#endif

cy_rslt_t _cyhal_utils_reserve_and_connect(const cyhal_resource_pin_mapping_t *mapping, uint8_t drive_mode)
{
10004268:	b530      	push	{r4, r5, lr}
1000426a:	b085      	sub	sp, #20
    cyhal_resource_inst_t pinRsc = _cyhal_utils_get_gpio_resource(mapping->pin);
1000426c:	7883      	ldrb	r3, [r0, #2]
{
1000426e:	9101      	str	r1, [sp, #4]
    cyhal_resource_inst_t pinRsc = _cyhal_utils_get_gpio_resource(mapping->pin);
10004270:	220b      	movs	r2, #11
10004272:	f88d 200c 	strb.w	r2, [sp, #12]
{
10004276:	4605      	mov	r5, r0
    cyhal_resource_inst_t rsc = { CYHAL_RSC_GPIO, CYHAL_GET_PORT(pin), CYHAL_GET_PIN(pin) };
10004278:	08da      	lsrs	r2, r3, #3
    cy_rslt_t status = cyhal_hwmgr_reserve(&pinRsc);
1000427a:	a803      	add	r0, sp, #12
1000427c:	f003 0307 	and.w	r3, r3, #7
    cyhal_resource_inst_t pinRsc = _cyhal_utils_get_gpio_resource(mapping->pin);
10004280:	f88d 200d 	strb.w	r2, [sp, #13]
10004284:	f88d 300e 	strb.w	r3, [sp, #14]
    cy_rslt_t status = cyhal_hwmgr_reserve(&pinRsc);
10004288:	f7fe fe94 	bl	10002fb4 <cyhal_hwmgr_reserve>
    if (CY_RSLT_SUCCESS == status)
1000428c:	9901      	ldr	r1, [sp, #4]
1000428e:	4604      	mov	r4, r0
10004290:	b938      	cbnz	r0, 100042a2 <_cyhal_utils_reserve_and_connect+0x3a>
    {
        status = cyhal_connect_pin(mapping, drive_mode);
10004292:	4628      	mov	r0, r5
10004294:	f7ff f864 	bl	10003360 <cyhal_connect_pin>
        if (CY_RSLT_SUCCESS != status)
10004298:	4604      	mov	r4, r0
1000429a:	b110      	cbz	r0, 100042a2 <_cyhal_utils_reserve_and_connect+0x3a>
        {
            cyhal_hwmgr_free(&pinRsc);
1000429c:	a803      	add	r0, sp, #12
1000429e:	f7fe fec9 	bl	10003034 <cyhal_hwmgr_free>
        }
    }
    return status;
}
100042a2:	4620      	mov	r0, r4
100042a4:	b005      	add	sp, #20
100042a6:	bd30      	pop	{r4, r5, pc}

100042a8 <_cyhal_utils_disconnect_and_free>:

void _cyhal_utils_disconnect_and_free(cyhal_gpio_t pin)
{
100042a8:	b513      	push	{r0, r1, r4, lr}
100042aa:	4604      	mov	r4, r0
    cy_rslt_t rslt = cyhal_disconnect_pin(pin);
100042ac:	f7ff f880 	bl	100033b0 <cyhal_disconnect_pin>
    CY_UNUSED_PARAMETER(rslt); /* CY_ASSERT only processes in DEBUG, ignores for others */
    CY_ASSERT(CY_RSLT_SUCCESS == rslt);
    cyhal_resource_inst_t rsc = _cyhal_utils_get_gpio_resource(pin);
100042b0:	230b      	movs	r3, #11
100042b2:	f88d 3004 	strb.w	r3, [sp, #4]
    cyhal_hwmgr_free(&rsc);
100042b6:	a801      	add	r0, sp, #4
100042b8:	08e3      	lsrs	r3, r4, #3
100042ba:	f004 0407 	and.w	r4, r4, #7
    cyhal_resource_inst_t rsc = _cyhal_utils_get_gpio_resource(pin);
100042be:	f88d 3005 	strb.w	r3, [sp, #5]
100042c2:	f88d 4006 	strb.w	r4, [sp, #6]
    cyhal_hwmgr_free(&rsc);
100042c6:	f7fe feb5 	bl	10003034 <cyhal_hwmgr_free>
}
100042ca:	b002      	add	sp, #8
100042cc:	bd10      	pop	{r4, pc}
	...

100042d0 <_cyhal_utils_convert_haltopdl_pm_mode>:

cy_en_syspm_callback_mode_t _cyhal_utils_convert_haltopdl_pm_mode(cyhal_syspm_callback_mode_t mode)
{
    switch (mode)
100042d0:	3802      	subs	r0, #2
100042d2:	b2c0      	uxtb	r0, r0
100042d4:	2806      	cmp	r0, #6
100042d6:	bf9a      	itte	ls
100042d8:	4b01      	ldrls	r3, [pc, #4]	@ (100042e0 <_cyhal_utils_convert_haltopdl_pm_mode+0x10>)
100042da:	5c18      	ldrbls	r0, [r3, r0]
{
100042dc:	2001      	movhi	r0, #1
        default:
            /* Should not get here */
            CY_ASSERT(false);
            return CY_SYSPM_CHECK_READY;
    }
}
100042de:	4770      	bx	lr
100042e0:	1000c85c 	.word	0x1000c85c

100042e4 <_cyhal_utils_convert_pdltohal_pm_mode>:

cyhal_syspm_callback_mode_t _cyhal_utils_convert_pdltohal_pm_mode(cy_en_syspm_callback_mode_t mode)
{
    switch (mode)
100042e4:	3802      	subs	r0, #2
100042e6:	b2c0      	uxtb	r0, r0
100042e8:	2806      	cmp	r0, #6
100042ea:	bf9a      	itte	ls
100042ec:	4b01      	ldrls	r3, [pc, #4]	@ (100042f4 <_cyhal_utils_convert_pdltohal_pm_mode+0x10>)
100042ee:	5c18      	ldrbls	r0, [r3, r0]
{
100042f0:	2001      	movhi	r0, #1
        default:
            /* Should not get here */
            CY_ASSERT(false);
            return CYHAL_SYSPM_CHECK_READY;
    }
}
100042f2:	4770      	bx	lr
100042f4:	1000c85c 	.word	0x1000c85c

100042f8 <_cyhal_utils_get_clock_count>:
#endif

uint32_t _cyhal_utils_get_clock_count(cyhal_clock_block_t block)
{
    //NOTE: This could potentially reuse the cyhal_hwmgr.c cyhal_block_offsets_clock array
    switch (block)
100042f8:	2812      	cmp	r0, #18
100042fa:	bf9a      	itte	ls
100042fc:	4b01      	ldrls	r3, [pc, #4]	@ (10004304 <_cyhal_utils_get_clock_count+0xc>)
100042fe:	5c18      	ldrbls	r0, [r3, r0]
{
10004300:	2001      	movhi	r0, #1
            return PERI_PCLK_DIV_24_5_NR;
        #endif /* defined(COMPONENT_CAT2) */
        default:
            return 1;
    }
}
10004302:	4770      	bx	lr
10004304:	1000c863 	.word	0x1000c863

10004308 <_cyhal_utils_allocate_clock>:

#if defined(COMPONENT_CAT1A)
cy_rslt_t _cyhal_utils_allocate_clock(cyhal_clock_t *clock, const cyhal_resource_inst_t *clocked_item, cyhal_clock_block_t div, bool accept_larger)
{
10004308:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    CY_ASSERT(NULL != clocked_item);

    cyhal_clock_t clock_rsc;
    switch (clocked_item->type)
1000430c:	7809      	ldrb	r1, [r1, #0]
1000430e:	2915      	cmp	r1, #21
{
10004310:	4604      	mov	r4, r0
10004312:	4617      	mov	r7, r2
10004314:	461e      	mov	r6, r3
    switch (clocked_item->type)
10004316:	d02e      	beq.n	10004376 <_cyhal_utils_allocate_clock+0x6e>
10004318:	d81c      	bhi.n	10004354 <_cyhal_utils_allocate_clock+0x4c>
1000431a:	290c      	cmp	r1, #12
1000431c:	d01e      	beq.n	1000435c <_cyhal_utils_allocate_clock+0x54>
1000431e:	2914      	cmp	r1, #20
10004320:	d01c      	beq.n	1000435c <_cyhal_utils_allocate_clock+0x54>
10004322:	2905      	cmp	r1, #5
10004324:	d029      	beq.n	1000437a <_cyhal_utils_allocate_clock+0x72>
10004326:	4d16      	ldr	r5, [pc, #88]	@ (10004380 <_cyhal_utils_allocate_clock+0x78>)
    cy_rslt_t result = CYHAL_HWMGR_RSLT_ERR_NONE_FREE;
10004328:	4816      	ldr	r0, [pc, #88]	@ (10004384 <_cyhal_utils_allocate_clock+0x7c>)
1000432a:	f105 0904 	add.w	r9, r5, #4
    bool found_minimum = false;
1000432e:	2300      	movs	r3, #0
        if(PERI_DIVIDERS[i] == div)
10004330:	f815 8b01 	ldrb.w	r8, [r5], #1
10004334:	4547      	cmp	r7, r8
10004336:	d000      	beq.n	1000433a <_cyhal_utils_allocate_clock+0x32>
        if(found_minimum)
10004338:	b14b      	cbz	r3, 1000434e <_cyhal_utils_allocate_clock+0x46>
}
static inline cy_rslt_t _cyhal_clock_allocate_peri(cyhal_clock_t *clock, cyhal_clock_block_t block)
{
    CY_ASSERT(NULL != clock);

    const void* funcs = _cyhal_clock_get_funcs_peripheral();
1000433a:	f7fe fc9d 	bl	10002c78 <_cyhal_clock_get_funcs_peripheral>
    return _cyhal_clock_allocate_channel(clock, block, funcs);
1000433e:	4641      	mov	r1, r8
    const void* funcs = _cyhal_clock_get_funcs_peripheral();
10004340:	4602      	mov	r2, r0
    return _cyhal_clock_allocate_channel(clock, block, funcs);
10004342:	4620      	mov	r0, r4
10004344:	f7fe fc9c 	bl	10002c80 <_cyhal_clock_allocate_channel>
            if(CY_RSLT_SUCCESS == result || !accept_larger)
10004348:	b190      	cbz	r0, 10004370 <_cyhal_utils_allocate_clock+0x68>
1000434a:	b18e      	cbz	r6, 10004370 <_cyhal_utils_allocate_clock+0x68>
1000434c:	4633      	mov	r3, r6
    for(size_t i = 0; i < sizeof(PERI_DIVIDERS) / sizeof(PERI_DIVIDERS[0]); ++i)
1000434e:	454d      	cmp	r5, r9
10004350:	d1ee      	bne.n	10004330 <_cyhal_utils_allocate_clock+0x28>
10004352:	e00d      	b.n	10004370 <_cyhal_utils_allocate_clock+0x68>
    switch (clocked_item->type)
10004354:	291d      	cmp	r1, #29
10004356:	d1e6      	bne.n	10004326 <_cyhal_utils_allocate_clock+0x1e>
#if defined(CY_DEVICE_PSOC6ABLE2) || defined(CY_DEVICE_PSOC6A2M) || defined(CY_DEVICE_PSOC6A512K) || defined(CY_DEVICE_PSOC6A256K)
        case CYHAL_RSC_SMIF:
            clock_rsc = CYHAL_CLOCK_HF[2];
            break;
        case CYHAL_RSC_USB:
            clock_rsc = CYHAL_CLOCK_HF[3];
10004358:	4b0b      	ldr	r3, [pc, #44]	@ (10004388 <_cyhal_utils_allocate_clock+0x80>)
1000435a:	e000      	b.n	1000435e <_cyhal_utils_allocate_clock+0x56>
            clock_rsc = CYHAL_CLOCK_HF[1];
1000435c:	4b0b      	ldr	r3, [pc, #44]	@ (1000438c <_cyhal_utils_allocate_clock+0x84>)
            clock_rsc = CYHAL_CLOCK_HF[3];
1000435e:	e893 0003 	ldmia.w	r3, {r0, r1}
10004362:	ab02      	add	r3, sp, #8
10004364:	e903 0003 	stmdb	r3, {r0, r1}
            CY_UNUSED_PARAMETER(clock_rsc);
            return _cyhal_utils_allocate_peri(clock, 0, div, accept_larger);
    }
#if defined(CY_DEVICE_PSOC6ABLE2) || defined(CY_DEVICE_PSOC6A2M) || defined(CY_DEVICE_PSOC6A512K) || defined(CY_DEVICE_PSOC6A256K)
    /* These devices don't return their value in the above switch statement - return the value here. */
    return cyhal_clock_reserve(clock, &clock_rsc);
10004368:	4669      	mov	r1, sp
1000436a:	4620      	mov	r0, r4
1000436c:	f7fe fcb4 	bl	10002cd8 <cyhal_clock_reserve>
#endif
}
10004370:	b003      	add	sp, #12
10004372:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            clock_rsc = CYHAL_CLOCK_HF[2];
10004376:	4b06      	ldr	r3, [pc, #24]	@ (10004390 <_cyhal_utils_allocate_clock+0x88>)
10004378:	e7f1      	b.n	1000435e <_cyhal_utils_allocate_clock+0x56>
    switch (clocked_item->type)
1000437a:	4806      	ldr	r0, [pc, #24]	@ (10004394 <_cyhal_utils_allocate_clock+0x8c>)
1000437c:	e7f8      	b.n	10004370 <_cyhal_utils_allocate_clock+0x68>
1000437e:	bf00      	nop
10004380:	1000c876 	.word	0x1000c876
10004384:	04020d02 	.word	0x04020d02
10004388:	1000c604 	.word	0x1000c604
1000438c:	1000c5f4 	.word	0x1000c5f4
10004390:	1000c5fc 	.word	0x1000c5fc
10004394:	04020202 	.word	0x04020202

10004398 <Cy_PDL_Init>:
* This function must be called prior calling any function in PDL.
*
*******************************************************************************/
void Cy_PDL_Init(const cy_stc_device_t * device)
{
    cy_device = device;
10004398:	4b01      	ldr	r3, [pc, #4]	@ (100043a0 <Cy_PDL_Init+0x8>)
1000439a:	6018      	str	r0, [r3, #0]
}
1000439c:	4770      	bx	lr
1000439e:	bf00      	nop
100043a0:	08002c40 	.word	0x08002c40

100043a4 <Cy_DMA_Descriptor_DeInit>:
*******************************************************************************/
void Cy_DMA_Descriptor_DeInit(cy_stc_dma_descriptor_t * descriptor)
{
    CY_ASSERT_L1(descriptor);

    descriptor->ctl = 0UL;
100043a4:	2300      	movs	r3, #0
    descriptor->src = 0UL;
100043a6:	e9c0 3300 	strd	r3, r3, [r0]
    descriptor->dst = 0UL;
    descriptor->xCtl = 0UL;
100043aa:	e9c0 3302 	strd	r3, r3, [r0, #8]
    descriptor->yCtl = 0UL;
    descriptor->nextPtr = 0UL;
100043ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
100043b2:	4770      	bx	lr

100043b4 <Cy_DMA_Channel_DeInit>:
*******************************************************************************/
void Cy_DMA_Channel_DeInit(DW_Type * base, uint32_t channel)
{
    CY_ASSERT_L1(CY_DMA_IS_CH_NR_VALID(base, channel));

    DW_CH_CTL(base, channel) = 0UL;
100043b4:	4b07      	ldr	r3, [pc, #28]	@ (100043d4 <Cy_DMA_Channel_DeInit+0x20>)
100043b6:	681b      	ldr	r3, [r3, #0]
100043b8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
100043bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
100043c0:	fb01 3102 	mla	r1, r1, r2, r3
100043c4:	1842      	adds	r2, r0, r1
100043c6:	2300      	movs	r3, #0
100043c8:	5043      	str	r3, [r0, r1]
    DW_CH_IDX(base, channel) = 0UL;
100043ca:	6093      	str	r3, [r2, #8]
    DW_CH_CURR_PTR(base, channel) = 0UL;
100043cc:	60d3      	str	r3, [r2, #12]
    DW_CH_INTR_MASK(base, channel) = 0UL;
100043ce:	6193      	str	r3, [r2, #24]
}
100043d0:	4770      	bx	lr
100043d2:	bf00      	nop
100043d4:	08002c40 	.word	0x08002c40

100043d8 <Cy_IPC_Drv_GetIpcBaseAddress>:
*
*******************************************************************************/
__STATIC_INLINE IPC_STRUCT_Type* Cy_IPC_Drv_GetIpcBaseAddress (uint32_t ipcIndex)
{
    CY_ASSERT_L1(CY_IPC_CHANNELS > ipcIndex);
    return ( (IPC_STRUCT_Type*) CY_IPC_STRUCT_PTR(ipcIndex));
100043d8:	4b03      	ldr	r3, [pc, #12]	@ (100043e8 <Cy_IPC_Drv_GetIpcBaseAddress+0x10>)
100043da:	681b      	ldr	r3, [r3, #0]
100043dc:	f8b3 20be 	ldrh.w	r2, [r3, #190]	@ 0xbe
100043e0:	6a1b      	ldr	r3, [r3, #32]
}
100043e2:	fb00 3002 	mla	r0, r0, r2, r3
100043e6:	4770      	bx	lr
100043e8:	08002c40 	.word	0x08002c40

100043ec <Cy_Flash_ProcessOpcode>:
*******************************************************************************/
static cy_en_flashdrv_status_t Cy_Flash_ProcessOpcode(uint32_t opcode)
{
    cy_en_flashdrv_status_t result;

    switch (opcode)
100043ec:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
100043f0:	d031      	beq.n	10004456 <Cy_Flash_ProcessOpcode+0x6a>
100043f2:	d822      	bhi.n	1000443a <Cy_Flash_ProcessOpcode+0x4e>
100043f4:	2880      	cmp	r0, #128	@ 0x80
100043f6:	d030      	beq.n	1000445a <Cy_Flash_ProcessOpcode+0x6e>
100043f8:	d815      	bhi.n	10004426 <Cy_Flash_ProcessOpcode+0x3a>
100043fa:	2810      	cmp	r0, #16
100043fc:	d02f      	beq.n	1000445e <Cy_Flash_ProcessOpcode+0x72>
100043fe:	2840      	cmp	r0, #64	@ 0x40
10004400:	d02f      	beq.n	10004462 <Cy_Flash_ProcessOpcode+0x76>
            result = CY_FLASH_DRV_INVALID_INPUT_PARAMETERS;
            break;
        }
        default:
        {
            result = CY_FLASH_DRV_ERR_UNC;
10004402:	4b1c      	ldr	r3, [pc, #112]	@ (10004474 <Cy_Flash_ProcessOpcode+0x88>)
10004404:	2800      	cmp	r0, #0
10004406:	bf18      	it	ne
10004408:	4618      	movne	r0, r3
1000440a:	4770      	bx	lr
    switch (opcode)
1000440c:	f100 5080 	add.w	r0, r0, #268435456	@ 0x10000000
10004410:	3801      	subs	r0, #1
10004412:	2804      	cmp	r0, #4
10004414:	d819      	bhi.n	1000444a <Cy_Flash_ProcessOpcode+0x5e>
10004416:	e8df f000 	tbb	[pc, r0]
1000441a:	1803      	.short	0x1803
1000441c:	1a26      	.short	0x1a26
1000441e:	1c          	.byte	0x1c
1000441f:	00          	.byte	0x00
10004420:	f44f 00a4 	mov.w	r0, #5373952	@ 0x520000
10004424:	4770      	bx	lr
10004426:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
1000442a:	4b13      	ldr	r3, [pc, #76]	@ (10004478 <Cy_Flash_ProcessOpcode+0x8c>)
1000442c:	d01d      	beq.n	1000446a <Cy_Flash_ProcessOpcode+0x7e>
            result = CY_FLASH_DRV_ERR_UNC;
1000442e:	4a11      	ldr	r2, [pc, #68]	@ (10004474 <Cy_Flash_ProcessOpcode+0x88>)
10004430:	4298      	cmp	r0, r3
10004432:	bf0c      	ite	eq
10004434:	4618      	moveq	r0, r3
10004436:	4610      	movne	r0, r2
10004438:	4770      	bx	lr
    switch (opcode)
1000443a:	4b10      	ldr	r3, [pc, #64]	@ (1000447c <Cy_Flash_ProcessOpcode+0x90>)
1000443c:	4298      	cmp	r0, r3
1000443e:	d016      	beq.n	1000446e <Cy_Flash_ProcessOpcode+0x82>
10004440:	f100 5380 	add.w	r3, r0, #268435456	@ 0x10000000
10004444:	3b01      	subs	r3, #1
10004446:	2b04      	cmp	r3, #4
10004448:	d9e0      	bls.n	1000440c <Cy_Flash_ProcessOpcode+0x20>
            result = CY_FLASH_DRV_ERR_UNC;
1000444a:	480a      	ldr	r0, [pc, #40]	@ (10004474 <Cy_Flash_ProcessOpcode+0x88>)
            break;
        }
    }

    return (result);
}
1000444c:	4770      	bx	lr
            result = CY_FLASH_DRV_INVALID_FLASH_ADDR;
1000444e:	480c      	ldr	r0, [pc, #48]	@ (10004480 <Cy_Flash_ProcessOpcode+0x94>)
            break;
10004450:	4770      	bx	lr
            result = CY_FLASH_DRV_ROW_PROTECTED;
10004452:	480c      	ldr	r0, [pc, #48]	@ (10004484 <Cy_Flash_ProcessOpcode+0x98>)
            break;
10004454:	4770      	bx	lr
            result = CY_FLASH_DRV_SUCCESS;
10004456:	2000      	movs	r0, #0
10004458:	4770      	bx	lr
            result = CY_FLASH_DRV_IPC_BUSY;
1000445a:	480b      	ldr	r0, [pc, #44]	@ (10004488 <Cy_Flash_ProcessOpcode+0x9c>)
1000445c:	4770      	bx	lr
            result = CY_FLASH_DRV_OPERATION_STARTED;
1000445e:	480b      	ldr	r0, [pc, #44]	@ (1000448c <Cy_Flash_ProcessOpcode+0xa0>)
10004460:	4770      	bx	lr
            result = CY_FLASH_DRV_OPCODE_BUSY;
10004462:	480b      	ldr	r0, [pc, #44]	@ (10004490 <Cy_Flash_ProcessOpcode+0xa4>)
10004464:	4770      	bx	lr
            result = CY_FLASH_DRV_INVALID_FM_PL;
10004466:	480b      	ldr	r0, [pc, #44]	@ (10004494 <Cy_Flash_ProcessOpcode+0xa8>)
10004468:	4770      	bx	lr
            result = CY_FLASH_DRV_INVALID_INPUT_PARAMETERS;
1000446a:	4618      	mov	r0, r3
1000446c:	4770      	bx	lr
            result = CY_FLASH_DRV_PROGRESS_NO_ERROR;
1000446e:	f44f 00a0 	mov.w	r0, #5242880	@ 0x500000
10004472:	4770      	bx	lr
10004474:	005200ff 	.word	0x005200ff
10004478:	00520006 	.word	0x00520006
1000447c:	a0000009 	.word	0xa0000009
10004480:	00520002 	.word	0x00520002
10004484:	00520003 	.word	0x00520003
10004488:	00520005 	.word	0x00520005
1000448c:	00500001 	.word	0x00500001
10004490:	00500002 	.word	0x00500002
10004494:	00520001 	.word	0x00520001

10004498 <Cy_Flash_OperationStatus>:
****************************************************************************//**
*
* Checks the status of the Flash Operation, and returns it.
*******************************************************************************/
static cy_en_flashdrv_status_t Cy_Flash_OperationStatus(void)
{
10004498:	b508      	push	{r3, lr}
    cy_en_flashdrv_status_t result = CY_FLASH_DRV_OPCODE_BUSY;
#if !defined (CY_IP_MXS40FLASHC)
    /* Checks if the IPC structure is not locked */
    if (Cy_IPC_Drv_IsLockAcquired(Cy_IPC_Drv_GetIpcBaseAddress(CY_IPC_CHAN_SYSCALL)) == false)
1000449a:	2001      	movs	r0, #1
1000449c:	f7ff ff9c 	bl	100043d8 <Cy_IPC_Drv_GetIpcBaseAddress>
* \snippet ipc/snippet/main.c snippet_Cy_IPC_Drv_LockAcquire
*
*******************************************************************************/
__STATIC_INLINE bool Cy_IPC_Drv_IsLockAcquired (IPC_STRUCT_Type const * base)
{
    return ( 0u != _FLD2VAL(IPC_STRUCT_ACQUIRE_SUCCESS, REG_IPC_STRUCT_LOCK_STATUS(base)) );
100044a0:	4b09      	ldr	r3, [pc, #36]	@ (100044c8 <Cy_Flash_OperationStatus+0x30>)
100044a2:	6819      	ldr	r1, [r3, #0]
100044a4:	f8d1 30c0 	ldr.w	r3, [r1, #192]	@ 0xc0
100044a8:	58c3      	ldr	r3, [r0, r3]
100044aa:	2b00      	cmp	r3, #0
100044ac:	db0a      	blt.n	100044c4 <Cy_Flash_OperationStatus+0x2c>
    {
        /* The result of SROM API calling is returned to the driver context */
        result = Cy_Flash_ProcessOpcode(flashContext.opcode);
100044ae:	4b07      	ldr	r3, [pc, #28]	@ (100044cc <Cy_Flash_OperationStatus+0x34>)
100044b0:	6818      	ldr	r0, [r3, #0]
100044b2:	f7ff ff9b 	bl	100043ec <Cy_Flash_ProcessOpcode>
            CY_PRA_REG32_SET(CY_PRA_INDX_FLASHC_FLASH_CMD, FLASHC_FLASH_CMD_INV_Msk);
            while (CY_PRA_REG32_GET(CY_PRA_INDX_FLASHC_FLASH_CMD) != 0U)
            {
            }
        #else
            FLASHC_FLASH_CMD = FLASHC_FLASH_CMD_INV_Msk;
100044b6:	684b      	ldr	r3, [r1, #4]
100044b8:	2201      	movs	r2, #1
100044ba:	609a      	str	r2, [r3, #8]
            while (FLASHC_FLASH_CMD != 0U)
100044bc:	689a      	ldr	r2, [r3, #8]
100044be:	2a00      	cmp	r2, #0
100044c0:	d1fc      	bne.n	100044bc <Cy_Flash_OperationStatus+0x24>
    {
        return CY_FLASH_DRV_SUCCESS;
    }
#endif /* !defined (CY_IP_MXS40FLASHC) */
    return (result);
}
100044c2:	bd08      	pop	{r3, pc}
    cy_en_flashdrv_status_t result = CY_FLASH_DRV_OPCODE_BUSY;
100044c4:	4802      	ldr	r0, [pc, #8]	@ (100044d0 <Cy_Flash_OperationStatus+0x38>)
    return (result);
100044c6:	e7fc      	b.n	100044c2 <Cy_Flash_OperationStatus+0x2a>
100044c8:	08002c40 	.word	0x08002c40
100044cc:	08002c44 	.word	0x08002c44
100044d0:	00500002 	.word	0x00500002

100044d4 <Cy_Flash_InitExt>:
    ipcWaitMessage = ipcWaitMessageAddr;
100044d4:	4b17      	ldr	r3, [pc, #92]	@ (10004534 <Cy_Flash_InitExt+0x60>)
{
100044d6:	b513      	push	{r0, r1, r4, lr}
    ipcWaitMessage = ipcWaitMessageAddr;
100044d8:	6018      	str	r0, [r3, #0]
    if(ipcWaitMessage != NULL)
100044da:	b120      	cbz	r0, 100044e6 <Cy_Flash_InitExt+0x12>
        ipcWaitMessage->clientID = CY_FLASH_IPC_CLIENT_ID;
100044dc:	f64f 7302 	movw	r3, #65282	@ 0xff02
100044e0:	8003      	strh	r3, [r0, #0]
        ipcWaitMessage->intrRelMask = 0U;
100044e2:	2300      	movs	r3, #0
100044e4:	8043      	strh	r3, [r0, #2]
    if (cy_device->flashRwwRequired != 0U)
100044e6:	4c14      	ldr	r4, [pc, #80]	@ (10004538 <Cy_Flash_InitExt+0x64>)
100044e8:	6823      	ldr	r3, [r4, #0]
100044ea:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
100044ee:	b1f2      	cbz	r2, 1000452e <Cy_Flash_InitExt+0x5a>
            cy_stc_sysint_t flashIntConfig =
100044f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
100044f2:	f8ad 3000 	strh.w	r3, [sp]
            (void)Cy_SysInt_Init(&flashIntConfig, &Cy_Flash_ResumeIrqHandler);
100044f6:	4911      	ldr	r1, [pc, #68]	@ (1000453c <Cy_Flash_InitExt+0x68>)
            cy_stc_sysint_t flashIntConfig =
100044f8:	2300      	movs	r3, #0
            (void)Cy_SysInt_Init(&flashIntConfig, &Cy_Flash_ResumeIrqHandler);
100044fa:	4668      	mov	r0, sp
            cy_stc_sysint_t flashIntConfig =
100044fc:	9301      	str	r3, [sp, #4]
            (void)Cy_SysInt_Init(&flashIntConfig, &Cy_Flash_ResumeIrqHandler);
100044fe:	f001 fc61 	bl	10005dc4 <Cy_SysInt_Init>
            NVIC_EnableIRQ(flashIntConfig.intrSrc);
10004502:	f9bd 3000 	ldrsh.w	r3, [sp]
  if ((int32_t)(IRQn) >= 0)
10004506:	2b00      	cmp	r3, #0
10004508:	db08      	blt.n	1000451c <Cy_Flash_InitExt+0x48>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1000450a:	2201      	movs	r2, #1
1000450c:	0959      	lsrs	r1, r3, #5
1000450e:	f003 031f 	and.w	r3, r3, #31
10004512:	fa02 f303 	lsl.w	r3, r2, r3
10004516:	4a0a      	ldr	r2, [pc, #40]	@ (10004540 <Cy_Flash_InitExt+0x6c>)
10004518:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
            if (cy_device->flashPipeRequired != 0U)
1000451c:	6823      	ldr	r3, [r4, #0]
1000451e:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
10004522:	b123      	cbz	r3, 1000452e <Cy_Flash_InitExt+0x5a>
                (void)Cy_IPC_Pipe_RegisterCallback(CY_IPC_EP_CYPIPE_ADDR, &Cy_Flash_NotifyHandler,
10004524:	4907      	ldr	r1, [pc, #28]	@ (10004544 <Cy_Flash_InitExt+0x70>)
10004526:	2202      	movs	r2, #2
10004528:	2001      	movs	r0, #1
1000452a:	f000 f9c1 	bl	100048b0 <Cy_IPC_Pipe_RegisterCallback>
}
1000452e:	b002      	add	sp, #8
10004530:	bd10      	pop	{r4, pc}
10004532:	bf00      	nop
10004534:	08002c54 	.word	0x08002c54
10004538:	08002c40 	.word	0x08002c40
1000453c:	0800259b 	.word	0x0800259b
10004540:	e000e100 	.word	0xe000e100
10004544:	08002569 	.word	0x08002569

10004548 <Cy_Flash_Init>:
        Cy_Flash_InitExt(&ipcWaitMessageStc);
10004548:	4801      	ldr	r0, [pc, #4]	@ (10004550 <Cy_Flash_Init+0x8>)
1000454a:	f7ff bfc3 	b.w	100044d4 <Cy_Flash_InitExt>
1000454e:	bf00      	nop
10004550:	08002830 	.word	0x08002830

10004554 <Cy_GPIO_SetHSIOM>:
    portNum = ((uint32_t)(base) - CY_GPIO_BASE) / GPIO_PRT_SECTION_SIZE;
10004554:	4b12      	ldr	r3, [pc, #72]	@ (100045a0 <Cy_GPIO_SetHSIOM+0x4c>)
10004556:	681b      	ldr	r3, [r3, #0]
{
10004558:	b530      	push	{r4, r5, lr}
    portNum = ((uint32_t)(base) - CY_GPIO_BASE) / GPIO_PRT_SECTION_SIZE;
1000455a:	699c      	ldr	r4, [r3, #24]
1000455c:	1b00      	subs	r0, r0, r4
    portAddrHSIOM = (HSIOM_PRT_V1_Type*)(CY_HSIOM_BASE + (HSIOM_PRT_SECTION_SIZE * portNum));
1000455e:	695c      	ldr	r4, [r3, #20]
    portNum = ((uint32_t)(base) - CY_GPIO_BASE) / GPIO_PRT_SECTION_SIZE;
10004560:	09c0      	lsrs	r0, r0, #7
    if(pinNum < CY_GPIO_PRT_HALF)
10004562:	2903      	cmp	r1, #3
    portAddrHSIOM = (HSIOM_PRT_V1_Type*)(CY_HSIOM_BASE + (HSIOM_PRT_SECTION_SIZE * portNum));
10004564:	ea4f 1500 	mov.w	r5, r0, lsl #4
        HSIOM_PRT_PORT_SEL0(portAddrHSIOM) = tempReg | (((uint32_t)value & CY_GPIO_HSIOM_MASK) << (pinNum << CY_GPIO_HSIOM_OFFSET));
10004568:	f002 021f 	and.w	r2, r2, #31
    portAddrHSIOM = (HSIOM_PRT_V1_Type*)(CY_HSIOM_BASE + (HSIOM_PRT_SECTION_SIZE * portNum));
1000456c:	eb04 1000 	add.w	r0, r4, r0, lsl #4
    if(pinNum < CY_GPIO_PRT_HALF)
10004570:	f04f 031f 	mov.w	r3, #31
10004574:	d809      	bhi.n	1000458a <Cy_GPIO_SetHSIOM+0x36>
        tempReg = HSIOM_PRT_PORT_SEL0(portAddrHSIOM) & ~(CY_GPIO_HSIOM_MASK << (pinNum << CY_GPIO_HSIOM_OFFSET));
10004576:	5928      	ldr	r0, [r5, r4]
10004578:	00c9      	lsls	r1, r1, #3
1000457a:	408b      	lsls	r3, r1
1000457c:	ea20 0303 	bic.w	r3, r0, r3
        HSIOM_PRT_PORT_SEL0(portAddrHSIOM) = tempReg | (((uint32_t)value & CY_GPIO_HSIOM_MASK) << (pinNum << CY_GPIO_HSIOM_OFFSET));
10004580:	fa02 f101 	lsl.w	r1, r2, r1
10004584:	430b      	orrs	r3, r1
10004586:	512b      	str	r3, [r5, r4]
}
10004588:	bd30      	pop	{r4, r5, pc}
        pinNum -= CY_GPIO_PRT_HALF;
1000458a:	3904      	subs	r1, #4
        tempReg = HSIOM_PRT_PORT_SEL1(portAddrHSIOM) & ~(CY_GPIO_HSIOM_MASK << (pinNum << CY_GPIO_HSIOM_OFFSET));
1000458c:	6844      	ldr	r4, [r0, #4]
1000458e:	00c9      	lsls	r1, r1, #3
10004590:	408b      	lsls	r3, r1
10004592:	ea24 0303 	bic.w	r3, r4, r3
        HSIOM_PRT_PORT_SEL1(portAddrHSIOM) = tempReg | (((uint32_t)value & CY_GPIO_HSIOM_MASK) << (pinNum << CY_GPIO_HSIOM_OFFSET));
10004596:	408a      	lsls	r2, r1
10004598:	431a      	orrs	r2, r3
1000459a:	6042      	str	r2, [r0, #4]
}
1000459c:	e7f4      	b.n	10004588 <Cy_GPIO_SetHSIOM+0x34>
1000459e:	bf00      	nop
100045a0:	08002c40 	.word	0x08002c40

100045a4 <Cy_GPIO_Pin_Init>:
* \funcusage
* \snippet gpio/snippet/main.c snippet_Cy_GPIO_Pin_Init
*
*******************************************************************************/
cy_en_gpio_status_t Cy_GPIO_Pin_Init(GPIO_PRT_Type *base, uint32_t pinNum, const cy_stc_gpio_pin_config_t *config)
{
100045a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
100045a8:	460f      	mov	r7, r1
100045aa:	4615      	mov	r5, r2
    cy_en_gpio_status_t status = CY_GPIO_BAD_PARAM;

    if ((NULL != base) && (NULL != config))
100045ac:	4604      	mov	r4, r0
100045ae:	2800      	cmp	r0, #0
100045b0:	f000 8081 	beq.w	100046b6 <Cy_GPIO_Pin_Init+0x112>
100045b4:	2a00      	cmp	r2, #0
100045b6:	d07e      	beq.n	100046b6 <Cy_GPIO_Pin_Init+0x112>
        else
        {
            tempReg = GPIO_PRT_CFG_OUT(base) & ~(maskCfgOut);
        }
#else
        tempReg = GPIO_PRT_CFG_OUT(base) & ~(maskCfgOut);
100045b8:	4b40      	ldr	r3, [pc, #256]	@ (100046bc <Cy_GPIO_Pin_Init+0x118>)
100045ba:	f8d3 8000 	ldr.w	r8, [r3]
#endif /* (CY_CPU_CORTEX_M4) && defined(CY_DEVICE_SECURE) && defined(CY_DEVICE_PSOC6ABLE2) */

        tempReg2 = tempReg | ((config->slewRate & CY_GPIO_CFG_OUT_SLOW_MASK) << pinNum)
100045be:	69ab      	ldr	r3, [r5, #24]
        tempReg = GPIO_PRT_CFG_OUT(base) & ~(maskCfgOut);
100045c0:	f898 e087 	ldrb.w	lr, [r8, #135]	@ 0x87
        tempReg2 = tempReg | ((config->slewRate & CY_GPIO_CFG_OUT_SLOW_MASK) << pinNum)
100045c4:	f003 0301 	and.w	r3, r3, #1
100045c8:	fa03 fb01 	lsl.w	fp, r3, r1
                            | ((config->driveSel & CY_GPIO_CFG_OUT_DRIVE_SEL_MASK) << ((uint32_t)(pinNum << 1U) + CY_GPIO_CFG_OUT_DRIVE_OFFSET));
100045cc:	69eb      	ldr	r3, [r5, #28]
        tempReg = GPIO_PRT_CFG_OUT(base) & ~(maskCfgOut);
100045ce:	f850 c00e 	ldr.w	ip, [r0, lr]
                     | (CY_GPIO_CFG_OUT_DRIVE_SEL_MASK << ((uint32_t)(pinNum << 1U) + CY_GPIO_CFG_OUT_DRIVE_OFFSET));
100045d2:	ea4f 0941 	mov.w	r9, r1, lsl #1
100045d6:	f109 0210 	add.w	r2, r9, #16
                            | ((config->driveSel & CY_GPIO_CFG_OUT_DRIVE_SEL_MASK) << ((uint32_t)(pinNum << 1U) + CY_GPIO_CFG_OUT_DRIVE_OFFSET));
100045da:	f003 0a03 	and.w	sl, r3, #3
100045de:	fa0a fa02 	lsl.w	sl, sl, r2
        tempReg2 = tempReg | ((config->slewRate & CY_GPIO_CFG_OUT_SLOW_MASK) << pinNum)
100045e2:	ea4b 030a 	orr.w	r3, fp, sl
        maskCfgOut = (CY_GPIO_CFG_OUT_SLOW_MASK << pinNum)
100045e6:	2601      	movs	r6, #1
                     | (CY_GPIO_CFG_OUT_DRIVE_SEL_MASK << ((uint32_t)(pinNum << 1U) + CY_GPIO_CFG_OUT_DRIVE_OFFSET));
100045e8:	f04f 0a03 	mov.w	sl, #3
        maskCfgOut = (CY_GPIO_CFG_OUT_SLOW_MASK << pinNum)
100045ec:	408e      	lsls	r6, r1
                     | (CY_GPIO_CFG_OUT_DRIVE_SEL_MASK << ((uint32_t)(pinNum << 1U) + CY_GPIO_CFG_OUT_DRIVE_OFFSET));
100045ee:	fa0a f202 	lsl.w	r2, sl, r2
        maskCfgOut = (CY_GPIO_CFG_OUT_SLOW_MASK << pinNum)
100045f2:	4332      	orrs	r2, r6
        tempReg = GPIO_PRT_CFG_OUT(base) & ~(maskCfgOut);
100045f4:	ea2c 0c02 	bic.w	ip, ip, r2
        tempReg2 = tempReg | ((config->slewRate & CY_GPIO_CFG_OUT_SLOW_MASK) << pinNum)
100045f8:	ea43 030c 	orr.w	r3, r3, ip
        else /* non-secure pin */
        {
            GPIO_PRT_CFG_OUT(base) = tempReg2;
        }
#else
        GPIO_PRT_CFG_OUT(base) = tempReg2;
100045fc:	f840 300e 	str.w	r3, [r0, lr]
        Cy_GPIO_SetHSIOM_SecPin(base, pinNum, CY_GPIO_HSIOM_SECURE_ACCESS);
#endif /* IOSS_HSIOM_HSIOM_SEC_PORT_NR, CPUSS_CM33_0_SECEXT_PRESENT */
        Cy_GPIO_SetSlewRate(base, pinNum, config->slewRate);
        Cy_GPIO_SetDriveSel(base, pinNum, config->driveSel);
#endif /* CY_IP_MXS40IOSS */
        Cy_GPIO_SetHSIOM(base, pinNum, config->hsiom);
10004600:	7a2a      	ldrb	r2, [r5, #8]
10004602:	f7ff ffa7 	bl	10004554 <Cy_GPIO_SetHSIOM>
    CY_ASSERT_L2(CY_GPIO_IS_PIN_VALID(pinNum));
    CY_ASSERT_L2(CY_GPIO_IS_DM_VALID(value));

    pinLoc = pinNum << CY_GPIO_DRIVE_MODE_OFFSET;

    tempReg = (GPIO_PRT_CFG(base) & ~(CY_GPIO_CFG_DM_MASK << pinLoc));
10004606:	f898 0085 	ldrb.w	r0, [r8, #133]	@ 0x85
    pinLoc = pinNum << CY_GPIO_DRIVE_MODE_OFFSET;
1000460a:	00ba      	lsls	r2, r7, #2
    tempReg = (GPIO_PRT_CFG(base) & ~(CY_GPIO_CFG_DM_MASK << pinLoc));
1000460c:	5823      	ldr	r3, [r4, r0]
1000460e:	210f      	movs	r1, #15
10004610:	4091      	lsls	r1, r2
10004612:	ea23 0301 	bic.w	r3, r3, r1
    {
        prtCfg = tempReg | ((value & CY_GPIO_CFG_DM_MASK) << pinLoc);
        prtCfg3 = tempRegCfg3 & (~(CY_GPIO_CFG_DM_WIDTH_MASK << pinLoc));
    }
#else
    prtCfg = tempReg | ((value & CY_GPIO_CFG_DM_MASK) << pinLoc);
10004616:	6869      	ldr	r1, [r5, #4]
10004618:	f001 010f 	and.w	r1, r1, #15
1000461c:	4091      	lsls	r1, r2
1000461e:	430b      	orrs	r3, r1
#endif /* CY_IP_MXS22IOSS */

    GPIO_PRT_CFG(base) = prtCfg;
10004620:	5023      	str	r3, [r4, r0]

    CY_ASSERT_L2(CY_GPIO_IS_FILTER_PIN_VALID(pinNum));
    CY_ASSERT_L2(CY_GPIO_IS_INT_EDGE_VALID(value));

    pinLoc = pinNum << CY_GPIO_INTR_CFG_OFFSET;
    tempReg = GPIO_PRT_INTR_CFG(base) & ~(CY_GPIO_INTR_EDGE_MASK << pinLoc);
10004622:	f898 0084 	ldrb.w	r0, [r8, #132]	@ 0x84

    GPIO_PRT_INTR_CFG(base) = tempReg | ((value & CY_GPIO_INTR_EDGE_MASK) << pinLoc);
10004626:	68e9      	ldr	r1, [r5, #12]
    tempReg = GPIO_PRT_INTR_CFG(base) & ~(CY_GPIO_INTR_EDGE_MASK << pinLoc);
10004628:	5823      	ldr	r3, [r4, r0]
1000462a:	fa0a fa09 	lsl.w	sl, sl, r9
    GPIO_PRT_INTR_CFG(base) = tempReg | ((value & CY_GPIO_INTR_EDGE_MASK) << pinLoc);
1000462e:	f001 0103 	and.w	r1, r1, #3
10004632:	fa01 f109 	lsl.w	r1, r1, r9
    tempReg = GPIO_PRT_INTR_CFG(base) & ~(CY_GPIO_INTR_EDGE_MASK << pinLoc);
10004636:	ea23 030a 	bic.w	r3, r3, sl
    GPIO_PRT_INTR_CFG(base) = tempReg | ((value & CY_GPIO_INTR_EDGE_MASK) << pinLoc);
1000463a:	430b      	orrs	r3, r1
1000463c:	5023      	str	r3, [r4, r0]
    GPIO_PRT_INTR_MASK(base) = tempReg | ((value & CY_GPIO_INTR_EN_MASK) << pinNum);
1000463e:	692b      	ldr	r3, [r5, #16]
    tempReg= GPIO_PRT_INTR_MASK(base) & ~(CY_GPIO_INTR_EN_MASK << pinNum);
10004640:	69a1      	ldr	r1, [r4, #24]
    GPIO_PRT_INTR_MASK(base) = tempReg | ((value & CY_GPIO_INTR_EN_MASK) << pinNum);
10004642:	f003 0301 	and.w	r3, r3, #1
10004646:	40bb      	lsls	r3, r7
    tempReg= GPIO_PRT_INTR_MASK(base) & ~(CY_GPIO_INTR_EN_MASK << pinNum);
10004648:	ea21 0106 	bic.w	r1, r1, r6
    GPIO_PRT_INTR_MASK(base) = tempReg | ((value & CY_GPIO_INTR_EN_MASK) << pinNum);
1000464c:	430b      	orrs	r3, r1
1000464e:	61a3      	str	r3, [r4, #24]
    tempReg = GPIO_PRT_CFG_IN(base) & ~(CY_GPIO_CFG_IN_VTRIP_SEL_0_MASK << pinNum);
10004650:	f898 0086 	ldrb.w	r0, [r8, #134]	@ 0x86
    GPIO_PRT_CFG_IN(base) = tempReg | ((value & CY_GPIO_CFG_IN_VTRIP_SEL_0_MASK) << pinNum);
10004654:	696b      	ldr	r3, [r5, #20]
    tempReg = GPIO_PRT_CFG_IN(base) & ~(CY_GPIO_CFG_IN_VTRIP_SEL_0_MASK << pinNum);
10004656:	5821      	ldr	r1, [r4, r0]
    GPIO_PRT_CFG_IN(base) = tempReg | ((value & CY_GPIO_CFG_IN_VTRIP_SEL_0_MASK) << pinNum);
10004658:	f003 0301 	and.w	r3, r3, #1
1000465c:	40bb      	lsls	r3, r7
    tempReg = GPIO_PRT_CFG_IN(base) & ~(CY_GPIO_CFG_IN_VTRIP_SEL_0_MASK << pinNum);
1000465e:	ea21 0106 	bic.w	r1, r1, r6
    GPIO_PRT_CFG_IN(base) = tempReg | ((value & CY_GPIO_CFG_IN_VTRIP_SEL_0_MASK) << pinNum);
10004662:	430b      	orrs	r3, r1
10004664:	5023      	str	r3, [r4, r0]
#else
        tempReg = GPIO_PRT_CFG_SIO(base) & ~(CY_GPIO_SIO_PIN_MASK);
#endif /* (CY_CPU_CORTEX_M4) && defined(CY_DEVICE_SECURE) && defined(CY_DEVICE_PSOC6ABLE2) */

        tempReg2 = tempReg | (((config->vregEn & CY_GPIO_VREG_EN_MASK)
                                         | ((config->ibufMode & CY_GPIO_IBUF_MASK) << CY_GPIO_IBUF_SHIFT)
10004666:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
                                         | ((config->vtripSel & CY_GPIO_VTRIP_SEL_MASK) << CY_GPIO_VTRIP_SEL_SHIFT)
10004668:	6aaf      	ldr	r7, [r5, #40]	@ 0x28
        tempReg = GPIO_PRT_CFG_SIO(base) & ~(CY_GPIO_SIO_PIN_MASK);
1000466a:	f898 1088 	ldrb.w	r1, [r8, #136]	@ 0x88
                                         | ((config->ibufMode & CY_GPIO_IBUF_MASK) << CY_GPIO_IBUF_SHIFT)
1000466e:	005b      	lsls	r3, r3, #1
                                         | ((config->vtripSel & CY_GPIO_VTRIP_SEL_MASK) << CY_GPIO_VTRIP_SEL_SHIFT)
10004670:	00bf      	lsls	r7, r7, #2
10004672:	f007 0704 	and.w	r7, r7, #4
                                         | ((config->ibufMode & CY_GPIO_IBUF_MASK) << CY_GPIO_IBUF_SHIFT)
10004676:	f003 0302 	and.w	r3, r3, #2
                                         | ((config->vtripSel & CY_GPIO_VTRIP_SEL_MASK) << CY_GPIO_VTRIP_SEL_SHIFT)
1000467a:	433b      	orrs	r3, r7
        tempReg2 = tempReg | (((config->vregEn & CY_GPIO_VREG_EN_MASK)
1000467c:	6a2f      	ldr	r7, [r5, #32]
        tempReg = GPIO_PRT_CFG_SIO(base) & ~(CY_GPIO_SIO_PIN_MASK);
1000467e:	5860      	ldr	r0, [r4, r1]
        tempReg2 = tempReg | (((config->vregEn & CY_GPIO_VREG_EN_MASK)
10004680:	f007 0701 	and.w	r7, r7, #1
                                         | ((config->vtripSel & CY_GPIO_VTRIP_SEL_MASK) << CY_GPIO_VTRIP_SEL_SHIFT)
10004684:	433b      	orrs	r3, r7
                                         | ((config->vrefSel & CY_GPIO_VREF_SEL_MASK)  << CY_GPIO_VREF_SEL_SHIFT)
10004686:	6aef      	ldr	r7, [r5, #44]	@ 0x2c
10004688:	00ff      	lsls	r7, r7, #3
1000468a:	f007 0718 	and.w	r7, r7, #24
1000468e:	433b      	orrs	r3, r7
                                         | ((config->vohSel & CY_GPIO_VOH_SEL_MASK) << CY_GPIO_VOH_SEL_SHIFT))
10004690:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
10004692:	017f      	lsls	r7, r7, #5
10004694:	b2ff      	uxtb	r7, r7
10004696:	433b      	orrs	r3, r7
                                           << ((pinNum & CY_GPIO_SIO_ODD_PIN_MASK) << CY_GPIO_CFG_SIO_OFFSET));
10004698:	f402 727e 	and.w	r2, r2, #1016	@ 0x3f8
        tempReg = GPIO_PRT_CFG_SIO(base) & ~(CY_GPIO_SIO_PIN_MASK);
1000469c:	f020 00ff 	bic.w	r0, r0, #255	@ 0xff
                                           << ((pinNum & CY_GPIO_SIO_ODD_PIN_MASK) << CY_GPIO_CFG_SIO_OFFSET));
100046a0:	4093      	lsls	r3, r2
        tempReg2 = tempReg | (((config->vregEn & CY_GPIO_VREG_EN_MASK)
100046a2:	4303      	orrs	r3, r0
        else /* non-secure pin */
        {
            GPIO_PRT_CFG_SIO(base) = tempReg2;
        }
#else
        GPIO_PRT_CFG_SIO(base) = tempReg2;
100046a4:	5063      	str	r3, [r4, r1]

#if defined (CY_IP_MXS22IOSS)
        Cy_GPIO_SetPullupResistance(base, pinNum, config->pullUpRes);
#endif /* CY_IP_MXS22IOSS */

        Cy_GPIO_Write(base, pinNum, config->outVal);
100046a6:	6828      	ldr	r0, [r5, #0]
    if(0UL == value)
100046a8:	b910      	cbnz	r0, 100046b0 <Cy_GPIO_Pin_Init+0x10c>
        GPIO_PRT_OUT_CLR(base) = CY_GPIO_OUT_MASK << pinNum;
100046aa:	6066      	str	r6, [r4, #4]

        status = CY_GPIO_SUCCESS;
    }

    return(status);
}
100046ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        GPIO_PRT_OUT_SET(base) = CY_GPIO_OUT_MASK << pinNum;
100046b0:	60a6      	str	r6, [r4, #8]
        status = CY_GPIO_SUCCESS;
100046b2:	2000      	movs	r0, #0
100046b4:	e7fa      	b.n	100046ac <Cy_GPIO_Pin_Init+0x108>
    cy_en_gpio_status_t status = CY_GPIO_BAD_PARAM;
100046b6:	4802      	ldr	r0, [pc, #8]	@ (100046c0 <Cy_GPIO_Pin_Init+0x11c>)
    return(status);
100046b8:	e7f8      	b.n	100046ac <Cy_GPIO_Pin_Init+0x108>
100046ba:	bf00      	nop
100046bc:	08002c40 	.word	0x08002c40
100046c0:	005a0001 	.word	0x005a0001

100046c4 <Cy_GPIO_Pin_FastInit>:
* \snippet gpio/snippet/main.c snippet_Cy_GPIO_Pin_FastInit
*
*******************************************************************************/
void Cy_GPIO_Pin_FastInit(GPIO_PRT_Type* base, uint32_t pinNum, uint32_t driveMode,
                                        uint32_t outVal, en_hsiom_sel_t hsiom)
{
100046c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100046c6:	4607      	mov	r7, r0
100046c8:	4616      	mov	r6, r2
    uint32_t tempReg;
#if defined (CY_IP_MXS22IOSS)
    uint32_t tempRegCfg3;
#endif /* CY_IP_MXS22IOSS */

    Cy_GPIO_SetHSIOM(base, pinNum, hsiom);
100046ca:	f89d 2018 	ldrb.w	r2, [sp, #24]
{
100046ce:	460c      	mov	r4, r1
100046d0:	461d      	mov	r5, r3
    Cy_GPIO_SetHSIOM(base, pinNum, hsiom);
100046d2:	f7ff ff3f 	bl	10004554 <Cy_GPIO_SetHSIOM>
    else
    {
        /* Secure PIN can't be modified using register policy */
    }
#else
    tempReg = (GPIO_PRT_OUT(base) & ~(CY_GPIO_OUT_MASK << pinNum));
100046d6:	683b      	ldr	r3, [r7, #0]
100046d8:	2201      	movs	r2, #1
100046da:	40a2      	lsls	r2, r4
    GPIO_PRT_OUT(base) = tempReg | ((outVal & CY_GPIO_OUT_MASK) << pinNum);
100046dc:	f005 0501 	and.w	r5, r5, #1
    tempReg = (GPIO_PRT_OUT(base) & ~(CY_GPIO_OUT_MASK << pinNum));
100046e0:	ea23 0302 	bic.w	r3, r3, r2
    GPIO_PRT_OUT(base) = tempReg | ((outVal & CY_GPIO_OUT_MASK) << pinNum);
100046e4:	40a5      	lsls	r5, r4
100046e6:	432b      	orrs	r3, r5
100046e8:	603b      	str	r3, [r7, #0]

    tempReg = (GPIO_PRT_CFG(base) & ~(CY_GPIO_CFG_DM_MASK << (pinNum << CY_GPIO_DRIVE_MODE_OFFSET)));
100046ea:	4b08      	ldr	r3, [pc, #32]	@ (1000470c <Cy_GPIO_Pin_FastInit+0x48>)
100046ec:	681b      	ldr	r3, [r3, #0]
100046ee:	f893 1085 	ldrb.w	r1, [r3, #133]	@ 0x85
100046f2:	00a4      	lsls	r4, r4, #2
100046f4:	587b      	ldr	r3, [r7, r1]
100046f6:	220f      	movs	r2, #15
100046f8:	40a2      	lsls	r2, r4
        /* For other drive modes, disable CFG_OUT3 register and use CFG register to configure drive modes. */
        GPIO_PRT_CFG(base) = tempReg | ((driveMode & CY_GPIO_CFG_DM_MASK) << (pinNum << CY_GPIO_DRIVE_MODE_OFFSET));
        GPIO_PRT_CFG_OUT3(base) = tempRegCfg3 | ((0U & CY_GPIO_CFG_DM_MASK) << (pinNum << CY_GPIO_DRIVE_MODE_OFFSET));
    }
#else
    GPIO_PRT_CFG(base) = tempReg | ((driveMode & CY_GPIO_CFG_DM_MASK) << (pinNum << CY_GPIO_DRIVE_MODE_OFFSET));
100046fa:	f006 060f 	and.w	r6, r6, #15
    tempReg = (GPIO_PRT_CFG(base) & ~(CY_GPIO_CFG_DM_MASK << (pinNum << CY_GPIO_DRIVE_MODE_OFFSET)));
100046fe:	ea23 0302 	bic.w	r3, r3, r2
    GPIO_PRT_CFG(base) = tempReg | ((driveMode & CY_GPIO_CFG_DM_MASK) << (pinNum << CY_GPIO_DRIVE_MODE_OFFSET));
10004702:	40a6      	lsls	r6, r4
10004704:	4333      	orrs	r3, r6
10004706:	507b      	str	r3, [r7, r1]
#endif /* CY_IP_MXS22IOSS */
#endif /* (CY_CPU_CORTEX_M4) && defined(CY_DEVICE_SECURE) */
}
10004708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000470a:	bf00      	nop
1000470c:	08002c40 	.word	0x08002c40

10004710 <Cy_IPC_Drv_LockRelease>:
10004710:	4b05      	ldr	r3, [pc, #20]	@ (10004728 <Cy_IPC_Drv_LockRelease+0x18>)
10004712:	681b      	ldr	r3, [r3, #0]
10004714:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
10004718:	58c3      	ldr	r3, [r0, r3]
cy_en_ipcdrv_status_t Cy_IPC_Drv_LockRelease (IPC_STRUCT_Type* base, uint32_t releaseEventIntr)
{
    cy_en_ipcdrv_status_t retStatus;

    /* Check to make sure the IPC is Acquired */
    if( Cy_IPC_Drv_IsLockAcquired(base) )
1000471a:	2b00      	cmp	r3, #0
    REG_IPC_STRUCT_RELEASE(base) = _VAL2FLD(IPC_INTR_STRUCT_INTR_RELEASE, notifyEventIntr);
1000471c:	bfbd      	ittte	lt
1000471e:	b289      	uxthlt	r1, r1
10004720:	6041      	strlt	r1, [r0, #4]
    {
        /* The IPC was acquired, release the IPC channel */
        Cy_IPC_Drv_ReleaseNotify(base, releaseEventIntr);

        retStatus = CY_IPC_DRV_SUCCESS;
10004722:	2000      	movlt	r0, #0
    }
    else   /* The IPC channel was already released (not acquired) */
    {
        retStatus = CY_IPC_DRV_ERROR;
10004724:	4801      	ldrge	r0, [pc, #4]	@ (1000472c <Cy_IPC_Drv_LockRelease+0x1c>)
    }

    return (retStatus);
}
10004726:	4770      	bx	lr
10004728:	08002c40 	.word	0x08002c40
1000472c:	008a0001 	.word	0x008a0001

10004730 <Cy_IPC_Drv_SendMsgWord>:
* \snippet ipc/snippet/main.c snippet_Cy_IPC_Drv_LockAcquire
*
*******************************************************************************/
__STATIC_INLINE cy_en_ipcdrv_status_t Cy_IPC_Drv_LockAcquire (IPC_STRUCT_Type const * base)
{
    return ( 0UL != _FLD2VAL(IPC_STRUCT_ACQUIRE_SUCCESS, REG_IPC_STRUCT_ACQUIRE(base))) ? CY_IPC_DRV_SUCCESS : CY_IPC_DRV_ERROR;
10004730:	6803      	ldr	r3, [r0, #0]
10004732:	2b00      	cmp	r3, #0
    REG_IPC_STRUCT_NOTIFY(base) = _VAL2FLD(IPC_STRUCT_NOTIFY_INTR_NOTIFY, notifyEventIntr);
10004734:	bfbf      	itttt	lt
10004736:	b289      	uxthlt	r1, r1
    REG_IPC_STRUCT_DATA(base) = dataValue;
10004738:	60c2      	strlt	r2, [r0, #12]
    REG_IPC_STRUCT_NOTIFY(base) = _VAL2FLD(IPC_STRUCT_NOTIFY_INTR_NOTIFY, notifyEventIntr);
1000473a:	6081      	strlt	r1, [r0, #8]
        /* If the channel was acquired, send the message. */
        Cy_IPC_Drv_WriteDataValue(base, message);

        Cy_IPC_Drv_AcquireNotify(base, notifyEventIntr);

        retStatus = CY_IPC_DRV_SUCCESS;
1000473c:	2000      	movlt	r0, #0
    }
    else
    {
        /* Channel was already acquired, return Error */
        retStatus = CY_IPC_DRV_ERROR;
1000473e:	bfa8      	it	ge
10004740:	4800      	ldrge	r0, [pc, #0]	@ (10004744 <Cy_IPC_Drv_SendMsgWord+0x14>)
    }
    return (retStatus);
}
10004742:	4770      	bx	lr
10004744:	008a0001 	.word	0x008a0001

10004748 <Cy_IPC_Drv_ReadMsgWord>:
    return ( 0u != _FLD2VAL(IPC_STRUCT_ACQUIRE_SUCCESS, REG_IPC_STRUCT_LOCK_STATUS(base)) );
10004748:	4b05      	ldr	r3, [pc, #20]	@ (10004760 <Cy_IPC_Drv_ReadMsgWord+0x18>)
1000474a:	681b      	ldr	r3, [r3, #0]
1000474c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
10004750:	58c3      	ldr	r3, [r0, r3]
{
    cy_en_ipcdrv_status_t retStatus;

    CY_ASSERT_L1(NULL != message);

    if ( Cy_IPC_Drv_IsLockAcquired(base) )
10004752:	2b00      	cmp	r3, #0
    return REG_IPC_STRUCT_DATA(base);
10004754:	bfbd      	ittte	lt
10004756:	68c3      	ldrlt	r3, [r0, #12]
    {
        /* The channel is locked; message is valid. */
        *message = Cy_IPC_Drv_ReadDataValue(base);
10004758:	600b      	strlt	r3, [r1, #0]

        retStatus = CY_IPC_DRV_SUCCESS;
1000475a:	2000      	movlt	r0, #0
    }
    else
    {
        /* The channel is not locked so channel is invalid. */
        retStatus = CY_IPC_DRV_ERROR;
1000475c:	4801      	ldrge	r0, [pc, #4]	@ (10004764 <Cy_IPC_Drv_ReadMsgWord+0x1c>)
    }
    return(retStatus);
}
1000475e:	4770      	bx	lr
10004760:	08002c40 	.word	0x08002c40
10004764:	008a0001 	.word	0x008a0001

10004768 <Cy_IPC_Pipe_Config>:
*
*******************************************************************************/
void Cy_IPC_Pipe_Config(cy_stc_ipc_pipe_ep_t * theEpArray)
{
    /* Keep copy of this endpoint */
    if (cy_ipc_pipe_epArray == NULL)
10004768:	4b02      	ldr	r3, [pc, #8]	@ (10004774 <Cy_IPC_Pipe_Config+0xc>)
1000476a:	681a      	ldr	r2, [r3, #0]
1000476c:	b902      	cbnz	r2, 10004770 <Cy_IPC_Pipe_Config+0x8>
    {
        cy_ipc_pipe_epArray = theEpArray;
1000476e:	6018      	str	r0, [r3, #0]
    }
}
10004770:	4770      	bx	lr
10004772:	bf00      	nop
10004774:	08002c58 	.word	0x08002c58

10004778 <Cy_IPC_Pipe_EndpointInit>:
* This API is available only for the CAT1A, CAT1B and CAT1C devices.
*
*******************************************************************************/
void Cy_IPC_Pipe_EndpointInit(uint32_t epAddr, cy_ipc_pipe_callback_array_ptr_t cbArray,
                              uint32_t cbCnt, uint32_t epConfig, cy_stc_sysint_t const *epInterrupt)
{
10004778:	b5f0      	push	{r4, r5, r6, r7, lr}
    cy_stc_ipc_pipe_ep_t * endpoint;

    CY_ASSERT_L1(NULL != cy_ipc_pipe_epArray);

    endpoint = &cy_ipc_pipe_epArray[epAddr];
1000477a:	242c      	movs	r4, #44	@ 0x2c
1000477c:	4360      	muls	r0, r4
1000477e:	4c16      	ldr	r4, [pc, #88]	@ (100047d8 <Cy_IPC_Pipe_EndpointInit+0x60>)
{
10004780:	9f05      	ldr	r7, [sp, #20]
    endpoint = &cy_ipc_pipe_epArray[epAddr];
10004782:	6825      	ldr	r5, [r4, #0]

    /* Extract the channel, interrupt and interrupt mask */
    endpoint->ipcChan         = _FLD2VAL(CY_IPC_PIPE_CFG_CHAN,  epConfig);
10004784:	fa5f fe83 	uxtb.w	lr, r3
10004788:	f845 e000 	str.w	lr, [r5, r0]
    endpoint = &cy_ipc_pipe_epArray[epAddr];
1000478c:	182c      	adds	r4, r5, r0
    return ( (IPC_STRUCT_Type*) CY_IPC_STRUCT_PTR(ipcIndex));
1000478e:	4813      	ldr	r0, [pc, #76]	@ (100047dc <Cy_IPC_Pipe_EndpointInit+0x64>)
10004790:	6806      	ldr	r6, [r0, #0]
10004792:	6a30      	ldr	r0, [r6, #32]
10004794:	f8b6 60be 	ldrh.w	r6, [r6, #190]	@ 0xbe
    endpoint->intrChan        = _FLD2VAL(CY_IPC_PIPE_CFG_INTR,  epConfig);
10004798:	f3c3 2507 	ubfx	r5, r3, #8, #8
    endpoint->pipeIntMask     = _FLD2VAL(CY_IPC_PIPE_CFG_IMASK, epConfig);
1000479c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
100047a0:	fb0e 0606 	mla	r6, lr, r6, r0

    /* Assign IPC channel to this endpoint */
    endpoint->ipcPtr   = Cy_IPC_Drv_GetIpcBaseAddress (endpoint->ipcChan);
100047a4:	6126      	str	r6, [r4, #16]
    REG_IPC_INTR_STRUCT_INTR_MASK(base) = _VAL2FLD( IPC_INTR_STRUCT_INTR_MASK_NOTIFY,  ipcNotifyMask) |
100047a6:	4663      	mov	r3, ip
    return ( (IPC_INTR_STRUCT_Type*) CY_IPC_INTR_STRUCT_PTR(ipcIntrIndex));
100047a8:	f105 0680 	add.w	r6, r5, #128	@ 0x80
    endpoint->intrChan        = _FLD2VAL(CY_IPC_PIPE_CFG_INTR,  epConfig);
100047ac:	6065      	str	r5, [r4, #4]
100047ae:	eb00 1646 	add.w	r6, r0, r6, lsl #5
    REG_IPC_INTR_STRUCT_INTR_MASK(base) = _VAL2FLD( IPC_INTR_STRUCT_INTR_MASK_NOTIFY,  ipcNotifyMask) |
100047b2:	041b      	lsls	r3, r3, #16
100047b4:	eb00 1045 	add.w	r0, r0, r5, lsl #5
100047b8:	f241 0508 	movw	r5, #4104	@ 0x1008
100047bc:	ea43 030c 	orr.w	r3, r3, ip
    endpoint->pipeIntMask     = _FLD2VAL(CY_IPC_PIPE_CFG_IMASK, epConfig);
100047c0:	f8c4 c008 	str.w	ip, [r4, #8]

    /* Assign interrupt structure to endpoint and Initialize the interrupt mask for this endpoint */
    endpoint->ipcIntrPtr = Cy_IPC_Drv_GetIntrBaseAddr(endpoint->intrChan);
100047c4:	6166      	str	r6, [r4, #20]
100047c6:	5143      	str	r3, [r0, r5]
    Cy_IPC_Drv_SetInterruptMask(endpoint->ipcIntrPtr, endpoint->pipeIntMask, endpoint->pipeIntMask);

    /* Save the Client count and the callback array pointer */
    endpoint->clientCount   = cbCnt;
    endpoint->callbackArray = cbArray;
    endpoint->busy = CY_IPC_PIPE_ENDPOINT_NOTBUSY;
100047c8:	2300      	movs	r3, #0
    endpoint->callbackArray = cbArray;
100047ca:	e9c4 2107 	strd	r2, r1, [r4, #28]
    endpoint->busy = CY_IPC_PIPE_ENDPOINT_NOTBUSY;
100047ce:	61a3      	str	r3, [r4, #24]

    if (NULL != epInterrupt)
100047d0:	b10f      	cbz	r7, 100047d6 <Cy_IPC_Pipe_EndpointInit+0x5e>
    {
        #if defined (CY_IP_M7CPUSS) || (defined (CY_IP_M4CPUSS) && (CY_IP_M4CPUSS_VERSION == 2) && (CPUSS_SYSTEM_IRQ_PRESENT))
            endpoint->pipeIntrSrc     = (IRQn_Type)(((uint32_t)epInterrupt->intrSrc >> CY_SYSINT_INTRSRC_MUXIRQ_SHIFT) & CY_SYSINT_INTRSRC_MASK);
        #else
            endpoint->pipeIntrSrc     = epInterrupt->intrSrc;
100047d2:	883b      	ldrh	r3, [r7, #0]
100047d4:	81a3      	strh	r3, [r4, #12]
        #endif
    }
}
100047d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100047d8:	08002c58 	.word	0x08002c58
100047dc:	08002c40 	.word	0x08002c40

100047e0 <Cy_IPC_Pipe_Init>:
{
100047e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    ipc_intr_cypipeConfig.intrSrc          = (IRQn_Type)((int32_t)cpuss_interrupts_ipc_0_IRQn + (int32_t)epConfigDataA.ipcNotifierNumber);
100047e2:	6943      	ldr	r3, [r0, #20]
    epConfigDataA = config->ep1ConfigData;
100047e4:	6982      	ldr	r2, [r0, #24]
{
100047e6:	b085      	sub	sp, #20
    Cy_IPC_Pipe_EndpointInit(epConfigDataA.epAddress,
100047e8:	ad02      	add	r5, sp, #8
    epConfigDataB = config->ep0ConfigData;
100047ea:	e9d0 6703 	ldrd	r6, r7, [r0, #12]
    ipc_intr_cypipeConfig.intrSrc          = (IRQn_Type)((int32_t)cpuss_interrupts_ipc_0_IRQn + (int32_t)epConfigDataA.ipcNotifierNumber);
100047ee:	3319      	adds	r3, #25
    Cy_IPC_Pipe_EndpointInit(epConfigDataA.epAddress,
100047f0:	9500      	str	r5, [sp, #0]
100047f2:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
    ipc_intr_cypipeConfig.intrSrc          = (IRQn_Type)((int32_t)cpuss_interrupts_ipc_0_IRQn + (int32_t)epConfigDataA.ipcNotifierNumber);
100047f4:	f8ad 3008 	strh.w	r3, [sp, #8]
{
100047f8:	4604      	mov	r4, r0
    ipc_intr_cypipeConfig.intrPriority     = epConfigDataA.ipcNotifierPriority;
100047fa:	9203      	str	r2, [sp, #12]
    Cy_IPC_Pipe_EndpointInit(epConfigDataA.epAddress,
100047fc:	e9d0 3209 	ldrd	r3, r2, [r0, #36]	@ 0x24
10004800:	6a00      	ldr	r0, [r0, #32]
10004802:	f7ff ffb9 	bl	10004778 <Cy_IPC_Pipe_EndpointInit>
    Cy_IPC_Pipe_EndpointInit(epConfigDataB.epAddress, NULL, 0UL, epConfigDataB.epConfig, NULL);
10004806:	2200      	movs	r2, #0
10004808:	463b      	mov	r3, r7
1000480a:	4611      	mov	r1, r2
1000480c:	9200      	str	r2, [sp, #0]
1000480e:	4630      	mov	r0, r6
10004810:	f7ff ffb2 	bl	10004778 <Cy_IPC_Pipe_EndpointInit>
    (void)Cy_SysInt_Init(&ipc_intr_cypipeConfig, config->userPipeIsrHandler);
10004814:	6b21      	ldr	r1, [r4, #48]	@ 0x30
10004816:	4628      	mov	r0, r5
10004818:	f001 fad4 	bl	10005dc4 <Cy_SysInt_Init>
        NVIC_EnableIRQ(ipc_intr_cypipeConfig.intrSrc);
1000481c:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
  if ((int32_t)(IRQn) >= 0)
10004820:	2b00      	cmp	r3, #0
10004822:	db08      	blt.n	10004836 <Cy_IPC_Pipe_Init+0x56>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10004824:	2201      	movs	r2, #1
10004826:	0959      	lsrs	r1, r3, #5
10004828:	f003 031f 	and.w	r3, r3, #31
1000482c:	fa02 f303 	lsl.w	r3, r2, r3
10004830:	4a02      	ldr	r2, [pc, #8]	@ (1000483c <Cy_IPC_Pipe_Init+0x5c>)
10004832:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
10004836:	b005      	add	sp, #20
10004838:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000483a:	bf00      	nop
1000483c:	e000e100 	.word	0xe000e100

10004840 <Cy_IPC_Pipe_SendMessage>:
* \snippet ipc/snippet/main.c snippet_Cy_IPC_Pipe_SendMessage
*
*******************************************************************************/
cy_en_ipc_pipe_status_t Cy_IPC_Pipe_SendMessage(uint32_t toAddr, uint32_t fromAddr,
                                                void * msgPtr, cy_ipc_pipe_relcallback_ptr_t callBackPtr)
{
10004840:	b5f0      	push	{r4, r5, r6, r7, lr}
    cy_stc_ipc_pipe_ep_t * toEp;

    CY_ASSERT_L1(NULL != msgPtr);
    CY_ASSERT_L1(NULL != cy_ipc_pipe_epArray);

    toEp   = &(cy_ipc_pipe_epArray[toAddr]);
10004842:	4c17      	ldr	r4, [pc, #92]	@ (100048a0 <Cy_IPC_Pipe_SendMessage+0x60>)
10004844:	6825      	ldr	r5, [r4, #0]
10004846:	262c      	movs	r6, #44	@ 0x2c
10004848:	fb06 5400 	mla	r4, r6, r0, r5
    fromEp = &cy_ipc_pipe_epArray[fromAddr];
1000484c:	fb06 5101 	mla	r1, r6, r1, r5

    /* Create the notify mask for the "toAddr" channel's interrupt channel */
    notifyMask  =  (uint32_t)(1UL << CY_IPC_PIPE_INTR_NUMBER_WITHIN_INSTANCE(toEp->intrChan));

    /* Check if IPC channel valid */
    if( toEp->ipcPtr != NULL)
10004850:	6926      	ldr	r6, [r4, #16]
10004852:	b30e      	cbz	r6, 10004898 <Cy_IPC_Pipe_SendMessage+0x58>
    {
        if(fromEp->busy == CY_IPC_PIPE_ENDPOINT_NOTBUSY)
10004854:	6988      	ldr	r0, [r1, #24]
10004856:	bb08      	cbnz	r0, 1000489c <Cy_IPC_Pipe_SendMessage+0x5c>
    return ( 0UL != _FLD2VAL(IPC_STRUCT_ACQUIRE_SUCCESS, REG_IPC_STRUCT_ACQUIRE(base))) ? CY_IPC_DRV_SUCCESS : CY_IPC_DRV_ERROR;
10004858:	6835      	ldr	r5, [r6, #0]
1000485a:	2d00      	cmp	r5, #0
1000485c:	da1e      	bge.n	1000489c <Cy_IPC_Pipe_SendMessage+0x5c>
    releaseMask =  (uint32_t)(1UL << CY_IPC_PIPE_INTR_NUMBER_WITHIN_INSTANCE(fromEp->intrChan));
1000485e:	4d11      	ldr	r5, [pc, #68]	@ (100048a4 <Cy_IPC_Pipe_SendMessage+0x64>)
    notifyMask  =  (uint32_t)(1UL << CY_IPC_PIPE_INTR_NUMBER_WITHIN_INSTANCE(toEp->intrChan));
10004860:	6867      	ldr	r7, [r4, #4]
    releaseMask =  (uint32_t)(1UL << CY_IPC_PIPE_INTR_NUMBER_WITHIN_INSTANCE(fromEp->intrChan));
10004862:	682d      	ldr	r5, [r5, #0]
10004864:	684c      	ldr	r4, [r1, #4]
10004866:	f895 e038 	ldrb.w	lr, [r5, #56]	@ 0x38
        {
            /* Attempt to acquire the channel */
            if( CY_IPC_DRV_SUCCESS == Cy_IPC_Drv_LockAcquire(toEp->ipcPtr) )
            {
                /* Mask out the release mask area */
                * (uint32_t *) msgPtr &= ~(CY_IPC_PIPE_MSG_RELEASE_Msk);
1000486a:	f8b2 c000 	ldrh.w	ip, [r2]
    releaseMask =  (uint32_t)(1UL << CY_IPC_PIPE_INTR_NUMBER_WITHIN_INSTANCE(fromEp->intrChan));
1000486e:	fbb4 f5fe 	udiv	r5, r4, lr
10004872:	fb0e 4515 	mls	r5, lr, r5, r4
10004876:	2401      	movs	r4, #1
10004878:	fa04 f505 	lsl.w	r5, r4, r5

                * (uint32_t *) msgPtr |= releaseMask;
1000487c:	ea4c 4505 	orr.w	r5, ip, r5, lsl #16
10004880:	6015      	str	r5, [r2, #0]
    REG_IPC_STRUCT_DATA(base) = dataValue;
10004882:	60f2      	str	r2, [r6, #12]

                /* Set the busy flag.  The ISR clears this after the release */
                fromEp->busy = CY_IPC_PIPE_ENDPOINT_BUSY;

                /* Setup release callback function */
                fromEp->releaseCallbackPtr = callBackPtr;
10004884:	624b      	str	r3, [r1, #36]	@ 0x24
    notifyMask  =  (uint32_t)(1UL << CY_IPC_PIPE_INTR_NUMBER_WITHIN_INSTANCE(toEp->intrChan));
10004886:	fbb7 f3fe 	udiv	r3, r7, lr
1000488a:	fb0e 7713 	mls	r7, lr, r3, r7
                fromEp->busy = CY_IPC_PIPE_ENDPOINT_BUSY;
1000488e:	618c      	str	r4, [r1, #24]
    notifyMask  =  (uint32_t)(1UL << CY_IPC_PIPE_INTR_NUMBER_WITHIN_INSTANCE(toEp->intrChan));
10004890:	40bc      	lsls	r4, r7
    REG_IPC_STRUCT_NOTIFY(base) = _VAL2FLD(IPC_STRUCT_NOTIFY_INTR_NOTIFY, notifyEventIntr);
10004892:	b2a4      	uxth	r4, r4
10004894:	60b4      	str	r4, [r6, #8]
    {
        /* Null pipe handle. */
        returnStatus = CY_IPC_PIPE_ERROR_BAD_HANDLE;
    }
    return (returnStatus);
}
10004896:	bdf0      	pop	{r4, r5, r6, r7, pc}
        returnStatus = CY_IPC_PIPE_ERROR_BAD_HANDLE;
10004898:	4803      	ldr	r0, [pc, #12]	@ (100048a8 <Cy_IPC_Pipe_SendMessage+0x68>)
1000489a:	e7fc      	b.n	10004896 <Cy_IPC_Pipe_SendMessage+0x56>
            returnStatus = CY_IPC_PIPE_ERROR_SEND_BUSY;
1000489c:	4803      	ldr	r0, [pc, #12]	@ (100048ac <Cy_IPC_Pipe_SendMessage+0x6c>)
    return (returnStatus);
1000489e:	e7fa      	b.n	10004896 <Cy_IPC_Pipe_SendMessage+0x56>
100048a0:	08002c58 	.word	0x08002c58
100048a4:	08002c40 	.word	0x08002c40
100048a8:	008a0204 	.word	0x008a0204
100048ac:	008a0207 	.word	0x008a0207

100048b0 <Cy_IPC_Pipe_RegisterCallback>:
    cy_en_ipc_pipe_status_t returnStatus;
    cy_stc_ipc_pipe_ep_t * thisEp;

    CY_ASSERT_L1(NULL != cy_ipc_pipe_epArray);

    thisEp = &cy_ipc_pipe_epArray[epAddr];
100048b0:	4b07      	ldr	r3, [pc, #28]	@ (100048d0 <Cy_IPC_Pipe_RegisterCallback+0x20>)
100048b2:	681b      	ldr	r3, [r3, #0]
{
100048b4:	b510      	push	{r4, lr}
    thisEp = &cy_ipc_pipe_epArray[epAddr];
100048b6:	242c      	movs	r4, #44	@ 0x2c
100048b8:	fb04 3000 	mla	r0, r4, r0, r3

    CY_ASSERT_L1(NULL != thisEp->callbackArray);

    /* Check if clientId is between 0 and less than client count */
    if (clientId < thisEp->clientCount)
100048bc:	69c3      	ldr	r3, [r0, #28]
100048be:	4293      	cmp	r3, r2
    {
        /* Copy callback function into callback function pointer array */
        thisEp->callbackArray[clientId] = callBackPtr;
100048c0:	bf89      	itett	hi
100048c2:	6a03      	ldrhi	r3, [r0, #32]

        returnStatus = CY_IPC_PIPE_SUCCESS;
    }
    else
    {
        returnStatus = CY_IPC_PIPE_ERROR_BAD_CLIENT;
100048c4:	4803      	ldrls	r0, [pc, #12]	@ (100048d4 <Cy_IPC_Pipe_RegisterCallback+0x24>)
        thisEp->callbackArray[clientId] = callBackPtr;
100048c6:	f843 1022 	strhi.w	r1, [r3, r2, lsl #2]
        returnStatus = CY_IPC_PIPE_SUCCESS;
100048ca:	2000      	movhi	r0, #0
    }
    return (returnStatus);
}
100048cc:	bd10      	pop	{r4, pc}
100048ce:	bf00      	nop
100048d0:	08002c58 	.word	0x08002c58
100048d4:	008a020a 	.word	0x008a020a

100048d8 <Cy_IPC_Pipe_ExecCallback>:
* \note This function is obsolete and will be removed in the next releases.
*       Please use Cy_IPC_Pipe_ExecuteCallback() instead.
*
*******************************************************************************/
void Cy_IPC_Pipe_ExecCallback(cy_stc_ipc_pipe_ep_t * endpoint)
{
100048d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    CY_ASSERT_L1(NULL != endpoint->ipcPtr);
    CY_ASSERT_L1(NULL != endpoint->ipcIntrPtr);
    CY_ASSERT_L1(NULL != endpoint->callbackArray);
    /* Parameters checking end */

    shadowIntr = Cy_IPC_Drv_GetInterruptStatusMasked(endpoint->ipcIntrPtr);
100048da:	6943      	ldr	r3, [r0, #20]
    return REG_IPC_INTR_STRUCT_INTR_MASKED(base);
100048dc:	68dd      	ldr	r5, [r3, #12]
    uint32_t *msgTempPtr = NULL;
100048de:	2600      	movs	r6, #0

    /* Check to make sure the interrupt was a notify interrupt */
    if (0UL != Cy_IPC_Drv_ExtractAcquireMask(shadowIntr))
100048e0:	0c2a      	lsrs	r2, r5, #16
{
100048e2:	4604      	mov	r4, r0
    uint32_t *msgTempPtr = NULL;
100048e4:	9601      	str	r6, [sp, #4]
    if (0UL != Cy_IPC_Drv_ExtractAcquireMask(shadowIntr))
100048e6:	d01f      	beq.n	10004928 <Cy_IPC_Pipe_ExecCallback+0x50>
    REG_IPC_INTR_STRUCT_INTR(base) =  _VAL2FLD(IPC_INTR_STRUCT_INTR_NOTIFY,  ipcNotifyMask) |
100048e8:	0c2a      	lsrs	r2, r5, #16
100048ea:	0412      	lsls	r2, r2, #16
100048ec:	601a      	str	r2, [r3, #0]
    (void)REG_IPC_INTR_STRUCT_INTR(base);
100048ee:	681b      	ldr	r3, [r3, #0]
    return ( 0u != _FLD2VAL(IPC_STRUCT_ACQUIRE_SUCCESS, REG_IPC_STRUCT_LOCK_STATUS(base)) );
100048f0:	4b17      	ldr	r3, [pc, #92]	@ (10004950 <Cy_IPC_Pipe_ExecCallback+0x78>)
    {
        /* Clear the notify interrupt.  */
        Cy_IPC_Drv_ClearInterrupt(endpoint->ipcIntrPtr, CY_IPC_NO_NOTIFICATION, Cy_IPC_Drv_ExtractAcquireMask(shadowIntr));

        if ( Cy_IPC_Drv_IsLockAcquired (endpoint->ipcPtr) )
100048f2:	6900      	ldr	r0, [r0, #16]
100048f4:	681b      	ldr	r3, [r3, #0]
100048f6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
100048fa:	58c3      	ldr	r3, [r0, r3]
100048fc:	42b3      	cmp	r3, r6
100048fe:	da13      	bge.n	10004928 <Cy_IPC_Pipe_ExecCallback+0x50>
    return Cy_IPC_Drv_ReadMsgWord(base, (uint32_t *)msgPtr);
10004900:	a901      	add	r1, sp, #4
10004902:	f7ff ff21 	bl	10004748 <Cy_IPC_Drv_ReadMsgWord>
        {
            /* Extract Client ID  */
            if( CY_IPC_DRV_SUCCESS == Cy_IPC_Drv_ReadMsgPtr (endpoint->ipcPtr, (void **)&msgTempPtr))
10004906:	b958      	cbnz	r0, 10004920 <Cy_IPC_Pipe_ExecCallback+0x48>
            {
                msgPtr = (uint32_t *)GET_ALIAS_ADDRESS(msgTempPtr);
10004908:	9801      	ldr	r0, [sp, #4]
                /* Get release mask */
                releaseMask = _FLD2VAL(CY_IPC_PIPE_MSG_RELEASE, *msgPtr);
                clientID    = _FLD2VAL(CY_IPC_PIPE_MSG_CLIENT,  *msgPtr);

                /* Make sure client ID is within valid range */
                if (endpoint->clientCount > clientID)
1000490a:	69e2      	ldr	r2, [r4, #28]
                releaseMask = _FLD2VAL(CY_IPC_PIPE_MSG_RELEASE, *msgPtr);
1000490c:	6803      	ldr	r3, [r0, #0]
1000490e:	0c1e      	lsrs	r6, r3, #16
                clientID    = _FLD2VAL(CY_IPC_PIPE_MSG_CLIENT,  *msgPtr);
10004910:	b2db      	uxtb	r3, r3
                if (endpoint->clientCount > clientID)
10004912:	429a      	cmp	r2, r3
10004914:	d904      	bls.n	10004920 <Cy_IPC_Pipe_ExecCallback+0x48>
                {
                    callbackPtr = endpoint->callbackArray[clientID];  /* Get the callback function */
10004916:	6a22      	ldr	r2, [r4, #32]
10004918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]

                    if (callbackPtr != NULL)
1000491c:	b103      	cbz	r3, 10004920 <Cy_IPC_Pipe_ExecCallback+0x48>
                    {
                        callbackPtr(msgPtr);   /* Call the function pointer for "clientID" */
1000491e:	4798      	blx	r3
                    }
                }
            }

            /* Must always release the IPC channel */
            (void)Cy_IPC_Drv_LockRelease (endpoint->ipcPtr, releaseMask);
10004920:	6920      	ldr	r0, [r4, #16]
10004922:	4631      	mov	r1, r6
10004924:	f7ff fef4 	bl	10004710 <Cy_IPC_Drv_LockRelease>
    return _FLD2VAL(IPC_INTR_STRUCT_INTR_MASK_RELEASE, intMask);
10004928:	b2ad      	uxth	r5, r5
        }
    }

    /* Check to make sure the interrupt was a release interrupt */
    if (0UL != Cy_IPC_Drv_ExtractReleaseMask(shadowIntr))  /* Check for a Release interrupt */
1000492a:	b145      	cbz	r5, 1000493e <Cy_IPC_Pipe_ExecCallback+0x66>
    {
        /* Clear the release interrupt  */
        Cy_IPC_Drv_ClearInterrupt(endpoint->ipcIntrPtr, Cy_IPC_Drv_ExtractReleaseMask(shadowIntr), CY_IPC_NO_NOTIFICATION);
1000492c:	6963      	ldr	r3, [r4, #20]
    REG_IPC_INTR_STRUCT_INTR(base) =  _VAL2FLD(IPC_INTR_STRUCT_INTR_NOTIFY,  ipcNotifyMask) |
1000492e:	601d      	str	r5, [r3, #0]
    (void)REG_IPC_INTR_STRUCT_INTR(base);
10004930:	681b      	ldr	r3, [r3, #0]

        if (endpoint->releaseCallbackPtr != NULL)
10004932:	6a63      	ldr	r3, [r4, #36]	@ 0x24
10004934:	2500      	movs	r5, #0
10004936:	b133      	cbz	r3, 10004946 <Cy_IPC_Pipe_ExecCallback+0x6e>
        {
            endpoint->releaseCallbackPtr();
10004938:	4798      	blx	r3

            /* Clear the pointer after it was called */
            endpoint->releaseCallbackPtr = NULL;
1000493a:	6265      	str	r5, [r4, #36]	@ 0x24
                endpoint->defaultReleaseCallbackPtr();
            }
        }

        /* Clear the busy flag when release is detected */
        endpoint->busy = CY_IPC_PIPE_ENDPOINT_NOTBUSY;
1000493c:	61a5      	str	r5, [r4, #24]
    }

    (void)Cy_IPC_Drv_GetInterruptStatus(endpoint->ipcIntrPtr);
1000493e:	6963      	ldr	r3, [r4, #20]
    return REG_IPC_INTR_STRUCT_INTR(base);
10004940:	681b      	ldr	r3, [r3, #0]
}
10004942:	b002      	add	sp, #8
10004944:	bd70      	pop	{r4, r5, r6, pc}
            if (endpoint->defaultReleaseCallbackPtr != NULL)
10004946:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
10004948:	2b00      	cmp	r3, #0
1000494a:	d0f7      	beq.n	1000493c <Cy_IPC_Pipe_ExecCallback+0x64>
                endpoint->defaultReleaseCallbackPtr();
1000494c:	4798      	blx	r3
1000494e:	e7f5      	b.n	1000493c <Cy_IPC_Pipe_ExecCallback+0x64>
10004950:	08002c40 	.word	0x08002c40

10004954 <Cy_IPC_Pipe_ExecuteCallback>:
    endpoint = &cy_ipc_pipe_epArray[epAddr];
10004954:	4b03      	ldr	r3, [pc, #12]	@ (10004964 <Cy_IPC_Pipe_ExecuteCallback+0x10>)
10004956:	681b      	ldr	r3, [r3, #0]
    Cy_IPC_Pipe_ExecCallback(endpoint);
10004958:	222c      	movs	r2, #44	@ 0x2c
1000495a:	fb02 3000 	mla	r0, r2, r0, r3
1000495e:	f7ff bfbb 	b.w	100048d8 <Cy_IPC_Pipe_ExecCallback>
10004962:	bf00      	nop
10004964:	08002c58 	.word	0x08002c58

10004968 <Cy_IPC_Sema_InitExt>:
*                             or count not multiple of 32
*    \retval CY_IPC_SEMA_ERROR_LOCKED:  Could not acquire semaphores IPC channel
*
*******************************************************************************/
cy_en_ipcsema_status_t Cy_IPC_Sema_InitExt(uint32_t ipcChannel, cy_stc_ipc_sema_t *ipcSema)
{
10004968:	b538      	push	{r3, r4, r5, lr}
    cy_en_ipcsema_status_t retStatus = CY_IPC_SEMA_BAD_PARAM;

    if (ipcChannel >= CY_IPC_CHANNELS)
1000496a:	4b17      	ldr	r3, [pc, #92]	@ (100049c8 <Cy_IPC_Sema_InitExt+0x60>)
1000496c:	681a      	ldr	r2, [r3, #0]
1000496e:	f892 3037 	ldrb.w	r3, [r2, #55]	@ 0x37
10004972:	4283      	cmp	r3, r0
{
10004974:	460c      	mov	r4, r1
    if (ipcChannel >= CY_IPC_CHANNELS)
10004976:	d925      	bls.n	100049c4 <Cy_IPC_Sema_InitExt+0x5c>
    {
        retStatus = CY_IPC_SEMA_BAD_PARAM;
    }
    else
    {
        if(NULL != ipcSema)
10004978:	b321      	cbz	r1, 100049c4 <Cy_IPC_Sema_InitExt+0x5c>
        {
#if (CY_IPC_DRV_CACHE_PRESENT)
            SCB_CleanDCache_by_Addr((uint32_t*)&ipcSema->maxSema, (int32_t)sizeof(ipcSema->maxSema));
#endif /* (CY_IPC_DRV_CACHE_PRESENT) */
            /* Check if semaphore count is a multiple of 32 */
            if( 0UL == (ipcSema->maxSema & CY_IPC_SEMA_PER_WORD_MASK))
1000497a:	680b      	ldr	r3, [r1, #0]
1000497c:	f013 031f 	ands.w	r3, r3, #31
10004980:	d120      	bne.n	100049c4 <Cy_IPC_Sema_InitExt+0x5c>
    return ( (IPC_STRUCT_Type*) CY_IPC_STRUCT_PTR(ipcIndex));
10004982:	f8b2 10be 	ldrh.w	r1, [r2, #190]	@ 0xbe
10004986:	6a12      	ldr	r2, [r2, #32]
            {
                cy_semaIpcStruct = Cy_IPC_Drv_GetIpcBaseAddress(ipcChannel);
10004988:	4d10      	ldr	r5, [pc, #64]	@ (100049cc <Cy_IPC_Sema_InitExt+0x64>)
1000498a:	fb00 2001 	mla	r0, r0, r1, r2
1000498e:	6028      	str	r0, [r5, #0]

                /* Initialize all semaphores to released */
                for (uint32_t index=0; index<(uint32_t)(ipcSema->maxSema / CY_IPC_SEMA_PER_WORD); index++)
                {
                    ipcSema->arrayPtr[index] = 0UL;
10004990:	4619      	mov	r1, r3
                for (uint32_t index=0; index<(uint32_t)(ipcSema->maxSema / CY_IPC_SEMA_PER_WORD); index++)
10004992:	6822      	ldr	r2, [r4, #0]
10004994:	ebb3 1f52 	cmp.w	r3, r2, lsr #5
10004998:	d30f      	bcc.n	100049ba <Cy_IPC_Sema_InitExt+0x52>
                SCB_CleanDCache_by_Addr((uint32_t*)ipcSema->arrayPtr, (int32_t)sizeof(*ipcSema->arrayPtr));
#endif /* (CY_IPC_DRV_CACHE_PRESENT) */

                /* Make sure semaphores start out released.  */
                /* Ignore the return value since it is OK if it was already released. */
                (void) Cy_IPC_Drv_LockRelease (cy_semaIpcStruct, CY_IPC_NO_NOTIFICATION);
1000499a:	2100      	movs	r1, #0
1000499c:	f7ff feb8 	bl	10004710 <Cy_IPC_Drv_LockRelease>
    return Cy_IPC_Drv_SendMsgWord(base, notifyEventIntr, (uint32_t)msgPtr);
100049a0:	2100      	movs	r1, #0
100049a2:	6828      	ldr	r0, [r5, #0]
100049a4:	4622      	mov	r2, r4
100049a6:	f7ff fec3 	bl	10004730 <Cy_IPC_Drv_SendMsgWord>

                 /* Set the IPC Data with the pointer to the array. */
                if( CY_IPC_DRV_SUCCESS == Cy_IPC_Drv_SendMsgPtr (cy_semaIpcStruct, CY_IPC_NO_NOTIFICATION, ipcSema))
100049aa:	4601      	mov	r1, r0
100049ac:	b918      	cbnz	r0, 100049b6 <Cy_IPC_Sema_InitExt+0x4e>
                {
                    if(CY_IPC_DRV_SUCCESS == Cy_IPC_Drv_LockRelease (cy_semaIpcStruct, CY_IPC_NO_NOTIFICATION))
100049ae:	6828      	ldr	r0, [r5, #0]
100049b0:	f7ff feae 	bl	10004710 <Cy_IPC_Drv_LockRelease>
100049b4:	b100      	cbz	r0, 100049b8 <Cy_IPC_Sema_InitExt+0x50>
                        retStatus = CY_IPC_SEMA_SUCCESS;
                    }
                    else
                    {
                        /* IPC channel not released, still semaphored */
                        retStatus = CY_IPC_SEMA_ERROR_LOCKED;
100049b6:	4806      	ldr	r0, [pc, #24]	@ (100049d0 <Cy_IPC_Sema_InitExt+0x68>)
            retStatus = CY_IPC_SEMA_BAD_PARAM;
        }
    }

    return(retStatus);
}
100049b8:	bd38      	pop	{r3, r4, r5, pc}
                    ipcSema->arrayPtr[index] = 0UL;
100049ba:	6862      	ldr	r2, [r4, #4]
100049bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                for (uint32_t index=0; index<(uint32_t)(ipcSema->maxSema / CY_IPC_SEMA_PER_WORD); index++)
100049c0:	3301      	adds	r3, #1
100049c2:	e7e6      	b.n	10004992 <Cy_IPC_Sema_InitExt+0x2a>
        retStatus = CY_IPC_SEMA_BAD_PARAM;
100049c4:	4803      	ldr	r0, [pc, #12]	@ (100049d4 <Cy_IPC_Sema_InitExt+0x6c>)
    return(retStatus);
100049c6:	e7f7      	b.n	100049b8 <Cy_IPC_Sema_InitExt+0x50>
100049c8:	08002c40 	.word	0x08002c40
100049cc:	08002c5c 	.word	0x08002c5c
100049d0:	008a0101 	.word	0x008a0101
100049d4:	008a0103 	.word	0x008a0103

100049d8 <Cy_IPC_Sema_Init>:
{
100049d8:	b410      	push	{r4}
    if( (NULL == memPtr) && (0u == count))
100049da:	b96a      	cbnz	r2, 100049f8 <Cy_IPC_Sema_Init+0x20>
100049dc:	b9a9      	cbnz	r1, 10004a0a <Cy_IPC_Sema_Init+0x32>
    return ( (IPC_STRUCT_Type*) CY_IPC_STRUCT_PTR(ipcIndex));
100049de:	4b0c      	ldr	r3, [pc, #48]	@ (10004a10 <Cy_IPC_Sema_Init+0x38>)
100049e0:	681b      	ldr	r3, [r3, #0]
100049e2:	f8b3 20be 	ldrh.w	r2, [r3, #190]	@ 0xbe
100049e6:	6a1b      	ldr	r3, [r3, #32]
100049e8:	fb00 3202 	mla	r2, r0, r2, r3
        cy_semaIpcStruct = Cy_IPC_Drv_GetIpcBaseAddress(ipcChannel);
100049ec:	4b09      	ldr	r3, [pc, #36]	@ (10004a14 <Cy_IPC_Sema_Init+0x3c>)
100049ee:	601a      	str	r2, [r3, #0]
}
100049f0:	4608      	mov	r0, r1
100049f2:	f85d 4b04 	ldr.w	r4, [sp], #4
100049f6:	4770      	bx	lr
    else if ((NULL != memPtr) && (0u != count))
100049f8:	b139      	cbz	r1, 10004a0a <Cy_IPC_Sema_Init+0x32>
        cy_semaData.maxSema  = count;
100049fa:	4b07      	ldr	r3, [pc, #28]	@ (10004a18 <Cy_IPC_Sema_Init+0x40>)
}
100049fc:	f85d 4b04 	ldr.w	r4, [sp], #4
        cy_semaData.arrayPtr = memPtr;
10004a00:	e9c3 1200 	strd	r1, r2, [r3]
        retStatus = Cy_IPC_Sema_InitExt(ipcChannel, &cy_semaData);
10004a04:	4619      	mov	r1, r3
10004a06:	f7ff bfaf 	b.w	10004968 <Cy_IPC_Sema_InitExt>
        retStatus = CY_IPC_SEMA_BAD_PARAM;
10004a0a:	4904      	ldr	r1, [pc, #16]	@ (10004a1c <Cy_IPC_Sema_Init+0x44>)
10004a0c:	e7f0      	b.n	100049f0 <Cy_IPC_Sema_Init+0x18>
10004a0e:	bf00      	nop
10004a10:	08002c40 	.word	0x08002c40
10004a14:	08002c5c 	.word	0x08002c5c
10004a18:	08002834 	.word	0x08002834
10004a1c:	008a0103 	.word	0x008a0103

10004a20 <Cy_IPC_Sema_Clear>:
* \funcusage
* \snippet ipc/snippet/main.c snippet_Cy_IPC_Sema_Clear
*
*******************************************************************************/
cy_en_ipcsema_status_t Cy_IPC_Sema_Clear(uint32_t semaNumber, bool preemptable)
{
10004a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cy_en_ipcsema_status_t  retStatus = CY_IPC_SEMA_LOCKED;
    uint32_t *ptrArray;
    uint32_t semaNum;

    /** check cy_semaIpcStruct != NULL */
    if (cy_semaIpcStruct == NULL)
10004a24:	f8df 8078 	ldr.w	r8, [pc, #120]	@ 10004aa0 <Cy_IPC_Sema_Clear+0x80>
10004a28:	f8d8 3000 	ldr.w	r3, [r8]
{
10004a2c:	4604      	mov	r4, r0
10004a2e:	460e      	mov	r6, r1
    if (cy_semaIpcStruct == NULL)
10004a30:	b35b      	cbz	r3, 10004a8a <Cy_IPC_Sema_Clear+0x6a>
    return REG_IPC_STRUCT_DATA(base);
10004a32:	68db      	ldr	r3, [r3, #12]

#if (CY_IPC_DRV_CACHE_PRESENT)
     SCB_InvalidateDCache_by_Addr((uint32_t*)&semaStruct->maxSema, (int32_t)sizeof(semaStruct->maxSema));
#endif /* (CY_IPC_DRV_CACHE_PRESENT) */

    if (semaNum < semaStruct->maxSema)
10004a34:	681a      	ldr	r2, [r3, #0]
10004a36:	4282      	cmp	r2, r0
10004a38:	d929      	bls.n	10004a8e <Cy_IPC_Sema_Clear+0x6e>
    #if defined(CY_IPC_SECURE_SEMA_DEVICE)
        ptrArray = CY_IPC_SEMA_IS_SEC(semaNumber) ? semaStruct->arrayPtr_sec : (uint32_t*)GET_ALIAS_ADDRESS(semaStruct->arrayPtr);
    #elif defined(__SAUREGION_PRESENT) && (__SAUREGION_PRESENT==1)
        ptrArray = (uint32_t*)GET_ALIAS_ADDRESS(semaStruct->arrayPtr);
    #else
        ptrArray = semaStruct->arrayPtr;
10004a3a:	685f      	ldr	r7, [r3, #4]
    #endif

        if (!preemptable)
10004a3c:	bb09      	cbnz	r1, 10004a82 <Cy_IPC_Sema_Clear+0x62>
        {
            interruptState = Cy_SysLib_EnterCriticalSection();
10004a3e:	f7fe f840 	bl	10002ac2 <Cy_SysLib_EnterCriticalSection>
10004a42:	4605      	mov	r5, r0
        }

        /* Check to make sure the IPC channel is released
           If so, check if specific channel can be locked. */
        if(CY_IPC_DRV_SUCCESS == Cy_IPC_Drv_LockAcquire (cy_semaIpcStruct))
10004a44:	f8d8 0000 	ldr.w	r0, [r8]
    return ( 0UL != _FLD2VAL(IPC_STRUCT_ACQUIRE_SUCCESS, REG_IPC_STRUCT_ACQUIRE(base))) ? CY_IPC_DRV_SUCCESS : CY_IPC_DRV_ERROR;
10004a48:	6803      	ldr	r3, [r0, #0]
10004a4a:	2b00      	cmp	r3, #0
10004a4c:	da1b      	bge.n	10004a86 <Cy_IPC_Sema_Clear+0x66>
        semaMask = (uint32_t)(1UL << (semaNum - (semaIndex * CY_IPC_SEMA_PER_WORD) ));
10004a4e:	f004 031f 	and.w	r3, r4, #31
        semaIndex = semaNum / CY_IPC_SEMA_PER_WORD;
10004a52:	0964      	lsrs	r4, r4, #5
        semaMask = (uint32_t)(1UL << (semaNum - (semaIndex * CY_IPC_SEMA_PER_WORD) ));
10004a54:	2201      	movs	r2, #1
10004a56:	409a      	lsls	r2, r3
        {
#if (CY_IPC_DRV_CACHE_PRESENT)
            SCB_InvalidateDCache_by_Addr((uint32_t*)ptrArray, (int32_t)sizeof(*ptrArray));
#endif /* (CY_IPC_DRV_CACHE_PRESENT) */
            if((ptrArray[semaIndex] & semaMask) != 0UL)
10004a58:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
10004a5c:	4213      	tst	r3, r2
            {
                ptrArray[semaIndex] &= ~semaMask;
10004a5e:	bf1c      	itt	ne
10004a60:	4393      	bicne	r3, r2
10004a62:	f847 3024 	strne.w	r3, [r7, r4, lsl #2]
            {
                retStatus = CY_IPC_SEMA_NOT_ACQUIRED;
            }

            /* Release, but do not trigger a release event */
            (void) Cy_IPC_Drv_LockRelease (cy_semaIpcStruct, CY_IPC_NO_NOTIFICATION);
10004a66:	f04f 0100 	mov.w	r1, #0
                retStatus = CY_IPC_SEMA_NOT_ACQUIRED;
10004a6a:	bf0c      	ite	eq
10004a6c:	4c09      	ldreq	r4, [pc, #36]	@ (10004a94 <Cy_IPC_Sema_Clear+0x74>)
                retStatus = CY_IPC_SEMA_SUCCESS;
10004a6e:	2400      	movne	r4, #0
            (void) Cy_IPC_Drv_LockRelease (cy_semaIpcStruct, CY_IPC_NO_NOTIFICATION);
10004a70:	f7ff fe4e 	bl	10004710 <Cy_IPC_Drv_LockRelease>
        }

        if (!preemptable)
10004a74:	b916      	cbnz	r6, 10004a7c <Cy_IPC_Sema_Clear+0x5c>
        {
            Cy_SysLib_ExitCriticalSection(interruptState);
10004a76:	4628      	mov	r0, r5
10004a78:	f7fe f827 	bl	10002aca <Cy_SysLib_ExitCriticalSection>
    else
    {
        retStatus = CY_IPC_SEMA_OUT_OF_RANGE;
    }
    return(retStatus);
}
10004a7c:	4620      	mov	r0, r4
10004a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t interruptState = 0UL;
10004a82:	2500      	movs	r5, #0
10004a84:	e7de      	b.n	10004a44 <Cy_IPC_Sema_Clear+0x24>
    cy_en_ipcsema_status_t  retStatus = CY_IPC_SEMA_LOCKED;
10004a86:	4c04      	ldr	r4, [pc, #16]	@ (10004a98 <Cy_IPC_Sema_Clear+0x78>)
10004a88:	e7f4      	b.n	10004a74 <Cy_IPC_Sema_Clear+0x54>
        return CY_IPC_SEMA_NOT_ACQUIRED;
10004a8a:	4c02      	ldr	r4, [pc, #8]	@ (10004a94 <Cy_IPC_Sema_Clear+0x74>)
10004a8c:	e7f6      	b.n	10004a7c <Cy_IPC_Sema_Clear+0x5c>
        retStatus = CY_IPC_SEMA_OUT_OF_RANGE;
10004a8e:	4c03      	ldr	r4, [pc, #12]	@ (10004a9c <Cy_IPC_Sema_Clear+0x7c>)
10004a90:	e7f4      	b.n	10004a7c <Cy_IPC_Sema_Clear+0x5c>
10004a92:	bf00      	nop
10004a94:	00880102 	.word	0x00880102
10004a98:	00880103 	.word	0x00880103
10004a9c:	008a0104 	.word	0x008a0104
10004aa0:	08002c5c 	.word	0x08002c5c

10004aa4 <Cy_IPC_Sema_Status>:
    cy_stc_ipc_sema_t      *semaStruct;
    uint32_t *ptrArray;
    uint32_t semaNum;

    /** check cy_semaIpcStruct != NULL */
    if (cy_semaIpcStruct == NULL)
10004aa4:	4b0c      	ldr	r3, [pc, #48]	@ (10004ad8 <Cy_IPC_Sema_Status+0x34>)
10004aa6:	681b      	ldr	r3, [r3, #0]
10004aa8:	b18b      	cbz	r3, 10004ace <Cy_IPC_Sema_Status+0x2a>
    return REG_IPC_STRUCT_DATA(base);
10004aaa:	68db      	ldr	r3, [r3, #12]

#if (CY_IPC_DRV_CACHE_PRESENT)
    SCB_InvalidateDCache_by_Addr((uint32_t*)&semaStruct->maxSema, (int32_t)sizeof(semaStruct->maxSema));
#endif /* (CY_IPC_DRV_CACHE_PRESENT) */

    if (semaNum < semaStruct->maxSema)
10004aac:	681a      	ldr	r2, [r3, #0]
10004aae:	4282      	cmp	r2, r0
10004ab0:	d90f      	bls.n	10004ad2 <Cy_IPC_Sema_Status+0x2e>

#if (CY_IPC_DRV_CACHE_PRESENT)
        SCB_InvalidateDCache_by_Addr((uint32_t*)ptrArray, (int32_t)sizeof(*ptrArray));
#endif /* (CY_IPC_DRV_CACHE_PRESENT) */

        if((ptrArray[semaIndex] & semaMask) != 0UL)
10004ab2:	685a      	ldr	r2, [r3, #4]
        semaIndex = semaNum / CY_IPC_SEMA_PER_WORD;
10004ab4:	0941      	lsrs	r1, r0, #5
        semaMask = (uint32_t)(1UL << (semaNum - (semaIndex * CY_IPC_SEMA_PER_WORD) ));
10004ab6:	2301      	movs	r3, #1
        if((ptrArray[semaIndex] & semaMask) != 0UL)
10004ab8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
        semaMask = (uint32_t)(1UL << (semaNum - (semaIndex * CY_IPC_SEMA_PER_WORD) ));
10004abc:	f000 001f 	and.w	r0, r0, #31
10004ac0:	4083      	lsls	r3, r0
        {
            retStatus =  CY_IPC_SEMA_STATUS_LOCKED;
        }
        else
        {
            retStatus =  CY_IPC_SEMA_STATUS_UNLOCKED;
10004ac2:	4213      	tst	r3, r2
10004ac4:	4b05      	ldr	r3, [pc, #20]	@ (10004adc <Cy_IPC_Sema_Status+0x38>)
10004ac6:	4806      	ldr	r0, [pc, #24]	@ (10004ae0 <Cy_IPC_Sema_Status+0x3c>)
10004ac8:	bf08      	it	eq
10004aca:	4618      	moveq	r0, r3
10004acc:	4770      	bx	lr
        return CY_IPC_SEMA_NOT_ACQUIRED;
10004ace:	4805      	ldr	r0, [pc, #20]	@ (10004ae4 <Cy_IPC_Sema_Status+0x40>)
10004ad0:	4770      	bx	lr
        }
    }
    else
    {
        retStatus = CY_IPC_SEMA_OUT_OF_RANGE;
10004ad2:	4805      	ldr	r0, [pc, #20]	@ (10004ae8 <Cy_IPC_Sema_Status+0x44>)
    }
    return(retStatus);
}
10004ad4:	4770      	bx	lr
10004ad6:	bf00      	nop
10004ad8:	08002c5c 	.word	0x08002c5c
10004adc:	00880100 	.word	0x00880100
10004ae0:	00880101 	.word	0x00880101
10004ae4:	00880102 	.word	0x00880102
10004ae8:	008a0104 	.word	0x008a0104

10004aec <Cy_Prot_GetActivePC>:
    CY_ASSERT_L1(CY_PROT_IS_BUS_MASTER_VALID(busMaster));

    #if CY_CPU_CORTEX_M4 && defined(CY_DEVICE_SECURE) && defined(CY_DEVICE_PSOC6ABLE2)
        return ((uint32_t)_FLD2VAL(PROT_MPU_MS_CTL_PC, CY_PRA_REG32_GET((CY_PRA_INDX_PROT_MPU_MS_CTL + (uint16_t) busMaster))));
    #else
        return ((uint32_t)_FLD2VAL(PROT_MPU_MS_CTL_PC, PROT_MPU_MS_CTL(busMaster)));
10004aec:	4b04      	ldr	r3, [pc, #16]	@ (10004b00 <Cy_Prot_GetActivePC+0x14>)
10004aee:	681b      	ldr	r3, [r3, #0]
10004af0:	3010      	adds	r0, #16
10004af2:	691b      	ldr	r3, [r3, #16]
10004af4:	0280      	lsls	r0, r0, #10
10004af6:	5818      	ldr	r0, [r3, r0]
    #endif
}
10004af8:	f000 000f 	and.w	r0, r0, #15
10004afc:	4770      	bx	lr
10004afe:	bf00      	nop
10004b00:	08002c40 	.word	0x08002c40

10004b04 <Cy_SCB_ReadArrayNoCheck>:
* True if the RX data width is a byte (8 bits).
*
*******************************************************************************/
__STATIC_INLINE bool Cy_SCB_IsRxDataWidthByte(CySCB_Type const *base)
{
    return (_FLD2VAL(SCB_RX_CTRL_DATA_WIDTH, SCB_RX_CTRL(base)) < CY_SCB_BYTE_WIDTH);
10004b04:	f8d0 3300 	ldr.w	r3, [r0, #768]	@ 0x300
*******************************************************************************/
void Cy_SCB_ReadArrayNoCheck(CySCB_Type const *base, void *buffer, uint32_t size)
{
    uint32_t idx;
#if((defined (CY_IP_MXSCB_VERSION) && CY_IP_MXSCB_VERSION==1))
    if (Cy_SCB_IsRxDataWidthByte(base))
10004b08:	071b      	lsls	r3, r3, #28
10004b0a:	d504      	bpl.n	10004b16 <Cy_SCB_ReadArrayNoCheck+0x12>
10004b0c:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    else
    {
        uint16_t *buf = (uint16_t *) buffer;

        /* Get data available in RX FIFO */
        for (idx = 0UL; idx < size; ++idx)
10004b10:	4291      	cmp	r1, r2
10004b12:	d109      	bne.n	10004b28 <Cy_SCB_ReadArrayNoCheck+0x24>
        {
            buf[idx] = (uint32_t) Cy_SCB_ReadRxFifo(base);
        }
    }
#endif /* CY_IP_MXSCB_VERSION */
}
10004b14:	4770      	bx	lr
10004b16:	440a      	add	r2, r1
        for (idx = 0UL; idx < size; ++idx)
10004b18:	4291      	cmp	r1, r2
10004b1a:	d100      	bne.n	10004b1e <Cy_SCB_ReadArrayNoCheck+0x1a>
10004b1c:	4770      	bx	lr
    return (SCB_RX_FIFO_RD(base));
10004b1e:	f8d0 3340 	ldr.w	r3, [r0, #832]	@ 0x340
            buf[idx] = (uint8_t) Cy_SCB_ReadRxFifo(base);
10004b22:	f801 3b01 	strb.w	r3, [r1], #1
        for (idx = 0UL; idx < size; ++idx)
10004b26:	e7f7      	b.n	10004b18 <Cy_SCB_ReadArrayNoCheck+0x14>
10004b28:	f8d0 3340 	ldr.w	r3, [r0, #832]	@ 0x340
            buf[idx] = (uint16_t) Cy_SCB_ReadRxFifo(base);
10004b2c:	f821 3b02 	strh.w	r3, [r1], #2
        for (idx = 0UL; idx < size; ++idx)
10004b30:	e7ee      	b.n	10004b10 <Cy_SCB_ReadArrayNoCheck+0xc>

10004b32 <Cy_SCB_ReadArray>:
* \return
* The number of data elements read from the receive FIFO.
*
*******************************************************************************/
uint32_t Cy_SCB_ReadArray(CySCB_Type const *base, void *buffer, uint32_t size)
{
10004b32:	b510      	push	{r4, lr}
    return _FLD2VAL(SCB_RX_FIFO_STATUS_USED, SCB_RX_FIFO_STATUS(base));
10004b34:	f8d0 4308 	ldr.w	r4, [r0, #776]	@ 0x308
10004b38:	f3c4 0408 	ubfx	r4, r4, #0, #9
10004b3c:	4294      	cmp	r4, r2
10004b3e:	bf28      	it	cs
10004b40:	4614      	movcs	r4, r2
    {
        numToCopy = size;
    }

    /* Get data available in RX FIFO */
    Cy_SCB_ReadArrayNoCheck(base, buffer, numToCopy);
10004b42:	4622      	mov	r2, r4
10004b44:	f7ff ffde 	bl	10004b04 <Cy_SCB_ReadArrayNoCheck>

    return (numToCopy);
}
10004b48:	4620      	mov	r0, r4
10004b4a:	bd10      	pop	{r4, pc}

10004b4c <Cy_SCB_Write>:
    {return (_FLD2BOOL(SCB_CTRL_BYTE_MODE, SCB_CTRL(base)) ? (CY_SCB_FIFO_SIZE) : (CY_SCB_FIFO_SIZE / 2UL));}
10004b4c:	6803      	ldr	r3, [r0, #0]
10004b4e:	f413 6f00 	tst.w	r3, #2048	@ 0x800
    return _FLD2VAL(SCB_TX_FIFO_STATUS_USED, SCB_TX_FIFO_STATUS(base));
10004b52:	f8d0 3208 	ldr.w	r3, [r0, #520]	@ 0x208
    {return (_FLD2BOOL(SCB_CTRL_BYTE_MODE, SCB_CTRL(base)) ? (CY_SCB_FIFO_SIZE) : (CY_SCB_FIFO_SIZE / 2UL));}
10004b56:	bf14      	ite	ne
10004b58:	2280      	movne	r2, #128	@ 0x80
10004b5a:	2240      	moveq	r2, #64	@ 0x40
    return _FLD2VAL(SCB_TX_FIFO_STATUS_USED, SCB_TX_FIFO_STATUS(base));
10004b5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
*******************************************************************************/
uint32_t Cy_SCB_Write(CySCB_Type *base, uint32_t data)
{
    uint32_t numCopied = 0UL;

    if (Cy_SCB_GetFifoSize(base) != Cy_SCB_GetNumInTxFifo(base))
10004b60:	4293      	cmp	r3, r2
    SCB_TX_FIFO_WR(base) = data;
10004b62:	bf1a      	itte	ne
10004b64:	f8c0 1240 	strne.w	r1, [r0, #576]	@ 0x240
    {
        Cy_SCB_WriteTxFifo(base, data);

        numCopied = 1UL;
10004b68:	2001      	movne	r0, #1
    uint32_t numCopied = 0UL;
10004b6a:	2000      	moveq	r0, #0
    }

    return (numCopied);
}
10004b6c:	4770      	bx	lr

10004b6e <Cy_SCB_WriteArrayNoCheck>:
* If true, the TX data width is a byte (8 bits). Otherwise, false.
*
*******************************************************************************/
__STATIC_INLINE bool Cy_SCB_IsTxDataWidthByte(CySCB_Type const *base)
{
    return (_FLD2VAL(SCB_TX_CTRL_DATA_WIDTH, SCB_TX_CTRL(base)) < CY_SCB_BYTE_WIDTH);
10004b6e:	f8d0 3200 	ldr.w	r3, [r0, #512]	@ 0x200
*******************************************************************************/
void Cy_SCB_WriteArrayNoCheck(CySCB_Type *base, void *buffer, uint32_t size)
{
    uint32_t idx;
#if((defined (CY_IP_MXSCB_VERSION) && CY_IP_MXSCB_VERSION==1))
    if (Cy_SCB_IsTxDataWidthByte(base))
10004b72:	071b      	lsls	r3, r3, #28
10004b74:	d504      	bpl.n	10004b80 <Cy_SCB_WriteArrayNoCheck+0x12>
10004b76:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    else
    {
        uint16_t *buf = (uint16_t *) buffer;

        /* Put data into TX FIFO */
        for (idx = 0UL; idx < size; ++idx)
10004b7a:	4291      	cmp	r1, r2
10004b7c:	d109      	bne.n	10004b92 <Cy_SCB_WriteArrayNoCheck+0x24>
        {
            Cy_SCB_WriteTxFifo(base, (uint32_t) buf[idx]);
        }
    }
#endif /* CY_IP_MXSCB_VERSION */
}
10004b7e:	4770      	bx	lr
10004b80:	440a      	add	r2, r1
        for (idx = 0UL; idx < size; ++idx)
10004b82:	4291      	cmp	r1, r2
10004b84:	d100      	bne.n	10004b88 <Cy_SCB_WriteArrayNoCheck+0x1a>
10004b86:	4770      	bx	lr
            Cy_SCB_WriteTxFifo(base, (uint32_t) buf[idx]);
10004b88:	f811 3b01 	ldrb.w	r3, [r1], #1
    SCB_TX_FIFO_WR(base) = data;
10004b8c:	f8c0 3240 	str.w	r3, [r0, #576]	@ 0x240
        for (idx = 0UL; idx < size; ++idx)
10004b90:	e7f7      	b.n	10004b82 <Cy_SCB_WriteArrayNoCheck+0x14>
            Cy_SCB_WriteTxFifo(base, (uint32_t) buf[idx]);
10004b92:	f831 3b02 	ldrh.w	r3, [r1], #2
10004b96:	f8c0 3240 	str.w	r3, [r0, #576]	@ 0x240
        for (idx = 0UL; idx < size; ++idx)
10004b9a:	e7ee      	b.n	10004b7a <Cy_SCB_WriteArrayNoCheck+0xc>

10004b9c <Cy_SCB_WriteArray>:
* \return
* The number of data elements placed in the transmit FIFO.
*
*******************************************************************************/
uint32_t Cy_SCB_WriteArray(CySCB_Type *base, void *buffer, uint32_t size)
{
10004b9c:	b510      	push	{r4, lr}
    {return (_FLD2BOOL(SCB_CTRL_BYTE_MODE, SCB_CTRL(base)) ? (CY_SCB_FIFO_SIZE) : (CY_SCB_FIFO_SIZE / 2UL));}
10004b9e:	6804      	ldr	r4, [r0, #0]
    return _FLD2VAL(SCB_TX_FIFO_STATUS_USED, SCB_TX_FIFO_STATUS(base));
10004ba0:	f8d0 3208 	ldr.w	r3, [r0, #520]	@ 0x208
    {return (_FLD2BOOL(SCB_CTRL_BYTE_MODE, SCB_CTRL(base)) ? (CY_SCB_FIFO_SIZE) : (CY_SCB_FIFO_SIZE / 2UL));}
10004ba4:	f414 6f00 	tst.w	r4, #2048	@ 0x800
10004ba8:	bf14      	ite	ne
10004baa:	2480      	movne	r4, #128	@ 0x80
10004bac:	2440      	moveq	r4, #64	@ 0x40
    return _FLD2VAL(SCB_TX_FIFO_STATUS_USED, SCB_TX_FIFO_STATUS(base));
10004bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
    /* Get free entries in TX FIFO */
    uint32_t numToCopy = Cy_SCB_GetFifoSize(base) - Cy_SCB_GetNumInTxFifo(base);
10004bb2:	1ae4      	subs	r4, r4, r3
10004bb4:	4294      	cmp	r4, r2
10004bb6:	bf28      	it	cs
10004bb8:	4614      	movcs	r4, r2
    if (numToCopy > size)
    {
        numToCopy = size;
    }

    Cy_SCB_WriteArrayNoCheck(base, buffer, numToCopy);
10004bba:	4622      	mov	r2, r4
10004bbc:	f7ff ffd7 	bl	10004b6e <Cy_SCB_WriteArrayNoCheck>

    return (numToCopy);
}
10004bc0:	4620      	mov	r0, r4
10004bc2:	bd10      	pop	{r4, pc}

10004bc4 <SelectRxFifoLevel>:
    {return (_FLD2BOOL(SCB_CTRL_BYTE_MODE, SCB_CTRL(base)) ? (CY_SCB_FIFO_SIZE) : (CY_SCB_FIFO_SIZE / 2UL));}
10004bc4:	6803      	ldr	r3, [r0, #0]
    return _FLD2VAL(SCB_UART_FLOW_CTRL_TRIGGER_LEVEL, SCB_UART_FLOW_CTRL(base));
10004bc6:	6d00      	ldr	r0, [r0, #80]	@ 0x50
10004bc8:	f413 6f00 	tst.w	r3, #2048	@ 0x800
10004bcc:	bf0c      	ite	eq
10004bce:	2340      	moveq	r3, #64	@ 0x40
10004bd0:	2380      	movne	r3, #128	@ 0x80
static uint32_t SelectRxFifoLevel(CySCB_Type const *base)
{
    uint32_t halfFifoSize = Cy_SCB_GetFifoSize(base) / 2UL;
    uint32_t rtsFifoLevel = Cy_SCB_UART_GetRtsFifoLevel(base);

    return ((rtsFifoLevel != 0UL ) ? (rtsFifoLevel) : (halfFifoSize));
10004bd2:	f010 00ff 	ands.w	r0, r0, #255	@ 0xff
    uint32_t halfFifoSize = Cy_SCB_GetFifoSize(base) / 2UL;
10004bd6:	bf08      	it	eq
10004bd8:	0858      	lsreq	r0, r3, #1
}
10004bda:	4770      	bx	lr

10004bdc <Cy_SCB_UART_Init>:
{
10004bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if ((NULL == base) || (NULL == config))
10004bde:	2800      	cmp	r0, #0
10004be0:	f000 80a1 	beq.w	10004d26 <Cy_SCB_UART_Init+0x14a>
10004be4:	2900      	cmp	r1, #0
10004be6:	f000 809e 	beq.w	10004d26 <Cy_SCB_UART_Init+0x14a>
    if ((CY_SCB_UART_IRDA == config->uartMode) && (!config->irdaEnableLowPowerReceiver))
10004bea:	780e      	ldrb	r6, [r1, #0]
10004bec:	2e02      	cmp	r6, #2
10004bee:	d101      	bne.n	10004bf4 <Cy_SCB_UART_Init+0x18>
10004bf0:	7f8b      	ldrb	r3, [r1, #30]
10004bf2:	b10b      	cbz	r3, 10004bf8 <Cy_SCB_UART_Init+0x1c>
        ovs = (config->oversample - 1UL);
10004bf4:	684b      	ldr	r3, [r1, #4]
10004bf6:	3b01      	subs	r3, #1
                 _BOOL2FLD(SCB_CTRL_BYTE_MODE, (config->dataWidth <= CY_SCB_BYTE_WIDTH)) |
10004bf8:	688c      	ldr	r4, [r1, #8]
    SCB_CTRL(base) = _BOOL2FLD(SCB_CTRL_ADDR_ACCEPT, config->acceptAddrInFifo)               |
10004bfa:	7f0d      	ldrb	r5, [r1, #28]
                         _BOOL2FLD(SCB_UART_RX_CTRL_MP_MODE, config->enableMutliProcessorMode)       |
10004bfc:	7c8f      	ldrb	r7, [r1, #18]
                 _BOOL2FLD(SCB_CTRL_BYTE_MODE, (config->dataWidth <= CY_SCB_BYTE_WIDTH)) |
10004bfe:	2c08      	cmp	r4, #8
                 _VAL2FLD(SCB_CTRL_OVS, ovs)                                             |
10004c00:	f003 030f 	and.w	r3, r3, #15
                 _BOOL2FLD(SCB_CTRL_BYTE_MODE, (config->dataWidth <= CY_SCB_BYTE_WIDTH)) |
10004c04:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
10004c08:	bf8c      	ite	hi
10004c0a:	2500      	movhi	r5, #0
10004c0c:	2501      	movls	r5, #1
10004c0e:	ea43 23c5 	orr.w	r3, r3, r5, lsl #11
                 _VAL2FLD(SCB_CTRL_OVS, ovs)                                             |
10004c12:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
    SCB_CTRL(base) = _BOOL2FLD(SCB_CTRL_ADDR_ACCEPT, config->acceptAddrInFifo)               |
10004c16:	6003      	str	r3, [r0, #0]
    SCB_UART_CTRL(base) = _VAL2FLD(SCB_UART_CTRL_MODE, (uint32_t) config->uartMode);
10004c18:	0633      	lsls	r3, r6, #24
10004c1a:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
10004c1e:	6403      	str	r3, [r0, #64]	@ 0x40
    SCB_UART_RX_CTRL(base) = _BOOL2FLD(SCB_UART_RX_CTRL_POLARITY, config->irdaInvertRx)                  |
10004c20:	7f4b      	ldrb	r3, [r1, #29]
                         _VAL2FLD(SCB_UART_RX_CTRL_STOP_BITS,   ((uint32_t) config->stopBits) - 1UL) |
10004c22:	7b4d      	ldrb	r5, [r1, #13]
                         _VAL2FLD(CY_SCB_UART_RX_CTRL_SET_PARITY, (uint32_t) config->parity);
10004c24:	f891 c00e 	ldrb.w	ip, [r1, #14]
    SCB_UART_RX_CTRL(base) = _BOOL2FLD(SCB_UART_RX_CTRL_POLARITY, config->irdaInvertRx)                  |
10004c28:	019b      	lsls	r3, r3, #6
10004c2a:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
                         _BOOL2FLD(SCB_UART_RX_CTRL_DROP_ON_PARITY_ERROR, config->dropOnParityError) |
10004c2e:	7c0f      	ldrb	r7, [r1, #16]
                         _BOOL2FLD(SCB_UART_RX_CTRL_MP_MODE, config->enableMutliProcessorMode)       |
10004c30:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
                         _BOOL2FLD(SCB_UART_RX_CTRL_DROP_ON_FRAME_ERROR, config->dropOnFrameError)   |
10004c34:	7c4f      	ldrb	r7, [r1, #17]
                         _BOOL2FLD(SCB_UART_RX_CTRL_DROP_ON_PARITY_ERROR, config->dropOnParityError) |
10004c36:	ea43 2347 	orr.w	r3, r3, r7, lsl #9
                         _VAL2FLD(SCB_UART_RX_CTRL_BREAK_WIDTH, (config->breakWidth - 1UL))          |
10004c3a:	6acf      	ldr	r7, [r1, #44]	@ 0x2c
10004c3c:	3f01      	subs	r7, #1
10004c3e:	043f      	lsls	r7, r7, #16
10004c40:	f407 2770 	and.w	r7, r7, #983040	@ 0xf0000
                         _VAL2FLD(SCB_UART_RX_CTRL_STOP_BITS,   ((uint32_t) config->stopBits) - 1UL) |
10004c44:	3d01      	subs	r5, #1
                         _BOOL2FLD(SCB_UART_RX_CTRL_DROP_ON_FRAME_ERROR, config->dropOnFrameError)   |
10004c46:	433b      	orrs	r3, r7
                         _VAL2FLD(SCB_UART_RX_CTRL_STOP_BITS,   ((uint32_t) config->stopBits) - 1UL) |
10004c48:	f005 0507 	and.w	r5, r5, #7
                         _VAL2FLD(CY_SCB_UART_RX_CTRL_SET_PARITY, (uint32_t) config->parity);
10004c4c:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
10004c50:	f00c 0c30 	and.w	ip, ip, #48	@ 0x30
                         _VAL2FLD(SCB_UART_RX_CTRL_BREAK_WIDTH, (config->breakWidth - 1UL))          |
10004c54:	432b      	orrs	r3, r5
                         _VAL2FLD(SCB_UART_RX_CTRL_STOP_BITS,   ((uint32_t) config->stopBits) - 1UL) |
10004c56:	ea43 030c 	orr.w	r3, r3, ip
    SCB_RX_CTRL(base) = _BOOL2FLD(SCB_RX_CTRL_MSB_FIRST, config->enableMsbFirst)          |
10004c5a:	7b0f      	ldrb	r7, [r1, #12]
    SCB_UART_RX_CTRL(base) = _BOOL2FLD(SCB_UART_RX_CTRL_POLARITY, config->irdaInvertRx)                  |
10004c5c:	6483      	str	r3, [r0, #72]	@ 0x48
                    _BOOL2FLD(SCB_RX_CTRL_MEDIAN, ((config->enableInputFilter) || \
10004c5e:	7bcb      	ldrb	r3, [r1, #15]
    SCB_RX_CTRL(base) = _BOOL2FLD(SCB_RX_CTRL_MSB_FIRST, config->enableMsbFirst)          |
10004c60:	023f      	lsls	r7, r7, #8
                    _BOOL2FLD(SCB_RX_CTRL_MEDIAN, ((config->enableInputFilter) || \
10004c62:	2b00      	cmp	r3, #0
10004c64:	d15c      	bne.n	10004d20 <Cy_SCB_UART_Init+0x144>
10004c66:	2e02      	cmp	r6, #2
10004c68:	bf14      	ite	ne
10004c6a:	2300      	movne	r3, #0
10004c6c:	2301      	moveq	r3, #1
10004c6e:	025b      	lsls	r3, r3, #9
                    _VAL2FLD(SCB_RX_CTRL_DATA_WIDTH, (config->dataWidth - 1UL));
10004c70:	3c01      	subs	r4, #1
10004c72:	f004 040f 	and.w	r4, r4, #15
10004c76:	433c      	orrs	r4, r7
                                             (config->uartMode == CY_SCB_UART_IRDA))) |
10004c78:	4323      	orrs	r3, r4
    SCB_RX_CTRL(base) = _BOOL2FLD(SCB_RX_CTRL_MSB_FIRST, config->enableMsbFirst)          |
10004c7a:	f8c0 3300 	str.w	r3, [r0, #768]	@ 0x300
                     _VAL2FLD(SCB_RX_MATCH_MASK, config->receiverAddressMask);
10004c7e:	698b      	ldr	r3, [r1, #24]
    SCB_RX_MATCH(base) = _VAL2FLD(SCB_RX_MATCH_ADDR, config->receiverAddress) |
10004c80:	7d0f      	ldrb	r7, [r1, #20]
                     _VAL2FLD(SCB_RX_MATCH_MASK, config->receiverAddressMask);
10004c82:	041b      	lsls	r3, r3, #16
10004c84:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
    SCB_RX_MATCH(base) = _VAL2FLD(SCB_RX_MATCH_ADDR, config->receiverAddress) |
10004c88:	433b      	orrs	r3, r7
10004c8a:	f8c0 3310 	str.w	r3, [r0, #784]	@ 0x310
    SCB_UART_TX_CTRL(base) = _BOOL2FLD(SCB_UART_TX_CTRL_RETRY_ON_NACK, ((config->smartCardRetryOnNack) && \
10004c8e:	1e77      	subs	r7, r6, #1
10004c90:	7fcb      	ldrb	r3, [r1, #31]
10004c92:	427e      	negs	r6, r7
10004c94:	417e      	adcs	r6, r7
10004c96:	b103      	cbz	r3, 10004c9a <Cy_SCB_UART_Init+0xbe>
10004c98:	0233      	lsls	r3, r6, #8
                         _VAL2FLD(SCB_UART_TX_CTRL_STOP_BITS, ((uint32_t) config->stopBits) - 1UL)          |
10004c9a:	ea45 050c 	orr.w	r5, r5, ip
10004c9e:	431d      	orrs	r5, r3
                     _VAL2FLD(SCB_TX_CTRL_DATA_WIDTH,  (config->dataWidth - 1UL)) |
10004ca0:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
    SCB_RX_FIFO_CTRL(base) = _VAL2FLD(SCB_RX_FIFO_CTRL_TRIGGER_LEVEL, config->rxFifoTriggerLevel);
10004ca4:	f891 3030 	ldrb.w	r3, [r1, #48]	@ 0x30
    SCB_UART_TX_CTRL(base) = _BOOL2FLD(SCB_UART_TX_CTRL_RETRY_ON_NACK, ((config->smartCardRetryOnNack) && \
10004ca8:	6445      	str	r5, [r0, #68]	@ 0x44
    SCB_TX_CTRL(base)  = _BOOL2FLD(SCB_TX_CTRL_MSB_FIRST,  config->enableMsbFirst)    |
10004caa:	f8c0 4200 	str.w	r4, [r0, #512]	@ 0x200
    SCB_RX_FIFO_CTRL(base) = _VAL2FLD(SCB_RX_FIFO_CTRL_TRIGGER_LEVEL, config->rxFifoTriggerLevel);
10004cae:	f8c0 3304 	str.w	r3, [r0, #772]	@ 0x304
    SCB_UART_FLOW_CTRL(base) = _BOOL2FLD(SCB_UART_FLOW_CTRL_CTS_ENABLED, config->enableCts) |
10004cb2:	f891 4020 	ldrb.w	r4, [r1, #32]
                           _VAL2FLD(SCB_UART_FLOW_CTRL_TRIGGER_LEVEL, config->rtsRxFifoLevel);
10004cb6:	f891 3024 	ldrb.w	r3, [r1, #36]	@ 0x24
                           _BOOL2FLD(SCB_UART_FLOW_CTRL_RTS_POLARITY, (CY_SCB_UART_ACTIVE_HIGH == config->rtsPolarity)) |
10004cba:	ea43 6344 	orr.w	r3, r3, r4, lsl #25
                           _BOOL2FLD(SCB_UART_FLOW_CTRL_CTS_POLARITY, (CY_SCB_UART_ACTIVE_HIGH == config->ctsPolarity)) |
10004cbe:	f891 4021 	ldrb.w	r4, [r1, #33]	@ 0x21
10004cc2:	1e65      	subs	r5, r4, #1
10004cc4:	426c      	negs	r4, r5
10004cc6:	416c      	adcs	r4, r5
                           _BOOL2FLD(SCB_UART_FLOW_CTRL_RTS_POLARITY, (CY_SCB_UART_ACTIVE_HIGH == config->rtsPolarity)) |
10004cc8:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
10004ccc:	f891 4028 	ldrb.w	r4, [r1, #40]	@ 0x28
10004cd0:	1e66      	subs	r6, r4, #1
10004cd2:	4274      	negs	r4, r6
10004cd4:	4174      	adcs	r4, r6
10004cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    SCB_UART_FLOW_CTRL(base) = _BOOL2FLD(SCB_UART_FLOW_CTRL_CTS_ENABLED, config->enableCts) |
10004cda:	6503      	str	r3, [r0, #80]	@ 0x50
    SCB_TX_FIFO_CTRL(base) = _VAL2FLD(SCB_TX_FIFO_CTRL_TRIGGER_LEVEL, config->txFifoTriggerLevel);
10004cdc:	f891 3038 	ldrb.w	r3, [r1, #56]	@ 0x38
10004ce0:	f8c0 3204 	str.w	r3, [r0, #516]	@ 0x204
    SCB_INTR_RX_MASK(base) = (config->rxFifoIntEnableMask & CY_SCB_UART_RX_INTR_MASK);
10004ce4:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
10004ce6:	f423 6392 	bic.w	r3, r3, #1168	@ 0x490
10004cea:	f023 0302 	bic.w	r3, r3, #2
10004cee:	051b      	lsls	r3, r3, #20
10004cf0:	0d1b      	lsrs	r3, r3, #20
10004cf2:	f8c0 3fc8 	str.w	r3, [r0, #4040]	@ 0xfc8
    SCB_INTR_TX_MASK(base) = (config->txFifoIntEnableMask & CY_SCB_UART_TX_INTR_MASK);
10004cf6:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
10004cf8:	f023 038c 	bic.w	r3, r3, #140	@ 0x8c
10004cfc:	055b      	lsls	r3, r3, #21
10004cfe:	0d5b      	lsrs	r3, r3, #21
10004d00:	f8c0 3f88 	str.w	r3, [r0, #3976]	@ 0xf88
    if (NULL != context)
10004d04:	2000      	movs	r0, #0
10004d06:	b182      	cbz	r2, 10004d2a <Cy_SCB_UART_Init+0x14e>
        context->rxRingBufSize = 0UL;
10004d08:	e9c2 0002 	strd	r0, r0, [r2, #8]
        context->irdaEnableLowPowerReceiver = config->irdaEnableLowPowerReceiver;
10004d0c:	7f89      	ldrb	r1, [r1, #30]
        context->rxStatus  = 0UL;
10004d0e:	6050      	str	r0, [r2, #4]
        context->rxBufSize = 0UL;
10004d10:	61d0      	str	r0, [r2, #28]
        context->txStatus  = 0UL;
10004d12:	6010      	str	r0, [r2, #0]
        context->cbEvents = NULL;
10004d14:	6350      	str	r0, [r2, #52]	@ 0x34
        context->rxBufIdx  = 0UL;
10004d16:	6210      	str	r0, [r2, #32]
        context->irdaEnableLowPowerReceiver = config->irdaEnableLowPowerReceiver;
10004d18:	f882 1030 	strb.w	r1, [r2, #48]	@ 0x30
        context->txLeftToTransmit = 0UL;
10004d1c:	62d0      	str	r0, [r2, #44]	@ 0x2c
}
10004d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    _BOOL2FLD(SCB_RX_CTRL_MEDIAN, ((config->enableInputFilter) || \
10004d20:	f44f 7300 	mov.w	r3, #512	@ 0x200
10004d24:	e7a4      	b.n	10004c70 <Cy_SCB_UART_Init+0x94>
        return CY_SCB_UART_BAD_PARAM;
10004d26:	4802      	ldr	r0, [pc, #8]	@ (10004d30 <Cy_SCB_UART_Init+0x154>)
10004d28:	e7f9      	b.n	10004d1e <Cy_SCB_UART_Init+0x142>
    return CY_SCB_UART_SUCCESS;
10004d2a:	4610      	mov	r0, r2
10004d2c:	e7f7      	b.n	10004d1e <Cy_SCB_UART_Init+0x142>
10004d2e:	bf00      	nop
10004d30:	00aa6001 	.word	0x00aa6001

10004d34 <Cy_SCB_UART_DeInit>:
    SCB_CTRL(base)      = CY_SCB_CTRL_DEF_VAL;
10004d34:	4b10      	ldr	r3, [pc, #64]	@ (10004d78 <Cy_SCB_UART_DeInit+0x44>)
10004d36:	6003      	str	r3, [r0, #0]
    SCB_UART_CTRL(base) = CY_SCB_UART_CTRL_DEF_VAL;
10004d38:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
10004d3c:	6403      	str	r3, [r0, #64]	@ 0x40
    SCB_RX_CTRL(base)      = CY_SCB_RX_CTRL_DEF_VAL;
10004d3e:	f240 1207 	movw	r2, #263	@ 0x107
    SCB_UART_RX_CTRL(base) = 0UL;
10004d42:	2300      	movs	r3, #0
10004d44:	6483      	str	r3, [r0, #72]	@ 0x48
    SCB_RX_CTRL(base)      = CY_SCB_RX_CTRL_DEF_VAL;
10004d46:	f8c0 2300 	str.w	r2, [r0, #768]	@ 0x300
    SCB_RX_FIFO_CTRL(base) = 0UL;
10004d4a:	f8c0 3304 	str.w	r3, [r0, #772]	@ 0x304
    SCB_RX_MATCH(base)     = 0UL;
10004d4e:	f8c0 3310 	str.w	r3, [r0, #784]	@ 0x310
    SCB_UART_TX_CTRL(base) = 0UL;
10004d52:	6443      	str	r3, [r0, #68]	@ 0x44
    SCB_TX_CTRL(base)      = CY_SCB_TX_CTRL_DEF_VAL;
10004d54:	f8c0 2200 	str.w	r2, [r0, #512]	@ 0x200
    SCB_TX_FIFO_CTRL(base) = 0UL;
10004d58:	f8c0 3204 	str.w	r3, [r0, #516]	@ 0x204
    SCB_UART_FLOW_CTRL(base) = 0UL;
10004d5c:	6503      	str	r3, [r0, #80]	@ 0x50
    SCB_INTR_SPI_EC_MASK(base) = 0UL;
10004d5e:	f8c0 3ec8 	str.w	r3, [r0, #3784]	@ 0xec8
    SCB_INTR_I2C_EC_MASK(base) = 0UL;
10004d62:	f8c0 3e88 	str.w	r3, [r0, #3720]	@ 0xe88
    SCB_INTR_RX_MASK(base)     = 0UL;
10004d66:	f8c0 3fc8 	str.w	r3, [r0, #4040]	@ 0xfc8
    SCB_INTR_TX_MASK(base)     = 0UL;
10004d6a:	f8c0 3f88 	str.w	r3, [r0, #3976]	@ 0xf88
    SCB_INTR_M_MASK(base)      = 0UL;
10004d6e:	f8c0 3f08 	str.w	r3, [r0, #3848]	@ 0xf08
    SCB_INTR_S_MASK(base)      = 0UL;
10004d72:	f8c0 3f48 	str.w	r3, [r0, #3912]	@ 0xf48
}
10004d76:	4770      	bx	lr
10004d78:	0300000f 	.word	0x0300000f

10004d7c <Cy_SCB_UART_Disable>:
    SCB_CTRL(base) &= (uint32_t) ~SCB_CTRL_ENABLED_Msk;
10004d7c:	6803      	ldr	r3, [r0, #0]
10004d7e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
10004d82:	6003      	str	r3, [r0, #0]
    if (NULL != context)
10004d84:	b121      	cbz	r1, 10004d90 <Cy_SCB_UART_Disable+0x14>
        context->rxStatus  = 0UL;
10004d86:	2300      	movs	r3, #0
10004d88:	604b      	str	r3, [r1, #4]
        context->txStatus  = 0UL;
10004d8a:	600b      	str	r3, [r1, #0]
        context->rxBufIdx  = 0UL;
10004d8c:	620b      	str	r3, [r1, #32]
        context->txLeftToTransmit = 0UL;
10004d8e:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
10004d90:	4770      	bx	lr

10004d92 <Cy_SCB_UART_StartRingBuffer>:
{
10004d92:	b538      	push	{r3, r4, r5, lr}
10004d94:	4605      	mov	r5, r0
10004d96:	461c      	mov	r4, r3
    if ((NULL != buffer) && (size > 0UL))
10004d98:	b1c1      	cbz	r1, 10004dcc <Cy_SCB_UART_StartRingBuffer+0x3a>
10004d9a:	b1ba      	cbz	r2, 10004dcc <Cy_SCB_UART_StartRingBuffer+0x3a>
        uint32_t irqRxLevel =  SelectRxFifoLevel(base);
10004d9c:	f7ff ff12 	bl	10004bc4 <SelectRxFifoLevel>
        context->rxRingBufHead = 0UL;
10004da0:	2300      	movs	r3, #0
10004da2:	6123      	str	r3, [r4, #16]
        context->rxRingBufTail = 0UL;
10004da4:	6163      	str	r3, [r4, #20]
    CY_REG32_CLR_SET(SCB_RX_FIFO_CTRL(base), SCB_RX_FIFO_CTRL_TRIGGER_LEVEL, level);
10004da6:	f8d5 3304 	ldr.w	r3, [r5, #772]	@ 0x304
        Cy_SCB_SetRxFifoLevel(base, (size >= irqRxLevel) ? (irqRxLevel - 1UL) : (size - 1UL));
10004daa:	4282      	cmp	r2, r0
        context->rxRingBufSize = size;
10004dac:	e9c4 1202 	strd	r1, r2, [r4, #8]
        Cy_SCB_SetRxFifoLevel(base, (size >= irqRxLevel) ? (irqRxLevel - 1UL) : (size - 1UL));
10004db0:	bf2c      	ite	cs
10004db2:	f100 32ff 	addcs.w	r2, r0, #4294967295
10004db6:	f102 32ff 	addcc.w	r2, r2, #4294967295
10004dba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
10004dbe:	b2d2      	uxtb	r2, r2
10004dc0:	4313      	orrs	r3, r2
10004dc2:	f8c5 3304 	str.w	r3, [r5, #772]	@ 0x304
    SCB_INTR_RX_MASK(base) = interruptMask;
10004dc6:	2301      	movs	r3, #1
10004dc8:	f8c5 3fc8 	str.w	r3, [r5, #4040]	@ 0xfc8
}
10004dcc:	bd38      	pop	{r3, r4, r5, pc}

10004dce <Cy_SCB_UART_GetNumInRingBuffer>:
*
*******************************************************************************/
uint32_t Cy_SCB_UART_GetNumInRingBuffer(CySCB_Type const *base, cy_stc_scb_uart_context_t const *context)
{
    uint32_t size;
    uint32_t locHead = context->rxRingBufHead;
10004dce:	6908      	ldr	r0, [r1, #16]

    /* Suppress a compiler warning about unused variables */
    (void) base;

    if (locHead >= context->rxRingBufTail)
10004dd0:	694b      	ldr	r3, [r1, #20]
10004dd2:	4283      	cmp	r3, r0
    {
        size = (locHead - context->rxRingBufTail);
    }
    else
    {
        size = (locHead + (context->rxRingBufSize - context->rxRingBufTail));
10004dd4:	bf88      	it	hi
10004dd6:	68ca      	ldrhi	r2, [r1, #12]
        size = (locHead - context->rxRingBufTail);
10004dd8:	694b      	ldr	r3, [r1, #20]
        size = (locHead + (context->rxRingBufSize - context->rxRingBufTail));
10004dda:	bf88      	it	hi
10004ddc:	1880      	addhi	r0, r0, r2
10004dde:	1ac0      	subs	r0, r0, r3
    }

    return (size);
}
10004de0:	4770      	bx	lr

10004de2 <Cy_SCB_UART_GetReceiveStatus>:
uint32_t Cy_SCB_UART_GetReceiveStatus(CySCB_Type const *base, cy_stc_scb_uart_context_t const *context)
{
    /* Suppress a compiler warning about unused variables */
    (void) base;

    return (context->rxStatus);
10004de2:	6848      	ldr	r0, [r1, #4]
}
10004de4:	4770      	bx	lr

10004de6 <Cy_SCB_UART_GetTransmitStatus>:
uint32_t Cy_SCB_UART_GetTransmitStatus(CySCB_Type const *base, cy_stc_scb_uart_context_t const *context)
{
    /* Suppress a compiler warning about unused variables */
    (void) base;

    return (context->txStatus);
10004de6:	6808      	ldr	r0, [r1, #0]
}
10004de8:	4770      	bx	lr

10004dea <Cy_SCB_UART_Interrupt>:
    return (SCB_INTR_CAUSE(base));
10004dea:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
* configuration and data retention. The user must not modify anything
* in this structure.
*
*******************************************************************************/
void Cy_SCB_UART_Interrupt(CySCB_Type *base, cy_stc_scb_uart_context_t *context)
{
10004dee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
10004df2:	460d      	mov	r5, r1
    if (0UL != (CY_SCB_RX_INTR & Cy_SCB_GetInterruptCause(base)))
10004df4:	0719      	lsls	r1, r3, #28
{
10004df6:	4604      	mov	r4, r0
    if (0UL != (CY_SCB_RX_INTR & Cy_SCB_GetInterruptCause(base)))
10004df8:	d564      	bpl.n	10004ec4 <Cy_SCB_UART_Interrupt+0xda>
    return (SCB_INTR_RX_MASKED(base));
10004dfa:	f8d0 3fcc 	ldr.w	r3, [r0, #4044]	@ 0xfcc
    {
        /* Get RX error events: a frame error, parity error, and overflow */
        uint32_t locRxErr = (CY_SCB_UART_RECEIVE_ERR & Cy_SCB_GetRxInterruptStatusMasked(base));

        /* Handle the error conditions */
        if (0UL != locRxErr)
10004dfe:	f413 7348 	ands.w	r3, r3, #800	@ 0x320
10004e02:	d00a      	beq.n	10004e1a <Cy_SCB_UART_Interrupt+0x30>
        {
            context->rxStatus |= locRxErr;
10004e04:	686a      	ldr	r2, [r5, #4]
10004e06:	431a      	orrs	r2, r3
10004e08:	606a      	str	r2, [r5, #4]
    SCB_INTR_RX(base) = interruptMask;
10004e0a:	f8c0 3fc0 	str.w	r3, [r0, #4032]	@ 0xfc0
    (void) SCB_INTR_RX(base);
10004e0e:	f8d0 3fc0 	ldr.w	r3, [r0, #4032]	@ 0xfc0

            Cy_SCB_ClearRxInterrupt(base, locRxErr);

            if (NULL != context->cbEvents)
10004e12:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
10004e14:	b10b      	cbz	r3, 10004e1a <Cy_SCB_UART_Interrupt+0x30>
            {
                context->cbEvents(CY_SCB_UART_RECEIVE_ERR_EVENT);
10004e16:	2010      	movs	r0, #16
10004e18:	4798      	blx	r3
    return (SCB_INTR_RX_MASKED(base));
10004e1a:	f8d4 3fcc 	ldr.w	r3, [r4, #4044]	@ 0xfcc
            }
        }

        /* Break the detect */
        if (0UL != (CY_SCB_RX_INTR_UART_BREAK_DETECT & Cy_SCB_GetRxInterruptStatusMasked(base)))
10004e1e:	051a      	lsls	r2, r3, #20
10004e20:	d509      	bpl.n	10004e36 <Cy_SCB_UART_Interrupt+0x4c>
        {
            context->rxStatus |= CY_SCB_UART_RECEIVE_BREAK_DETECT;
10004e22:	686b      	ldr	r3, [r5, #4]
10004e24:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
10004e28:	606b      	str	r3, [r5, #4]
    SCB_INTR_RX(base) = interruptMask;
10004e2a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
10004e2e:	f8c4 3fc0 	str.w	r3, [r4, #4032]	@ 0xfc0
    (void) SCB_INTR_RX(base);
10004e32:	f8d4 3fc0 	ldr.w	r3, [r4, #4032]	@ 0xfc0
    return (SCB_INTR_RX_MASKED(base));
10004e36:	f8d4 3fcc 	ldr.w	r3, [r4, #4044]	@ 0xfcc

            Cy_SCB_ClearRxInterrupt(base, CY_SCB_RX_INTR_UART_BREAK_DETECT);
        }

        /* Copy the received data */
        if (0UL != (CY_SCB_RX_INTR_LEVEL & Cy_SCB_GetRxInterruptStatusMasked(base)))
10004e3a:	07db      	lsls	r3, r3, #31
10004e3c:	d535      	bpl.n	10004eaa <Cy_SCB_UART_Interrupt+0xc0>
        {
            if (context->rxBufSize > 0UL)
10004e3e:	69ea      	ldr	r2, [r5, #28]
10004e40:	2a00      	cmp	r2, #0
10004e42:	f000 80e7 	beq.w	10005014 <Cy_SCB_UART_Interrupt+0x22a>
*
*******************************************************************************/
static void HandleDataReceive(CySCB_Type *base, cy_stc_scb_uart_context_t *context)
{
    uint32_t numCopied;
    uint32_t irqRxLevel = SelectRxFifoLevel(base);
10004e46:	4620      	mov	r0, r4
10004e48:	f7ff febc 	bl	10004bc4 <SelectRxFifoLevel>
    return Cy_SCB_ReadArray(base, buffer, size);
10004e4c:	69a9      	ldr	r1, [r5, #24]
10004e4e:	4606      	mov	r6, r0
10004e50:	4620      	mov	r0, r4
10004e52:	f7ff fe6e 	bl	10004b32 <Cy_SCB_ReadArray>

    /* Get data from RX FIFO */
    numCopied = Cy_SCB_UART_GetArray(base, context->rxBuf, context->rxBufSize);

    /* Move the buffer */
    context->rxBufIdx  += numCopied;
10004e56:	6a2b      	ldr	r3, [r5, #32]
10004e58:	4403      	add	r3, r0
10004e5a:	622b      	str	r3, [r5, #32]
    context->rxBufSize -= numCopied;
10004e5c:	69eb      	ldr	r3, [r5, #28]
10004e5e:	1a1b      	subs	r3, r3, r0
10004e60:	61eb      	str	r3, [r5, #28]

    if (0UL == context->rxBufSize)
10004e62:	2b00      	cmp	r3, #0
10004e64:	f040 80c1 	bne.w	10004fea <Cy_SCB_UART_Interrupt+0x200>
    {
        if (NULL != context->rxRingBuf)
10004e68:	68ab      	ldr	r3, [r5, #8]
10004e6a:	b17b      	cbz	r3, 10004e8c <Cy_SCB_UART_Interrupt+0xa2>
        {
            /* Adjust the level to proceed with the ring buffer */
            Cy_SCB_SetRxFifoLevel(base, (context->rxRingBufSize >= irqRxLevel) ?
10004e6c:	68e8      	ldr	r0, [r5, #12]
    CY_REG32_CLR_SET(SCB_RX_FIFO_CTRL(base), SCB_RX_FIFO_CTRL_TRIGGER_LEVEL, level);
10004e6e:	f8d4 3304 	ldr.w	r3, [r4, #772]	@ 0x304
10004e72:	4286      	cmp	r6, r0
10004e74:	bf94      	ite	ls
10004e76:	f106 30ff 	addls.w	r0, r6, #4294967295
10004e7a:	f100 30ff 	addhi.w	r0, r0, #4294967295
10004e7e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
10004e82:	b2c0      	uxtb	r0, r0
10004e84:	4303      	orrs	r3, r0
10004e86:	f8c4 3304 	str.w	r3, [r4, #772]	@ 0x304
    SCB_INTR_RX_MASK(base) = interruptMask;
10004e8a:	2301      	movs	r3, #1
10004e8c:	f8c4 3fc8 	str.w	r3, [r4, #4040]	@ 0xfc8
        {
            Cy_SCB_SetRxInterruptMask(base, CY_SCB_CLEAR_ALL_INTR_SRC);
        }

        /* Update the status */
        context->rxStatus &= (uint32_t) ~CY_SCB_UART_RECEIVE_ACTIVE;
10004e90:	686b      	ldr	r3, [r5, #4]
10004e92:	f023 0301 	bic.w	r3, r3, #1
10004e96:	606b      	str	r3, [r5, #4]

        /* Notify that receive is done in a callback */
        if (NULL != context->cbEvents)
10004e98:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
10004e9a:	b10b      	cbz	r3, 10004ea0 <Cy_SCB_UART_Interrupt+0xb6>
        {
            context->cbEvents(CY_SCB_UART_RECEIVE_DONE_EVENT);
10004e9c:	2004      	movs	r0, #4
10004e9e:	4798      	blx	r3
    SCB_INTR_RX(base) = interruptMask;
10004ea0:	2301      	movs	r3, #1
10004ea2:	f8c4 3fc0 	str.w	r3, [r4, #4032]	@ 0xfc0
    (void) SCB_INTR_RX(base);
10004ea6:	f8d4 3fc0 	ldr.w	r3, [r4, #4032]	@ 0xfc0
    return (SCB_INTR_RX_MASKED(base));
10004eaa:	f8d4 3fcc 	ldr.w	r3, [r4, #4044]	@ 0xfcc
        if (0UL != (CY_SCB_RX_INTR_NOT_EMPTY & Cy_SCB_GetRxInterruptStatusMasked(base)))
10004eae:	075e      	lsls	r6, r3, #29
10004eb0:	d508      	bpl.n	10004ec4 <Cy_SCB_UART_Interrupt+0xda>
            if (NULL != context->cbEvents)
10004eb2:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
10004eb4:	b10b      	cbz	r3, 10004eba <Cy_SCB_UART_Interrupt+0xd0>
                context->cbEvents(CY_SCB_UART_RECEIVE_NOT_EMTPY);
10004eb6:	2040      	movs	r0, #64	@ 0x40
10004eb8:	4798      	blx	r3
    SCB_INTR_RX(base) = interruptMask;
10004eba:	2304      	movs	r3, #4
10004ebc:	f8c4 3fc0 	str.w	r3, [r4, #4032]	@ 0xfc0
    (void) SCB_INTR_RX(base);
10004ec0:	f8d4 3fc0 	ldr.w	r3, [r4, #4032]	@ 0xfc0
    return (SCB_INTR_CAUSE(base));
10004ec4:	f8d4 3e00 	ldr.w	r3, [r4, #3584]	@ 0xe00
    if (0UL != (CY_SCB_TX_INTR & Cy_SCB_GetInterruptCause(base)))
10004ec8:	0758      	lsls	r0, r3, #29
10004eca:	f140 808c 	bpl.w	10004fe6 <Cy_SCB_UART_Interrupt+0x1fc>
    return (SCB_INTR_TX_MASKED(base));
10004ece:	f8d4 3f8c 	ldr.w	r3, [r4, #3980]	@ 0xf8c
        if (0UL != locTxErr)
10004ed2:	f413 63a0 	ands.w	r3, r3, #1280	@ 0x500
10004ed6:	d00a      	beq.n	10004eee <Cy_SCB_UART_Interrupt+0x104>
            context->txStatus |= locTxErr;
10004ed8:	682a      	ldr	r2, [r5, #0]
10004eda:	431a      	orrs	r2, r3
10004edc:	602a      	str	r2, [r5, #0]
    SCB_INTR_TX(base) = interruptMask;
10004ede:	f8c4 3f80 	str.w	r3, [r4, #3968]	@ 0xf80
    (void) SCB_INTR_TX(base);
10004ee2:	f8d4 3f80 	ldr.w	r3, [r4, #3968]	@ 0xf80
            if (NULL != context->cbEvents)
10004ee6:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
10004ee8:	b10b      	cbz	r3, 10004eee <Cy_SCB_UART_Interrupt+0x104>
                context->cbEvents(CY_SCB_UART_TRANSMIT_ERR_EVENT);
10004eea:	2020      	movs	r0, #32
10004eec:	4798      	blx	r3
    return (SCB_INTR_TX_MASKED(base));
10004eee:	f8d4 3f8c 	ldr.w	r3, [r4, #3980]	@ 0xf8c
        if (0UL != (CY_SCB_TX_INTR_LEVEL & Cy_SCB_GetTxInterruptStatusMasked(base)))
10004ef2:	07d9      	lsls	r1, r3, #31
10004ef4:	d54f      	bpl.n	10004f96 <Cy_SCB_UART_Interrupt+0x1ac>
    {return (_FLD2BOOL(SCB_CTRL_BYTE_MODE, SCB_CTRL(base)) ? (CY_SCB_FIFO_SIZE) : (CY_SCB_FIFO_SIZE / 2UL));}
10004ef6:	6823      	ldr	r3, [r4, #0]
{
    uint32_t numToCopy;
    uint32_t fifoSize = Cy_SCB_GetFifoSize(base);
    bool     byteMode = Cy_SCB_IsTxDataWidthByte(base);

    if (context->txBufSize > 1UL)
10004ef8:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
    return (_FLD2VAL(SCB_TX_CTRL_DATA_WIDTH, SCB_TX_CTRL(base)) < CY_SCB_BYTE_WIDTH);
10004efa:	f8d4 6200 	ldr.w	r6, [r4, #512]	@ 0x200
    {return (_FLD2BOOL(SCB_CTRL_BYTE_MODE, SCB_CTRL(base)) ? (CY_SCB_FIFO_SIZE) : (CY_SCB_FIFO_SIZE / 2UL));}
10004efe:	f413 6f00 	tst.w	r3, #2048	@ 0x800
10004f02:	bf14      	ite	ne
10004f04:	f04f 0880 	movne.w	r8, #128	@ 0x80
10004f08:	f04f 0840 	moveq.w	r8, #64	@ 0x40
10004f0c:	2a01      	cmp	r2, #1
    return (_FLD2VAL(SCB_TX_CTRL_DATA_WIDTH, SCB_TX_CTRL(base)) < CY_SCB_BYTE_WIDTH);
10004f0e:	f006 0608 	and.w	r6, r6, #8
10004f12:	d90d      	bls.n	10004f30 <Cy_SCB_UART_Interrupt+0x146>
    {
        uint8_t *buf = (uint8_t *) context->txBuf;
10004f14:	6a6f      	ldr	r7, [r5, #36]	@ 0x24

        /* Get the number of items left for transmission */
        context->txLeftToTransmit = context->txBufSize;
10004f16:	62ea      	str	r2, [r5, #44]	@ 0x2c
*******************************************************************************/
__STATIC_INLINE uint32_t Cy_SCB_UART_PutArray(CySCB_Type *base, void *buffer, uint32_t size)
{
    CY_ASSERT_L1(CY_SCB_IS_BUFFER_VALID(buffer, size));

    return Cy_SCB_WriteArray(base, buffer, size);
10004f18:	4639      	mov	r1, r7
10004f1a:	3a01      	subs	r2, #1
10004f1c:	4620      	mov	r0, r4
10004f1e:	f7ff fe3d 	bl	10004b9c <Cy_SCB_WriteArray>

        /* Put data into TX FIFO */
        numToCopy = Cy_SCB_UART_PutArray(base, context->txBuf, (context->txBufSize - 1UL));

        /* Move the buffer */
        context->txBufSize -= numToCopy;
10004f22:	6aab      	ldr	r3, [r5, #40]	@ 0x28
10004f24:	1a1b      	subs	r3, r3, r0
10004f26:	62ab      	str	r3, [r5, #40]	@ 0x28

        buf = &buf[(byteMode) ? (numToCopy) : (2UL * numToCopy)];
10004f28:	b106      	cbz	r6, 10004f2c <Cy_SCB_UART_Interrupt+0x142>
10004f2a:	0040      	lsls	r0, r0, #1
10004f2c:	4407      	add	r7, r0
        context->txBuf = (void *) buf;
10004f2e:	626f      	str	r7, [r5, #36]	@ 0x24
    return _FLD2VAL(SCB_TX_FIFO_STATUS_USED, SCB_TX_FIFO_STATUS(base));
10004f30:	f8d4 3208 	ldr.w	r3, [r4, #520]	@ 0x208
10004f34:	f3c3 0308 	ubfx	r3, r3, #0, #9
    }

    /* Put the last data item into TX FIFO */
    if ((fifoSize != Cy_SCB_GetNumInTxFifo(base)) && (1UL == context->txBufSize))
10004f38:	4543      	cmp	r3, r8
10004f3a:	d027      	beq.n	10004f8c <Cy_SCB_UART_Interrupt+0x1a2>
10004f3c:	6aab      	ldr	r3, [r5, #40]	@ 0x28
10004f3e:	2b01      	cmp	r3, #1
10004f40:	d124      	bne.n	10004f8c <Cy_SCB_UART_Interrupt+0x1a2>
    {
        uint32_t txData;
        uint32_t intrStatus;

        context->txBufSize = 0UL;
10004f42:	2300      	movs	r3, #0
10004f44:	62ab      	str	r3, [r5, #40]	@ 0x28

        /* Get the last item from the buffer */
        txData = (uint32_t) ((byteMode) ? ((uint8_t *)  context->txBuf)[0UL] :
10004f46:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
10004f48:	2e00      	cmp	r6, #0
10004f4a:	f040 80a5 	bne.w	10005098 <Cy_SCB_UART_Interrupt+0x2ae>
10004f4e:	781e      	ldrb	r6, [r3, #0]
                                          ((uint16_t *) context->txBuf)[0UL]);

        /* Put the last data element and make sure that "TX done" will happen for it */
        intrStatus = Cy_SysLib_EnterCriticalSection();
10004f50:	f7fd fdb7 	bl	10002ac2 <Cy_SysLib_EnterCriticalSection>
    SCB_INTR_TX(base) = interruptMask;
10004f54:	f44f 7300 	mov.w	r3, #512	@ 0x200
10004f58:	f8c4 3f80 	str.w	r3, [r4, #3968]	@ 0xf80
    (void) SCB_INTR_TX(base);
10004f5c:	f8d4 3f80 	ldr.w	r3, [r4, #3968]	@ 0xf80
    SCB_TX_FIFO_WR(base) = data;
10004f60:	f8c4 6240 	str.w	r6, [r4, #576]	@ 0x240

        Cy_SCB_ClearTxInterrupt(base, CY_SCB_TX_INTR_UART_DONE);
        Cy_SCB_WriteTxFifo(base, txData);

        Cy_SysLib_ExitCriticalSection(intrStatus);
10004f64:	f7fd fdb1 	bl	10002aca <Cy_SysLib_ExitCriticalSection>
    return (SCB_INTR_TX_MASK(base));
10004f68:	f8d4 3f88 	ldr.w	r3, [r4, #3976]	@ 0xf88

        /* Disable the level interrupt source and enable "transfer done" */
        Cy_SCB_SetTxInterruptMask(base, (CY_SCB_TX_INTR_UART_DONE |
10004f6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
10004f70:	f023 0301 	bic.w	r3, r3, #1
10004f74:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
    SCB_INTR_TX_MASK(base) = interruptMask;
10004f78:	f8c4 3f88 	str.w	r3, [r4, #3976]	@ 0xf88
                    (Cy_SCB_GetTxInterruptMask(base) & (uint32_t) ~CY_SCB_TX_INTR_LEVEL)));

        /* Data is copied into TX FIFO */
        context->txStatus |= CY_SCB_UART_TRANSMIT_IN_FIFO;
10004f7c:	682b      	ldr	r3, [r5, #0]
10004f7e:	f043 0302 	orr.w	r3, r3, #2
10004f82:	602b      	str	r3, [r5, #0]

        if (NULL != context->cbEvents)
10004f84:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
10004f86:	b10b      	cbz	r3, 10004f8c <Cy_SCB_UART_Interrupt+0x1a2>
        {
            context->cbEvents(CY_SCB_UART_TRANSMIT_IN_FIFO_EVENT);
10004f88:	2001      	movs	r0, #1
10004f8a:	4798      	blx	r3
    SCB_INTR_TX(base) = interruptMask;
10004f8c:	2301      	movs	r3, #1
10004f8e:	f8c4 3f80 	str.w	r3, [r4, #3968]	@ 0xf80
    (void) SCB_INTR_TX(base);
10004f92:	f8d4 3f80 	ldr.w	r3, [r4, #3968]	@ 0xf80
    return (SCB_INTR_TX_MASKED(base));
10004f96:	f8d4 3f8c 	ldr.w	r3, [r4, #3980]	@ 0xf8c
        if (0UL != (CY_SCB_TX_INTR_UART_DONE & Cy_SCB_GetTxInterruptStatusMasked(base)))
10004f9a:	059a      	lsls	r2, r3, #22
10004f9c:	d516      	bpl.n	10004fcc <Cy_SCB_UART_Interrupt+0x1e2>
            if(context->txStatus != CY_SCB_UART_TRANSMIT_ACTIVE)
10004f9e:	682b      	ldr	r3, [r5, #0]
10004fa0:	2b01      	cmp	r3, #1
    SCB_INTR_TX(base) = interruptMask;
10004fa2:	bf15      	itete	ne
10004fa4:	f44f 7300 	movne.w	r3, #512	@ 0x200
    SCB_INTR_TX_MASK(base) = interruptMask;
10004fa8:	2300      	moveq	r3, #0
    SCB_INTR_TX(base) = interruptMask;
10004faa:	f8c4 3f80 	strne.w	r3, [r4, #3968]	@ 0xf80
    SCB_INTR_TX_MASK(base) = interruptMask;
10004fae:	f8c4 3f88 	streq.w	r3, [r4, #3976]	@ 0xf88
    (void) SCB_INTR_TX(base);
10004fb2:	bf18      	it	ne
10004fb4:	f8d4 3f80 	ldrne.w	r3, [r4, #3968]	@ 0xf80
            context->txStatus &= (uint32_t) ~CY_SCB_UART_TRANSMIT_ACTIVE;
10004fb8:	682b      	ldr	r3, [r5, #0]
10004fba:	f023 0301 	bic.w	r3, r3, #1
10004fbe:	602b      	str	r3, [r5, #0]
            context->txLeftToTransmit = 0UL;
10004fc0:	2300      	movs	r3, #0
10004fc2:	62eb      	str	r3, [r5, #44]	@ 0x2c
            if (NULL != context->cbEvents)
10004fc4:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
10004fc6:	b10b      	cbz	r3, 10004fcc <Cy_SCB_UART_Interrupt+0x1e2>
                context->cbEvents(CY_SCB_UART_TRANSMIT_DONE_EVENT);
10004fc8:	2002      	movs	r0, #2
10004fca:	4798      	blx	r3
    return (SCB_INTR_TX_MASKED(base));
10004fcc:	f8d4 3f8c 	ldr.w	r3, [r4, #3980]	@ 0xf8c
        if (0UL != (CY_SCB_UART_TX_EMPTY & Cy_SCB_GetTxInterruptStatusMasked(base)))
10004fd0:	06db      	lsls	r3, r3, #27
10004fd2:	d508      	bpl.n	10004fe6 <Cy_SCB_UART_Interrupt+0x1fc>
            if (NULL != context->cbEvents)
10004fd4:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
10004fd6:	b10b      	cbz	r3, 10004fdc <Cy_SCB_UART_Interrupt+0x1f2>
                context->cbEvents(CY_SCB_UART_TRANSMIT_EMTPY);
10004fd8:	2080      	movs	r0, #128	@ 0x80
10004fda:	4798      	blx	r3
    SCB_INTR_TX(base) = interruptMask;
10004fdc:	2310      	movs	r3, #16
10004fde:	f8c4 3f80 	str.w	r3, [r4, #3968]	@ 0xf80
    (void) SCB_INTR_TX(base);
10004fe2:	f8d4 3f80 	ldr.w	r3, [r4, #3968]	@ 0xf80
}
10004fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (_FLD2VAL(SCB_RX_CTRL_DATA_WIDTH, SCB_RX_CTRL(base)) < CY_SCB_BYTE_WIDTH);
10004fea:	f8d4 1300 	ldr.w	r1, [r4, #768]	@ 0x300
        uint8_t *buf = (uint8_t *) context->rxBuf;
10004fee:	69aa      	ldr	r2, [r5, #24]
        buf = &buf[(Cy_SCB_IsRxDataWidthByte(base) ? (numCopied) : (2UL * numCopied))];
10004ff0:	070f      	lsls	r7, r1, #28
10004ff2:	bf48      	it	mi
10004ff4:	0040      	lslmi	r0, r0, #1
10004ff6:	4402      	add	r2, r0
        if (context->rxBufSize < irqRxLevel)
10004ff8:	429e      	cmp	r6, r3
        context->rxBuf = (void *) buf;
10004ffa:	61aa      	str	r2, [r5, #24]
        if (context->rxBufSize < irqRxLevel)
10004ffc:	f67f af50 	bls.w	10004ea0 <Cy_SCB_UART_Interrupt+0xb6>
    CY_REG32_CLR_SET(SCB_RX_FIFO_CTRL(base), SCB_RX_FIFO_CTRL_TRIGGER_LEVEL, level);
10005000:	f8d4 2304 	ldr.w	r2, [r4, #772]	@ 0x304
            Cy_SCB_SetRxFifoLevel(base, (context->rxBufSize - 1UL));
10005004:	3b01      	subs	r3, #1
10005006:	b2db      	uxtb	r3, r3
10005008:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
1000500c:	4313      	orrs	r3, r2
1000500e:	f8c4 3304 	str.w	r3, [r4, #772]	@ 0x304
}
10005012:	e745      	b.n	10004ea0 <Cy_SCB_UART_Interrupt+0xb6>
                if (NULL != context->rxRingBuf)
10005014:	68ab      	ldr	r3, [r5, #8]
10005016:	2b00      	cmp	r3, #0
10005018:	f43f af42 	beq.w	10004ea0 <Cy_SCB_UART_Interrupt+0xb6>
    uint32_t irqRxLevel = SelectRxFifoLevel(base);
1000501c:	4620      	mov	r0, r4
1000501e:	f7ff fdd1 	bl	10004bc4 <SelectRxFifoLevel>
    return _FLD2VAL(SCB_RX_FIFO_STATUS_USED, SCB_RX_FIFO_STATUS(base));
10005022:	f8d4 7308 	ldr.w	r7, [r4, #776]	@ 0x308
    uint32_t locHead = context->rxRingBufHead;
10005026:	692e      	ldr	r6, [r5, #16]
    uint32_t irqRxLevel = SelectRxFifoLevel(base);
10005028:	4680      	mov	r8, r0
1000502a:	f3c7 0708 	ubfx	r7, r7, #0, #9
        if (locHead == context->rxRingBufSize)
1000502e:	68eb      	ldr	r3, [r5, #12]
    while (numToCopy > 0UL)
10005030:	b197      	cbz	r7, 10005058 <Cy_SCB_UART_Interrupt+0x26e>
        ++locHead;
10005032:	3601      	adds	r6, #1
            locHead = 0UL;
10005034:	429e      	cmp	r6, r3
10005036:	bf08      	it	eq
10005038:	2600      	moveq	r6, #0
        if (locHead == context->rxRingBufTail)
1000503a:	696b      	ldr	r3, [r5, #20]
1000503c:	42b3      	cmp	r3, r6
1000503e:	d11f      	bne.n	10005080 <Cy_SCB_UART_Interrupt+0x296>
            if (NULL != context->cbEvents)
10005040:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
10005042:	b10b      	cbz	r3, 10005048 <Cy_SCB_UART_Interrupt+0x25e>
                context->cbEvents(CY_SCB_UART_RB_FULL_EVENT);
10005044:	2008      	movs	r0, #8
10005046:	4798      	blx	r3
            if (locHead == context->rxRingBufTail)
10005048:	696b      	ldr	r3, [r5, #20]
1000504a:	429e      	cmp	r6, r3
1000504c:	d118      	bne.n	10005080 <Cy_SCB_UART_Interrupt+0x296>
    SCB_INTR_RX_MASK(base) = interruptMask;
1000504e:	2300      	movs	r3, #0
10005050:	f8c4 3fc8 	str.w	r3, [r4, #4040]	@ 0xfc8
                locHead = (locHead > 0UL) ? (locHead - 1UL) : (context->rxRingBufSize - 1UL);
10005054:	b196      	cbz	r6, 1000507c <Cy_SCB_UART_Interrupt+0x292>
10005056:	3e01      	subs	r6, #1
    context->rxRingBufHead = locHead;
10005058:	612e      	str	r6, [r5, #16]
    numToCopy = context->rxRingBufSize - Cy_SCB_UART_GetNumInRingBuffer(base, context);
1000505a:	4629      	mov	r1, r5
1000505c:	4620      	mov	r0, r4
1000505e:	68ee      	ldr	r6, [r5, #12]
10005060:	f7ff feb5 	bl	10004dce <Cy_SCB_UART_GetNumInRingBuffer>
10005064:	1a33      	subs	r3, r6, r0
    if (numToCopy < irqRxLevel)
10005066:	4598      	cmp	r8, r3
10005068:	f67f af1a 	bls.w	10004ea0 <Cy_SCB_UART_Interrupt+0xb6>
        uint32_t level = (numToCopy > 0UL) ? (numToCopy - 1UL) : 0UL;
1000506c:	b103      	cbz	r3, 10005070 <Cy_SCB_UART_Interrupt+0x286>
1000506e:	3b01      	subs	r3, #1
    CY_REG32_CLR_SET(SCB_RX_FIFO_CTRL(base), SCB_RX_FIFO_CTRL_TRIGGER_LEVEL, level);
10005070:	f8d4 2304 	ldr.w	r2, [r4, #772]	@ 0x304
10005074:	b2db      	uxtb	r3, r3
10005076:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
1000507a:	e7c7      	b.n	1000500c <Cy_SCB_UART_Interrupt+0x222>
                locHead = (locHead > 0UL) ? (locHead - 1UL) : (context->rxRingBufSize - 1UL);
1000507c:	68ee      	ldr	r6, [r5, #12]
1000507e:	e7ea      	b.n	10005056 <Cy_SCB_UART_Interrupt+0x26c>
    return (SCB_RX_FIFO_RD(base));
10005080:	f8d4 2340 	ldr.w	r2, [r4, #832]	@ 0x340
    return (_FLD2VAL(SCB_RX_CTRL_DATA_WIDTH, SCB_RX_CTRL(base)) < CY_SCB_BYTE_WIDTH);
10005084:	f8d4 1300 	ldr.w	r1, [r4, #768]	@ 0x300
            ((uint8_t *) context->rxRingBuf)[locHead] = (uint8_t) rxData;
10005088:	68ab      	ldr	r3, [r5, #8]
        if (Cy_SCB_IsRxDataWidthByte(base))
1000508a:	0709      	lsls	r1, r1, #28
            ((uint8_t *) context->rxRingBuf)[locHead] = (uint8_t) rxData;
1000508c:	bf54      	ite	pl
1000508e:	559a      	strbpl	r2, [r3, r6]
            ((uint16_t *) context->rxRingBuf)[locHead] = (uint16_t) rxData;
10005090:	f823 2016 	strhmi.w	r2, [r3, r6, lsl #1]
        --numToCopy;
10005094:	3f01      	subs	r7, #1
10005096:	e7ca      	b.n	1000502e <Cy_SCB_UART_Interrupt+0x244>
        txData = (uint32_t) ((byteMode) ? ((uint8_t *)  context->txBuf)[0UL] :
10005098:	881e      	ldrh	r6, [r3, #0]
1000509a:	e759      	b.n	10004f50 <Cy_SCB_UART_Interrupt+0x166>

1000509c <Cy_SysClk_PeriphSetDivider>:
#endif

cy_en_sysclk_status_t
                Cy_SysClk_PeriphSetDivider(cy_en_divider_types_t dividerType,
                                           uint32_t dividerNum, uint32_t dividerValue)
{
1000509c:	b510      	push	{r4, lr}
    cy_en_sysclk_status_t retVal = CY_SYSCLK_BAD_PARAM;
    if (dividerType == CY_SYSCLK_DIV_8_BIT)
1000509e:	b990      	cbnz	r0, 100050c6 <Cy_SysClk_PeriphSetDivider+0x2a>
    {
        if ((dividerNum < PERI_DIV_8_NR) &&
100050a0:	2907      	cmp	r1, #7
100050a2:	d829      	bhi.n	100050f8 <Cy_SysClk_PeriphSetDivider+0x5c>
100050a4:	2aff      	cmp	r2, #255	@ 0xff
100050a6:	d827      	bhi.n	100050f8 <Cy_SysClk_PeriphSetDivider+0x5c>
            (dividerValue <= (PERI_DIV_8_CTL_INT8_DIV_Msk >> PERI_DIV_8_CTL_INT8_DIV_Pos)))
        {
            CY_REG32_CLR_SET(PERI_DIV_8_CTL[dividerNum], PERI_DIV_8_CTL_INT8_DIV, dividerValue);
100050a8:	4b14      	ldr	r3, [pc, #80]	@ (100050fc <Cy_SysClk_PeriphSetDivider+0x60>)
100050aa:	681b      	ldr	r3, [r3, #0]
100050ac:	f8b3 407c 	ldrh.w	r4, [r3, #124]	@ 0x7c
100050b0:	689b      	ldr	r3, [r3, #8]
100050b2:	441c      	add	r4, r3
100050b4:	f854 3021 	ldr.w	r3, [r4, r1, lsl #2]
100050b8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
100050bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
100050c0:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
    }
    else
    { /* return bad parameter */
    }
    return (retVal);
}
100050c4:	bd10      	pop	{r4, pc}
    else if (dividerType == CY_SYSCLK_DIV_16_BIT)
100050c6:	2801      	cmp	r0, #1
100050c8:	d116      	bne.n	100050f8 <Cy_SysClk_PeriphSetDivider+0x5c>
        if ((dividerNum < PERI_DIV_16_NR) &&
100050ca:	290f      	cmp	r1, #15
100050cc:	d814      	bhi.n	100050f8 <Cy_SysClk_PeriphSetDivider+0x5c>
100050ce:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
100050d2:	d211      	bcs.n	100050f8 <Cy_SysClk_PeriphSetDivider+0x5c>
            CY_REG32_CLR_SET(PERI_DIV_16_CTL[dividerNum], PERI_DIV_16_CTL_INT16_DIV, dividerValue);
100050d4:	4b09      	ldr	r3, [pc, #36]	@ (100050fc <Cy_SysClk_PeriphSetDivider+0x60>)
100050d6:	681b      	ldr	r3, [r3, #0]
100050d8:	f8b3 007e 	ldrh.w	r0, [r3, #126]	@ 0x7e
100050dc:	689b      	ldr	r3, [r3, #8]
100050de:	4418      	add	r0, r3
100050e0:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
100050e4:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
100050e8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
100050ec:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
100050f0:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
            retVal = CY_SYSCLK_SUCCESS;
100050f4:	2000      	movs	r0, #0
100050f6:	e7e5      	b.n	100050c4 <Cy_SysClk_PeriphSetDivider+0x28>
    cy_en_sysclk_status_t retVal = CY_SYSCLK_BAD_PARAM;
100050f8:	4801      	ldr	r0, [pc, #4]	@ (10005100 <Cy_SysClk_PeriphSetDivider+0x64>)
    return (retVal);
100050fa:	e7e3      	b.n	100050c4 <Cy_SysClk_PeriphSetDivider+0x28>
100050fc:	08002c40 	.word	0x08002c40
10005100:	004a0001 	.word	0x004a0001

10005104 <Cy_SysClk_PeriphSetFracDivider>:
cy_en_sysclk_status_t
                Cy_SysClk_PeriphSetFracDivider(cy_en_divider_types_t dividerType, uint32_t dividerNum,
                                               uint32_t dividerIntValue, uint32_t dividerFracValue)
{
    cy_en_sysclk_status_t retVal = CY_SYSCLK_BAD_PARAM;
    if (dividerType == CY_SYSCLK_DIV_16_5_BIT)
10005104:	2802      	cmp	r0, #2
{
10005106:	b570      	push	{r4, r5, r6, lr}
    if (dividerType == CY_SYSCLK_DIV_16_5_BIT)
10005108:	d123      	bne.n	10005152 <Cy_SysClk_PeriphSetFracDivider+0x4e>
    {
        if ((dividerNum < PERI_DIV_16_5_NR) &&
1000510a:	2903      	cmp	r1, #3
1000510c:	d83b      	bhi.n	10005186 <Cy_SysClk_PeriphSetFracDivider+0x82>
1000510e:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
10005112:	d238      	bcs.n	10005186 <Cy_SysClk_PeriphSetFracDivider+0x82>
            (dividerIntValue <= (PERI_DIV_16_5_CTL_INT16_DIV_Msk >> PERI_DIV_16_5_CTL_INT16_DIV_Pos)) &&
10005114:	2b1f      	cmp	r3, #31
10005116:	d836      	bhi.n	10005186 <Cy_SysClk_PeriphSetFracDivider+0x82>
            (dividerFracValue <= (PERI_DIV_16_5_CTL_FRAC5_DIV_Msk >> PERI_DIV_16_5_CTL_FRAC5_DIV_Pos)))
        {
            CY_REG32_CLR_SET(PERI_DIV_16_5_CTL[dividerNum], PERI_DIV_16_5_CTL_INT16_DIV, dividerIntValue);
10005118:	481c      	ldr	r0, [pc, #112]	@ (1000518c <Cy_SysClk_PeriphSetFracDivider+0x88>)
1000511a:	6806      	ldr	r6, [r0, #0]
1000511c:	f8b6 4080 	ldrh.w	r4, [r6, #128]	@ 0x80
10005120:	68b5      	ldr	r5, [r6, #8]
10005122:	4425      	add	r5, r4
10005124:	f855 0021 	ldr.w	r0, [r5, r1, lsl #2]
10005128:	f420 007f 	bic.w	r0, r0, #16711680	@ 0xff0000
1000512c:	f420 407f 	bic.w	r0, r0, #65280	@ 0xff00
10005130:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
10005134:	f845 2021 	str.w	r2, [r5, r1, lsl #2]
            CY_REG32_CLR_SET(PERI_DIV_16_5_CTL[dividerNum], PERI_DIV_16_5_CTL_FRAC5_DIV, dividerFracValue);
10005138:	68b2      	ldr	r2, [r6, #8]
1000513a:	4422      	add	r2, r4
1000513c:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
10005140:	f020 00f8 	bic.w	r0, r0, #248	@ 0xf8
10005144:	ea40 03c3 	orr.w	r3, r0, r3, lsl #3
10005148:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
            retVal = CY_SYSCLK_SUCCESS;
1000514c:	2100      	movs	r1, #0
    }
    else
    { /* return bad parameter */
    }
    return (retVal);
}
1000514e:	4608      	mov	r0, r1
10005150:	bd70      	pop	{r4, r5, r6, pc}
    else if (dividerType == CY_SYSCLK_DIV_24_5_BIT)
10005152:	2803      	cmp	r0, #3
10005154:	d117      	bne.n	10005186 <Cy_SysClk_PeriphSetFracDivider+0x82>
        if ((dividerNum < PERI_DIV_24_5_NR) &&
10005156:	b9b1      	cbnz	r1, 10005186 <Cy_SysClk_PeriphSetFracDivider+0x82>
10005158:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
1000515c:	d213      	bcs.n	10005186 <Cy_SysClk_PeriphSetFracDivider+0x82>
            (dividerIntValue <= (PERI_DIV_24_5_CTL_INT24_DIV_Msk >> PERI_DIV_24_5_CTL_INT24_DIV_Pos)) &&
1000515e:	2b1f      	cmp	r3, #31
10005160:	d811      	bhi.n	10005186 <Cy_SysClk_PeriphSetFracDivider+0x82>
            CY_REG32_CLR_SET(PERI_DIV_24_5_CTL[dividerNum], PERI_DIV_24_5_CTL_INT24_DIV, dividerIntValue);
10005162:	480a      	ldr	r0, [pc, #40]	@ (1000518c <Cy_SysClk_PeriphSetFracDivider+0x88>)
10005164:	6805      	ldr	r5, [r0, #0]
10005166:	f8b5 4082 	ldrh.w	r4, [r5, #130]	@ 0x82
1000516a:	68ae      	ldr	r6, [r5, #8]
1000516c:	59a0      	ldr	r0, [r4, r6]
1000516e:	b2c0      	uxtb	r0, r0
10005170:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
10005174:	51a2      	str	r2, [r4, r6]
            CY_REG32_CLR_SET(PERI_DIV_24_5_CTL[dividerNum], PERI_DIV_24_5_CTL_FRAC5_DIV, dividerFracValue);
10005176:	68a8      	ldr	r0, [r5, #8]
10005178:	5822      	ldr	r2, [r4, r0]
1000517a:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
1000517e:	ea42 03c3 	orr.w	r3, r2, r3, lsl #3
10005182:	5023      	str	r3, [r4, r0]
            retVal = CY_SYSCLK_SUCCESS;
10005184:	e7e3      	b.n	1000514e <Cy_SysClk_PeriphSetFracDivider+0x4a>
    cy_en_sysclk_status_t retVal = CY_SYSCLK_BAD_PARAM;
10005186:	4902      	ldr	r1, [pc, #8]	@ (10005190 <Cy_SysClk_PeriphSetFracDivider+0x8c>)
10005188:	e7e1      	b.n	1000514e <Cy_SysClk_PeriphSetFracDivider+0x4a>
1000518a:	bf00      	nop
1000518c:	08002c40 	.word	0x08002c40
10005190:	004a0001 	.word	0x004a0001

10005194 <Cy_SysClk_PeriphAssignDivider>:


cy_en_sysclk_status_t
                Cy_SysClk_PeriphAssignDivider(en_clk_dst_t ipBlock,
                                              cy_en_divider_types_t dividerType, uint32_t dividerNum)
{
10005194:	b530      	push	{r4, r5, lr}
    cy_en_sysclk_status_t retVal = CY_SYSCLK_BAD_PARAM;
    if ((CY_PERI_CLOCK_NR > (uint32_t)ipBlock) && (CY_SYSCLK_DIV_24_5_BIT >= dividerType))
10005196:	4b13      	ldr	r3, [pc, #76]	@ (100051e4 <Cy_SysClk_PeriphAssignDivider+0x50>)
10005198:	681b      	ldr	r3, [r3, #0]
1000519a:	f893 4046 	ldrb.w	r4, [r3, #70]	@ 0x46
1000519e:	4284      	cmp	r4, r0
100051a0:	d904      	bls.n	100051ac <Cy_SysClk_PeriphAssignDivider+0x18>
100051a2:	2903      	cmp	r1, #3
100051a4:	d802      	bhi.n	100051ac <Cy_SysClk_PeriphAssignDivider+0x18>
    {
        if (((dividerType == CY_SYSCLK_DIV_8_BIT)    && (dividerNum < PERI_DIV_8_NR))    ||
100051a6:	b919      	cbnz	r1, 100051b0 <Cy_SysClk_PeriphAssignDivider+0x1c>
100051a8:	2a07      	cmp	r2, #7
            ((dividerType == CY_SYSCLK_DIV_16_BIT)   && (dividerNum < PERI_DIV_16_NR))   ||
            ((dividerType == CY_SYSCLK_DIV_16_5_BIT) && (dividerNum < PERI_DIV_16_5_NR)) ||
100051aa:	d90b      	bls.n	100051c4 <Cy_SysClk_PeriphAssignDivider+0x30>
    cy_en_sysclk_status_t retVal = CY_SYSCLK_BAD_PARAM;
100051ac:	480e      	ldr	r0, [pc, #56]	@ (100051e8 <Cy_SysClk_PeriphAssignDivider+0x54>)
            PERI_CLOCK_CTL[ipBlock] = _VAL2FLD(CY_PERI_CLOCK_CTL_TYPE_SEL, dividerType) |
                                      _VAL2FLD(CY_PERI_CLOCK_CTL_DIV_SEL, dividerNum);
            retVal = CY_SYSCLK_SUCCESS;
        }
    }
    return (retVal);
100051ae:	e018      	b.n	100051e2 <Cy_SysClk_PeriphAssignDivider+0x4e>
        if (((dividerType == CY_SYSCLK_DIV_8_BIT)    && (dividerNum < PERI_DIV_8_NR))    ||
100051b0:	2901      	cmp	r1, #1
100051b2:	d101      	bne.n	100051b8 <Cy_SysClk_PeriphAssignDivider+0x24>
            ((dividerType == CY_SYSCLK_DIV_16_BIT)   && (dividerNum < PERI_DIV_16_NR))   ||
100051b4:	2a0f      	cmp	r2, #15
100051b6:	e7f8      	b.n	100051aa <Cy_SysClk_PeriphAssignDivider+0x16>
100051b8:	2902      	cmp	r1, #2
100051ba:	d101      	bne.n	100051c0 <Cy_SysClk_PeriphAssignDivider+0x2c>
            ((dividerType == CY_SYSCLK_DIV_16_5_BIT) && (dividerNum < PERI_DIV_16_5_NR)) ||
100051bc:	2a03      	cmp	r2, #3
100051be:	e7f4      	b.n	100051aa <Cy_SysClk_PeriphAssignDivider+0x16>
            ((dividerType == CY_SYSCLK_DIV_24_5_BIT) && (dividerNum < PERI_DIV_24_5_NR)))
100051c0:	2a00      	cmp	r2, #0
100051c2:	d1f3      	bne.n	100051ac <Cy_SysClk_PeriphAssignDivider+0x18>
            PERI_CLOCK_CTL[ipBlock] = _VAL2FLD(CY_PERI_CLOCK_CTL_TYPE_SEL, dividerType) |
100051c4:	f893 5079 	ldrb.w	r5, [r3, #121]	@ 0x79
100051c8:	689c      	ldr	r4, [r3, #8]
                                      _VAL2FLD(CY_PERI_CLOCK_CTL_DIV_SEL, dividerNum);
100051ca:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
            PERI_CLOCK_CTL[ipBlock] = _VAL2FLD(CY_PERI_CLOCK_CTL_TYPE_SEL, dividerType) |
100051ce:	f001 0103 	and.w	r1, r1, #3
100051d2:	f500 7040 	add.w	r0, r0, #768	@ 0x300
100051d6:	40a9      	lsls	r1, r5
                                      _VAL2FLD(CY_PERI_CLOCK_CTL_DIV_SEL, dividerNum);
100051d8:	4013      	ands	r3, r2
            PERI_CLOCK_CTL[ipBlock] = _VAL2FLD(CY_PERI_CLOCK_CTL_TYPE_SEL, dividerType) |
100051da:	4319      	orrs	r1, r3
100051dc:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
            retVal = CY_SYSCLK_SUCCESS;
100051e0:	2000      	movs	r0, #0
}
100051e2:	bd30      	pop	{r4, r5, pc}
100051e4:	08002c40 	.word	0x08002c40
100051e8:	004a0001 	.word	0x004a0001

100051ec <Cy_SysClk_PeriphEnableDivider>:

cy_en_sysclk_status_t
                Cy_SysClk_PeriphEnableDivider(cy_en_divider_types_t dividerType, uint32_t dividerNum)
{
    cy_en_sysclk_status_t retVal = CY_SYSCLK_BAD_PARAM;
    if (dividerType <= CY_SYSCLK_DIV_24_5_BIT)
100051ec:	2803      	cmp	r0, #3
{
100051ee:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (dividerType <= CY_SYSCLK_DIV_24_5_BIT)
100051f0:	d802      	bhi.n	100051f8 <Cy_SysClk_PeriphEnableDivider+0xc>
    {
        if (((dividerType == CY_SYSCLK_DIV_8_BIT)    && (dividerNum < PERI_DIV_8_NR))    ||
100051f2:	b918      	cbnz	r0, 100051fc <Cy_SysClk_PeriphEnableDivider+0x10>
100051f4:	2907      	cmp	r1, #7
            ((dividerType == CY_SYSCLK_DIV_16_BIT)   && (dividerNum < PERI_DIV_16_NR))   ||
            ((dividerType == CY_SYSCLK_DIV_16_5_BIT) && (dividerNum < PERI_DIV_16_5_NR)) ||
100051f6:	d90b      	bls.n	10005210 <Cy_SysClk_PeriphEnableDivider+0x24>
    cy_en_sysclk_status_t retVal = CY_SYSCLK_BAD_PARAM;
100051f8:	4815      	ldr	r0, [pc, #84]	@ (10005250 <Cy_SysClk_PeriphEnableDivider+0x64>)
                           _VAL2FLD(CY_PERI_DIV_CMD_DIV_SEL,  dividerNum);
            (void)PERI_DIV_CMD; /* dummy read to handle buffered writes */
            retVal = CY_SYSCLK_SUCCESS;
        }
    }
    return (retVal);
100051fa:	e028      	b.n	1000524e <Cy_SysClk_PeriphEnableDivider+0x62>
        if (((dividerType == CY_SYSCLK_DIV_8_BIT)    && (dividerNum < PERI_DIV_8_NR))    ||
100051fc:	2801      	cmp	r0, #1
100051fe:	d101      	bne.n	10005204 <Cy_SysClk_PeriphEnableDivider+0x18>
            ((dividerType == CY_SYSCLK_DIV_16_BIT)   && (dividerNum < PERI_DIV_16_NR))   ||
10005200:	290f      	cmp	r1, #15
10005202:	e7f8      	b.n	100051f6 <Cy_SysClk_PeriphEnableDivider+0xa>
10005204:	2802      	cmp	r0, #2
10005206:	d101      	bne.n	1000520c <Cy_SysClk_PeriphEnableDivider+0x20>
            ((dividerType == CY_SYSCLK_DIV_16_5_BIT) && (dividerNum < PERI_DIV_16_5_NR)) ||
10005208:	2903      	cmp	r1, #3
1000520a:	e7f4      	b.n	100051f6 <Cy_SysClk_PeriphEnableDivider+0xa>
            ((dividerType == CY_SYSCLK_DIV_24_5_BIT) && (dividerNum < PERI_DIV_24_5_NR)))
1000520c:	2900      	cmp	r1, #0
1000520e:	d1f3      	bne.n	100051f8 <Cy_SysClk_PeriphEnableDivider+0xc>
                           CY_PERI_DIV_CMD_PA_TYPE_SEL_Msk                 |
10005210:	4b10      	ldr	r3, [pc, #64]	@ (10005254 <Cy_SysClk_PeriphEnableDivider+0x68>)
10005212:	681c      	ldr	r4, [r3, #0]
                           CY_PERI_DIV_CMD_PA_DIV_SEL_Msk                  |
10005214:	f894 5078 	ldrb.w	r5, [r4, #120]	@ 0x78
                           _VAL2FLD(CY_PERI_DIV_CMD_TYPE_SEL, dividerType) |
10005218:	f894 7079 	ldrb.w	r7, [r4, #121]	@ 0x79
            PERI_DIV_CMD = PERI_DIV_CMD_ENABLE_Msk                         |
1000521c:	68a6      	ldr	r6, [r4, #8]
                           CY_PERI_DIV_CMD_PA_TYPE_SEL_Msk                 |
1000521e:	f894 307b 	ldrb.w	r3, [r4, #123]	@ 0x7b
                           CY_PERI_DIV_CMD_PA_DIV_SEL_Msk                  |
10005222:	f894 407a 	ldrb.w	r4, [r4, #122]	@ 0x7a
                           CY_PERI_DIV_CMD_PA_TYPE_SEL_Msk                 |
10005226:	2203      	movs	r2, #3
10005228:	fa02 f303 	lsl.w	r3, r2, r3
                           CY_PERI_DIV_CMD_PA_DIV_SEL_Msk                  |
1000522c:	fa05 f404 	lsl.w	r4, r5, r4
                           _VAL2FLD(CY_PERI_DIV_CMD_TYPE_SEL, dividerType) |
10005230:	4002      	ands	r2, r0
                           CY_PERI_DIV_CMD_PA_TYPE_SEL_Msk                 |
10005232:	4323      	orrs	r3, r4
                           _VAL2FLD(CY_PERI_DIV_CMD_TYPE_SEL, dividerType) |
10005234:	40ba      	lsls	r2, r7
                           CY_PERI_DIV_CMD_PA_DIV_SEL_Msk                  |
10005236:	ea43 0002 	orr.w	r0, r3, r2
                           _VAL2FLD(CY_PERI_DIV_CMD_DIV_SEL,  dividerNum);
1000523a:	400d      	ands	r5, r1
                           _VAL2FLD(CY_PERI_DIV_CMD_TYPE_SEL, dividerType) |
1000523c:	ea40 0105 	orr.w	r1, r0, r5
10005240:	f041 4100 	orr.w	r1, r1, #2147483648	@ 0x80000000
            PERI_DIV_CMD = PERI_DIV_CMD_ENABLE_Msk                         |
10005244:	f8c6 1400 	str.w	r1, [r6, #1024]	@ 0x400
            (void)PERI_DIV_CMD; /* dummy read to handle buffered writes */
10005248:	f8d6 3400 	ldr.w	r3, [r6, #1024]	@ 0x400
            retVal = CY_SYSCLK_SUCCESS;
1000524c:	2000      	movs	r0, #0
}
1000524e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10005250:	004a0001 	.word	0x004a0001
10005254:	08002c40 	.word	0x08002c40

10005258 <Cy_SysClk_PeriphDisableDivider>:

cy_en_sysclk_status_t
                Cy_SysClk_PeriphDisableDivider(cy_en_divider_types_t dividerType, uint32_t dividerNum)
{
    cy_en_sysclk_status_t retVal = CY_SYSCLK_BAD_PARAM;
    if (dividerType <= CY_SYSCLK_DIV_24_5_BIT)
10005258:	2803      	cmp	r0, #3
{
1000525a:	b510      	push	{r4, lr}
    if (dividerType <= CY_SYSCLK_DIV_24_5_BIT)
1000525c:	d802      	bhi.n	10005264 <Cy_SysClk_PeriphDisableDivider+0xc>
    {
        if (((dividerType == CY_SYSCLK_DIV_8_BIT)    && (dividerNum < PERI_DIV_8_NR))    ||
1000525e:	b918      	cbnz	r0, 10005268 <Cy_SysClk_PeriphDisableDivider+0x10>
10005260:	2907      	cmp	r1, #7
            ((dividerType == CY_SYSCLK_DIV_16_BIT)   && (dividerNum < PERI_DIV_16_NR))   ||
            ((dividerType == CY_SYSCLK_DIV_16_5_BIT) && (dividerNum < PERI_DIV_16_5_NR)) ||
10005262:	d90b      	bls.n	1000527c <Cy_SysClk_PeriphDisableDivider+0x24>
    cy_en_sysclk_status_t retVal = CY_SYSCLK_BAD_PARAM;
10005264:	480e      	ldr	r0, [pc, #56]	@ (100052a0 <Cy_SysClk_PeriphDisableDivider+0x48>)
             _VAL2FLD(CY_PERI_DIV_CMD_TYPE_SEL, dividerType) |
             _VAL2FLD(CY_PERI_DIV_CMD_DIV_SEL,  dividerNum);
            retVal = CY_SYSCLK_SUCCESS;
        }
    }
    return (retVal);
10005266:	e01a      	b.n	1000529e <Cy_SysClk_PeriphDisableDivider+0x46>
        if (((dividerType == CY_SYSCLK_DIV_8_BIT)    && (dividerNum < PERI_DIV_8_NR))    ||
10005268:	2801      	cmp	r0, #1
1000526a:	d101      	bne.n	10005270 <Cy_SysClk_PeriphDisableDivider+0x18>
            ((dividerType == CY_SYSCLK_DIV_16_BIT)   && (dividerNum < PERI_DIV_16_NR))   ||
1000526c:	290f      	cmp	r1, #15
1000526e:	e7f8      	b.n	10005262 <Cy_SysClk_PeriphDisableDivider+0xa>
10005270:	2802      	cmp	r0, #2
10005272:	d101      	bne.n	10005278 <Cy_SysClk_PeriphDisableDivider+0x20>
            ((dividerType == CY_SYSCLK_DIV_16_5_BIT) && (dividerNum < PERI_DIV_16_5_NR)) ||
10005274:	2903      	cmp	r1, #3
10005276:	e7f4      	b.n	10005262 <Cy_SysClk_PeriphDisableDivider+0xa>
            ((dividerType == CY_SYSCLK_DIV_24_5_BIT) && (dividerNum < PERI_DIV_24_5_NR)))
10005278:	2900      	cmp	r1, #0
1000527a:	d1f3      	bne.n	10005264 <Cy_SysClk_PeriphDisableDivider+0xc>
             _VAL2FLD(CY_PERI_DIV_CMD_TYPE_SEL, dividerType) |
1000527c:	4b09      	ldr	r3, [pc, #36]	@ (100052a4 <Cy_SysClk_PeriphDisableDivider+0x4c>)
1000527e:	681b      	ldr	r3, [r3, #0]
10005280:	f893 4079 	ldrb.w	r4, [r3, #121]	@ 0x79
            PERI_DIV_CMD = PERI_DIV_CMD_DISABLE_Msk          |
10005284:	689a      	ldr	r2, [r3, #8]
             _VAL2FLD(CY_PERI_DIV_CMD_DIV_SEL,  dividerNum);
10005286:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
             _VAL2FLD(CY_PERI_DIV_CMD_TYPE_SEL, dividerType) |
1000528a:	f000 0003 	and.w	r0, r0, #3
1000528e:	40a0      	lsls	r0, r4
             _VAL2FLD(CY_PERI_DIV_CMD_DIV_SEL,  dividerNum);
10005290:	400b      	ands	r3, r1
             _VAL2FLD(CY_PERI_DIV_CMD_TYPE_SEL, dividerType) |
10005292:	4318      	orrs	r0, r3
10005294:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
            PERI_DIV_CMD = PERI_DIV_CMD_DISABLE_Msk          |
10005298:	f8c2 0400 	str.w	r0, [r2, #1024]	@ 0x400
1000529c:	2000      	movs	r0, #0
}
1000529e:	bd10      	pop	{r4, pc}
100052a0:	004a0001 	.word	0x004a0001
100052a4:	08002c40 	.word	0x08002c40

100052a8 <Cy_SysClk_ClkSlowSetDivider>:
{
#if defined (CY_DEVICE_SECURE)
    CY_PRA_FUNCTION_CALL_VOID_PARAM(CY_PRA_MSG_TYPE_FUNC_POLICY, CY_PRA_CLK_FUNC_SLOW_SET_DIVIDER, divider);
#endif /* defined (CY_DEVICE_SECURE) */
#if ((CY_CPU_CORTEX_M0P) || (!defined(CY_DEVICE_SECURE)))
    CY_REG32_CLR_SET(CPUSS_CM0_CLOCK_CTL, CPUSS_CM0_CLOCK_CTL_SLOW_INT_DIV, divider);
100052a8:	4b05      	ldr	r3, [pc, #20]	@ (100052c0 <Cy_SysClk_ClkSlowSetDivider+0x18>)
100052aa:	681b      	ldr	r3, [r3, #0]
100052ac:	6819      	ldr	r1, [r3, #0]
100052ae:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
100052b2:	588b      	ldr	r3, [r1, r2]
100052b4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
100052b8:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
100052bc:	5088      	str	r0, [r1, r2]
#endif /* ((CY_CPU_CORTEX_M0P) || (!defined(CY_DEVICE_SECURE))) */
}
100052be:	4770      	bx	lr
100052c0:	08002c40 	.word	0x08002c40

100052c4 <Cy_SysClk_ClkSlowGetDivider>:


uint8_t Cy_SysClk_ClkSlowGetDivider(void)
{
    return ((uint8_t)_FLD2VAL(CPUSS_CM0_CLOCK_CTL_SLOW_INT_DIV, CPUSS_CM0_CLOCK_CTL));
100052c4:	4b04      	ldr	r3, [pc, #16]	@ (100052d8 <Cy_SysClk_ClkSlowGetDivider+0x14>)
100052c6:	681b      	ldr	r3, [r3, #0]
100052c8:	681a      	ldr	r2, [r3, #0]
100052ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
100052ce:	58d0      	ldr	r0, [r2, r3]
}
100052d0:	f3c0 2007 	ubfx	r0, r0, #8, #8
100052d4:	4770      	bx	lr
100052d6:	bf00      	nop
100052d8:	08002c40 	.word	0x08002c40

100052dc <Cy_SysClk_ClkBakSetSource>:
        CY_ASSERT_L1(false);
    }
#endif /* defined (CY_DEVICE_SECURE) */
#if ((CY_CPU_CORTEX_M0P) || (!defined(CY_DEVICE_SECURE)))
    CY_ASSERT_L3(source <= CY_SYSCLK_BAK_IN_CLKLF);
    CY_REG32_CLR_SET(BACKUP_CTL, BACKUP_CTL_CLK_SEL, source);
100052dc:	4a04      	ldr	r2, [pc, #16]	@ (100052f0 <Cy_SysClk_ClkBakSetSource+0x14>)
100052de:	6813      	ldr	r3, [r2, #0]
100052e0:	0200      	lsls	r0, r0, #8
100052e2:	f400 7040 	and.w	r0, r0, #768	@ 0x300
100052e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
100052ea:	4318      	orrs	r0, r3
100052ec:	6010      	str	r0, [r2, #0]
#endif /* ((CY_CPU_CORTEX_M0P) || (!defined(CY_DEVICE_SECURE))) */
}
100052ee:	4770      	bx	lr
100052f0:	40270000 	.word	0x40270000

100052f4 <Cy_SysClk_ClkTimerSetSource>:
    }
#endif /* defined (CY_DEVICE_SECURE) */
#if ((CY_CPU_CORTEX_M0P) || (!defined(CY_DEVICE_SECURE)))
    CY_ASSERT_L3(source <= CY_SYSCLK_CLKTIMER_IN_HF0_DIV8);
    /* set both fields TIMER_SEL and TIMER_HF0_DIV with the same input value */
    CY_REG32_CLR_SET(SRSS_CLK_TIMER_CTL, CY_SRSS_CLK_TIMER_CTL_TIMER, source);
100052f4:	4a07      	ldr	r2, [pc, #28]	@ (10005314 <Cy_SysClk_ClkTimerSetSource+0x20>)
100052f6:	f8d2 3504 	ldr.w	r3, [r2, #1284]	@ 0x504
100052fa:	f020 00fe 	bic.w	r0, r0, #254	@ 0xfe
100052fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
10005302:	0580      	lsls	r0, r0, #22
10005304:	f023 0301 	bic.w	r3, r3, #1
10005308:	0d80      	lsrs	r0, r0, #22
1000530a:	4303      	orrs	r3, r0
1000530c:	f8c2 3504 	str.w	r3, [r2, #1284]	@ 0x504
#endif /* ((CY_CPU_CORTEX_M0P) || (!defined(CY_DEVICE_SECURE))) */
}
10005310:	4770      	bx	lr
10005312:	bf00      	nop
10005314:	40260000 	.word	0x40260000

10005318 <Cy_SysClk_ClkTimerSetDivider>:
    {
        CY_ASSERT_L1(false);
    }
#endif /* defined (CY_DEVICE_SECURE) */
#if ((CY_CPU_CORTEX_M0P) || (!defined(CY_DEVICE_SECURE)))
    CY_REG32_CLR_SET(SRSS_CLK_TIMER_CTL, SRSS_CLK_TIMER_CTL_TIMER_DIV, divider);
10005318:	4a04      	ldr	r2, [pc, #16]	@ (1000532c <Cy_SysClk_ClkTimerSetDivider+0x14>)
1000531a:	f8d2 3504 	ldr.w	r3, [r2, #1284]	@ 0x504
1000531e:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
10005322:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
10005326:	f8c2 0504 	str.w	r0, [r2, #1284]	@ 0x504
#endif /* ((CY_CPU_CORTEX_M0P) || (!defined(CY_DEVICE_SECURE))) */
}
1000532a:	4770      	bx	lr
1000532c:	40260000 	.word	0x40260000

10005330 <Cy_SysClk_ClkTimerEnable>:
    {
        CY_ASSERT_L1(false);
    }
#endif /* defined (CY_DEVICE_SECURE) */
#if ((CY_CPU_CORTEX_M0P) || (!defined(CY_DEVICE_SECURE)))
    SRSS_CLK_TIMER_CTL |= SRSS_CLK_TIMER_CTL_ENABLE_Msk;
10005330:	4a03      	ldr	r2, [pc, #12]	@ (10005340 <Cy_SysClk_ClkTimerEnable+0x10>)
10005332:	f8d2 3504 	ldr.w	r3, [r2, #1284]	@ 0x504
10005336:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
1000533a:	f8c2 3504 	str.w	r3, [r2, #1284]	@ 0x504
#endif /* ((CY_CPU_CORTEX_M0P) || (!defined(CY_DEVICE_SECURE))) */
}
1000533e:	4770      	bx	lr
10005340:	40260000 	.word	0x40260000

10005344 <Cy_SysClk_ClkTimerDisable>:
    {
        CY_ASSERT_L1(false);
    }
#endif /* defined (CY_DEVICE_SECURE) */
#if ((CY_CPU_CORTEX_M0P) || (!defined(CY_DEVICE_SECURE)))
    SRSS_CLK_TIMER_CTL &= ~SRSS_CLK_TIMER_CTL_ENABLE_Msk;
10005344:	4a03      	ldr	r2, [pc, #12]	@ (10005354 <Cy_SysClk_ClkTimerDisable+0x10>)
10005346:	f8d2 3504 	ldr.w	r3, [r2, #1284]	@ 0x504
1000534a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
1000534e:	f8c2 3504 	str.w	r3, [r2, #1284]	@ 0x504
#endif /* ((CY_CPU_CORTEX_M0P) || (!defined(CY_DEVICE_SECURE))) */
}
10005352:	4770      	bx	lr
10005354:	40260000 	.word	0x40260000

10005358 <Cy_SysClk_ClkLfSetSource>:
        CY_ASSERT_L1(false);
    }
#endif /* defined (CY_DEVICE_SECURE) */
#if ((CY_CPU_CORTEX_M0P) || (!defined(CY_DEVICE_SECURE)))
    CY_ASSERT_L3(source <= CY_SYSCLK_CLKLF_IN_PILO);
    CY_REG32_CLR_SET(SRSS_CLK_SELECT, SRSS_CLK_SELECT_LFCLK_SEL, source);
10005358:	4a05      	ldr	r2, [pc, #20]	@ (10005370 <Cy_SysClk_ClkLfSetSource+0x18>)
1000535a:	f8d2 3500 	ldr.w	r3, [r2, #1280]	@ 0x500
1000535e:	f000 0003 	and.w	r0, r0, #3
10005362:	f023 0303 	bic.w	r3, r3, #3
10005366:	4303      	orrs	r3, r0
10005368:	f8c2 3500 	str.w	r3, [r2, #1280]	@ 0x500
#endif /* ((CY_CPU_CORTEX_M0P) || (!defined(CY_DEVICE_SECURE))) */
}
1000536c:	4770      	bx	lr
1000536e:	bf00      	nop
10005370:	40260000 	.word	0x40260000

10005374 <Cy_SysClk_ClkPeriSetDivider>:
    {
        CY_ASSERT_L1(false);
    }
#endif /* defined (CY_DEVICE_SECURE) */
#if ((CY_CPU_CORTEX_M0P) || (!defined(CY_DEVICE_SECURE)))
    CY_REG32_CLR_SET(CPUSS_CM0_CLOCK_CTL, CPUSS_CM0_CLOCK_CTL_PERI_INT_DIV, divider);
10005374:	4b05      	ldr	r3, [pc, #20]	@ (1000538c <Cy_SysClk_ClkPeriSetDivider+0x18>)
10005376:	681b      	ldr	r3, [r3, #0]
10005378:	6819      	ldr	r1, [r3, #0]
1000537a:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
1000537e:	588b      	ldr	r3, [r1, r2]
10005380:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
10005384:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
10005388:	5088      	str	r0, [r1, r2]
#endif /* ((CY_CPU_CORTEX_M0P) || (!defined(CY_DEVICE_SECURE))) */
}
1000538a:	4770      	bx	lr
1000538c:	08002c40 	.word	0x08002c40

10005390 <Cy_SysClk_ClkPeriGetDivider>:


uint8_t Cy_SysClk_ClkPeriGetDivider(void)
{
    return ((uint8_t)_FLD2VAL(CPUSS_CM0_CLOCK_CTL_PERI_INT_DIV, CPUSS_CM0_CLOCK_CTL));
10005390:	4b03      	ldr	r3, [pc, #12]	@ (100053a0 <Cy_SysClk_ClkPeriGetDivider+0x10>)
10005392:	681b      	ldr	r3, [r3, #0]
10005394:	681a      	ldr	r2, [r3, #0]
10005396:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
1000539a:	58d0      	ldr	r0, [r2, r3]
}
1000539c:	0e00      	lsrs	r0, r0, #24
1000539e:	4770      	bx	lr
100053a0:	08002c40 	.word	0x08002c40

100053a4 <Cy_SysClk_ClkFastSetDivider>:
    {
        CY_ASSERT_L1(false);
    }
#endif /* defined (CY_DEVICE_SECURE) */
#if ((CY_CPU_CORTEX_M0P) || (!defined(CY_DEVICE_SECURE)))
    CY_REG32_CLR_SET(CPUSS_CM4_CLOCK_CTL, CPUSS_CM4_CLOCK_CTL_FAST_INT_DIV, divider);
100053a4:	4b05      	ldr	r3, [pc, #20]	@ (100053bc <Cy_SysClk_ClkFastSetDivider+0x18>)
100053a6:	681b      	ldr	r3, [r3, #0]
100053a8:	6819      	ldr	r1, [r3, #0]
100053aa:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
100053ae:	588b      	ldr	r3, [r1, r2]
100053b0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
100053b4:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
100053b8:	5088      	str	r0, [r1, r2]
#endif /* ((CY_CPU_CORTEX_M0P) || (!defined(CY_DEVICE_SECURE))) */
}
100053ba:	4770      	bx	lr
100053bc:	08002c40 	.word	0x08002c40

100053c0 <Cy_SysClk_ClkFastGetDivider>:


uint8_t Cy_SysClk_ClkFastGetDivider(void)
{
    return ((uint8_t)_FLD2VAL(CPUSS_CM4_CLOCK_CTL_FAST_INT_DIV, CPUSS_CM4_CLOCK_CTL));
100053c0:	4b04      	ldr	r3, [pc, #16]	@ (100053d4 <Cy_SysClk_ClkFastGetDivider+0x14>)
100053c2:	681b      	ldr	r3, [r3, #0]
100053c4:	681a      	ldr	r2, [r3, #0]
100053c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
100053ca:	58d0      	ldr	r0, [r2, r3]
}
100053cc:	f3c0 2007 	ubfx	r0, r0, #8, #8
100053d0:	4770      	bx	lr
100053d2:	bf00      	nop
100053d4:	08002c40 	.word	0x08002c40

100053d8 <Cy_SysClk_ClkHfEnable>:


cy_en_sysclk_status_t Cy_SysClk_ClkHfEnable(uint32_t clkHf)
{
    cy_en_sysclk_status_t retVal = CY_SYSCLK_BAD_PARAM;
    if (clkHf < CY_SRSS_NUM_HFROOT)
100053d8:	4b0a      	ldr	r3, [pc, #40]	@ (10005404 <Cy_SysClk_ClkHfEnable+0x2c>)
100053da:	681b      	ldr	r3, [r3, #0]
100053dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
100053e0:	4283      	cmp	r3, r0
    {
#if defined (CY_DEVICE_SECURE)
        retVal = (cy_en_sysclk_status_t)CY_PRA_FUNCTION_CALL_RETURN_PARAM(CY_PRA_MSG_TYPE_FUNC_POLICY, CY_PRA_CLK_FUNC_HF_ENABLE, clkHf);
#endif /* defined (CY_DEVICE_SECURE) */
#if ((CY_CPU_CORTEX_M0P) || (!defined(CY_DEVICE_SECURE)))
        SRSS_CLK_ROOT_SELECT[clkHf] |= SRSS_CLK_ROOT_SELECT_ENABLE_Msk;
100053e2:	bf81      	itttt	hi
100053e4:	0080      	lslhi	r0, r0, #2
100053e6:	f100 4080 	addhi.w	r0, r0, #1073741824	@ 0x40000000
100053ea:	f500 1018 	addhi.w	r0, r0, #2490368	@ 0x260000
100053ee:	f8d0 3380 	ldrhi.w	r3, [r0, #896]	@ 0x380
100053f2:	bf83      	ittte	hi
100053f4:	f043 4300 	orrhi.w	r3, r3, #2147483648	@ 0x80000000
100053f8:	f8c0 3380 	strhi.w	r3, [r0, #896]	@ 0x380
        retVal = CY_SYSCLK_SUCCESS;
100053fc:	2000      	movhi	r0, #0
    cy_en_sysclk_status_t retVal = CY_SYSCLK_BAD_PARAM;
100053fe:	4802      	ldrls	r0, [pc, #8]	@ (10005408 <Cy_SysClk_ClkHfEnable+0x30>)
#endif /* ((CY_CPU_CORTEX_M0P) || (!defined(CY_DEVICE_SECURE))) */
    }
    return (retVal);
}
10005400:	4770      	bx	lr
10005402:	bf00      	nop
10005404:	08002c40 	.word	0x08002c40
10005408:	004a0001 	.word	0x004a0001

1000540c <Cy_SysClk_ClkHfIsEnabled>:


bool Cy_SysClk_ClkHfIsEnabled(uint32_t clkHf)
{
    bool retVal = false;
    if (clkHf < CY_SRSS_NUM_HFROOT)
1000540c:	4b06      	ldr	r3, [pc, #24]	@ (10005428 <Cy_SysClk_ClkHfIsEnabled+0x1c>)
1000540e:	681b      	ldr	r3, [r3, #0]
10005410:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
10005414:	4283      	cmp	r3, r0
    {
        retVal = _FLD2BOOL(SRSS_CLK_ROOT_SELECT_ENABLE, SRSS_CLK_ROOT_SELECT[clkHf]);
10005416:	bf81      	itttt	hi
10005418:	30e0      	addhi	r0, #224	@ 0xe0
1000541a:	4b04      	ldrhi	r3, [pc, #16]	@ (1000542c <Cy_SysClk_ClkHfIsEnabled+0x20>)
1000541c:	f853 0020 	ldrhi.w	r0, [r3, r0, lsl #2]
10005420:	0fc0      	lsrhi	r0, r0, #31
    bool retVal = false;
10005422:	bf98      	it	ls
10005424:	2000      	movls	r0, #0
    }
    return (retVal);
}
10005426:	4770      	bx	lr
10005428:	08002c40 	.word	0x08002c40
1000542c:	40260000 	.word	0x40260000

10005430 <Cy_SysClk_ClkHfDisable>:


cy_en_sysclk_status_t Cy_SysClk_ClkHfDisable(uint32_t clkHf)
{
    cy_en_sysclk_status_t retVal = CY_SYSCLK_BAD_PARAM;
    if ((0UL < clkHf) /* prevent CLK_HF0 disabling */
10005430:	b190      	cbz	r0, 10005458 <Cy_SysClk_ClkHfDisable+0x28>
           && (clkHf < CY_SRSS_NUM_HFROOT))
10005432:	4b0a      	ldr	r3, [pc, #40]	@ (1000545c <Cy_SysClk_ClkHfDisable+0x2c>)
10005434:	681b      	ldr	r3, [r3, #0]
10005436:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
1000543a:	4283      	cmp	r3, r0
1000543c:	d90c      	bls.n	10005458 <Cy_SysClk_ClkHfDisable+0x28>
    {
#if defined (CY_DEVICE_SECURE)
        retVal = (cy_en_sysclk_status_t)CY_PRA_FUNCTION_CALL_RETURN_PARAM(CY_PRA_MSG_TYPE_FUNC_POLICY, CY_PRA_CLK_FUNC_HF_DISABLE, clkHf);
#endif /* defined (CY_DEVICE_SECURE) */
#if ((CY_CPU_CORTEX_M0P) || (!defined(CY_DEVICE_SECURE)))
        SRSS_CLK_ROOT_SELECT[clkHf] &= ~SRSS_CLK_ROOT_SELECT_ENABLE_Msk;
1000543e:	0080      	lsls	r0, r0, #2
10005440:	f100 4080 	add.w	r0, r0, #1073741824	@ 0x40000000
10005444:	f500 1018 	add.w	r0, r0, #2490368	@ 0x260000
10005448:	f8d0 3380 	ldr.w	r3, [r0, #896]	@ 0x380
1000544c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
10005450:	f8c0 3380 	str.w	r3, [r0, #896]	@ 0x380
        retVal = CY_SYSCLK_SUCCESS;
10005454:	2000      	movs	r0, #0
10005456:	4770      	bx	lr
    cy_en_sysclk_status_t retVal = CY_SYSCLK_BAD_PARAM;
10005458:	4801      	ldr	r0, [pc, #4]	@ (10005460 <Cy_SysClk_ClkHfDisable+0x30>)
#endif /* ((CY_CPU_CORTEX_M0P) || (!defined(CY_DEVICE_SECURE))) */
    }
    return (retVal);
}
1000545a:	4770      	bx	lr
1000545c:	08002c40 	.word	0x08002c40
10005460:	004a0001 	.word	0x004a0001

10005464 <Cy_SysClk_ClkHfSetSource>:


cy_en_sysclk_status_t Cy_SysClk_ClkHfSetSource(uint32_t clkHf, cy_en_clkhf_in_sources_t source)
{
    cy_en_sysclk_status_t retVal = CY_SYSCLK_BAD_PARAM;
    if ((clkHf < CY_SRSS_NUM_HFROOT) && (source <= CY_SYSCLK_CLKHF_IN_CLKPATH15))
10005464:	4b0b      	ldr	r3, [pc, #44]	@ (10005494 <Cy_SysClk_ClkHfSetSource+0x30>)
10005466:	681b      	ldr	r3, [r3, #0]
10005468:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
1000546c:	4283      	cmp	r3, r0
1000546e:	d90f      	bls.n	10005490 <Cy_SysClk_ClkHfSetSource+0x2c>
10005470:	290f      	cmp	r1, #15
10005472:	d80d      	bhi.n	10005490 <Cy_SysClk_ClkHfSetSource+0x2c>
        set_source.clkHf = clkHf;
        set_source.source = source;
        retVal = (cy_en_sysclk_status_t)CY_PRA_FUNCTION_CALL_RETURN_PARAM(CY_PRA_MSG_TYPE_FUNC_POLICY, CY_PRA_CLK_FUNC_HF_SET_SOURCE, &set_source);
#endif /* defined (CY_DEVICE_SECURE) */
#if ((CY_CPU_CORTEX_M0P) || (!defined(CY_DEVICE_SECURE)))
        CY_REG32_CLR_SET(SRSS_CLK_ROOT_SELECT[clkHf], SRSS_CLK_ROOT_SELECT_ROOT_MUX, source);
10005474:	0080      	lsls	r0, r0, #2
10005476:	f100 4080 	add.w	r0, r0, #1073741824	@ 0x40000000
1000547a:	f500 1018 	add.w	r0, r0, #2490368	@ 0x260000
1000547e:	f8d0 3380 	ldr.w	r3, [r0, #896]	@ 0x380
10005482:	f023 030f 	bic.w	r3, r3, #15
10005486:	4319      	orrs	r1, r3
10005488:	f8c0 1380 	str.w	r1, [r0, #896]	@ 0x380
        retVal = CY_SYSCLK_SUCCESS;
1000548c:	2000      	movs	r0, #0
1000548e:	4770      	bx	lr
    cy_en_sysclk_status_t retVal = CY_SYSCLK_BAD_PARAM;
10005490:	4801      	ldr	r0, [pc, #4]	@ (10005498 <Cy_SysClk_ClkHfSetSource+0x34>)
#endif /* ((CY_CPU_CORTEX_M0P) || (!defined(CY_DEVICE_SECURE))) */
    }
    return (retVal);
}
10005492:	4770      	bx	lr
10005494:	08002c40 	.word	0x08002c40
10005498:	004a0001 	.word	0x004a0001

1000549c <Cy_SysClk_ClkHfGetSource>:


cy_en_clkhf_in_sources_t Cy_SysClk_ClkHfGetSource(uint32_t clkHf)
{
    CY_ASSERT_L1(clkHf < CY_SRSS_NUM_HFROOT);
    return ((cy_en_clkhf_in_sources_t)((uint32_t)(_FLD2VAL(SRSS_CLK_ROOT_SELECT_ROOT_MUX, SRSS_CLK_ROOT_SELECT[clkHf]))));
1000549c:	4b03      	ldr	r3, [pc, #12]	@ (100054ac <Cy_SysClk_ClkHfGetSource+0x10>)
1000549e:	30e0      	adds	r0, #224	@ 0xe0
100054a0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
100054a4:	f000 000f 	and.w	r0, r0, #15
100054a8:	4770      	bx	lr
100054aa:	bf00      	nop
100054ac:	40260000 	.word	0x40260000

100054b0 <Cy_SysClk_ClkHfSetDivider>:


cy_en_sysclk_status_t Cy_SysClk_ClkHfSetDivider(uint32_t clkHf, cy_en_clkhf_dividers_t divider)
{
    cy_en_sysclk_status_t retVal = CY_SYSCLK_BAD_PARAM;
    if ((clkHf < CY_SRSS_NUM_HFROOT) && (divider <= CY_SYSCLK_CLKHF_DIVIDE_BY_8))
100054b0:	4b0c      	ldr	r3, [pc, #48]	@ (100054e4 <Cy_SysClk_ClkHfSetDivider+0x34>)
100054b2:	681b      	ldr	r3, [r3, #0]
100054b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
100054b8:	4283      	cmp	r3, r0
100054ba:	d910      	bls.n	100054de <Cy_SysClk_ClkHfSetDivider+0x2e>
100054bc:	2903      	cmp	r1, #3
100054be:	d80e      	bhi.n	100054de <Cy_SysClk_ClkHfSetDivider+0x2e>
        set_divider.clkHf = clkHf;
        set_divider.divider = divider;
        retVal = (cy_en_sysclk_status_t)CY_PRA_FUNCTION_CALL_RETURN_PARAM(CY_PRA_MSG_TYPE_FUNC_POLICY, CY_PRA_CLK_FUNC_HF_SET_DIVIDER, &set_divider);
#endif /* defined (CY_DEVICE_SECURE) */
#if ((CY_CPU_CORTEX_M0P) || (!defined(CY_DEVICE_SECURE)))
        CY_REG32_CLR_SET(SRSS_CLK_ROOT_SELECT[clkHf], SRSS_CLK_ROOT_SELECT_ROOT_DIV, divider);
100054c0:	0080      	lsls	r0, r0, #2
100054c2:	f100 4080 	add.w	r0, r0, #1073741824	@ 0x40000000
100054c6:	f500 1018 	add.w	r0, r0, #2490368	@ 0x260000
100054ca:	f8d0 3380 	ldr.w	r3, [r0, #896]	@ 0x380
100054ce:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
100054d2:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
100054d6:	f8c0 1380 	str.w	r1, [r0, #896]	@ 0x380
        retVal = CY_SYSCLK_SUCCESS;
100054da:	2000      	movs	r0, #0
100054dc:	4770      	bx	lr
    cy_en_sysclk_status_t retVal = CY_SYSCLK_BAD_PARAM;
100054de:	4802      	ldr	r0, [pc, #8]	@ (100054e8 <Cy_SysClk_ClkHfSetDivider+0x38>)
#endif /* ((CY_CPU_CORTEX_M0P) || (!defined(CY_DEVICE_SECURE))) */
    }
    return (retVal);
}
100054e0:	4770      	bx	lr
100054e2:	bf00      	nop
100054e4:	08002c40 	.word	0x08002c40
100054e8:	004a0001 	.word	0x004a0001

100054ec <Cy_SysClk_ClkHfGetDivider>:


cy_en_clkhf_dividers_t Cy_SysClk_ClkHfGetDivider(uint32_t clkHf)
{
    CY_ASSERT_L1(clkHf < CY_SRSS_NUM_HFROOT);
    return ((cy_en_clkhf_dividers_t)(((uint32_t)_FLD2VAL(SRSS_CLK_ROOT_SELECT_ROOT_DIV, SRSS_CLK_ROOT_SELECT[clkHf]))));
100054ec:	4b03      	ldr	r3, [pc, #12]	@ (100054fc <Cy_SysClk_ClkHfGetDivider+0x10>)
100054ee:	30e0      	adds	r0, #224	@ 0xe0
100054f0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
100054f4:	f3c0 1001 	ubfx	r0, r0, #4, #2
100054f8:	4770      	bx	lr
100054fa:	bf00      	nop
100054fc:	40260000 	.word	0x40260000

10005500 <Cy_SysClk_WcoOkay>:
}


bool Cy_SysClk_WcoOkay(void)
{
    return (_FLD2BOOL(BACKUP_STATUS_WCO_OK, BACKUP_STATUS));
10005500:	4b02      	ldr	r3, [pc, #8]	@ (1000550c <Cy_SysClk_WcoOkay+0xc>)
10005502:	6918      	ldr	r0, [r3, #16]
}
10005504:	f3c0 0080 	ubfx	r0, r0, #2, #1
10005508:	4770      	bx	lr
1000550a:	bf00      	nop
1000550c:	40270000 	.word	0x40270000

10005510 <Cy_SysClk_WcoEnable>:
    BACKUP_CTL |= BACKUP_CTL_WCO_EN_Msk;
10005510:	4a0b      	ldr	r2, [pc, #44]	@ (10005540 <Cy_SysClk_WcoEnable+0x30>)
10005512:	6813      	ldr	r3, [r2, #0]
10005514:	f043 0308 	orr.w	r3, r3, #8
{
10005518:	b510      	push	{r4, lr}
1000551a:	4604      	mov	r4, r0
    BACKUP_CTL |= BACKUP_CTL_WCO_EN_Msk;
1000551c:	6013      	str	r3, [r2, #0]
    while((Cy_SysClk_WcoOkay() == false) && (0UL != timeoutus))
1000551e:	f7ff ffef 	bl	10005500 <Cy_SysClk_WcoOkay>
10005522:	b938      	cbnz	r0, 10005534 <Cy_SysClk_WcoEnable+0x24>
10005524:	b90c      	cbnz	r4, 1000552a <Cy_SysClk_WcoEnable+0x1a>
    retVal = CY_SYSCLK_TIMEOUT;
10005526:	4807      	ldr	r0, [pc, #28]	@ (10005544 <Cy_SysClk_WcoEnable+0x34>)
}
10005528:	bd10      	pop	{r4, pc}
        Cy_SysLib_DelayUs(1U);
1000552a:	2001      	movs	r0, #1
1000552c:	f000 fc8c 	bl	10005e48 <Cy_SysLib_DelayUs>
        timeoutus--;
10005530:	3c01      	subs	r4, #1
10005532:	e7f4      	b.n	1000551e <Cy_SysClk_WcoEnable+0xe>
        retVal = CY_SYSCLK_SUCCESS;
10005534:	2c00      	cmp	r4, #0
10005536:	4803      	ldr	r0, [pc, #12]	@ (10005544 <Cy_SysClk_WcoEnable+0x34>)
10005538:	bf18      	it	ne
1000553a:	2000      	movne	r0, #0
1000553c:	e7f4      	b.n	10005528 <Cy_SysClk_WcoEnable+0x18>
1000553e:	bf00      	nop
10005540:	40270000 	.word	0x40270000
10005544:	004a0002 	.word	0x004a0002

10005548 <Cy_SysClk_IloEnable>:
    {
        CY_ASSERT_L1(false);
    }
#endif /* defined (CY_DEVICE_SECURE) */
#if ((CY_CPU_CORTEX_M0P) || (!defined(CY_DEVICE_SECURE)))
    SRSS_CLK_ILO_CONFIG |= SRSS_CLK_ILO_CONFIG_ENABLE_Msk;
10005548:	4a03      	ldr	r2, [pc, #12]	@ (10005558 <Cy_SysClk_IloEnable+0x10>)
1000554a:	f8d2 350c 	ldr.w	r3, [r2, #1292]	@ 0x50c
1000554e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
10005552:	f8c2 350c 	str.w	r3, [r2, #1292]	@ 0x50c
#endif /* ((CY_CPU_CORTEX_M0P) || (!defined(CY_DEVICE_SECURE))) */
}
10005556:	4770      	bx	lr
10005558:	40260000 	.word	0x40260000

1000555c <Cy_SysClk_IloDisable>:
    retVal = (cy_en_sysclk_status_t)CY_PRA_FUNCTION_CALL_RETURN_PARAM(CY_PRA_MSG_TYPE_FUNC_POLICY, CY_PRA_CLK_FUNC_ILO_DISABLE, 0UL);

#endif /* defined (CY_DEVICE_SECURE) */
#if ((CY_CPU_CORTEX_M0P) || (!defined(CY_DEVICE_SECURE)))
    retVal = CY_SYSCLK_INVALID_STATE;
    if (!_FLD2BOOL(SRSS_WDT_CTL_WDT_EN, SRSS_WDT_CTL)) /* if disabled */
1000555c:	4b06      	ldr	r3, [pc, #24]	@ (10005578 <Cy_SysClk_IloDisable+0x1c>)
1000555e:	f8d3 0180 	ldr.w	r0, [r3, #384]	@ 0x180
10005562:	f010 0001 	ands.w	r0, r0, #1
    {
        SRSS_CLK_ILO_CONFIG &= ~SRSS_CLK_ILO_CONFIG_ENABLE_Msk;
10005566:	bf09      	itett	eq
10005568:	f8d3 250c 	ldreq.w	r2, [r3, #1292]	@ 0x50c
    retVal = CY_SYSCLK_INVALID_STATE;
1000556c:	4803      	ldrne	r0, [pc, #12]	@ (1000557c <Cy_SysClk_IloDisable+0x20>)
        SRSS_CLK_ILO_CONFIG &= ~SRSS_CLK_ILO_CONFIG_ENABLE_Msk;
1000556e:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
10005572:	f8c3 250c 	streq.w	r2, [r3, #1292]	@ 0x50c
        retVal = CY_SYSCLK_SUCCESS;
    }
#endif /* ((CY_CPU_CORTEX_M0P) || (!defined(CY_DEVICE_SECURE))) */
    return (retVal);
}
10005576:	4770      	bx	lr
10005578:	40260000 	.word	0x40260000
1000557c:	004a0003 	.word	0x004a0003

10005580 <Cy_SysClk_IloHibernateOn>:
    {
        CY_ASSERT_L1(false);
    }
#endif /* defined (CY_DEVICE_SECURE) */
#if ((CY_CPU_CORTEX_M0P) || (!defined(CY_DEVICE_SECURE)))
    CY_REG32_CLR_SET(SRSS_CLK_ILO_CONFIG, SRSS_CLK_ILO_CONFIG_ILO_BACKUP, ((on) ? 1UL : 0UL));
10005580:	4a04      	ldr	r2, [pc, #16]	@ (10005594 <Cy_SysClk_IloHibernateOn+0x14>)
10005582:	f8d2 350c 	ldr.w	r3, [r2, #1292]	@ 0x50c
10005586:	f023 0301 	bic.w	r3, r3, #1
1000558a:	4318      	orrs	r0, r3
1000558c:	f8c2 050c 	str.w	r0, [r2, #1292]	@ 0x50c
#endif /* ((CY_CPU_CORTEX_M0P) || (!defined(CY_DEVICE_SECURE))) */
}
10005590:	4770      	bx	lr
10005592:	bf00      	nop
10005594:	40260000 	.word	0x40260000

10005598 <Cy_SysClk_EcoGetStatus>:


uint32_t Cy_SysClk_EcoGetStatus(void)
{
    /* if ECO is not ready, just report the ECO_OK bit. Otherwise report 2 = ECO ready */
    return ((SRSS_CLK_ECO_STATUS_Msk == (SRSS_CLK_ECO_STATUS_Msk & SRSS_CLK_ECO_STATUS)) ?
10005598:	4a06      	ldr	r2, [pc, #24]	@ (100055b4 <Cy_SysClk_EcoGetStatus+0x1c>)
1000559a:	f8d2 3530 	ldr.w	r3, [r2, #1328]	@ 0x530
1000559e:	f003 0303 	and.w	r3, r3, #3
      CY_SYSCLK_ECOSTAT_STABLE : (SRSS_CLK_ECO_STATUS_ECO_OK_Msk & SRSS_CLK_ECO_STATUS));
100055a2:	2b03      	cmp	r3, #3
100055a4:	bf1a      	itte	ne
100055a6:	f8d2 0530 	ldrne.w	r0, [r2, #1328]	@ 0x530
100055aa:	f000 0001 	andne.w	r0, r0, #1
100055ae:	2002      	moveq	r0, #2
}
100055b0:	4770      	bx	lr
100055b2:	bf00      	nop
100055b4:	40260000 	.word	0x40260000

100055b8 <Cy_SysClk_EcoGetFrequency>:
    return (retVal);
}


uint32_t Cy_SysClk_EcoGetFrequency(void)
{
100055b8:	b508      	push	{r3, lr}
    return ((CY_SYSCLK_ECOSTAT_STABLE == Cy_SysClk_EcoGetStatus()) ? ecoFrequency : 0UL);
100055ba:	f7ff ffed 	bl	10005598 <Cy_SysClk_EcoGetStatus>
100055be:	2802      	cmp	r0, #2
100055c0:	bf0a      	itet	eq
100055c2:	4b02      	ldreq	r3, [pc, #8]	@ (100055cc <Cy_SysClk_EcoGetFrequency+0x14>)
100055c4:	2000      	movne	r0, #0
100055c6:	6818      	ldreq	r0, [r3, #0]
}
100055c8:	bd08      	pop	{r3, pc}
100055ca:	bf00      	nop
100055cc:	08002c68 	.word	0x08002c68

100055d0 <Cy_SysClk_ClkPathSetSource>:


cy_en_sysclk_status_t Cy_SysClk_ClkPathSetSource(uint32_t clkPath, cy_en_clkpath_in_sources_t source)
{
    cy_en_sysclk_status_t retVal = CY_SYSCLK_BAD_PARAM;
    if ((clkPath < CY_SRSS_NUM_CLKPATH) &&
100055d0:	4b10      	ldr	r3, [pc, #64]	@ (10005614 <Cy_SysClk_ClkPathSetSource+0x44>)
100055d2:	681b      	ldr	r3, [r3, #0]
100055d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
100055d8:	4283      	cmp	r3, r0
100055da:	d918      	bls.n	1000560e <Cy_SysClk_ClkPathSetSource+0x3e>
100055dc:	2904      	cmp	r1, #4
100055de:	d911      	bls.n	10005604 <Cy_SysClk_ClkPathSetSource+0x34>
        ((source <= CY_SYSCLK_CLKPATH_IN_DSIMUX) ||
100055e0:	f5a1 7380 	sub.w	r3, r1, #256	@ 0x100
100055e4:	2b13      	cmp	r3, #19
100055e6:	d812      	bhi.n	1000560e <Cy_SysClk_ClkPathSetSource+0x3e>
#endif /* defined (CY_DEVICE_SECURE) */
#if ((CY_CPU_CORTEX_M0P) || (!defined(CY_DEVICE_SECURE)))

        if (source >= CY_SYSCLK_CLKPATH_IN_DSI)
        {
            SRSS_CLK_DSI_SELECT[clkPath] = _VAL2FLD(SRSS_CLK_DSI_SELECT_DSI_MUX, (uint32_t)source);
100055e8:	0080      	lsls	r0, r0, #2
100055ea:	f100 4080 	add.w	r0, r0, #1073741824	@ 0x40000000
100055ee:	f500 1018 	add.w	r0, r0, #2490368	@ 0x260000
100055f2:	f001 011f 	and.w	r1, r1, #31
            SRSS_CLK_PATH_SELECT[clkPath] = _VAL2FLD(SRSS_CLK_PATH_SELECT_PATH_MUX, (uint32_t)CY_SYSCLK_CLKPATH_IN_DSIMUX);
100055f6:	2304      	movs	r3, #4
            SRSS_CLK_DSI_SELECT[clkPath] = _VAL2FLD(SRSS_CLK_DSI_SELECT_DSI_MUX, (uint32_t)source);
100055f8:	f8c0 1300 	str.w	r1, [r0, #768]	@ 0x300
            SRSS_CLK_PATH_SELECT[clkPath] = _VAL2FLD(SRSS_CLK_PATH_SELECT_PATH_MUX, (uint32_t)CY_SYSCLK_CLKPATH_IN_DSIMUX);
100055fc:	f8c0 3340 	str.w	r3, [r0, #832]	@ 0x340
        }
        else
        {
            SRSS_CLK_PATH_SELECT[clkPath] = _VAL2FLD(SRSS_CLK_PATH_SELECT_PATH_MUX, (uint32_t)source);
10005600:	2000      	movs	r0, #0
10005602:	4770      	bx	lr
10005604:	4b04      	ldr	r3, [pc, #16]	@ (10005618 <Cy_SysClk_ClkPathSetSource+0x48>)
10005606:	30d0      	adds	r0, #208	@ 0xd0
10005608:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
1000560c:	e7f8      	b.n	10005600 <Cy_SysClk_ClkPathSetSource+0x30>
    cy_en_sysclk_status_t retVal = CY_SYSCLK_BAD_PARAM;
1000560e:	4803      	ldr	r0, [pc, #12]	@ (1000561c <Cy_SysClk_ClkPathSetSource+0x4c>)
        retVal = CY_SYSCLK_SUCCESS;
#endif /* ((CY_CPU_CORTEX_M0P) || (!defined(CY_DEVICE_SECURE))) */
    }
    return (retVal);

}
10005610:	4770      	bx	lr
10005612:	bf00      	nop
10005614:	08002c40 	.word	0x08002c40
10005618:	40260000 	.word	0x40260000
1000561c:	004a0001 	.word	0x004a0001

10005620 <Cy_SysClk_ClkPathGetSource>:


cy_en_clkpath_in_sources_t Cy_SysClk_ClkPathGetSource(uint32_t clkPath)
{
    CY_ASSERT_L1(clkPath < CY_SRSS_NUM_CLKPATH);
    cy_en_clkpath_in_sources_t retVal =
10005620:	0080      	lsls	r0, r0, #2
10005622:	f100 4380 	add.w	r3, r0, #1073741824	@ 0x40000000
10005626:	f503 1318 	add.w	r3, r3, #2490368	@ 0x260000
        (cy_en_clkpath_in_sources_t )((uint32_t)_FLD2VAL(SRSS_CLK_PATH_SELECT_PATH_MUX, SRSS_CLK_PATH_SELECT[clkPath]));
1000562a:	f8d3 0340 	ldr.w	r0, [r3, #832]	@ 0x340
    cy_en_clkpath_in_sources_t retVal =
1000562e:	f000 0007 	and.w	r0, r0, #7
    if (retVal == CY_SYSCLK_CLKPATH_IN_DSIMUX)
10005632:	2804      	cmp	r0, #4
    {
        retVal = (cy_en_clkpath_in_sources_t)((uint32_t)(((uint32_t)CY_SYSCLK_CLKPATH_IN_DSI) |
                    ((uint32_t)(_FLD2VAL(SRSS_CLK_DSI_SELECT_DSI_MUX, SRSS_CLK_DSI_SELECT[clkPath])))));
10005634:	bf02      	ittt	eq
10005636:	f8d3 0300 	ldreq.w	r0, [r3, #768]	@ 0x300
1000563a:	f000 001f 	andeq.w	r0, r0, #31
        retVal = (cy_en_clkpath_in_sources_t)((uint32_t)(((uint32_t)CY_SYSCLK_CLKPATH_IN_DSI) |
1000563e:	f440 7080 	orreq.w	r0, r0, #256	@ 0x100
    }
    return (retVal);
}
10005642:	4770      	bx	lr

10005644 <Cy_SysClk_ClkPathMuxGetFrequency>:


uint32_t Cy_SysClk_ClkPathMuxGetFrequency(uint32_t clkPath)
{
10005644:	b508      	push	{r3, lr}
    CY_ASSERT_L1(clkPath < CY_SRSS_NUM_CLKPATH);

    uint32_t freq = 0UL;    /* The path mux output frequency in Hz, 0 = an unknown frequency */

    /* Get the frequency of the source, i.e., the path mux input */
    switch(Cy_SysClk_ClkPathGetSource(clkPath))
10005646:	f7ff ffeb 	bl	10005620 <Cy_SysClk_ClkPathGetSource>
1000564a:	f5b0 7f88 	cmp.w	r0, #272	@ 0x110
1000564e:	d01a      	beq.n	10005686 <Cy_SysClk_ClkPathMuxGetFrequency+0x42>
10005650:	d808      	bhi.n	10005664 <Cy_SysClk_ClkPathMuxGetFrequency+0x20>
10005652:	2801      	cmp	r0, #1
10005654:	d010      	beq.n	10005678 <Cy_SysClk_ClkPathMuxGetFrequency+0x34>
10005656:	2802      	cmp	r0, #2
10005658:	d011      	beq.n	1000567e <Cy_SysClk_ClkPathMuxGetFrequency+0x3a>
1000565a:	2800      	cmp	r0, #0
1000565c:	4810      	ldr	r0, [pc, #64]	@ (100056a0 <Cy_SysClk_ClkPathMuxGetFrequency+0x5c>)
1000565e:	bf18      	it	ne
10005660:	2000      	movne	r0, #0
            /* Don't know the frequency of dsi_out, leave freq = 0UL */
            break;
    }

    return (freq);
}
10005662:	bd08      	pop	{r3, pc}
    switch(Cy_SysClk_ClkPathGetSource(clkPath))
10005664:	f240 1311 	movw	r3, #273	@ 0x111
10005668:	4298      	cmp	r0, r3
1000566a:	d011      	beq.n	10005690 <Cy_SysClk_ClkPathMuxGetFrequency+0x4c>
1000566c:	f240 1313 	movw	r3, #275	@ 0x113
10005670:	4298      	cmp	r0, r3
10005672:	d011      	beq.n	10005698 <Cy_SysClk_ClkPathMuxGetFrequency+0x54>
    uint32_t freq = 0UL;    /* The path mux output frequency in Hz, 0 = an unknown frequency */
10005674:	2000      	movs	r0, #0
10005676:	e7f4      	b.n	10005662 <Cy_SysClk_ClkPathMuxGetFrequency+0x1e>
    return (cySysClkExtFreq);
10005678:	4b0a      	ldr	r3, [pc, #40]	@ (100056a4 <Cy_SysClk_ClkPathMuxGetFrequency+0x60>)
1000567a:	6818      	ldr	r0, [r3, #0]
            break;
1000567c:	e7f1      	b.n	10005662 <Cy_SysClk_ClkPathMuxGetFrequency+0x1e>
}
1000567e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            freq = Cy_SysClk_EcoGetFrequency();
10005682:	f7ff bf99 	b.w	100055b8 <Cy_SysClk_EcoGetFrequency>
            freq = (0UL != (SRSS_CLK_ILO_CONFIG & SRSS_CLK_ILO_CONFIG_ENABLE_Msk)) ? CY_SYSCLK_ILO_FREQ : 0UL;
10005686:	4b08      	ldr	r3, [pc, #32]	@ (100056a8 <Cy_SysClk_ClkPathMuxGetFrequency+0x64>)
10005688:	f8d3 050c 	ldr.w	r0, [r3, #1292]	@ 0x50c
            freq = (0UL != (SRSS_CLK_PILO_CONFIG & SRSS_CLK_PILO_CONFIG_PILO_EN_Msk)) ? CY_SYSCLK_PILO_FREQ : 0UL;
1000568c:	0fc0      	lsrs	r0, r0, #31
1000568e:	e001      	b.n	10005694 <Cy_SysClk_ClkPathMuxGetFrequency+0x50>
            freq = (Cy_SysClk_WcoOkay()) ? CY_SYSCLK_WCO_FREQ : 0UL;
10005690:	f7ff ff36 	bl	10005500 <Cy_SysClk_WcoOkay>
            freq = (0UL != (SRSS_CLK_PILO_CONFIG & SRSS_CLK_PILO_CONFIG_PILO_EN_Msk)) ? CY_SYSCLK_PILO_FREQ : 0UL;
10005694:	03c0      	lsls	r0, r0, #15
10005696:	e7e4      	b.n	10005662 <Cy_SysClk_ClkPathMuxGetFrequency+0x1e>
10005698:	4b03      	ldr	r3, [pc, #12]	@ (100056a8 <Cy_SysClk_ClkPathMuxGetFrequency+0x64>)
1000569a:	f8d3 053c 	ldr.w	r0, [r3, #1340]	@ 0x53c
1000569e:	e7f5      	b.n	1000568c <Cy_SysClk_ClkPathMuxGetFrequency+0x48>
100056a0:	007a1200 	.word	0x007a1200
100056a4:	08002c64 	.word	0x08002c64
100056a8:	40260000 	.word	0x40260000

100056ac <Cy_SysClk_FllDisable>:
#if defined (CY_DEVICE_SECURE)
    retStatus = (cy_en_sysclk_status_t)CY_PRA_FUNCTION_CALL_RETURN_PARAM(CY_PRA_MSG_TYPE_FUNC_POLICY, CY_PRA_CLK_FUNC_FLL_DISABLE, 0UL);

#endif /* defined (CY_DEVICE_SECURE) */
#if ((CY_CPU_CORTEX_M0P) || (!defined(CY_DEVICE_SECURE)))
    CY_REG32_CLR_SET(SRSS_CLK_FLL_CONFIG3, SRSS_CLK_FLL_CONFIG3_BYPASS_SEL, CY_SYSCLK_FLLPLL_OUTPUT_INPUT);
100056ac:	4b0b      	ldr	r3, [pc, #44]	@ (100056dc <Cy_SysClk_FllDisable+0x30>)
100056ae:	f8d3 2588 	ldr.w	r2, [r3, #1416]	@ 0x588
100056b2:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
100056b6:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
100056ba:	f8c3 2588 	str.w	r2, [r3, #1416]	@ 0x588
    SRSS_CLK_FLL_CONFIG  &= ~SRSS_CLK_FLL_CONFIG_FLL_ENABLE_Msk;
100056be:	f8d3 2580 	ldr.w	r2, [r3, #1408]	@ 0x580
100056c2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
100056c6:	f8c3 2580 	str.w	r2, [r3, #1408]	@ 0x580
    SRSS_CLK_FLL_CONFIG4 &= ~SRSS_CLK_FLL_CONFIG4_CCO_ENABLE_Msk;
100056ca:	f8d3 258c 	ldr.w	r2, [r3, #1420]	@ 0x58c
100056ce:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
100056d2:	f8c3 258c 	str.w	r2, [r3, #1420]	@ 0x58c
    retStatus = (CY_SYSCLK_SUCCESS);
#endif /* ((CY_CPU_CORTEX_M0P) || (!defined(CY_DEVICE_SECURE))) */
    return retStatus;
}
100056d6:	2000      	movs	r0, #0
100056d8:	4770      	bx	lr
100056da:	bf00      	nop
100056dc:	40260000 	.word	0x40260000

100056e0 <Cy_SysClk_FllManualConfigure>:
    return (_FLD2BOOL(SRSS_CLK_FLL_CONFIG_FLL_ENABLE, SRSS_CLK_FLL_CONFIG));
100056e0:	4a22      	ldr	r2, [pc, #136]	@ (1000576c <Cy_SysClk_FllManualConfigure+0x8c>)
100056e2:	f8d2 3580 	ldr.w	r3, [r2, #1408]	@ 0x580
    retVal = CY_SYSCLK_INVALID_STATE;

    /* Check for errors */
    CY_ASSERT_L1(config != NULL);

    if (!Cy_SysClk_FllIsEnabled()) /* If disabled */
100056e6:	2b00      	cmp	r3, #0
{
100056e8:	b530      	push	{r4, r5, lr}
    if (!Cy_SysClk_FllIsEnabled()) /* If disabled */
100056ea:	db3d      	blt.n	10005768 <Cy_SysClk_FllManualConfigure+0x88>
    {
        /* update CLK_FLL_CONFIG register with 2 parameters; FLL_ENABLE is already 0 */
        /* asserts just check for bitfield overflow */
        CY_ASSERT_L1(config->fllMult <= (SRSS_CLK_FLL_CONFIG_FLL_MULT_Msk >> SRSS_CLK_FLL_CONFIG_FLL_MULT_Pos));

        SRSS_CLK_FLL_CONFIG = _VAL2FLD(SRSS_CLK_FLL_CONFIG_FLL_MULT, config->fllMult) |
100056ec:	6803      	ldr	r3, [r0, #0]
                             _BOOL2FLD(SRSS_CLK_FLL_CONFIG_FLL_OUTPUT_DIV, config->enableOutputDiv);
100056ee:	79c1      	ldrb	r1, [r0, #7]
        /* update CLK_FLL_CONFIG2 register with 2 parameters */
        /* asserts just check for bitfield overflow */
        CY_ASSERT_L1(config->refDiv <= (SRSS_CLK_FLL_CONFIG2_FLL_REF_DIV_Msk >> SRSS_CLK_FLL_CONFIG2_FLL_REF_DIV_Pos));
        CY_ASSERT_L1(config->lockTolerance <= (SRSS_CLK_FLL_CONFIG2_LOCK_TOL_Msk >> SRSS_CLK_FLL_CONFIG2_LOCK_TOL_Pos));

        SRSS_CLK_FLL_CONFIG2 = _VAL2FLD(SRSS_CLK_FLL_CONFIG2_FLL_REF_DIV, config->refDiv) |
100056f0:	8884      	ldrh	r4, [r0, #4]
        CY_ASSERT_L1(config->pgain <= (SRSS_CLK_FLL_CONFIG3_FLL_LF_PGAIN_Msk >> SRSS_CLK_FLL_CONFIG3_FLL_LF_PGAIN_Pos));
        CY_ASSERT_L1(config->settlingCount <= (SRSS_CLK_FLL_CONFIG3_SETTLING_COUNT_Msk >> SRSS_CLK_FLL_CONFIG3_SETTLING_COUNT_Pos));

        SRSS_CLK_FLL_CONFIG3 = _VAL2FLD(SRSS_CLK_FLL_CONFIG3_FLL_LF_IGAIN, config->igain) |
                               _VAL2FLD(SRSS_CLK_FLL_CONFIG3_FLL_LF_PGAIN, config->pgain) |
                               _VAL2FLD(SRSS_CLK_FLL_CONFIG3_SETTLING_COUNT, config->settlingCount) |
100056f2:	8985      	ldrh	r5, [r0, #12]
        SRSS_CLK_FLL_CONFIG = _VAL2FLD(SRSS_CLK_FLL_CONFIG_FLL_MULT, config->fllMult) |
100056f4:	f3c3 0311 	ubfx	r3, r3, #0, #18
100056f8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
100056fc:	f8c2 3580 	str.w	r3, [r2, #1408]	@ 0x580
                               _VAL2FLD(SRSS_CLK_FLL_CONFIG2_LOCK_TOL, config->lockTolerance);
10005700:	491b      	ldr	r1, [pc, #108]	@ (10005770 <Cy_SysClk_FllManualConfigure+0x90>)
10005702:	8903      	ldrh	r3, [r0, #8]
        SRSS_CLK_FLL_CONFIG2 = _VAL2FLD(SRSS_CLK_FLL_CONFIG2_FLL_REF_DIV, config->refDiv) |
10005704:	f3c4 040c 	ubfx	r4, r4, #0, #13
                               _VAL2FLD(SRSS_CLK_FLL_CONFIG2_LOCK_TOL, config->lockTolerance);
10005708:	ea01 4303 	and.w	r3, r1, r3, lsl #16
        SRSS_CLK_FLL_CONFIG2 = _VAL2FLD(SRSS_CLK_FLL_CONFIG2_FLL_REF_DIV, config->refDiv) |
1000570c:	4323      	orrs	r3, r4
1000570e:	f8c2 3584 	str.w	r3, [r2, #1412]	@ 0x584
                               _VAL2FLD(SRSS_CLK_FLL_CONFIG3_FLL_LF_PGAIN, config->pgain) |
10005712:	7ac3      	ldrb	r3, [r0, #11]
                               _VAL2FLD(SRSS_CLK_FLL_CONFIG3_SETTLING_COUNT, config->settlingCount) |
10005714:	4c17      	ldr	r4, [pc, #92]	@ (10005774 <Cy_SysClk_FllManualConfigure+0x94>)
                               _VAL2FLD(SRSS_CLK_FLL_CONFIG3_FLL_LF_PGAIN, config->pgain) |
10005716:	011b      	lsls	r3, r3, #4
                               _VAL2FLD(SRSS_CLK_FLL_CONFIG3_SETTLING_COUNT, config->settlingCount) |
10005718:	ea04 2405 	and.w	r4, r4, r5, lsl #8
                               _VAL2FLD(SRSS_CLK_FLL_CONFIG3_FLL_LF_PGAIN, config->pgain) |
1000571c:	b2db      	uxtb	r3, r3
1000571e:	4323      	orrs	r3, r4
        SRSS_CLK_FLL_CONFIG3 = _VAL2FLD(SRSS_CLK_FLL_CONFIG3_FLL_LF_IGAIN, config->igain) |
10005720:	7a84      	ldrb	r4, [r0, #10]
10005722:	f004 040f 	and.w	r4, r4, #15
                               _VAL2FLD(SRSS_CLK_FLL_CONFIG3_FLL_LF_PGAIN, config->pgain) |
10005726:	4323      	orrs	r3, r4
                               _VAL2FLD(SRSS_CLK_FLL_CONFIG3_BYPASS_SEL, config->outputMode);
10005728:	7b84      	ldrb	r4, [r0, #14]
1000572a:	0724      	lsls	r4, r4, #28
1000572c:	f004 5440 	and.w	r4, r4, #805306368	@ 0x30000000
                               _VAL2FLD(SRSS_CLK_FLL_CONFIG3_SETTLING_COUNT, config->settlingCount) |
10005730:	4323      	orrs	r3, r4
        SRSS_CLK_FLL_CONFIG3 = _VAL2FLD(SRSS_CLK_FLL_CONFIG3_FLL_LF_IGAIN, config->igain) |
10005732:	f8c2 3588 	str.w	r3, [r2, #1416]	@ 0x588
        /* update CLK_FLL_CONFIG4 register with 1 parameter; preserve other bits */
        /* asserts just check for bitfield overflow */
        CY_ASSERT_L1(CY_SYSCLK_FLL_IS_CCO_RANGE_VALID(config->ccoRange));
        CY_ASSERT_L1(config->cco_Freq <= (SRSS_CLK_FLL_CONFIG4_CCO_FREQ_Msk >> SRSS_CLK_FLL_CONFIG4_CCO_FREQ_Pos));

        CY_REG32_CLR_SET(SRSS_CLK_FLL_CONFIG4, SRSS_CLK_FLL_CONFIG4_CCO_RANGE, (uint32_t)(config->ccoRange));
10005736:	7983      	ldrb	r3, [r0, #6]
10005738:	f8d2 458c 	ldr.w	r4, [r2, #1420]	@ 0x58c
        CY_REG32_CLR_SET(SRSS_CLK_FLL_CONFIG4, SRSS_CLK_FLL_CONFIG4_CCO_FREQ, (uint32_t)(config->cco_Freq));
1000573c:	8a00      	ldrh	r0, [r0, #16]
        CY_REG32_CLR_SET(SRSS_CLK_FLL_CONFIG4, SRSS_CLK_FLL_CONFIG4_CCO_RANGE, (uint32_t)(config->ccoRange));
1000573e:	021b      	lsls	r3, r3, #8
10005740:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
10005744:	f424 64e0 	bic.w	r4, r4, #1792	@ 0x700
10005748:	4323      	orrs	r3, r4
1000574a:	f8c2 358c 	str.w	r3, [r2, #1420]	@ 0x58c
        CY_REG32_CLR_SET(SRSS_CLK_FLL_CONFIG4, SRSS_CLK_FLL_CONFIG4_CCO_FREQ, (uint32_t)(config->cco_Freq));
1000574e:	f8d2 358c 	ldr.w	r3, [r2, #1420]	@ 0x58c
10005752:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
10005756:	ea01 4100 	and.w	r1, r1, r0, lsl #16
1000575a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
1000575e:	4319      	orrs	r1, r3
10005760:	f8c2 158c 	str.w	r1, [r2, #1420]	@ 0x58c

        retVal = CY_SYSCLK_SUCCESS;
10005764:	2000      	movs	r0, #0
    }

#endif /* ((CY_CPU_CORTEX_M0P) || (!defined(CY_DEVICE_SECURE))) */
    return (retVal);
}
10005766:	bd30      	pop	{r4, r5, pc}
    retVal = CY_SYSCLK_INVALID_STATE;
10005768:	4803      	ldr	r0, [pc, #12]	@ (10005778 <Cy_SysClk_FllManualConfigure+0x98>)
    return (retVal);
1000576a:	e7fc      	b.n	10005766 <Cy_SysClk_FllManualConfigure+0x86>
1000576c:	40260000 	.word	0x40260000
10005770:	01ff0000 	.word	0x01ff0000
10005774:	001fff00 	.word	0x001fff00
10005778:	004a0003 	.word	0x004a0003

1000577c <Cy_SysClk_FllGetConfiguration>:

void Cy_SysClk_FllGetConfiguration(cy_stc_fll_manual_config_t *config)
{
    CY_ASSERT_L1(config != NULL);
    /* read 2 parameters from CLK_FLL_CONFIG register */
    uint32_t tempReg = SRSS_CLK_FLL_CONFIG;
1000577c:	4a13      	ldr	r2, [pc, #76]	@ (100057cc <Cy_SysClk_FllGetConfiguration+0x50>)
1000577e:	f8d2 3580 	ldr.w	r3, [r2, #1408]	@ 0x580
    config->fllMult         = _FLD2VAL(SRSS_CLK_FLL_CONFIG_FLL_MULT, tempReg);
10005782:	f3c3 0111 	ubfx	r1, r3, #0, #18
10005786:	6001      	str	r1, [r0, #0]
    config->enableOutputDiv = _FLD2BOOL(SRSS_CLK_FLL_CONFIG_FLL_OUTPUT_DIV, tempReg);
10005788:	f3c3 6300 	ubfx	r3, r3, #24, #1
1000578c:	71c3      	strb	r3, [r0, #7]
    /* read 2 parameters from CLK_FLL_CONFIG2 register */
    tempReg = SRSS_CLK_FLL_CONFIG2;
1000578e:	f8d2 3584 	ldr.w	r3, [r2, #1412]	@ 0x584
    config->refDiv          = (uint16_t)_FLD2VAL(SRSS_CLK_FLL_CONFIG2_FLL_REF_DIV, tempReg);
10005792:	f3c3 010c 	ubfx	r1, r3, #0, #13
    config->lockTolerance   = (uint16_t)_FLD2VAL(SRSS_CLK_FLL_CONFIG2_LOCK_TOL, tempReg);
10005796:	f3c3 4308 	ubfx	r3, r3, #16, #9
1000579a:	8103      	strh	r3, [r0, #8]
    /* read 4 parameters from CLK_FLL_CONFIG3 register */
    tempReg = SRSS_CLK_FLL_CONFIG3;
1000579c:	f8d2 3588 	ldr.w	r3, [r2, #1416]	@ 0x588
    config->refDiv          = (uint16_t)_FLD2VAL(SRSS_CLK_FLL_CONFIG2_FLL_REF_DIV, tempReg);
100057a0:	8081      	strh	r1, [r0, #4]
    config->igain           = (uint8_t)_FLD2VAL(SRSS_CLK_FLL_CONFIG3_FLL_LF_IGAIN, tempReg);
100057a2:	f003 010f 	and.w	r1, r3, #15
100057a6:	7281      	strb	r1, [r0, #10]
    config->pgain           = (uint8_t)_FLD2VAL(SRSS_CLK_FLL_CONFIG3_FLL_LF_PGAIN, tempReg);
100057a8:	f3c3 1103 	ubfx	r1, r3, #4, #4
100057ac:	72c1      	strb	r1, [r0, #11]
    config->settlingCount   = (uint16_t)_FLD2VAL(SRSS_CLK_FLL_CONFIG3_SETTLING_COUNT, tempReg);
100057ae:	f3c3 210c 	ubfx	r1, r3, #8, #13
    config->outputMode      = (cy_en_fll_pll_output_mode_t)((uint32_t)_FLD2VAL(SRSS_CLK_FLL_CONFIG3_BYPASS_SEL, tempReg));
100057b2:	f3c3 7301 	ubfx	r3, r3, #28, #2
100057b6:	7383      	strb	r3, [r0, #14]
    /* read 2 parameters from CLK_FLL_CONFIG4 register */
    tempReg = SRSS_CLK_FLL_CONFIG4;
100057b8:	f8d2 358c 	ldr.w	r3, [r2, #1420]	@ 0x58c
    config->settlingCount   = (uint16_t)_FLD2VAL(SRSS_CLK_FLL_CONFIG3_SETTLING_COUNT, tempReg);
100057bc:	8181      	strh	r1, [r0, #12]
    config->ccoRange        = (cy_en_fll_cco_ranges_t)((uint32_t)_FLD2VAL(SRSS_CLK_FLL_CONFIG4_CCO_RANGE, tempReg));
100057be:	f3c3 2202 	ubfx	r2, r3, #8, #3
    config->cco_Freq        = (uint16_t)_FLD2VAL(SRSS_CLK_FLL_CONFIG4_CCO_FREQ, tempReg);
100057c2:	f3c3 4308 	ubfx	r3, r3, #16, #9
    config->ccoRange        = (cy_en_fll_cco_ranges_t)((uint32_t)_FLD2VAL(SRSS_CLK_FLL_CONFIG4_CCO_RANGE, tempReg));
100057c6:	7182      	strb	r2, [r0, #6]
    config->cco_Freq        = (uint16_t)_FLD2VAL(SRSS_CLK_FLL_CONFIG4_CCO_FREQ, tempReg);
100057c8:	8203      	strh	r3, [r0, #16]
}
100057ca:	4770      	bx	lr
100057cc:	40260000 	.word	0x40260000

100057d0 <Cy_SysClk_FllEnable>:


cy_en_sysclk_status_t Cy_SysClk_FllEnable(uint32_t timeoutus)
{
100057d0:	b570      	push	{r4, r5, r6, lr}
#endif /* defined (CY_DEVICE_SECURE) */
#if ((CY_CPU_CORTEX_M0P) || (!defined(CY_DEVICE_SECURE)))
    bool zeroTimeout = (0UL == timeoutus);

    /* first set the CCO enable bit */
    SRSS_CLK_FLL_CONFIG4 |= SRSS_CLK_FLL_CONFIG4_CCO_ENABLE_Msk;
100057d2:	4e22      	ldr	r6, [pc, #136]	@ (1000585c <Cy_SysClk_FllEnable+0x8c>)
100057d4:	f8d6 358c 	ldr.w	r3, [r6, #1420]	@ 0x58c
100057d8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
{
100057dc:	4604      	mov	r4, r0
    SRSS_CLK_FLL_CONFIG4 |= SRSS_CLK_FLL_CONFIG4_CCO_ENABLE_Msk;
100057de:	f8c6 358c 	str.w	r3, [r6, #1420]	@ 0x58c

    /* Wait until CCO is ready */
    while((!_FLD2BOOL(SRSS_CLK_FLL_STATUS_CCO_READY, SRSS_CLK_FLL_STATUS)) && /* if cco_ready == 0 */ (0UL != timeoutus))
100057e2:	4605      	mov	r5, r0
100057e4:	f8d6 3590 	ldr.w	r3, [r6, #1424]	@ 0x590
100057e8:	075a      	lsls	r2, r3, #29
100057ea:	d400      	bmi.n	100057ee <Cy_SysClk_FllEnable+0x1e>
100057ec:	b9e5      	cbnz	r5, 10005828 <Cy_SysClk_FllEnable+0x58>
        Cy_SysLib_DelayUs(1U);
         timeoutus--;
    }

    /* Set the FLL bypass mode to FLL_REF */
    CY_REG32_CLR_SET(SRSS_CLK_FLL_CONFIG3, SRSS_CLK_FLL_CONFIG3_BYPASS_SEL, CY_SYSCLK_FLLPLL_OUTPUT_INPUT);
100057ee:	f8d6 3588 	ldr.w	r3, [r6, #1416]	@ 0x588
100057f2:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
100057f6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
100057fa:	f8c6 3588 	str.w	r3, [r6, #1416]	@ 0x588

    /* Set the FLL enable bit, if CCO is ready */
    if (zeroTimeout || (0UL != timeoutus))
100057fe:	b104      	cbz	r4, 10005802 <Cy_SysClk_FllEnable+0x32>
10005800:	b135      	cbz	r5, 10005810 <Cy_SysClk_FllEnable+0x40>
    {
        SRSS_CLK_FLL_CONFIG |= SRSS_CLK_FLL_CONFIG_FLL_ENABLE_Msk;
10005802:	4a16      	ldr	r2, [pc, #88]	@ (1000585c <Cy_SysClk_FllEnable+0x8c>)
10005804:	f8d2 3580 	ldr.w	r3, [r2, #1408]	@ 0x580
10005808:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
1000580c:	f8c2 3580 	str.w	r3, [r2, #1408]	@ 0x580
    return (_FLD2BOOL(SRSS_CLK_FLL_STATUS_LOCKED, SRSS_CLK_FLL_STATUS));
10005810:	4e12      	ldr	r6, [pc, #72]	@ (1000585c <Cy_SysClk_FllEnable+0x8c>)
10005812:	f8d6 3590 	ldr.w	r3, [r6, #1424]	@ 0x590
    }

    /* now do the timeout wait for FLL_STATUS, bit LOCKED */
    while((!Cy_SysClk_FllLocked()) && /* if locked == 0 */(0UL != timeoutus))
10005816:	07db      	lsls	r3, r3, #31
10005818:	d410      	bmi.n	1000583c <Cy_SysClk_FllEnable+0x6c>
1000581a:	b955      	cbnz	r5, 10005832 <Cy_SysClk_FllEnable+0x62>
    {
        Cy_SysLib_DelayUs(1U);
        timeoutus--;
    }

    if (zeroTimeout || (0UL != timeoutus))
1000581c:	b18c      	cbz	r4, 10005842 <Cy_SysClk_FllEnable+0x72>
        CY_REG32_CLR_SET(SRSS_CLK_FLL_CONFIG3, SRSS_CLK_FLL_CONFIG3_BYPASS_SEL, CY_SYSCLK_FLLPLL_OUTPUT_OUTPUT);
    }
    else
    {
        /* If lock doesn't occur, FLL is stopped */
        (void)Cy_SysClk_FllDisable();
1000581e:	f7ff ff45 	bl	100056ac <Cy_SysClk_FllDisable>
    }

    retStatus = ((zeroTimeout || (0UL != timeoutus)) ? CY_SYSCLK_SUCCESS : CY_SYSCLK_TIMEOUT);
10005822:	4c0f      	ldr	r4, [pc, #60]	@ (10005860 <Cy_SysClk_FllEnable+0x90>)
#endif /* ((CY_CPU_CORTEX_M0P) || (!defined(CY_DEVICE_SECURE))) */
    return retStatus;
}
10005824:	4620      	mov	r0, r4
10005826:	bd70      	pop	{r4, r5, r6, pc}
        Cy_SysLib_DelayUs(1U);
10005828:	2001      	movs	r0, #1
1000582a:	f000 fb0d 	bl	10005e48 <Cy_SysLib_DelayUs>
         timeoutus--;
1000582e:	3d01      	subs	r5, #1
10005830:	e7d8      	b.n	100057e4 <Cy_SysClk_FllEnable+0x14>
        Cy_SysLib_DelayUs(1U);
10005832:	2001      	movs	r0, #1
10005834:	f000 fb08 	bl	10005e48 <Cy_SysLib_DelayUs>
        timeoutus--;
10005838:	3d01      	subs	r5, #1
1000583a:	e7ea      	b.n	10005812 <Cy_SysClk_FllEnable+0x42>
    if (zeroTimeout || (0UL != timeoutus))
1000583c:	b10c      	cbz	r4, 10005842 <Cy_SysClk_FllEnable+0x72>
1000583e:	2d00      	cmp	r5, #0
10005840:	d0ed      	beq.n	1000581e <Cy_SysClk_FllEnable+0x4e>
        CY_REG32_CLR_SET(SRSS_CLK_FLL_CONFIG3, SRSS_CLK_FLL_CONFIG3_BYPASS_SEL, CY_SYSCLK_FLLPLL_OUTPUT_OUTPUT);
10005842:	f8d6 3588 	ldr.w	r3, [r6, #1416]	@ 0x588
10005846:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
1000584a:	f8c6 3588 	str.w	r3, [r6, #1416]	@ 0x588
    retStatus = ((zeroTimeout || (0UL != timeoutus)) ? CY_SYSCLK_SUCCESS : CY_SYSCLK_TIMEOUT);
1000584e:	2c00      	cmp	r4, #0
10005850:	d0e8      	beq.n	10005824 <Cy_SysClk_FllEnable+0x54>
10005852:	2d00      	cmp	r5, #0
10005854:	4c02      	ldr	r4, [pc, #8]	@ (10005860 <Cy_SysClk_FllEnable+0x90>)
10005856:	bf18      	it	ne
10005858:	2400      	movne	r4, #0
1000585a:	e7e3      	b.n	10005824 <Cy_SysClk_FllEnable+0x54>
1000585c:	40260000 	.word	0x40260000
10005860:	004a0002 	.word	0x004a0002

10005864 <Cy_SysClk_PllIsEnabled>:

bool Cy_SysClk_PllIsEnabled(uint32_t clkPath)
{
    clkPath--; /* to correctly access PLL config and status registers structures */
    CY_ASSERT_L1(clkPath < CY_SRSS_NUM_PLL);
    return (_FLD2BOOL(SRSS_CLK_PLL_CONFIG_ENABLE, SRSS_CLK_PLL_CONFIG[clkPath]));
10005864:	4b03      	ldr	r3, [pc, #12]	@ (10005874 <Cy_SysClk_PllIsEnabled+0x10>)
10005866:	f200 107f 	addw	r0, r0, #383	@ 0x17f
1000586a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
1000586e:	0fc0      	lsrs	r0, r0, #31
10005870:	4770      	bx	lr
10005872:	bf00      	nop
10005874:	40260000 	.word	0x40260000

10005878 <Cy_SysClk_PllDisable>:
#endif /* ((CY_CPU_CORTEX_M4) && (defined(CY_DEVICE_SECURE))) */
}


cy_en_sysclk_status_t Cy_SysClk_PllDisable(uint32_t clkPath)
{
10005878:	b510      	push	{r4, lr}
    cy_en_sysclk_status_t retVal = CY_SYSCLK_BAD_PARAM;
    clkPath--; /* to correctly access PLL config and status registers structures */
    if (clkPath < CY_SRSS_NUM_PLL)
1000587a:	4b10      	ldr	r3, [pc, #64]	@ (100058bc <Cy_SysClk_PllDisable+0x44>)
1000587c:	681b      	ldr	r3, [r3, #0]
1000587e:	f893 2043 	ldrb.w	r2, [r3, #67]	@ 0x43
    clkPath--; /* to correctly access PLL config and status registers structures */
10005882:	1e43      	subs	r3, r0, #1
    if (clkPath < CY_SRSS_NUM_PLL)
10005884:	429a      	cmp	r2, r3
10005886:	d917      	bls.n	100058b8 <Cy_SysClk_PllDisable+0x40>
#if defined (CY_DEVICE_SECURE)
        retVal = (cy_en_sysclk_status_t)CY_PRA_FUNCTION_CALL_RETURN_PARAM(CY_PRA_MSG_TYPE_FUNC_POLICY, CY_PRA_CLK_FUNC_PLL_DISABLE, (clkPath + 1U));
#endif /* defined (CY_DEVICE_SECURE) */
#if ((CY_CPU_CORTEX_M0P) || (!defined(CY_DEVICE_SECURE)))
        /* First bypass PLL */
        CY_REG32_CLR_SET(SRSS_CLK_PLL_CONFIG[clkPath], SRSS_CLK_PLL_CONFIG_BYPASS_SEL, CY_SYSCLK_FLLPLL_OUTPUT_INPUT);
10005888:	0080      	lsls	r0, r0, #2
1000588a:	f100 4480 	add.w	r4, r0, #1073741824	@ 0x40000000
1000588e:	f504 1418 	add.w	r4, r4, #2490368	@ 0x260000
        /* Wait at least 6 PLL clock cycles */
        Cy_SysLib_DelayUs(1U);
10005892:	2001      	movs	r0, #1
        CY_REG32_CLR_SET(SRSS_CLK_PLL_CONFIG[clkPath], SRSS_CLK_PLL_CONFIG_BYPASS_SEL, CY_SYSCLK_FLLPLL_OUTPUT_INPUT);
10005894:	f8d4 35fc 	ldr.w	r3, [r4, #1532]	@ 0x5fc
10005898:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
1000589c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
100058a0:	f8c4 35fc 	str.w	r3, [r4, #1532]	@ 0x5fc
        Cy_SysLib_DelayUs(1U);
100058a4:	f000 fad0 	bl	10005e48 <Cy_SysLib_DelayUs>
        /* And now disable the PLL itself */
        SRSS_CLK_PLL_CONFIG[clkPath] &= ~SRSS_CLK_PLL_CONFIG_ENABLE_Msk;
100058a8:	f8d4 35fc 	ldr.w	r3, [r4, #1532]	@ 0x5fc
100058ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
100058b0:	f8c4 35fc 	str.w	r3, [r4, #1532]	@ 0x5fc
        retVal = CY_SYSCLK_SUCCESS;
100058b4:	2000      	movs	r0, #0
#endif /* ((CY_CPU_CORTEX_M0P) || (!defined(CY_DEVICE_SECURE))) */
    }
    return (retVal);
}
100058b6:	bd10      	pop	{r4, pc}
    cy_en_sysclk_status_t retVal = CY_SYSCLK_BAD_PARAM;
100058b8:	4801      	ldr	r0, [pc, #4]	@ (100058c0 <Cy_SysClk_PllDisable+0x48>)
    return (retVal);
100058ba:	e7fc      	b.n	100058b6 <Cy_SysClk_PllDisable+0x3e>
100058bc:	08002c40 	.word	0x08002c40
100058c0:	004a0001 	.word	0x004a0001

100058c4 <Cy_SysClk_PllManualConfigure>:
    return (retVal);
}


cy_en_sysclk_status_t Cy_SysClk_PllManualConfigure(uint32_t clkPath, const cy_stc_pll_manual_config_t *config)
{
100058c4:	b570      	push	{r4, r5, r6, lr}
    cy_en_sysclk_status_t retVal = CY_SYSCLK_SUCCESS;

    /* check for errors */
    if (clkPath > CY_SRSS_NUM_PLL) /* invalid clock path number */
100058c6:	4b21      	ldr	r3, [pc, #132]	@ (1000594c <Cy_SysClk_PllManualConfigure+0x88>)
100058c8:	681b      	ldr	r3, [r3, #0]
100058ca:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
100058ce:	4283      	cmp	r3, r0
{
100058d0:	4604      	mov	r4, r0
    if (clkPath > CY_SRSS_NUM_PLL) /* invalid clock path number */
100058d2:	d201      	bcs.n	100058d8 <Cy_SysClk_PllManualConfigure+0x14>
    {
        retVal = CY_SYSCLK_BAD_PARAM;
100058d4:	481e      	ldr	r0, [pc, #120]	@ (10005950 <Cy_SysClk_PllManualConfigure+0x8c>)
        CY_REG32_CLR_SET(SRSS_CLK_PLL_CONFIG[clkPath], SRSS_CLK_PLL_CONFIG_BYPASS_SEL, (uint32_t)config->outputMode);
#endif /* ((CY_CPU_CORTEX_M0P) || (!defined(CY_DEVICE_SECURE))) */
    }

    return (retVal);
}
100058d6:	bd70      	pop	{r4, r5, r6, pc}
    else if (Cy_SysClk_PllIsEnabled(clkPath))
100058d8:	f7ff ffc4 	bl	10005864 <Cy_SysClk_PllIsEnabled>
100058dc:	bb80      	cbnz	r0, 10005940 <Cy_SysClk_PllManualConfigure+0x7c>
    else if ((config->outputDiv    < CY_SYSCLK_PLL_MIN_OUTPUT_DIV) || (CY_SYSCLK_PLL_MAX_OUTPUT_DIV < config->outputDiv)    ||
100058de:	7888      	ldrb	r0, [r1, #2]
100058e0:	1e83      	subs	r3, r0, #2
100058e2:	2b0e      	cmp	r3, #14
100058e4:	d8f6      	bhi.n	100058d4 <Cy_SysClk_PllManualConfigure+0x10>
             (config->referenceDiv < CY_SYSCLK_PLL_MIN_REF_DIV)    || (CY_SYSCLK_PLL_MAX_REF_DIV    < config->referenceDiv) ||
100058e6:	784d      	ldrb	r5, [r1, #1]
    else if ((config->outputDiv    < CY_SYSCLK_PLL_MIN_OUTPUT_DIV) || (CY_SYSCLK_PLL_MAX_OUTPUT_DIV < config->outputDiv)    ||
100058e8:	1e6b      	subs	r3, r5, #1
100058ea:	2b11      	cmp	r3, #17
100058ec:	d8f2      	bhi.n	100058d4 <Cy_SysClk_PllManualConfigure+0x10>
             (config->feedbackDiv  < CY_SYSCLK_PLL_MIN_FB_DIV)     || (CY_SYSCLK_PLL_MAX_FB_DIV     < config->feedbackDiv))
100058ee:	78ce      	ldrb	r6, [r1, #3]
100058f0:	780b      	ldrb	r3, [r1, #0]
100058f2:	bb3e      	cbnz	r6, 10005944 <Cy_SysClk_PllManualConfigure+0x80>
             (config->referenceDiv < CY_SYSCLK_PLL_MIN_REF_DIV)    || (CY_SYSCLK_PLL_MAX_REF_DIV    < config->referenceDiv) ||
100058f4:	2b15      	cmp	r3, #21
100058f6:	d9ed      	bls.n	100058d4 <Cy_SysClk_PllManualConfigure+0x10>
             (config->feedbackDiv  < CY_SYSCLK_PLL_MIN_FB_DIV)     || (CY_SYSCLK_PLL_MAX_FB_DIV     < config->feedbackDiv))
100058f8:	2270      	movs	r2, #112	@ 0x70
100058fa:	4293      	cmp	r3, r2
100058fc:	d8ea      	bhi.n	100058d4 <Cy_SysClk_PllManualConfigure+0x10>
        if (config->outputMode != CY_SYSCLK_FLLPLL_OUTPUT_INPUT)
100058fe:	790a      	ldrb	r2, [r1, #4]
10005900:	2a02      	cmp	r2, #2
10005902:	d00c      	beq.n	1000591e <Cy_SysClk_PllManualConfigure+0x5a>
                _VAL2FLD(SRSS_CLK_PLL_CONFIG_FEEDBACK_DIV,  config->feedbackDiv)  |
10005904:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
10005908:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
                _VAL2FLD(SRSS_CLK_PLL_CONFIG_REFERENCE_DIV, config->referenceDiv) |
1000590c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
            SRSS_CLK_PLL_CONFIG[clkPath] =
10005910:	f204 117f 	addw	r1, r4, #383	@ 0x17f
10005914:	480f      	ldr	r0, [pc, #60]	@ (10005954 <Cy_SysClk_PllManualConfigure+0x90>)
                _VAL2FLD(SRSS_CLK_PLL_CONFIG_OUTPUT_DIV,    config->outputDiv)    |
10005916:	ea43 63c6 	orr.w	r3, r3, r6, lsl #27
            SRSS_CLK_PLL_CONFIG[clkPath] =
1000591a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
        CY_REG32_CLR_SET(SRSS_CLK_PLL_CONFIG[clkPath], SRSS_CLK_PLL_CONFIG_BYPASS_SEL, (uint32_t)config->outputMode);
1000591e:	00a0      	lsls	r0, r4, #2
10005920:	f100 4080 	add.w	r0, r0, #1073741824	@ 0x40000000
10005924:	f500 1018 	add.w	r0, r0, #2490368	@ 0x260000
10005928:	0712      	lsls	r2, r2, #28
1000592a:	f8d0 35fc 	ldr.w	r3, [r0, #1532]	@ 0x5fc
1000592e:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
10005932:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
10005936:	431a      	orrs	r2, r3
10005938:	f8c0 25fc 	str.w	r2, [r0, #1532]	@ 0x5fc
    cy_en_sysclk_status_t retVal = CY_SYSCLK_SUCCESS;
1000593c:	2000      	movs	r0, #0
1000593e:	e7ca      	b.n	100058d6 <Cy_SysClk_PllManualConfigure+0x12>
        retVal = CY_SYSCLK_INVALID_STATE;
10005940:	4805      	ldr	r0, [pc, #20]	@ (10005958 <Cy_SysClk_PllManualConfigure+0x94>)
    return (retVal);
10005942:	e7c8      	b.n	100058d6 <Cy_SysClk_PllManualConfigure+0x12>
             (config->referenceDiv < CY_SYSCLK_PLL_MIN_REF_DIV)    || (CY_SYSCLK_PLL_MAX_REF_DIV    < config->referenceDiv) ||
10005944:	2b12      	cmp	r3, #18
10005946:	d9c5      	bls.n	100058d4 <Cy_SysClk_PllManualConfigure+0x10>
             (config->feedbackDiv  < CY_SYSCLK_PLL_MIN_FB_DIV)     || (CY_SYSCLK_PLL_MAX_FB_DIV     < config->feedbackDiv))
10005948:	2238      	movs	r2, #56	@ 0x38
1000594a:	e7d6      	b.n	100058fa <Cy_SysClk_PllManualConfigure+0x36>
1000594c:	08002c40 	.word	0x08002c40
10005950:	004a0001 	.word	0x004a0001
10005954:	40260000 	.word	0x40260000
10005958:	004a0003 	.word	0x004a0003

1000595c <Cy_SysClk_PllGetConfiguration>:

cy_en_sysclk_status_t Cy_SysClk_PllGetConfiguration(uint32_t clkPath, cy_stc_pll_manual_config_t *config)
{
    cy_en_sysclk_status_t retVal = CY_SYSCLK_BAD_PARAM;
    clkPath--; /* to correctly access PLL config and status register structures */
    if (clkPath < CY_SRSS_NUM_PLL)
1000595c:	4a0f      	ldr	r2, [pc, #60]	@ (1000599c <Cy_SysClk_PllGetConfiguration+0x40>)
1000595e:	6812      	ldr	r2, [r2, #0]
10005960:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
    clkPath--; /* to correctly access PLL config and status register structures */
10005964:	1e43      	subs	r3, r0, #1
    if (clkPath < CY_SRSS_NUM_PLL)
10005966:	429a      	cmp	r2, r3
10005968:	d915      	bls.n	10005996 <Cy_SysClk_PllGetConfiguration+0x3a>
    {
        uint32_t tempReg = SRSS_CLK_PLL_CONFIG[clkPath];
1000596a:	f200 107f 	addw	r0, r0, #383	@ 0x17f
1000596e:	4b0c      	ldr	r3, [pc, #48]	@ (100059a0 <Cy_SysClk_PllGetConfiguration+0x44>)
10005970:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
        config->feedbackDiv  = (uint8_t)_FLD2VAL(SRSS_CLK_PLL_CONFIG_FEEDBACK_DIV,  tempReg);
10005974:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
10005978:	700a      	strb	r2, [r1, #0]
        config->referenceDiv = (uint8_t)_FLD2VAL(SRSS_CLK_PLL_CONFIG_REFERENCE_DIV, tempReg);
1000597a:	f3c3 2204 	ubfx	r2, r3, #8, #5
1000597e:	704a      	strb	r2, [r1, #1]
        config->outputDiv    = (uint8_t)_FLD2VAL(SRSS_CLK_PLL_CONFIG_OUTPUT_DIV,    tempReg);
10005980:	f3c3 4204 	ubfx	r2, r3, #16, #5
10005984:	708a      	strb	r2, [r1, #2]
        config->lfMode       =         _FLD2BOOL(SRSS_CLK_PLL_CONFIG_PLL_LF_MODE,   tempReg);
10005986:	f3c3 62c0 	ubfx	r2, r3, #27, #1
        config->outputMode   = (cy_en_fll_pll_output_mode_t)((uint32_t)_FLD2VAL(SRSS_CLK_PLL_CONFIG_BYPASS_SEL, tempReg));
1000598a:	f3c3 7301 	ubfx	r3, r3, #28, #2
        config->lfMode       =         _FLD2BOOL(SRSS_CLK_PLL_CONFIG_PLL_LF_MODE,   tempReg);
1000598e:	70ca      	strb	r2, [r1, #3]
        config->outputMode   = (cy_en_fll_pll_output_mode_t)((uint32_t)_FLD2VAL(SRSS_CLK_PLL_CONFIG_BYPASS_SEL, tempReg));
10005990:	710b      	strb	r3, [r1, #4]
        retVal = CY_SYSCLK_SUCCESS;
10005992:	2000      	movs	r0, #0
10005994:	4770      	bx	lr
    cy_en_sysclk_status_t retVal = CY_SYSCLK_BAD_PARAM;
10005996:	4803      	ldr	r0, [pc, #12]	@ (100059a4 <Cy_SysClk_PllGetConfiguration+0x48>)
    }
    return (retVal);
}
10005998:	4770      	bx	lr
1000599a:	bf00      	nop
1000599c:	08002c40 	.word	0x08002c40
100059a0:	40260000 	.word	0x40260000
100059a4:	004a0001 	.word	0x004a0001

100059a8 <Cy_SysClk_PllEnable>:


cy_en_sysclk_status_t Cy_SysClk_PllEnable(uint32_t clkPath, uint32_t timeoutus)
{
100059a8:	b570      	push	{r4, r5, r6, lr}
    cy_en_sysclk_status_t retVal = CY_SYSCLK_BAD_PARAM;
    bool zeroTimeout = (timeoutus == 0UL);
    clkPath--; /* to correctly access PLL config and status registers structures */
    if (clkPath < CY_SRSS_NUM_PLL)
100059aa:	4b22      	ldr	r3, [pc, #136]	@ (10005a34 <Cy_SysClk_PllEnable+0x8c>)
100059ac:	681b      	ldr	r3, [r3, #0]
100059ae:	f893 2043 	ldrb.w	r2, [r3, #67]	@ 0x43
    clkPath--; /* to correctly access PLL config and status registers structures */
100059b2:	1e43      	subs	r3, r0, #1
    if (clkPath < CY_SRSS_NUM_PLL)
100059b4:	429a      	cmp	r2, r3
{
100059b6:	460d      	mov	r5, r1
    if (clkPath < CY_SRSS_NUM_PLL)
100059b8:	d93a      	bls.n	10005a30 <Cy_SysClk_PllEnable+0x88>
        (void)zeroTimeout;
        retVal = (cy_en_sysclk_status_t)CY_PRA_FUNCTION_CALL_RETURN_PARAM(CY_PRA_MSG_TYPE_FUNC_POLICY, CY_PRA_CLK_FUNC_PLL_ENABLE, (clkPath + 1U));
#endif /* defined (CY_DEVICE_SECURE) */
#if ((CY_CPU_CORTEX_M0P) || (!defined(CY_DEVICE_SECURE)))
        /* first set the PLL enable bit */
        SRSS_CLK_PLL_CONFIG[clkPath] |= SRSS_CLK_PLL_CONFIG_ENABLE_Msk;
100059ba:	0080      	lsls	r0, r0, #2
100059bc:	f100 4480 	add.w	r4, r0, #1073741824	@ 0x40000000
100059c0:	f504 1418 	add.w	r4, r4, #2490368	@ 0x260000

        /* now do the timeout wait for PLL_STATUS, bit LOCKED */
        while((0UL == (SRSS_CLK_PLL_STATUS_LOCKED_Msk & SRSS_CLK_PLL_STATUS[clkPath])) && (0UL != timeoutus))
100059c4:	460e      	mov	r6, r1
        SRSS_CLK_PLL_CONFIG[clkPath] |= SRSS_CLK_PLL_CONFIG_ENABLE_Msk;
100059c6:	f8d4 35fc 	ldr.w	r3, [r4, #1532]	@ 0x5fc
100059ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
100059ce:	f8c4 35fc 	str.w	r3, [r4, #1532]	@ 0x5fc
        while((0UL == (SRSS_CLK_PLL_STATUS_LOCKED_Msk & SRSS_CLK_PLL_STATUS[clkPath])) && (0UL != timeoutus))
100059d2:	f8d4 363c 	ldr.w	r3, [r4, #1596]	@ 0x63c
100059d6:	07db      	lsls	r3, r3, #31
100059d8:	d419      	bmi.n	10005a0e <Cy_SysClk_PllEnable+0x66>
100059da:	b99e      	cbnz	r6, 10005a04 <Cy_SysClk_PllEnable+0x5c>
        {
            Cy_SysLib_DelayUs(1U);
            timeoutus--;
        }

        if (zeroTimeout || (0UL != timeoutus))
100059dc:	b1d5      	cbz	r5, 10005a14 <Cy_SysClk_PllEnable+0x6c>
            retVal = CY_SYSCLK_SUCCESS;
        }
        else
        {
            /* If lock doesn't occur, then bypass PLL */
            CY_REG32_CLR_SET(SRSS_CLK_PLL_CONFIG[clkPath], SRSS_CLK_PLL_CONFIG_BYPASS_SEL, CY_SYSCLK_FLLPLL_OUTPUT_INPUT);
100059de:	f8d4 35fc 	ldr.w	r3, [r4, #1532]	@ 0x5fc
100059e2:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
100059e6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
100059ea:	f8c4 35fc 	str.w	r3, [r4, #1532]	@ 0x5fc
            /* Wait at least 6 PLL clock cycles */
            Cy_SysLib_DelayUs(1U);
100059ee:	2001      	movs	r0, #1
100059f0:	f000 fa2a 	bl	10005e48 <Cy_SysLib_DelayUs>
            /* And now disable the PLL itself */
            SRSS_CLK_PLL_CONFIG[clkPath] &= ~SRSS_CLK_PLL_CONFIG_ENABLE_Msk;
100059f4:	f8d4 35fc 	ldr.w	r3, [r4, #1532]	@ 0x5fc
            retVal = CY_SYSCLK_TIMEOUT;
100059f8:	480f      	ldr	r0, [pc, #60]	@ (10005a38 <Cy_SysClk_PllEnable+0x90>)
            SRSS_CLK_PLL_CONFIG[clkPath] &= ~SRSS_CLK_PLL_CONFIG_ENABLE_Msk;
100059fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
100059fe:	f8c4 35fc 	str.w	r3, [r4, #1532]	@ 0x5fc
        }
#endif /* ((CY_CPU_CORTEX_M0P) || (!defined(CY_DEVICE_SECURE))) */
    }
    return (retVal);
}
10005a02:	bd70      	pop	{r4, r5, r6, pc}
            Cy_SysLib_DelayUs(1U);
10005a04:	2001      	movs	r0, #1
10005a06:	f000 fa1f 	bl	10005e48 <Cy_SysLib_DelayUs>
            timeoutus--;
10005a0a:	3e01      	subs	r6, #1
10005a0c:	e7e1      	b.n	100059d2 <Cy_SysClk_PllEnable+0x2a>
        if (zeroTimeout || (0UL != timeoutus))
10005a0e:	b10d      	cbz	r5, 10005a14 <Cy_SysClk_PllEnable+0x6c>
10005a10:	2e00      	cmp	r6, #0
10005a12:	d0e4      	beq.n	100059de <Cy_SysClk_PllEnable+0x36>
            if ((uint32_t)CY_SYSCLK_FLLPLL_OUTPUT_INPUT == (uint32_t)_FLD2VAL(SRSS_CLK_PLL_CONFIG_BYPASS_SEL, SRSS_CLK_PLL_CONFIG[clkPath]))
10005a14:	f8d4 35fc 	ldr.w	r3, [r4, #1532]	@ 0x5fc
10005a18:	f3c3 7301 	ubfx	r3, r3, #28, #2
10005a1c:	2b02      	cmp	r3, #2
10005a1e:	d105      	bne.n	10005a2c <Cy_SysClk_PllEnable+0x84>
                CY_REG32_CLR_SET(SRSS_CLK_PLL_CONFIG[clkPath], SRSS_CLK_PLL_CONFIG_BYPASS_SEL, CY_SYSCLK_FLLPLL_OUTPUT_OUTPUT);
10005a20:	f8d4 35fc 	ldr.w	r3, [r4, #1532]	@ 0x5fc
10005a24:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
10005a28:	f8c4 35fc 	str.w	r3, [r4, #1532]	@ 0x5fc
            retVal = CY_SYSCLK_SUCCESS;
10005a2c:	2000      	movs	r0, #0
    return (retVal);
10005a2e:	e7e8      	b.n	10005a02 <Cy_SysClk_PllEnable+0x5a>
    cy_en_sysclk_status_t retVal = CY_SYSCLK_BAD_PARAM;
10005a30:	4802      	ldr	r0, [pc, #8]	@ (10005a3c <Cy_SysClk_PllEnable+0x94>)
10005a32:	e7e6      	b.n	10005a02 <Cy_SysClk_PllEnable+0x5a>
10005a34:	08002c40 	.word	0x08002c40
10005a38:	004a0002 	.word	0x004a0002
10005a3c:	004a0001 	.word	0x004a0001

10005a40 <Cy_SysClk_DeepSleepCallback>:

    (void)callbackParams; /* Suppress "not used" warning */
    (void)changedSourcePaths;
    (void)pllAutoModes;

    switch (mode)
10005a40:	3901      	subs	r1, #1
{
10005a42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    switch (mode)
10005a46:	2907      	cmp	r1, #7
10005a48:	f200 80d0 	bhi.w	10005bec <Cy_SysClk_DeepSleepCallback+0x1ac>
10005a4c:	e8df f001 	tbb	[pc, r1]
10005a50:	13ce0d04 	.word	0x13ce0d04
10005a54:	6ececece 	.word	0x6ececece
    {
        case CY_SYSPM_CHECK_READY:
            /* Don't allow entry into Deep Sleep mode if currently measuring a frequency */
            if (!clkCounting)
10005a58:	4b71      	ldr	r3, [pc, #452]	@ (10005c20 <Cy_SysClk_DeepSleepCallback+0x1e0>)
10005a5a:	781a      	ldrb	r2, [r3, #0]
10005a5c:	2a00      	cmp	r2, #0
10005a5e:	f040 80c5 	bne.w	10005bec <Cy_SysClk_DeepSleepCallback+0x1ac>
            {
                /* Indicating that we can go into Deep Sleep.
                 * Prevent starting a new clock measurement until
                 * after we've come back from Deep Sleep.
                 */
                preventCounting = true;
10005a62:	4b70      	ldr	r3, [pc, #448]	@ (10005c24 <Cy_SysClk_DeepSleepCallback+0x1e4>)
10005a64:	2101      	movs	r1, #1
                else
                {
                    retVal = CY_SYSPM_SUCCESS;
                }

                preventCounting = false; /* Allow clock measurement */
10005a66:	7019      	strb	r1, [r3, #0]
#endif /* ((CY_CPU_CORTEX_M4) && (defined(CY_DEVICE_SECURE))) */
            }
            break;
10005a68:	e002      	b.n	10005a70 <Cy_SysClk_DeepSleepCallback+0x30>
            preventCounting = false;
10005a6a:	4b6e      	ldr	r3, [pc, #440]	@ (10005c24 <Cy_SysClk_DeepSleepCallback+0x1e4>)
10005a6c:	2200      	movs	r2, #0
10005a6e:	701a      	strb	r2, [r3, #0]
            break;
    }

    return (retVal);

}
10005a70:	4610      	mov	r0, r2
10005a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return (_FLD2BOOL(SRSS_CLK_FLL_CONFIG_FLL_ENABLE, SRSS_CLK_FLL_CONFIG));
10005a76:	4b6c      	ldr	r3, [pc, #432]	@ (10005c28 <Cy_SysClk_DeepSleepCallback+0x1e8>)
                changedSourcePaths = 0U;
10005a78:	4c6c      	ldr	r4, [pc, #432]	@ (10005c2c <Cy_SysClk_DeepSleepCallback+0x1ec>)
    return (_FLD2BOOL(SRSS_CLK_FLL_CONFIG_FLL_ENABLE, SRSS_CLK_FLL_CONFIG));
10005a7a:	f8d3 3580 	ldr.w	r3, [r3, #1408]	@ 0x580
                pllAutoModes = 0U;
10005a7e:	4d6c      	ldr	r5, [pc, #432]	@ (10005c30 <Cy_SysClk_DeepSleepCallback+0x1f0>)
                changedSourcePaths = 0U;
10005a80:	2200      	movs	r2, #0
                    if ((0UL == fllpll) ? Cy_SysClk_FllIsEnabled() : Cy_SysClk_PllIsEnabled(fllpll))
10005a82:	4293      	cmp	r3, r2
                changedSourcePaths = 0U;
10005a84:	8022      	strh	r2, [r4, #0]
                pllAutoModes = 0U;
10005a86:	802a      	strh	r2, [r5, #0]
                    if ((0UL == fllpll) ? Cy_SysClk_FllIsEnabled() : Cy_SysClk_PllIsEnabled(fllpll))
10005a88:	db0d      	blt.n	10005aa6 <Cy_SysClk_DeepSleepCallback+0x66>
                for (fllpll = 0UL; fllpll <= CY_SRSS_NUM_PLL; fllpll++)
10005a8a:	496a      	ldr	r1, [pc, #424]	@ (10005c34 <Cy_SysClk_DeepSleepCallback+0x1f4>)
10005a8c:	680b      	ldr	r3, [r1, #0]
10005a8e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
10005a92:	3201      	adds	r2, #1
10005a94:	4293      	cmp	r3, r2
10005a96:	d201      	bcs.n	10005a9c <Cy_SysClk_DeepSleepCallback+0x5c>
                retVal = CY_SYSPM_SUCCESS;
10005a98:	2200      	movs	r2, #0
10005a9a:	e7e9      	b.n	10005a70 <Cy_SysClk_DeepSleepCallback+0x30>
                    if ((0UL == fllpll) ? Cy_SysClk_FllIsEnabled() : Cy_SysClk_PllIsEnabled(fllpll))
10005a9c:	4610      	mov	r0, r2
10005a9e:	f7ff fee1 	bl	10005864 <Cy_SysClk_PllIsEnabled>
10005aa2:	2800      	cmp	r0, #0
10005aa4:	d0f2      	beq.n	10005a8c <Cy_SysClk_DeepSleepCallback+0x4c>
                        if (Cy_SysClk_ClkPathGetSource(fllpll) == CY_SYSCLK_CLKPATH_IN_ECO)
10005aa6:	4610      	mov	r0, r2
10005aa8:	f7ff fdba 	bl	10005620 <Cy_SysClk_ClkPathGetSource>
10005aac:	2802      	cmp	r0, #2
10005aae:	d131      	bne.n	10005b14 <Cy_SysClk_DeepSleepCallback+0xd4>
                            if (0UL == fllpll)
10005ab0:	b992      	cbnz	r2, 10005ad8 <Cy_SysClk_DeepSleepCallback+0x98>
                                CY_REG32_CLR_SET(SRSS_CLK_FLL_CONFIG3, SRSS_CLK_FLL_CONFIG3_BYPASS_SEL, CY_SYSCLK_FLLPLL_OUTPUT_INPUT);
10005ab2:	495d      	ldr	r1, [pc, #372]	@ (10005c28 <Cy_SysClk_DeepSleepCallback+0x1e8>)
10005ab4:	f8d1 3588 	ldr.w	r3, [r1, #1416]	@ 0x588
10005ab8:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
10005abc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
10005ac0:	f8c1 3588 	str.w	r3, [r1, #1416]	@ 0x588
                            (void)Cy_SysClk_ClkPathSetSource(fllpll, CY_SYSCLK_CLKPATH_IN_IMO);
10005ac4:	2100      	movs	r1, #0
10005ac6:	4610      	mov	r0, r2
10005ac8:	f7ff fd82 	bl	100055d0 <Cy_SysClk_ClkPathSetSource>
                            changedSourcePaths |= (uint16_t)(1UL << fllpll);
10005acc:	8821      	ldrh	r1, [r4, #0]
10005ace:	2301      	movs	r3, #1
10005ad0:	4093      	lsls	r3, r2
10005ad2:	430b      	orrs	r3, r1
10005ad4:	8023      	strh	r3, [r4, #0]
10005ad6:	e7d8      	b.n	10005a8a <Cy_SysClk_DeepSleepCallback+0x4a>
                                if (((uint32_t)CY_SYSCLK_FLLPLL_OUTPUT_AUTO  == _FLD2VAL(SRSS_CLK_PLL_CONFIG_BYPASS_SEL, SRSS_CLK_PLL_CONFIG[fllpll - 1UL])) ||
10005ad8:	0093      	lsls	r3, r2, #2
10005ada:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
10005ade:	f503 1318 	add.w	r3, r3, #2490368	@ 0x260000
10005ae2:	f8d3 15fc 	ldr.w	r1, [r3, #1532]	@ 0x5fc
10005ae6:	f011 5f40 	tst.w	r1, #805306368	@ 0x30000000
10005aea:	d005      	beq.n	10005af8 <Cy_SysClk_DeepSleepCallback+0xb8>
                                    ((uint32_t)CY_SYSCLK_FLLPLL_OUTPUT_AUTO1 == _FLD2VAL(SRSS_CLK_PLL_CONFIG_BYPASS_SEL, SRSS_CLK_PLL_CONFIG[fllpll - 1UL])))
10005aec:	f8d3 15fc 	ldr.w	r1, [r3, #1532]	@ 0x5fc
10005af0:	f3c1 7101 	ubfx	r1, r1, #28, #2
                                if (((uint32_t)CY_SYSCLK_FLLPLL_OUTPUT_AUTO  == _FLD2VAL(SRSS_CLK_PLL_CONFIG_BYPASS_SEL, SRSS_CLK_PLL_CONFIG[fllpll - 1UL])) ||
10005af4:	2901      	cmp	r1, #1
10005af6:	d104      	bne.n	10005b02 <Cy_SysClk_DeepSleepCallback+0xc2>
                                    pllAutoModes |= (uint16_t)(1UL << fllpll);
10005af8:	8828      	ldrh	r0, [r5, #0]
10005afa:	2101      	movs	r1, #1
10005afc:	4091      	lsls	r1, r2
10005afe:	4301      	orrs	r1, r0
10005b00:	8029      	strh	r1, [r5, #0]
                                CY_REG32_CLR_SET(SRSS_CLK_PLL_CONFIG[fllpll - 1UL], SRSS_CLK_PLL_CONFIG_BYPASS_SEL, CY_SYSCLK_FLLPLL_OUTPUT_INPUT);
10005b02:	f8d3 15fc 	ldr.w	r1, [r3, #1532]	@ 0x5fc
10005b06:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
10005b0a:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
10005b0e:	f8c3 15fc 	str.w	r1, [r3, #1532]	@ 0x5fc
10005b12:	e7d7      	b.n	10005ac4 <Cy_SysClk_DeepSleepCallback+0x84>
                        else if (0UL == fllpll)
10005b14:	2a00      	cmp	r2, #0
10005b16:	d1b8      	bne.n	10005a8a <Cy_SysClk_DeepSleepCallback+0x4a>
                            CY_REG32_CLR_SET(SRSS_CLK_FLL_CONFIG3, SRSS_CLK_FLL_CONFIG3_BYPASS_SEL, CY_SYSCLK_FLLPLL_OUTPUT_INPUT);
10005b18:	4943      	ldr	r1, [pc, #268]	@ (10005c28 <Cy_SysClk_DeepSleepCallback+0x1e8>)
10005b1a:	f8d1 3588 	ldr.w	r3, [r1, #1416]	@ 0x588
10005b1e:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
10005b22:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
10005b26:	f8c1 3588 	str.w	r3, [r1, #1416]	@ 0x588
10005b2a:	e7ae      	b.n	10005a8a <Cy_SysClk_DeepSleepCallback+0x4a>
                if (0U != changedSourcePaths)
10005b2c:	4b3f      	ldr	r3, [pc, #252]	@ (10005c2c <Cy_SysClk_DeepSleepCallback+0x1ec>)
10005b2e:	881e      	ldrh	r6, [r3, #0]
10005b30:	b98e      	cbnz	r6, 10005b56 <Cy_SysClk_DeepSleepCallback+0x116>
    return (_FLD2BOOL(SRSS_CLK_FLL_CONFIG_FLL_ENABLE, SRSS_CLK_FLL_CONFIG));
10005b32:	4b3d      	ldr	r3, [pc, #244]	@ (10005c28 <Cy_SysClk_DeepSleepCallback+0x1e8>)
10005b34:	f8d3 2580 	ldr.w	r2, [r3, #1408]	@ 0x580
                else if (Cy_SysClk_FllIsEnabled())
10005b38:	2a00      	cmp	r2, #0
10005b3a:	db4c      	blt.n	10005bd6 <Cy_SysClk_DeepSleepCallback+0x196>
                        retVal = CY_SYSPM_SUCCESS;
10005b3c:	2200      	movs	r2, #0
10005b3e:	e007      	b.n	10005b50 <Cy_SysClk_DeepSleepCallback+0x110>
                        timeout--;
10005b40:	3c01      	subs	r4, #1
                    while ((CY_SYSCLK_ECOSTAT_STABLE != Cy_SysClk_EcoGetStatus()) && (0UL != timeout))
10005b42:	f7ff fd29 	bl	10005598 <Cy_SysClk_EcoGetStatus>
10005b46:	2802      	cmp	r0, #2
10005b48:	d007      	beq.n	10005b5a <Cy_SysClk_DeepSleepCallback+0x11a>
10005b4a:	2c00      	cmp	r4, #0
10005b4c:	d1f8      	bne.n	10005b40 <Cy_SysClk_DeepSleepCallback+0x100>
                retVal = CY_SYSPM_TIMEOUT;
10005b4e:	4a3a      	ldr	r2, [pc, #232]	@ (10005c38 <Cy_SysClk_DeepSleepCallback+0x1f8>)
                preventCounting = false; /* Allow clock measurement */
10005b50:	4b34      	ldr	r3, [pc, #208]	@ (10005c24 <Cy_SysClk_DeepSleepCallback+0x1e4>)
10005b52:	2100      	movs	r1, #0
10005b54:	e787      	b.n	10005a66 <Cy_SysClk_DeepSleepCallback+0x26>
                uint32_t timeout = TIMEOUT;
10005b56:	4c39      	ldr	r4, [pc, #228]	@ (10005c3c <Cy_SysClk_DeepSleepCallback+0x1fc>)
10005b58:	e7f3      	b.n	10005b42 <Cy_SysClk_DeepSleepCallback+0x102>
                    if (0UL != timeout)
10005b5a:	2c00      	cmp	r4, #0
10005b5c:	d0f7      	beq.n	10005b4e <Cy_SysClk_DeepSleepCallback+0x10e>
                retVal = CY_SYSPM_TIMEOUT;
10005b5e:	4a36      	ldr	r2, [pc, #216]	@ (10005c38 <Cy_SysClk_DeepSleepCallback+0x1f8>)
                                        if (0U != (pllAutoModes & (uint16_t)(1UL << fllpll)))
10005b60:	f8df 90cc 	ldr.w	r9, [pc, #204]	@ 10005c30 <Cy_SysClk_DeepSleepCallback+0x1f0>
    return (_FLD2BOOL(SRSS_CLK_FLL_STATUS_LOCKED, SRSS_CLK_FLL_STATUS));
10005b64:	4f30      	ldr	r7, [pc, #192]	@ (10005c28 <Cy_SysClk_DeepSleepCallback+0x1e8>)
                        for (fllpll = 0UL; fllpll <= CY_SRSS_NUM_PLL; fllpll++)
10005b66:	f8df 80cc 	ldr.w	r8, [pc, #204]	@ 10005c34 <Cy_SysClk_DeepSleepCallback+0x1f4>
10005b6a:	2500      	movs	r5, #0
                            if (0U != (changedSourcePaths & (uint16_t)(1UL << fllpll)))
10005b6c:	2301      	movs	r3, #1
10005b6e:	40ab      	lsls	r3, r5
10005b70:	4233      	tst	r3, r6
10005b72:	fa1f fa83 	uxth.w	sl, r3
10005b76:	d017      	beq.n	10005ba8 <Cy_SysClk_DeepSleepCallback+0x168>
                                (void)Cy_SysClk_ClkPathSetSource(fllpll, CY_SYSCLK_CLKPATH_IN_ECO);
10005b78:	2102      	movs	r1, #2
10005b7a:	4628      	mov	r0, r5
10005b7c:	f7ff fd28 	bl	100055d0 <Cy_SysClk_ClkPathSetSource>
                                if (0UL == fllpll)
10005b80:	b165      	cbz	r5, 10005b9c <Cy_SysClk_DeepSleepCallback+0x15c>
10005b82:	00ab      	lsls	r3, r5, #2
10005b84:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
10005b88:	f503 1318 	add.w	r3, r3, #2490368	@ 0x260000
    return (_FLD2BOOL(SRSS_CLK_PLL_STATUS_LOCKED, SRSS_CLK_PLL_STATUS[clkPath]));
10005b8c:	f8d3 163c 	ldr.w	r1, [r3, #1596]	@ 0x63c
                                    while ((!Cy_SysClk_PllLocked(fllpll)) && (0UL != timeout))
10005b90:	07c8      	lsls	r0, r1, #31
10005b92:	d437      	bmi.n	10005c04 <Cy_SysClk_DeepSleepCallback+0x1c4>
10005b94:	b144      	cbz	r4, 10005ba8 <Cy_SysClk_DeepSleepCallback+0x168>
                                        timeout--;
10005b96:	3c01      	subs	r4, #1
10005b98:	e7f8      	b.n	10005b8c <Cy_SysClk_DeepSleepCallback+0x14c>
                                        timeout--;
10005b9a:	3c01      	subs	r4, #1
    return (_FLD2BOOL(SRSS_CLK_FLL_STATUS_LOCKED, SRSS_CLK_FLL_STATUS));
10005b9c:	f8d7 3590 	ldr.w	r3, [r7, #1424]	@ 0x590
                                    while ((!Cy_SysClk_FllLocked()) && (0UL != timeout))
10005ba0:	07db      	lsls	r3, r3, #31
10005ba2:	d425      	bmi.n	10005bf0 <Cy_SysClk_DeepSleepCallback+0x1b0>
10005ba4:	2c00      	cmp	r4, #0
10005ba6:	d1f8      	bne.n	10005b9a <Cy_SysClk_DeepSleepCallback+0x15a>
                        for (fllpll = 0UL; fllpll <= CY_SRSS_NUM_PLL; fllpll++)
10005ba8:	f8d8 3000 	ldr.w	r3, [r8]
10005bac:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
10005bb0:	3501      	adds	r5, #1
10005bb2:	42ab      	cmp	r3, r5
10005bb4:	d2da      	bcs.n	10005b6c <Cy_SysClk_DeepSleepCallback+0x12c>
10005bb6:	e7cb      	b.n	10005b50 <Cy_SysClk_DeepSleepCallback+0x110>
                                            CY_REG32_CLR_SET(SRSS_CLK_PLL_CONFIG[fllpll - 1UL], SRSS_CLK_PLL_CONFIG_BYPASS_SEL, CY_SYSCLK_FLLPLL_OUTPUT_OUTPUT);
10005bb8:	f8d3 15fc 	ldr.w	r1, [r3, #1532]	@ 0x5fc
10005bbc:	f041 5140 	orr.w	r1, r1, #805306368	@ 0x30000000
10005bc0:	f8c3 15fc 	str.w	r1, [r3, #1532]	@ 0x5fc
10005bc4:	e7f0      	b.n	10005ba8 <Cy_SysClk_DeepSleepCallback+0x168>
                        timeout--;
10005bc6:	3a01      	subs	r2, #1
    return (_FLD2BOOL(SRSS_CLK_FLL_STATUS_LOCKED, SRSS_CLK_FLL_STATUS));
10005bc8:	f8d3 1590 	ldr.w	r1, [r3, #1424]	@ 0x590
                    while ((!Cy_SysClk_FllLocked()) && (0UL != timeout))
10005bcc:	07c9      	lsls	r1, r1, #31
10005bce:	d404      	bmi.n	10005bda <Cy_SysClk_DeepSleepCallback+0x19a>
10005bd0:	2a00      	cmp	r2, #0
10005bd2:	d1f8      	bne.n	10005bc6 <Cy_SysClk_DeepSleepCallback+0x186>
10005bd4:	e7bb      	b.n	10005b4e <Cy_SysClk_DeepSleepCallback+0x10e>
                uint32_t timeout = TIMEOUT;
10005bd6:	4a19      	ldr	r2, [pc, #100]	@ (10005c3c <Cy_SysClk_DeepSleepCallback+0x1fc>)
10005bd8:	e7f6      	b.n	10005bc8 <Cy_SysClk_DeepSleepCallback+0x188>
                    if (0UL != timeout)
10005bda:	2a00      	cmp	r2, #0
10005bdc:	d0b7      	beq.n	10005b4e <Cy_SysClk_DeepSleepCallback+0x10e>
                        CY_REG32_CLR_SET(SRSS_CLK_FLL_CONFIG3, SRSS_CLK_FLL_CONFIG3_BYPASS_SEL, CY_SYSCLK_FLLPLL_OUTPUT_OUTPUT);
10005bde:	f8d3 2588 	ldr.w	r2, [r3, #1416]	@ 0x588
10005be2:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
10005be6:	f8c3 2588 	str.w	r2, [r3, #1416]	@ 0x588
10005bea:	e7a7      	b.n	10005b3c <Cy_SysClk_DeepSleepCallback+0xfc>
    cy_en_syspm_status_t retVal = CY_SYSPM_FAIL;
10005bec:	4a14      	ldr	r2, [pc, #80]	@ (10005c40 <Cy_SysClk_DeepSleepCallback+0x200>)
    return (retVal);
10005bee:	e73f      	b.n	10005a70 <Cy_SysClk_DeepSleepCallback+0x30>
                                if (0UL != timeout)
10005bf0:	2c00      	cmp	r4, #0
10005bf2:	d0d9      	beq.n	10005ba8 <Cy_SysClk_DeepSleepCallback+0x168>
                                        CY_REG32_CLR_SET(SRSS_CLK_FLL_CONFIG3, SRSS_CLK_FLL_CONFIG3_BYPASS_SEL, CY_SYSCLK_FLLPLL_OUTPUT_OUTPUT);
10005bf4:	f8d7 3588 	ldr.w	r3, [r7, #1416]	@ 0x588
10005bf8:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
10005bfc:	f8c7 3588 	str.w	r3, [r7, #1416]	@ 0x588
                                    retVal = CY_SYSPM_SUCCESS;
10005c00:	2200      	movs	r2, #0
10005c02:	e7d1      	b.n	10005ba8 <Cy_SysClk_DeepSleepCallback+0x168>
                                if (0UL != timeout)
10005c04:	2c00      	cmp	r4, #0
10005c06:	d0cf      	beq.n	10005ba8 <Cy_SysClk_DeepSleepCallback+0x168>
                                        if (0U != (pllAutoModes & (uint16_t)(1UL << fllpll)))
10005c08:	f8b9 2000 	ldrh.w	r2, [r9]
10005c0c:	ea1a 0202 	ands.w	r2, sl, r2
10005c10:	d0d2      	beq.n	10005bb8 <Cy_SysClk_DeepSleepCallback+0x178>
                                            CY_REG32_CLR_SET(SRSS_CLK_PLL_CONFIG[fllpll - 1UL], SRSS_CLK_PLL_CONFIG_BYPASS_SEL, CY_SYSCLK_FLLPLL_OUTPUT_AUTO);
10005c12:	f8d3 25fc 	ldr.w	r2, [r3, #1532]	@ 0x5fc
10005c16:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
10005c1a:	f8c3 25fc 	str.w	r2, [r3, #1532]	@ 0x5fc
10005c1e:	e7ef      	b.n	10005c00 <Cy_SysClk_DeepSleepCallback+0x1c0>
10005c20:	08002c62 	.word	0x08002c62
10005c24:	08002c6e 	.word	0x08002c6e
10005c28:	40260000 	.word	0x40260000
10005c2c:	08002c60 	.word	0x08002c60
10005c30:	08002c6c 	.word	0x08002c6c
10005c34:	08002c40 	.word	0x08002c40
10005c38:	00420002 	.word	0x00420002
10005c3c:	000f4240 	.word	0x000f4240
10005c40:	004200ff 	.word	0x004200ff

10005c44 <Cy_SysClk_FllGetFrequency>:
    return (CY_SYSLIB_DIV_ROUND(freq, 1UL + (uint32_t)Cy_SysClk_ClkTimerGetDivider()));
}


uint32_t Cy_SysClk_FllGetFrequency(void)
{
10005c44:	b530      	push	{r4, r5, lr}
10005c46:	b087      	sub	sp, #28
    uint32_t oDiv;    /* FLL output divider */
    bool  enabled;    /* FLL enable status; n/a for direct */
    uint32_t freq = 0UL;    /* FLL Frequency */

    cy_stc_fll_manual_config_t fllCfg;
    Cy_SysClk_FllGetConfiguration(&fllCfg);
10005c48:	a801      	add	r0, sp, #4
10005c4a:	f7ff fd97 	bl	1000577c <Cy_SysClk_FllGetConfiguration>
    return (_FLD2BOOL(SRSS_CLK_FLL_CONFIG_FLL_ENABLE, SRSS_CLK_FLL_CONFIG));
10005c4e:	4b11      	ldr	r3, [pc, #68]	@ (10005c94 <Cy_SysClk_FllGetFrequency+0x50>)
10005c50:	f8d3 3580 	ldr.w	r3, [r3, #1408]	@ 0x580
    enabled = (Cy_SysClk_FllIsEnabled()) && (CY_SYSCLK_FLLPLL_OUTPUT_INPUT != fllCfg.outputMode);
10005c54:	2b00      	cmp	r3, #0
10005c56:	da18      	bge.n	10005c8a <Cy_SysClk_FllGetFrequency+0x46>
10005c58:	f89d 3012 	ldrb.w	r3, [sp, #18]
10005c5c:	2b02      	cmp	r3, #2
10005c5e:	d014      	beq.n	10005c8a <Cy_SysClk_FllGetFrequency+0x46>
    fDiv = fllCfg.fllMult;
    rDiv = fllCfg.refDiv;
10005c60:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    oDiv = (fllCfg.enableOutputDiv) ? 2UL : 1UL;

    if (enabled && /* If FLL is enabled and not bypassed */
10005c64:	b199      	cbz	r1, 10005c8e <Cy_SysClk_FllGetFrequency+0x4a>
    oDiv = (fllCfg.enableOutputDiv) ? 2UL : 1UL;
10005c66:	f89d 400b 	ldrb.w	r4, [sp, #11]
    fDiv = fllCfg.fllMult;
10005c6a:	9d01      	ldr	r5, [sp, #4]
        (0UL != rDiv)) /* to avoid division by zero */
    {
        freq = Cy_SysClk_ClkPathMuxGetFrequency(0UL); /* FLL mapped always to path 0 */
10005c6c:	2000      	movs	r0, #0
10005c6e:	f7ff fce9 	bl	10005644 <Cy_SysClk_ClkPathMuxGetFrequency>
        freq = (uint32_t)CY_SYSLIB_DIV_ROUND(((uint64_t)freq * (uint64_t)fDiv),
10005c72:	fb04 1201 	mla	r2, r4, r1, r1
    oDiv = (fllCfg.enableOutputDiv) ? 2UL : 1UL;
10005c76:	2300      	movs	r3, #0
        freq = (uint32_t)CY_SYSLIB_DIV_ROUND(((uint64_t)freq * (uint64_t)fDiv),
10005c78:	0854      	lsrs	r4, r2, #1
10005c7a:	0859      	lsrs	r1, r3, #1
10005c7c:	fbe0 4105 	umlal	r4, r1, r0, r5
10005c80:	4620      	mov	r0, r4
10005c82:	f002 ff73 	bl	10008b6c <__aeabi_uldivmod>
                                             ((uint64_t)rDiv * (uint64_t)oDiv));
    }

    return (freq);
}
10005c86:	b007      	add	sp, #28
10005c88:	bd30      	pop	{r4, r5, pc}
    uint32_t freq = 0UL;    /* FLL Frequency */
10005c8a:	2000      	movs	r0, #0
10005c8c:	e7fb      	b.n	10005c86 <Cy_SysClk_FllGetFrequency+0x42>
10005c8e:	4608      	mov	r0, r1
    return (freq);
10005c90:	e7f9      	b.n	10005c86 <Cy_SysClk_FllGetFrequency+0x42>
10005c92:	bf00      	nop
10005c94:	40260000 	.word	0x40260000

10005c98 <Cy_SysClk_PllGetFrequency>:

uint32_t Cy_SysClk_PllGetFrequency(uint32_t clkPath)
{
10005c98:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint32_t rDiv = 0UL;    /* PLL reference divider */
    uint32_t oDiv = 0UL;    /* PLL output divider */
    bool  enabled = false;    /* PLL enable status; n/a for direct */
    uint32_t freq=0UL;    /* PLL Frequency */

    if((CY_SRSS_NUM_PLL > 0UL) && (clkPath > 0UL))
10005c9a:	4b1a      	ldr	r3, [pc, #104]	@ (10005d04 <Cy_SysClk_PllGetFrequency+0x6c>)
10005c9c:	681b      	ldr	r3, [r3, #0]
10005c9e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
{
10005ca2:	4604      	mov	r4, r0
    if((CY_SRSS_NUM_PLL > 0UL) && (clkPath > 0UL))
10005ca4:	b133      	cbz	r3, 10005cb4 <Cy_SysClk_PllGetFrequency+0x1c>
10005ca6:	b348      	cbz	r0, 10005cfc <Cy_SysClk_PllGetFrequency+0x64>
    {
        CY_ASSERT_L1(clkPath < CY_SRSS_NUM_CLKPATH);

        if (clkPath <= CY_SRSS_NUM_PLL)
10005ca8:	4283      	cmp	r3, r0
10005caa:	d303      	bcc.n	10005cb4 <Cy_SysClk_PllGetFrequency+0x1c>
        {
            cy_stc_pll_manual_config_t pllcfg;
            if (CY_SYSCLK_SUCCESS == Cy_SysClk_PllGetConfiguration(clkPath, &pllcfg))
10005cac:	4669      	mov	r1, sp
10005cae:	f7ff fe55 	bl	1000595c <Cy_SysClk_PllGetConfiguration>
10005cb2:	b108      	cbz	r0, 10005cb8 <Cy_SysClk_PllGetFrequency+0x20>
    uint32_t freq=0UL;    /* PLL Frequency */
10005cb4:	2400      	movs	r4, #0
10005cb6:	e021      	b.n	10005cfc <Cy_SysClk_PllGetFrequency+0x64>
            {
                enabled = (Cy_SysClk_PllIsEnabled(clkPath)) && (CY_SYSCLK_FLLPLL_OUTPUT_INPUT != pllcfg.outputMode);
10005cb8:	4620      	mov	r0, r4
10005cba:	f7ff fdd3 	bl	10005864 <Cy_SysClk_PllIsEnabled>
10005cbe:	b120      	cbz	r0, 10005cca <Cy_SysClk_PllGetFrequency+0x32>
10005cc0:	f89d 0004 	ldrb.w	r0, [sp, #4]
10005cc4:	3802      	subs	r0, #2
10005cc6:	bf18      	it	ne
10005cc8:	2001      	movne	r0, #1
                fDiv = pllcfg.feedbackDiv;
10005cca:	f89d 6000 	ldrb.w	r6, [sp]
                rDiv = pllcfg.referenceDiv;
10005cce:	f89d 5001 	ldrb.w	r5, [sp, #1]
                oDiv = pllcfg.outputDiv;
10005cd2:	f89d 1002 	ldrb.w	r1, [sp, #2]
            }

            if (enabled && /* If PLL is enabled and not bypassed */
10005cd6:	2800      	cmp	r0, #0
10005cd8:	d0ec      	beq.n	10005cb4 <Cy_SysClk_PllGetFrequency+0x1c>
10005cda:	2d00      	cmp	r5, #0
10005cdc:	d0ea      	beq.n	10005cb4 <Cy_SysClk_PllGetFrequency+0x1c>
            (0UL != rDiv) && (0UL != oDiv)) /* to avoid division by zero */
10005cde:	2900      	cmp	r1, #0
10005ce0:	d0e8      	beq.n	10005cb4 <Cy_SysClk_PllGetFrequency+0x1c>
            {
                freq = Cy_SysClk_ClkPathMuxGetFrequency(clkPath);
10005ce2:	4620      	mov	r0, r4
10005ce4:	f7ff fcae 	bl	10005644 <Cy_SysClk_ClkPathMuxGetFrequency>
                freq = (uint32_t)CY_SYSLIB_DIV_ROUND(((uint64_t)freq * (uint64_t)fDiv),
10005ce8:	fba5 2301 	umull	r2, r3, r5, r1
10005cec:	0854      	lsrs	r4, r2, #1
10005cee:	0859      	lsrs	r1, r3, #1
10005cf0:	fbe0 4106 	umlal	r4, r1, r0, r6
10005cf4:	4620      	mov	r0, r4
10005cf6:	f002 ff39 	bl	10008b6c <__aeabi_uldivmod>
10005cfa:	4604      	mov	r4, r0
            }
        }
    }

    return (freq);
}
10005cfc:	4620      	mov	r0, r4
10005cfe:	b002      	add	sp, #8
10005d00:	bd70      	pop	{r4, r5, r6, pc}
10005d02:	bf00      	nop
10005d04:	08002c40 	.word	0x08002c40

10005d08 <Cy_SysClk_ClkPathGetFrequency>:
{
10005d08:	b510      	push	{r4, lr}
    if (clkPath == (uint32_t)CY_SYSCLK_CLKHF_IN_CLKPATH0) /* FLL? (always path 0) */
10005d0a:	4604      	mov	r4, r0
10005d0c:	b918      	cbnz	r0, 10005d16 <Cy_SysClk_ClkPathGetFrequency+0xe>
        freq = Cy_SysClk_FllGetFrequency();
10005d0e:	f7ff ff99 	bl	10005c44 <Cy_SysClk_FllGetFrequency>
    if(freq==0UL)
10005d12:	b130      	cbz	r0, 10005d22 <Cy_SysClk_ClkPathGetFrequency+0x1a>
}
10005d14:	bd10      	pop	{r4, pc}
    else if (clkPath <= CY_SRSS_NUM_PLL) /* PLL? (always path 1...N)*/
10005d16:	4b07      	ldr	r3, [pc, #28]	@ (10005d34 <Cy_SysClk_ClkPathGetFrequency+0x2c>)
10005d18:	681b      	ldr	r3, [r3, #0]
10005d1a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
10005d1e:	4283      	cmp	r3, r0
10005d20:	d204      	bcs.n	10005d2c <Cy_SysClk_ClkPathGetFrequency+0x24>
        freq = Cy_SysClk_ClkPathMuxGetFrequency(clkPath);
10005d22:	4620      	mov	r0, r4
}
10005d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        freq = Cy_SysClk_ClkPathMuxGetFrequency(clkPath);
10005d28:	f7ff bc8c 	b.w	10005644 <Cy_SysClk_ClkPathMuxGetFrequency>
        freq = Cy_SysClk_PllGetFrequency(clkPath);
10005d2c:	f7ff ffb4 	bl	10005c98 <Cy_SysClk_PllGetFrequency>
10005d30:	e7ef      	b.n	10005d12 <Cy_SysClk_ClkPathGetFrequency+0xa>
10005d32:	bf00      	nop
10005d34:	08002c40 	.word	0x08002c40

10005d38 <Cy_SysClk_ClkHfGetFrequency>:
{
10005d38:	b510      	push	{r4, lr}
10005d3a:	4602      	mov	r2, r0
    uint32_t pDiv = 1UL << (uint32_t)Cy_SysClk_ClkHfGetDivider(clkHf); /* root prescaler (1/2/4/8) */
10005d3c:	f7ff fbd6 	bl	100054ec <Cy_SysClk_ClkHfGetDivider>
    return ((cy_en_clkhf_in_sources_t)((uint32_t)(_FLD2VAL(SRSS_CLK_ROOT_SELECT_ROOT_MUX, SRSS_CLK_ROOT_SELECT[clkHf]))));
10005d40:	32e0      	adds	r2, #224	@ 0xe0
10005d42:	4b07      	ldr	r3, [pc, #28]	@ (10005d60 <Cy_SysClk_ClkHfGetFrequency+0x28>)
    uint32_t pDiv = 1UL << (uint32_t)Cy_SysClk_ClkHfGetDivider(clkHf); /* root prescaler (1/2/4/8) */
10005d44:	4604      	mov	r4, r0
    return ((cy_en_clkhf_in_sources_t)((uint32_t)(_FLD2VAL(SRSS_CLK_ROOT_SELECT_ROOT_MUX, SRSS_CLK_ROOT_SELECT[clkHf]))));
10005d46:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    uint32_t freq = Cy_SysClk_ClkPathGetFrequency(path);
10005d4a:	f000 000f 	and.w	r0, r0, #15
10005d4e:	f7ff ffdb 	bl	10005d08 <Cy_SysClk_ClkPathGetFrequency>
    uint32_t pDiv = 1UL << (uint32_t)Cy_SysClk_ClkHfGetDivider(clkHf); /* root prescaler (1/2/4/8) */
10005d52:	2301      	movs	r3, #1
10005d54:	40a3      	lsls	r3, r4
    return (CY_SYSLIB_DIV_ROUND(freq, pDiv));
10005d56:	eb00 0053 	add.w	r0, r0, r3, lsr #1
}
10005d5a:	40e0      	lsrs	r0, r4
10005d5c:	bd10      	pop	{r4, pc}
10005d5e:	bf00      	nop
10005d60:	40260000 	.word	0x40260000

10005d64 <Cy_SysClk_ClkPeriGetFrequency>:
{
10005d64:	b508      	push	{r3, lr}
    uint32_t locFreq = Cy_SysClk_ClkHfGetFrequency(0UL); /* Get root frequency */
10005d66:	2000      	movs	r0, #0
10005d68:	f7ff ffe6 	bl	10005d38 <Cy_SysClk_ClkHfGetFrequency>
10005d6c:	4601      	mov	r1, r0
    uint32_t locDiv = 1UL + (uint32_t)Cy_SysClk_ClkPeriGetDivider(); /* peri prescaler (1-256) */
10005d6e:	f7ff fb0f 	bl	10005390 <Cy_SysClk_ClkPeriGetDivider>
10005d72:	3001      	adds	r0, #1
    return (CY_SYSLIB_DIV_ROUND(locFreq, locDiv));
10005d74:	eb01 0150 	add.w	r1, r1, r0, lsr #1
}
10005d78:	fbb1 f0f0 	udiv	r0, r1, r0
10005d7c:	bd08      	pop	{r3, pc}

10005d7e <Cy_SysClk_ClkSlowGetFrequency>:
{
10005d7e:	b508      	push	{r3, lr}
    uint32_t locFreq = Cy_SysClk_ClkPeriGetFrequency(); /* Get Peri frequency */
10005d80:	f7ff fff0 	bl	10005d64 <Cy_SysClk_ClkPeriGetFrequency>
10005d84:	4601      	mov	r1, r0
    uint32_t locDiv = 1UL + (uint32_t)Cy_SysClk_ClkSlowGetDivider(); /* peri prescaler (1-256) */
10005d86:	f7ff fa9d 	bl	100052c4 <Cy_SysClk_ClkSlowGetDivider>
10005d8a:	3001      	adds	r0, #1
    return (CY_SYSLIB_DIV_ROUND(locFreq, locDiv));
10005d8c:	eb01 0150 	add.w	r1, r1, r0, lsr #1
}
10005d90:	fbb1 f0f0 	udiv	r0, r1, r0
10005d94:	bd08      	pop	{r3, pc}
	...

10005d98 <Cy_SysInt_SetVector>:
cy_israddress Cy_SysInt_SetVector(IRQn_Type IRQn, cy_israddress userIsr)
{
    cy_israddress prevIsr;

    /* Set the new vector only if it was moved to __ramVectors */
    if (SCB->VTOR == (uint32_t)&__ramVectors)
10005d98:	4b07      	ldr	r3, [pc, #28]	@ (10005db8 <Cy_SysInt_SetVector+0x20>)
10005d9a:	689a      	ldr	r2, [r3, #8]
    {
        CY_ASSERT_L1(CY_SYSINT_IS_VECTOR_VALID(userIsr));

        prevIsr = __ramVectors[CY_INT_IRQ_BASE + (uint32_t)IRQn];
10005d9c:	f100 0310 	add.w	r3, r0, #16
    if (SCB->VTOR == (uint32_t)&__ramVectors)
10005da0:	4806      	ldr	r0, [pc, #24]	@ (10005dbc <Cy_SysInt_SetVector+0x24>)
10005da2:	4282      	cmp	r2, r0
            #endif
        #endif
    }
    else
    {
        prevIsr = __Vectors[CY_INT_IRQ_BASE + (uint32_t)IRQn];
10005da4:	bf13      	iteet	ne
10005da6:	4a06      	ldrne	r2, [pc, #24]	@ (10005dc0 <Cy_SysInt_SetVector+0x28>)
        prevIsr = __ramVectors[CY_INT_IRQ_BASE + (uint32_t)IRQn];
10005da8:	f852 0023 	ldreq.w	r0, [r2, r3, lsl #2]
        __ramVectors[CY_INT_IRQ_BASE + (uint32_t)IRQn] = userIsr;
10005dac:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
        prevIsr = __Vectors[CY_INT_IRQ_BASE + (uint32_t)IRQn];
10005db0:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
    }

    return (prevIsr);
}
10005db4:	4770      	bx	lr
10005db6:	bf00      	nop
10005db8:	e000ed00 	.word	0xe000ed00
10005dbc:	08002000 	.word	0x08002000
10005dc0:	10002000 	.word	0x10002000

10005dc4 <Cy_SysInt_Init>:
{
10005dc4:	b510      	push	{r4, lr}
    if(NULL != config)
10005dc6:	b1f0      	cbz	r0, 10005e06 <Cy_SysInt_Init+0x42>
                   NVIC_SetPriority(config->intrSrc, config->intrPriority);
10005dc8:	f9b0 4000 	ldrsh.w	r4, [r0]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
10005dcc:	6843      	ldr	r3, [r0, #4]
10005dce:	480f      	ldr	r0, [pc, #60]	@ (10005e0c <Cy_SysInt_Init+0x48>)
  if ((int32_t)(IRQn) >= 0)
10005dd0:	2c00      	cmp	r4, #0
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
10005dd2:	bfb5      	itete	lt
10005dd4:	f004 020f 	andlt.w	r2, r4, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
10005dd8:	f104 4260 	addge.w	r2, r4, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
10005ddc:	3a04      	sublt	r2, #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
10005dde:	f502 4261 	addge.w	r2, r2, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
10005de2:	bfb8      	it	lt
10005de4:	1812      	addlt	r2, r2, r0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
10005de6:	ea4f 1343 	mov.w	r3, r3, lsl #5
10005dea:	b2db      	uxtb	r3, r3
10005dec:	bfac      	ite	ge
10005dee:	f882 3300 	strbge.w	r3, [r2, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
10005df2:	7613      	strblt	r3, [r2, #24]
                   if (SCB->VTOR == (uint32_t)&__ramVectors)
10005df4:	6882      	ldr	r2, [r0, #8]
10005df6:	4b06      	ldr	r3, [pc, #24]	@ (10005e10 <Cy_SysInt_Init+0x4c>)
10005df8:	429a      	cmp	r2, r3
10005dfa:	d102      	bne.n	10005e02 <Cy_SysInt_Init+0x3e>
                       (void)Cy_SysInt_SetVector(config->intrSrc, userIsr);
10005dfc:	4620      	mov	r0, r4
10005dfe:	f7ff ffcb 	bl	10005d98 <Cy_SysInt_SetVector>
    cy_en_sysint_status_t status = CY_SYSINT_SUCCESS;
10005e02:	2000      	movs	r0, #0
    return(status);
10005e04:	e000      	b.n	10005e08 <Cy_SysInt_Init+0x44>
        status = CY_SYSINT_BAD_PARAM;
10005e06:	4803      	ldr	r0, [pc, #12]	@ (10005e14 <Cy_SysInt_Init+0x50>)
}
10005e08:	bd10      	pop	{r4, pc}
10005e0a:	bf00      	nop
10005e0c:	e000ed00 	.word	0xe000ed00
10005e10:	08002000 	.word	0x08002000
10005e14:	00560001 	.word	0x00560001

10005e18 <Cy_SysLib_Delay>:

#if defined(CY_INIT_CODECOPY_ENABLE)
CY_SECTION_INIT_CODECOPY_BEGIN
#endif
void Cy_SysLib_Delay(uint32_t milliseconds)
{
10005e18:	b570      	push	{r4, r5, r6, lr}
    uint32_t max_delay_ms = 0xFFFFFFFFU / (cy_delayFreqKhz * CY_SYSLIB_DELAY_CALIBRATION_FACTOR);
10005e1a:	4e0a      	ldr	r6, [pc, #40]	@ (10005e44 <Cy_SysLib_Delay+0x2c>)
{
10005e1c:	4604      	mov	r4, r0
    uint32_t max_delay_ms = 0xFFFFFFFFU / (cy_delayFreqKhz * CY_SYSLIB_DELAY_CALIBRATION_FACTOR);
10005e1e:	6833      	ldr	r3, [r6, #0]
10005e20:	f04f 35ff 	mov.w	r5, #4294967295
10005e24:	fbb5 f5f3 	udiv	r5, r5, r3

    while(milliseconds > max_delay_ms)
10005e28:	42ac      	cmp	r4, r5
    {
        /* This loop prevents an overflow in value passed to Cy_SysLib_DelayCycles() API. */
        Cy_SysLib_DelayCycles(max_delay_ms * cy_delayFreqKhz * CY_SYSLIB_DELAY_CALIBRATION_FACTOR);
10005e2a:	6830      	ldr	r0, [r6, #0]
    while(milliseconds > max_delay_ms)
10005e2c:	d804      	bhi.n	10005e38 <Cy_SysLib_Delay+0x20>
        milliseconds -= max_delay_ms;
    }

    Cy_SysLib_DelayCycles(milliseconds * cy_delayFreqKhz * CY_SYSLIB_DELAY_CALIBRATION_FACTOR);
10005e2e:	4360      	muls	r0, r4
}
10005e30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Cy_SysLib_DelayCycles(milliseconds * cy_delayFreqKhz * CY_SYSLIB_DELAY_CALIBRATION_FACTOR);
10005e34:	f7fc be3c 	b.w	10002ab0 <Cy_SysLib_DelayCycles>
        Cy_SysLib_DelayCycles(max_delay_ms * cy_delayFreqKhz * CY_SYSLIB_DELAY_CALIBRATION_FACTOR);
10005e38:	4368      	muls	r0, r5
10005e3a:	f7fc fe39 	bl	10002ab0 <Cy_SysLib_DelayCycles>
        milliseconds -= max_delay_ms;
10005e3e:	1b64      	subs	r4, r4, r5
10005e40:	e7f2      	b.n	10005e28 <Cy_SysLib_Delay+0x10>
10005e42:	bf00      	nop
10005e44:	0800229c 	.word	0x0800229c

10005e48 <Cy_SysLib_DelayUs>:


void Cy_SysLib_DelayUs(uint16_t microseconds)
{
    Cy_SysLib_DelayCycles((uint32_t) microseconds * cy_delayFreqMhz * CY_SYSLIB_DELAY_CALIBRATION_FACTOR);
10005e48:	4b02      	ldr	r3, [pc, #8]	@ (10005e54 <Cy_SysLib_DelayUs+0xc>)
10005e4a:	781b      	ldrb	r3, [r3, #0]
10005e4c:	4358      	muls	r0, r3
10005e4e:	f7fc be2f 	b.w	10002ab0 <Cy_SysLib_DelayCycles>
10005e52:	bf00      	nop
10005e54:	080022a0 	.word	0x080022a0

10005e58 <Cy_SysLib_ResetBackupDomain>:
#endif


cy_en_syslib_status_t Cy_SysLib_ResetBackupDomain(void)
{
    BACKUP_RESET = BACKUP_RESET_RESET_Msk;
10005e58:	4b04      	ldr	r3, [pc, #16]	@ (10005e6c <Cy_SysLib_ResetBackupDomain+0x14>)
    return (Cy_SysLib_GetResetStatus());
}
10005e5a:	4805      	ldr	r0, [pc, #20]	@ (10005e70 <Cy_SysLib_ResetBackupDomain+0x18>)
    BACKUP_RESET = BACKUP_RESET_RESET_Msk;
10005e5c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
10005e60:	649a      	str	r2, [r3, #72]	@ 0x48
    return ((0UL == (BACKUP_RESET & BACKUP_RESET_RESET_Msk)) ? CY_SYSLIB_SUCCESS : CY_SYSLIB_INVALID_STATE);
10005e62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10005e64:	2b00      	cmp	r3, #0
}
10005e66:	bfa8      	it	ge
10005e68:	2000      	movge	r0, #0
10005e6a:	4770      	bx	lr
10005e6c:	40270000 	.word	0x40270000
10005e70:	00460003 	.word	0x00460003

10005e74 <Cy_SysLib_GetResetReason>:

uint32_t Cy_SysLib_GetResetReason(void)
{
    uint32_t retVal = SRSS_RES_CAUSE;
10005e74:	4b0a      	ldr	r3, [pc, #40]	@ (10005ea0 <Cy_SysLib_GetResetReason+0x2c>)
10005e76:	f8d3 0800 	ldr.w	r0, [r3, #2048]	@ 0x800

    if(0U != _FLD2VAL(SRSS_PWR_HIBERNATE_TOKEN, SRSS_PWR_HIBERNATE))
10005e7a:	685a      	ldr	r2, [r3, #4]
10005e7c:	b2d2      	uxtb	r2, r2
10005e7e:	b10a      	cbz	r2, 10005e84 <Cy_SysLib_GetResetReason+0x10>
    {
        retVal |= CY_SYSLIB_RESET_HIB_WAKEUP;
10005e80:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
    }

#if defined (CY_IP_MXS28SRSS) || defined (CY_IP_MXS40SSRSS) || defined (CY_IP_MXS40SRSS) || (defined (CY_IP_MXS40SRSS) && (CY_IP_MXS40SRSS_VERSION >= 2)) ||  defined(CY_IP_MXS22SRSS)
    if(0U != _FLD2VAL(CY_SRSS_RES_CAUSE2_CSV_LOSS, SRSS_RES_CAUSE2))
10005e84:	f8d3 2804 	ldr.w	r2, [r3, #2052]	@ 0x804
10005e88:	b292      	uxth	r2, r2
10005e8a:	b10a      	cbz	r2, 10005e90 <Cy_SysLib_GetResetReason+0x1c>
    {
        retVal |= CY_SYSLIB_RESET_CSV_LOSS_WAKEUP;
10005e8c:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
    }

    if(0U != _FLD2VAL(CY_SRSS_RES_CAUSE2_CSV_ERROR, SRSS_RES_CAUSE2))
10005e90:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
10005e94:	0c1b      	lsrs	r3, r3, #16
    {
        retVal |= CY_SYSLIB_RESET_CSV_ERROR_WAKEUP;
10005e96:	bf18      	it	ne
10005e98:	f440 3000 	orrne.w	r0, r0, #131072	@ 0x20000
    }
#endif
    return (retVal);
}
10005e9c:	4770      	bx	lr
10005e9e:	bf00      	nop
10005ea0:	40260000 	.word	0x40260000

10005ea4 <Cy_SysLib_ProcessingFault>:
         * Otherwise, the compiler destroys the call stack,
         * because treats this API as a no return function.
         */
        Cy_SysLib_AsmInfiniteLoop();
    #else
        while(true) {}
10005ea4:	e7fe      	b.n	10005ea4 <Cy_SysLib_ProcessingFault>
	...

10005ea8 <Cy_SysLib_FaultHandler>:
{
10005ea8:	b508      	push	{r3, lr}
    cy_faultFrame.r0  = faultStackAddr[CY_R0_Pos];
10005eaa:	4b23      	ldr	r3, [pc, #140]	@ (10005f38 <Cy_SysLib_FaultHandler+0x90>)
10005eac:	6802      	ldr	r2, [r0, #0]
10005eae:	601a      	str	r2, [r3, #0]
    cy_faultFrame.r1  = faultStackAddr[CY_R1_Pos];
10005eb0:	6842      	ldr	r2, [r0, #4]
10005eb2:	605a      	str	r2, [r3, #4]
    cy_faultFrame.r2  = faultStackAddr[CY_R2_Pos];
10005eb4:	6882      	ldr	r2, [r0, #8]
10005eb6:	609a      	str	r2, [r3, #8]
    cy_faultFrame.r3  = faultStackAddr[CY_R3_Pos];
10005eb8:	68c2      	ldr	r2, [r0, #12]
10005eba:	60da      	str	r2, [r3, #12]
    cy_faultFrame.r12 = faultStackAddr[CY_R12_Pos];
10005ebc:	6902      	ldr	r2, [r0, #16]
10005ebe:	611a      	str	r2, [r3, #16]
    cy_faultFrame.lr  = faultStackAddr[CY_LR_Pos];
10005ec0:	6942      	ldr	r2, [r0, #20]
10005ec2:	615a      	str	r2, [r3, #20]
    cy_faultFrame.pc  = faultStackAddr[CY_PC_Pos];
10005ec4:	6982      	ldr	r2, [r0, #24]
10005ec6:	619a      	str	r2, [r3, #24]
    cy_faultFrame.psr = faultStackAddr[CY_PSR_Pos];
10005ec8:	69c2      	ldr	r2, [r0, #28]
10005eca:	61da      	str	r2, [r3, #28]
    cy_faultFrame.cfsr.cfsrReg = SCB->CFSR;
10005ecc:	4a1b      	ldr	r2, [pc, #108]	@ (10005f3c <Cy_SysLib_FaultHandler+0x94>)
10005ece:	6a91      	ldr	r1, [r2, #40]	@ 0x28
10005ed0:	6219      	str	r1, [r3, #32]
    cy_faultFrame.hfsr.hfsrReg = SCB->HFSR;
10005ed2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
10005ed4:	6259      	str	r1, [r3, #36]	@ 0x24
    cy_faultFrame.shcsr.shcsrReg = SCB->SHCSR;
10005ed6:	6a51      	ldr	r1, [r2, #36]	@ 0x24
10005ed8:	6299      	str	r1, [r3, #40]	@ 0x28
    cy_faultFrame.mmfar = SCB->MMFAR;
10005eda:	6b51      	ldr	r1, [r2, #52]	@ 0x34
10005edc:	62d9      	str	r1, [r3, #44]	@ 0x2c
    cy_faultFrame.bfar = SCB->BFAR;
10005ede:	6b92      	ldr	r2, [r2, #56]	@ 0x38
10005ee0:	631a      	str	r2, [r3, #48]	@ 0x30
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_get_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  return __builtin_arm_get_fpscr();
10005ee2:	eef1 2a10 	vmrs	r2, fpscr
    if(0U != (__get_FPSCR() & (CY_FPSCR_IXC_Msk | CY_FPSCR_IDC_Msk)))
10005ee6:	f012 0f90 	tst.w	r2, #144	@ 0x90
10005eea:	d021      	beq.n	10005f30 <Cy_SysLib_FaultHandler+0x88>
        cy_faultFrame.s0    = faultStackAddr[CY_S0_Pos];
10005eec:	6a02      	ldr	r2, [r0, #32]
10005eee:	635a      	str	r2, [r3, #52]	@ 0x34
        cy_faultFrame.s1    = faultStackAddr[CY_S1_Pos];
10005ef0:	6a42      	ldr	r2, [r0, #36]	@ 0x24
10005ef2:	639a      	str	r2, [r3, #56]	@ 0x38
        cy_faultFrame.s2    = faultStackAddr[CY_S2_Pos];
10005ef4:	6a82      	ldr	r2, [r0, #40]	@ 0x28
10005ef6:	63da      	str	r2, [r3, #60]	@ 0x3c
        cy_faultFrame.s3    = faultStackAddr[CY_S3_Pos];
10005ef8:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
10005efa:	641a      	str	r2, [r3, #64]	@ 0x40
        cy_faultFrame.s4    = faultStackAddr[CY_S4_Pos];
10005efc:	6b02      	ldr	r2, [r0, #48]	@ 0x30
10005efe:	645a      	str	r2, [r3, #68]	@ 0x44
        cy_faultFrame.s5    = faultStackAddr[CY_S5_Pos];
10005f00:	6b42      	ldr	r2, [r0, #52]	@ 0x34
10005f02:	649a      	str	r2, [r3, #72]	@ 0x48
        cy_faultFrame.s6    = faultStackAddr[CY_S6_Pos];
10005f04:	6b82      	ldr	r2, [r0, #56]	@ 0x38
10005f06:	64da      	str	r2, [r3, #76]	@ 0x4c
        cy_faultFrame.s7    = faultStackAddr[CY_S7_Pos];
10005f08:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
10005f0a:	651a      	str	r2, [r3, #80]	@ 0x50
        cy_faultFrame.s8    = faultStackAddr[CY_S8_Pos];
10005f0c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
10005f0e:	655a      	str	r2, [r3, #84]	@ 0x54
        cy_faultFrame.s9    = faultStackAddr[CY_S9_Pos];
10005f10:	6c42      	ldr	r2, [r0, #68]	@ 0x44
10005f12:	659a      	str	r2, [r3, #88]	@ 0x58
        cy_faultFrame.s10   = faultStackAddr[CY_S10_Pos];
10005f14:	6c82      	ldr	r2, [r0, #72]	@ 0x48
10005f16:	65da      	str	r2, [r3, #92]	@ 0x5c
        cy_faultFrame.s11   = faultStackAddr[CY_S11_Pos];
10005f18:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
10005f1a:	661a      	str	r2, [r3, #96]	@ 0x60
        cy_faultFrame.s12   = faultStackAddr[CY_S12_Pos];
10005f1c:	6d02      	ldr	r2, [r0, #80]	@ 0x50
10005f1e:	665a      	str	r2, [r3, #100]	@ 0x64
        cy_faultFrame.s13   = faultStackAddr[CY_S13_Pos];
10005f20:	6d42      	ldr	r2, [r0, #84]	@ 0x54
10005f22:	669a      	str	r2, [r3, #104]	@ 0x68
        cy_faultFrame.s14   = faultStackAddr[CY_S14_Pos];
10005f24:	6d82      	ldr	r2, [r0, #88]	@ 0x58
10005f26:	66da      	str	r2, [r3, #108]	@ 0x6c
        cy_faultFrame.s15   = faultStackAddr[CY_S15_Pos];
10005f28:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
10005f2a:	671a      	str	r2, [r3, #112]	@ 0x70
        cy_faultFrame.fpscr = faultStackAddr[CY_FPSCR_Pos];
10005f2c:	6e02      	ldr	r2, [r0, #96]	@ 0x60
10005f2e:	675a      	str	r2, [r3, #116]	@ 0x74
    Cy_SysLib_ProcessingFault();
10005f30:	f7ff ffb8 	bl	10005ea4 <Cy_SysLib_ProcessingFault>
}
10005f34:	bd08      	pop	{r3, pc}
10005f36:	bf00      	nop
10005f38:	08002894 	.word	0x08002894
10005f3c:	e000ed00 	.word	0xe000ed00

10005f40 <Cy_SysLib_SetWaitStates>:
    freqMax = ulpMode ? CY_SYSLIB_ULP_SLOW_WS_0_FREQ_MAX : CY_SYSLIB_LP_SLOW_WS_0_FREQ_MAX;
#endif
    waitStates = (clkHfMHz <= freqMax) ? 0UL : 1UL;

    /* ROM */
    CPUSS_ROM_CTL = _CLR_SET_FLD32U(CPUSS_ROM_CTL, CPUSS_ROM_CTL_SLOW_WS, waitStates);
10005f40:	4b28      	ldr	r3, [pc, #160]	@ (10005fe4 <Cy_SysLib_SetWaitStates+0xa4>)
10005f42:	681a      	ldr	r2, [r3, #0]
{
10005f44:	b570      	push	{r4, r5, r6, lr}
    CPUSS_ROM_CTL = _CLR_SET_FLD32U(CPUSS_ROM_CTL, CPUSS_ROM_CTL_SLOW_WS, waitStates);
10005f46:	f8b2 40b0 	ldrh.w	r4, [r2, #176]	@ 0xb0
10005f4a:	6816      	ldr	r6, [r2, #0]
    freqMax = ulpMode ? CY_SYSLIB_ULP_SLOW_WS_0_FREQ_MAX : CY_SYSLIB_LP_SLOW_WS_0_FREQ_MAX;
10005f4c:	2800      	cmp	r0, #0
    CPUSS_ROM_CTL = _CLR_SET_FLD32U(CPUSS_ROM_CTL, CPUSS_ROM_CTL_SLOW_WS, waitStates);
10005f4e:	59a3      	ldr	r3, [r4, r6]
    freqMax = ulpMode ? CY_SYSLIB_ULP_SLOW_WS_0_FREQ_MAX : CY_SYSLIB_LP_SLOW_WS_0_FREQ_MAX;
10005f50:	bf14      	ite	ne
10005f52:	2519      	movne	r5, #25
10005f54:	2564      	moveq	r5, #100	@ 0x64
    waitStates = (clkHfMHz <= freqMax) ? 0UL : 1UL;
10005f56:	428d      	cmp	r5, r1
10005f58:	bf2c      	ite	cs
10005f5a:	2500      	movcs	r5, #0
10005f5c:	2501      	movcc	r5, #1
    CPUSS_ROM_CTL = _CLR_SET_FLD32U(CPUSS_ROM_CTL, CPUSS_ROM_CTL_SLOW_WS, waitStates);
10005f5e:	f023 0303 	bic.w	r3, r3, #3
10005f62:	432b      	orrs	r3, r5
10005f64:	51a3      	str	r3, [r4, r6]
    CPUSS_ROM_CTL = _CLR_SET_FLD32U(CPUSS_ROM_CTL, CPUSS_ROM_CTL_FAST_WS, 0UL);
10005f66:	6816      	ldr	r6, [r2, #0]
10005f68:	59a3      	ldr	r3, [r4, r6]
10005f6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
10005f6e:	51a3      	str	r3, [r4, r6]

    /* SRAM */
    CPUSS_RAM0_CTL0 = _CLR_SET_FLD32U(CPUSS_RAM0_CTL0, CPUSS_RAM0_CTL0_SLOW_WS, waitStates);
10005f70:	f8b2 40b2 	ldrh.w	r4, [r2, #178]	@ 0xb2
10005f74:	6816      	ldr	r6, [r2, #0]
10005f76:	59a3      	ldr	r3, [r4, r6]
10005f78:	f023 0303 	bic.w	r3, r3, #3
10005f7c:	432b      	orrs	r3, r5
10005f7e:	51a3      	str	r3, [r4, r6]
    CPUSS_RAM0_CTL0 = _CLR_SET_FLD32U(CPUSS_RAM0_CTL0, CPUSS_RAM0_CTL0_FAST_WS, 0UL);
10005f80:	6815      	ldr	r5, [r2, #0]
10005f82:	5963      	ldr	r3, [r4, r5]
10005f84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
10005f88:	5163      	str	r3, [r4, r5]
    }

    FLASHC_FLASH_CTL = _CLR_SET_FLD32U(FLASHC_FLASH_CTL, FLASHC_FLASH_CTL_WS, waitStates);

#else
    if (ulpMode)
10005f8a:	b160      	cbz	r0, 10005fa6 <Cy_SysLib_SetWaitStates+0x66>
    {
        waitStates =  (clkHfMHz <= CY_SYSLIB_FLASH_ULP_WS_0_FREQ_MAX) ? 0UL :
10005f8c:	2910      	cmp	r1, #16
10005f8e:	d921      	bls.n	10005fd4 <Cy_SysLib_SetWaitStates+0x94>
                     ((clkHfMHz <= CY_SYSLIB_FLASH_ULP_WS_1_FREQ_MAX) ? 1UL : 2UL);
10005f90:	2921      	cmp	r1, #33	@ 0x21
10005f92:	bf8c      	ite	hi
10005f94:	2102      	movhi	r1, #2
10005f96:	2101      	movls	r1, #1
                     ((clkHfMHz <= cy_device->flashCtlMainWs2Freq) ? 2UL :
                     ((clkHfMHz <= cy_device->flashCtlMainWs3Freq) ? 3UL :
                     ((clkHfMHz <= cy_device->flashCtlMainWs4Freq) ? 4UL : 5UL))));
    }

    FLASHC_FLASH_CTL = _CLR_SET_FLD32U(FLASHC_FLASH_CTL, FLASHC_FLASH_CTL_MAIN_WS, waitStates);
10005f98:	6852      	ldr	r2, [r2, #4]
10005f9a:	6813      	ldr	r3, [r2, #0]
10005f9c:	f023 030f 	bic.w	r3, r3, #15
10005fa0:	430b      	orrs	r3, r1
10005fa2:	6013      	str	r3, [r2, #0]
    FLASHC_FLASH_CTL =_CLR_SET_FLD32U(FLASHC_FLASH_CTL, FLASHC_FLASH_CTL_RBUS_WS, waitStates);
#else
    (void) ulpMode;
    (void) clkHfMHz;
#endif
}
10005fa4:	bd70      	pop	{r4, r5, r6, pc}
        waitStates =  (clkHfMHz <= cy_device->flashCtlMainWs0Freq) ? 0UL :
10005fa6:	f892 3059 	ldrb.w	r3, [r2, #89]	@ 0x59
10005faa:	428b      	cmp	r3, r1
10005fac:	d212      	bcs.n	10005fd4 <Cy_SysLib_SetWaitStates+0x94>
                     ((clkHfMHz <= cy_device->flashCtlMainWs1Freq) ? 1UL :
10005fae:	f892 305a 	ldrb.w	r3, [r2, #90]	@ 0x5a
10005fb2:	428b      	cmp	r3, r1
10005fb4:	d210      	bcs.n	10005fd8 <Cy_SysLib_SetWaitStates+0x98>
                     ((clkHfMHz <= cy_device->flashCtlMainWs2Freq) ? 2UL :
10005fb6:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
10005fba:	428b      	cmp	r3, r1
10005fbc:	d20e      	bcs.n	10005fdc <Cy_SysLib_SetWaitStates+0x9c>
                     ((clkHfMHz <= cy_device->flashCtlMainWs3Freq) ? 3UL :
10005fbe:	f892 305c 	ldrb.w	r3, [r2, #92]	@ 0x5c
10005fc2:	428b      	cmp	r3, r1
10005fc4:	d20c      	bcs.n	10005fe0 <Cy_SysLib_SetWaitStates+0xa0>
                     ((clkHfMHz <= cy_device->flashCtlMainWs4Freq) ? 4UL : 5UL))));
10005fc6:	f892 305d 	ldrb.w	r3, [r2, #93]	@ 0x5d
10005fca:	428b      	cmp	r3, r1
10005fcc:	bf2c      	ite	cs
10005fce:	2104      	movcs	r1, #4
10005fd0:	2105      	movcc	r1, #5
10005fd2:	e7e1      	b.n	10005f98 <Cy_SysLib_SetWaitStates+0x58>
        waitStates =  (clkHfMHz <= CY_SYSLIB_FLASH_ULP_WS_0_FREQ_MAX) ? 0UL :
10005fd4:	2100      	movs	r1, #0
10005fd6:	e7df      	b.n	10005f98 <Cy_SysLib_SetWaitStates+0x58>
                     ((clkHfMHz <= CY_SYSLIB_FLASH_ULP_WS_1_FREQ_MAX) ? 1UL : 2UL);
10005fd8:	2101      	movs	r1, #1
10005fda:	e7dd      	b.n	10005f98 <Cy_SysLib_SetWaitStates+0x58>
10005fdc:	2102      	movs	r1, #2
10005fde:	e7db      	b.n	10005f98 <Cy_SysLib_SetWaitStates+0x58>
                     ((clkHfMHz <= cy_device->flashCtlMainWs3Freq) ? 3UL :
10005fe0:	2103      	movs	r1, #3
10005fe2:	e7d9      	b.n	10005f98 <Cy_SysLib_SetWaitStates+0x58>
10005fe4:	08002c40 	.word	0x08002c40

10005fe8 <Cy_SysLib_GetDeviceRevision>:


uint8_t Cy_SysLib_GetDeviceRevision(void)
{
#if defined (CY_IP_M4CPUSS) && !(defined (SRSS_HT_VARIANT) && (SRSS_HT_VARIANT == 1u))
    return ((SFLASH_SI_REVISION_ID == 0UL) ? CY_SYSLIB_DEVICE_REV_0A : SFLASH_SI_REVISION_ID);
10005fe8:	f04f 53b0 	mov.w	r3, #369098752	@ 0x16000000
10005fec:	785a      	ldrb	r2, [r3, #1]
10005fee:	b112      	cbz	r2, 10005ff6 <Cy_SysLib_GetDeviceRevision+0xe>
10005ff0:	7858      	ldrb	r0, [r3, #1]
10005ff2:	b2c0      	uxtb	r0, r0
10005ff4:	4770      	bx	lr
10005ff6:	2021      	movs	r0, #33	@ 0x21
#elif defined(CY_IP_M33SYSCPUSS) || defined(CY_IP_M7CPUSS) || (defined (SRSS_HT_VARIANT) && (SRSS_HT_VARIANT == 1u))
    return ((uint8_t)((_FLD2VAL(CPUSS_PRODUCT_ID_MINOR_REV, CPUSS_PRODUCT_ID) << 4U) | _FLD2VAL(CPUSS_PRODUCT_ID_MAJOR_REV, CPUSS_PRODUCT_ID)));
#else
    return 0;
#endif
}
10005ff8:	4770      	bx	lr

10005ffa <Cy_SysLib_GetDevice>:

uint16_t Cy_SysLib_GetDevice(void)
{
#if defined (CY_IP_M4CPUSS) && !(defined (SRSS_HT_VARIANT) && (SRSS_HT_VARIANT == 1u))
    return ((SFLASH_FAMILY_ID == 0UL) ? CY_SYSLIB_DEVICE_PSOC6ABLE2 : SFLASH_FAMILY_ID);
10005ffa:	f04f 52b0 	mov.w	r2, #369098752	@ 0x16000000
10005ffe:	8993      	ldrh	r3, [r2, #12]
10006000:	b29b      	uxth	r3, r3
10006002:	b113      	cbz	r3, 1000600a <Cy_SysLib_GetDevice+0x10>
10006004:	8990      	ldrh	r0, [r2, #12]
10006006:	b280      	uxth	r0, r0
10006008:	4770      	bx	lr
1000600a:	f44f 7080 	mov.w	r0, #256	@ 0x100
#elif defined(CY_IP_M33SYSCPUSS)
    return CPUSS_FAMILYID;
#else
    return 0;
#endif
}
1000600e:	4770      	bx	lr

10006010 <IsVoltageChangePossible>:
* voltage. The voltage change is possible only when the protection context is
* set to zero (PC = 0), or the device supports modifying registers via syscall.
*
*******************************************************************************/
static bool IsVoltageChangePossible(void)
{
10006010:	b538      	push	{r3, r4, r5, lr}
    bool retVal = false;
    uint32_t trimRamCheckVal = (CPUSS_TRIM_RAM_CTL & CPUSS_TRIM_RAM_CTL_WC_MASK);
10006012:	4d1a      	ldr	r5, [pc, #104]	@ (1000607c <IsVoltageChangePossible+0x6c>)
10006014:	682b      	ldr	r3, [r5, #0]
10006016:	681a      	ldr	r2, [r3, #0]
10006018:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
1000601c:	58d4      	ldr	r4, [r2, r3]

    if (Cy_SysLib_GetDevice() == CY_SYSLIB_DEVICE_PSOC6ABLE2)
1000601e:	f7ff ffec 	bl	10005ffa <Cy_SysLib_GetDevice>
10006022:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
    uint32_t trimRamCheckVal = (CPUSS_TRIM_RAM_CTL & CPUSS_TRIM_RAM_CTL_WC_MASK);
10006026:	f404 6440 	and.w	r4, r4, #3072	@ 0xc00
    if (Cy_SysLib_GetDevice() == CY_SYSLIB_DEVICE_PSOC6ABLE2)
1000602a:	d10c      	bne.n	10006046 <IsVoltageChangePossible+0x36>
    {
        uint32_t curProtContext = Cy_Prot_GetActivePC(ACTIVE_BUS_MASTER);
1000602c:	200e      	movs	r0, #14
1000602e:	f7fe fd5d 	bl	10004aec <Cy_Prot_GetActivePC>
10006032:	4604      	mov	r4, r0

        retVal = ((Cy_SysLib_GetDeviceRevision() > SYSPM_DEVICE_PSOC6ABLE2_REV_0B) || (curProtContext == 0U));
10006034:	f7ff ffd8 	bl	10005fe8 <Cy_SysLib_GetDeviceRevision>
10006038:	2822      	cmp	r0, #34	@ 0x22
1000603a:	bf9a      	itte	ls
1000603c:	fab4 f084 	clzls	r0, r4
10006040:	0940      	lsrls	r0, r0, #5
10006042:	2001      	movhi	r0, #1

        retVal = (trimRamCheckVal != (CPUSS_TRIM_RAM_CTL & CPUSS_TRIM_RAM_CTL_WC_MASK));
    }

    return retVal;
}
10006044:	bd38      	pop	{r3, r4, r5, pc}
        CPUSS_TRIM_RAM_CTL &= ~CPUSS_TRIM_RAM_CTL_WC_MASK;
10006046:	682b      	ldr	r3, [r5, #0]
10006048:	6818      	ldr	r0, [r3, #0]
1000604a:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
1000604e:	5842      	ldr	r2, [r0, r1]
10006050:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
10006054:	5042      	str	r2, [r0, r1]
        CPUSS_TRIM_RAM_CTL |= ((~trimRamCheckVal) & CPUSS_TRIM_RAM_CTL_WC_MASK);
10006056:	6818      	ldr	r0, [r3, #0]
10006058:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
1000605c:	5845      	ldr	r5, [r0, r1]
1000605e:	f484 6240 	eor.w	r2, r4, #3072	@ 0xc00
10006062:	432a      	orrs	r2, r5
10006064:	5042      	str	r2, [r0, r1]
        retVal = (trimRamCheckVal != (CPUSS_TRIM_RAM_CTL & CPUSS_TRIM_RAM_CTL_WC_MASK));
10006066:	681a      	ldr	r2, [r3, #0]
10006068:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
1000606c:	58d0      	ldr	r0, [r2, r3]
1000606e:	f400 6040 	and.w	r0, r0, #3072	@ 0xc00
10006072:	1b00      	subs	r0, r0, r4
10006074:	bf18      	it	ne
10006076:	2001      	movne	r0, #1
10006078:	e7e4      	b.n	10006044 <IsVoltageChangePossible+0x34>
1000607a:	bf00      	nop
1000607c:	08002c40 	.word	0x08002c40

10006080 <SetReadMarginTrimUlp>:
{
10006080:	b538      	push	{r3, r4, r5, lr}
    if (Cy_SysLib_GetDevice() == CY_SYSLIB_DEVICE_PSOC6ABLE2)
10006082:	f7ff ffba 	bl	10005ffa <Cy_SysLib_GetDevice>
10006086:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
1000608a:	4a15      	ldr	r2, [pc, #84]	@ (100060e0 <SetReadMarginTrimUlp+0x60>)
1000608c:	d113      	bne.n	100060b6 <SetReadMarginTrimUlp+0x36>
        CPUSS_TRIM_RAM_CTL = (CPUSS_TRIM_RAM_CTL & ((uint32_t) ~CPUSS_TRIM_RAM_CTL_RM_Msk)) |
1000608e:	6812      	ldr	r2, [r2, #0]
10006090:	f8d2 10a0 	ldr.w	r1, [r2, #160]	@ 0xa0
10006094:	6810      	ldr	r0, [r2, #0]
10006096:	5843      	ldr	r3, [r0, r1]
10006098:	f023 030f 	bic.w	r3, r3, #15
1000609c:	f043 0302 	orr.w	r3, r3, #2
100060a0:	5043      	str	r3, [r0, r1]
        CPUSS_TRIM_ROM_CTL = (CPUSS_TRIM_ROM_CTL & ((uint32_t) ~CPUSS_TRIM_ROM_CTL_RM_Msk)) |
100060a2:	6811      	ldr	r1, [r2, #0]
100060a4:	f8d2 20a4 	ldr.w	r2, [r2, #164]	@ 0xa4
100060a8:	588b      	ldr	r3, [r1, r2]
100060aa:	f023 030f 	bic.w	r3, r3, #15
100060ae:	f043 0302 	orr.w	r3, r3, #2
100060b2:	508b      	str	r3, [r1, r2]
}
100060b4:	bd38      	pop	{r3, r4, r5, pc}
                             (CPUSS_TRIM_RAM_CTL & CPUSS_TRIM_RAM_CTL_RA_MASK);
100060b6:	6812      	ldr	r2, [r2, #0]
        CPUSS_TRIM_RAM_CTL = (SFLASH_CPUSS_TRIM_RAM_CTL_HALF_ULP & ((uint32_t) ~CPUSS_TRIM_RAM_CTL_RA_MASK)) |
100060b8:	480a      	ldr	r0, [pc, #40]	@ (100060e4 <SetReadMarginTrimUlp+0x64>)
                             (CPUSS_TRIM_RAM_CTL & CPUSS_TRIM_RAM_CTL_RA_MASK);
100060ba:	6815      	ldr	r5, [r2, #0]
100060bc:	f8d2 40a0 	ldr.w	r4, [r2, #160]	@ 0xa0
        CPUSS_TRIM_RAM_CTL = (SFLASH_CPUSS_TRIM_RAM_CTL_HALF_ULP & ((uint32_t) ~CPUSS_TRIM_RAM_CTL_RA_MASK)) |
100060c0:	f8d0 3848 	ldr.w	r3, [r0, #2120]	@ 0x848
                             (CPUSS_TRIM_RAM_CTL & CPUSS_TRIM_RAM_CTL_RA_MASK);
100060c4:	5929      	ldr	r1, [r5, r4]
        CPUSS_TRIM_RAM_CTL = (SFLASH_CPUSS_TRIM_RAM_CTL_HALF_ULP & ((uint32_t) ~CPUSS_TRIM_RAM_CTL_RA_MASK)) |
100060c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
                             (CPUSS_TRIM_RAM_CTL & CPUSS_TRIM_RAM_CTL_RA_MASK);
100060ca:	f401 7140 	and.w	r1, r1, #768	@ 0x300
        CPUSS_TRIM_RAM_CTL = (SFLASH_CPUSS_TRIM_RAM_CTL_HALF_ULP & ((uint32_t) ~CPUSS_TRIM_RAM_CTL_RA_MASK)) |
100060ce:	430b      	orrs	r3, r1
100060d0:	512b      	str	r3, [r5, r4]
        CPUSS_TRIM_ROM_CTL = SFLASH_CPUSS_TRIM_ROM_CTL_HALF_ULP;
100060d2:	6811      	ldr	r1, [r2, #0]
100060d4:	f8d2 30a4 	ldr.w	r3, [r2, #164]	@ 0xa4
100060d8:	f8d0 2844 	ldr.w	r2, [r0, #2116]	@ 0x844
100060dc:	50ca      	str	r2, [r1, r3]
}
100060de:	e7e9      	b.n	100060b4 <SetReadMarginTrimUlp+0x34>
100060e0:	08002c40 	.word	0x08002c40
100060e4:	16001000 	.word	0x16001000

100060e8 <SetWriteAssistTrimLp>:
{
100060e8:	b538      	push	{r3, r4, r5, lr}
    if (Cy_SysLib_GetDevice() == CY_SYSLIB_DEVICE_PSOC6ABLE2)
100060ea:	f7ff ff86 	bl	10005ffa <Cy_SysLib_GetDevice>
100060ee:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
100060f2:	4a11      	ldr	r2, [pc, #68]	@ (10006138 <SetWriteAssistTrimLp+0x50>)
100060f4:	d10a      	bne.n	1000610c <SetWriteAssistTrimLp+0x24>
        CPUSS_TRIM_RAM_CTL = (CPUSS_TRIM_RAM_CTL & ((uint32_t) ~CPUSS_TRIM_RAM_CTL_WA_Msk)) |
100060f6:	6813      	ldr	r3, [r2, #0]
100060f8:	6819      	ldr	r1, [r3, #0]
100060fa:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
100060fe:	588b      	ldr	r3, [r1, r2]
10006100:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
10006104:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
10006108:	508b      	str	r3, [r1, r2]
}
1000610a:	bd38      	pop	{r3, r4, r5, pc}
                             (CPUSS_TRIM_RAM_CTL & CPUSS_TRIM_RAM_CTL_RA_MASK);
1000610c:	6812      	ldr	r2, [r2, #0]
        CPUSS_TRIM_RAM_CTL = (SFLASH_CPUSS_TRIM_RAM_CTL_HALF_LP & ((uint32_t) ~CPUSS_TRIM_RAM_CTL_RA_MASK)) |
1000610e:	480b      	ldr	r0, [pc, #44]	@ (1000613c <SetWriteAssistTrimLp+0x54>)
                             (CPUSS_TRIM_RAM_CTL & CPUSS_TRIM_RAM_CTL_RA_MASK);
10006110:	6815      	ldr	r5, [r2, #0]
10006112:	f8d2 40a0 	ldr.w	r4, [r2, #160]	@ 0xa0
        CPUSS_TRIM_RAM_CTL = (SFLASH_CPUSS_TRIM_RAM_CTL_HALF_LP & ((uint32_t) ~CPUSS_TRIM_RAM_CTL_RA_MASK)) |
10006116:	f8d0 3850 	ldr.w	r3, [r0, #2128]	@ 0x850
                             (CPUSS_TRIM_RAM_CTL & CPUSS_TRIM_RAM_CTL_RA_MASK);
1000611a:	5929      	ldr	r1, [r5, r4]
        CPUSS_TRIM_RAM_CTL = (SFLASH_CPUSS_TRIM_RAM_CTL_HALF_LP & ((uint32_t) ~CPUSS_TRIM_RAM_CTL_RA_MASK)) |
1000611c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
                             (CPUSS_TRIM_RAM_CTL & CPUSS_TRIM_RAM_CTL_RA_MASK);
10006120:	f401 7140 	and.w	r1, r1, #768	@ 0x300
        CPUSS_TRIM_RAM_CTL = (SFLASH_CPUSS_TRIM_RAM_CTL_HALF_LP & ((uint32_t) ~CPUSS_TRIM_RAM_CTL_RA_MASK)) |
10006124:	430b      	orrs	r3, r1
10006126:	512b      	str	r3, [r5, r4]
        CPUSS_TRIM_ROM_CTL = SFLASH_CPUSS_TRIM_ROM_CTL_HALF_LP;
10006128:	6811      	ldr	r1, [r2, #0]
1000612a:	f8d2 30a4 	ldr.w	r3, [r2, #164]	@ 0xa4
1000612e:	f8d0 284c 	ldr.w	r2, [r0, #2124]	@ 0x84c
10006132:	50ca      	str	r2, [r1, r3]
}
10006134:	e7e9      	b.n	1000610a <SetWriteAssistTrimLp+0x22>
10006136:	bf00      	nop
10006138:	08002c40 	.word	0x08002c40
1000613c:	16001000 	.word	0x16001000

10006140 <SetWriteAssistTrimUlp>:
{
10006140:	b508      	push	{r3, lr}
    if (Cy_SysLib_GetDevice() == CY_SYSLIB_DEVICE_PSOC6ABLE2)
10006142:	f7ff ff5a 	bl	10005ffa <Cy_SysLib_GetDevice>
10006146:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
1000614a:	4a0e      	ldr	r2, [pc, #56]	@ (10006184 <SetWriteAssistTrimUlp+0x44>)
1000614c:	d10a      	bne.n	10006164 <SetWriteAssistTrimUlp+0x24>
        CPUSS_TRIM_RAM_CTL = (CPUSS_TRIM_RAM_CTL & ((uint32_t) ~CPUSS_TRIM_RAM_CTL_WA_Msk)) |
1000614e:	6813      	ldr	r3, [r2, #0]
10006150:	6819      	ldr	r1, [r3, #0]
10006152:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
10006156:	588b      	ldr	r3, [r1, r2]
10006158:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
1000615c:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
10006160:	508b      	str	r3, [r1, r2]
}
10006162:	bd08      	pop	{r3, pc}
                             (CPUSS_TRIM_RAM_CTL & CPUSS_TRIM_RAM_CTL_RA_MASK);
10006164:	6812      	ldr	r2, [r2, #0]
        CPUSS_TRIM_RAM_CTL = (SFLASH_CPUSS_TRIM_RAM_CTL_ULP & ((uint32_t) ~CPUSS_TRIM_RAM_CTL_RA_MASK)) |
10006166:	4b08      	ldr	r3, [pc, #32]	@ (10006188 <SetWriteAssistTrimUlp+0x48>)
                             (CPUSS_TRIM_RAM_CTL & CPUSS_TRIM_RAM_CTL_RA_MASK);
10006168:	6810      	ldr	r0, [r2, #0]
1000616a:	f8d2 10a0 	ldr.w	r1, [r2, #160]	@ 0xa0
        CPUSS_TRIM_RAM_CTL = (SFLASH_CPUSS_TRIM_RAM_CTL_ULP & ((uint32_t) ~CPUSS_TRIM_RAM_CTL_RA_MASK)) |
1000616e:	f8d3 381c 	ldr.w	r3, [r3, #2076]	@ 0x81c
                             (CPUSS_TRIM_RAM_CTL & CPUSS_TRIM_RAM_CTL_RA_MASK);
10006172:	5842      	ldr	r2, [r0, r1]
        CPUSS_TRIM_RAM_CTL = (SFLASH_CPUSS_TRIM_RAM_CTL_ULP & ((uint32_t) ~CPUSS_TRIM_RAM_CTL_RA_MASK)) |
10006174:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
                             (CPUSS_TRIM_RAM_CTL & CPUSS_TRIM_RAM_CTL_RA_MASK);
10006178:	f402 7240 	and.w	r2, r2, #768	@ 0x300
        CPUSS_TRIM_RAM_CTL = (SFLASH_CPUSS_TRIM_RAM_CTL_ULP & ((uint32_t) ~CPUSS_TRIM_RAM_CTL_RA_MASK)) |
1000617c:	4313      	orrs	r3, r2
1000617e:	5043      	str	r3, [r0, r1]
}
10006180:	e7ef      	b.n	10006162 <SetWriteAssistTrimUlp+0x22>
10006182:	bf00      	nop
10006184:	08002c40 	.word	0x08002c40
10006188:	16001000 	.word	0x16001000

1000618c <SetReadMarginTrimLp>:
{
1000618c:	b538      	push	{r3, r4, r5, lr}
    if (Cy_SysLib_GetDevice() == CY_SYSLIB_DEVICE_PSOC6ABLE2)
1000618e:	f7ff ff34 	bl	10005ffa <Cy_SysLib_GetDevice>
10006192:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
10006196:	4a15      	ldr	r2, [pc, #84]	@ (100061ec <SetReadMarginTrimLp+0x60>)
10006198:	d113      	bne.n	100061c2 <SetReadMarginTrimLp+0x36>
        CPUSS_TRIM_RAM_CTL = (CPUSS_TRIM_RAM_CTL & ((uint32_t) ~CPUSS_TRIM_RAM_CTL_RM_Msk)) |
1000619a:	6812      	ldr	r2, [r2, #0]
1000619c:	f8d2 10a0 	ldr.w	r1, [r2, #160]	@ 0xa0
100061a0:	6810      	ldr	r0, [r2, #0]
100061a2:	5843      	ldr	r3, [r0, r1]
100061a4:	f023 030f 	bic.w	r3, r3, #15
100061a8:	f043 0303 	orr.w	r3, r3, #3
100061ac:	5043      	str	r3, [r0, r1]
        CPUSS_TRIM_ROM_CTL = (CPUSS_TRIM_ROM_CTL & ((uint32_t) ~CPUSS_TRIM_ROM_CTL_RM_Msk)) |
100061ae:	6811      	ldr	r1, [r2, #0]
100061b0:	f8d2 20a4 	ldr.w	r2, [r2, #164]	@ 0xa4
100061b4:	588b      	ldr	r3, [r1, r2]
100061b6:	f023 030f 	bic.w	r3, r3, #15
100061ba:	f043 0303 	orr.w	r3, r3, #3
100061be:	508b      	str	r3, [r1, r2]
}
100061c0:	bd38      	pop	{r3, r4, r5, pc}
                             (CPUSS_TRIM_RAM_CTL & CPUSS_TRIM_RAM_CTL_RA_MASK);
100061c2:	6812      	ldr	r2, [r2, #0]
        CPUSS_TRIM_RAM_CTL = (SFLASH_CPUSS_TRIM_RAM_CTL_LP & ((uint32_t) ~CPUSS_TRIM_RAM_CTL_RA_MASK)) |
100061c4:	480a      	ldr	r0, [pc, #40]	@ (100061f0 <SetReadMarginTrimLp+0x64>)
                             (CPUSS_TRIM_RAM_CTL & CPUSS_TRIM_RAM_CTL_RA_MASK);
100061c6:	6815      	ldr	r5, [r2, #0]
100061c8:	f8d2 40a0 	ldr.w	r4, [r2, #160]	@ 0xa0
        CPUSS_TRIM_RAM_CTL = (SFLASH_CPUSS_TRIM_RAM_CTL_LP & ((uint32_t) ~CPUSS_TRIM_RAM_CTL_RA_MASK)) |
100061cc:	f8d0 3824 	ldr.w	r3, [r0, #2084]	@ 0x824
                             (CPUSS_TRIM_RAM_CTL & CPUSS_TRIM_RAM_CTL_RA_MASK);
100061d0:	5929      	ldr	r1, [r5, r4]
        CPUSS_TRIM_RAM_CTL = (SFLASH_CPUSS_TRIM_RAM_CTL_LP & ((uint32_t) ~CPUSS_TRIM_RAM_CTL_RA_MASK)) |
100061d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
                             (CPUSS_TRIM_RAM_CTL & CPUSS_TRIM_RAM_CTL_RA_MASK);
100061d6:	f401 7140 	and.w	r1, r1, #768	@ 0x300
        CPUSS_TRIM_RAM_CTL = (SFLASH_CPUSS_TRIM_RAM_CTL_LP & ((uint32_t) ~CPUSS_TRIM_RAM_CTL_RA_MASK)) |
100061da:	430b      	orrs	r3, r1
100061dc:	512b      	str	r3, [r5, r4]
        CPUSS_TRIM_ROM_CTL =  SFLASH_CPUSS_TRIM_ROM_CTL_LP;
100061de:	6811      	ldr	r1, [r2, #0]
100061e0:	f8d2 30a4 	ldr.w	r3, [r2, #164]	@ 0xa4
100061e4:	f8d0 2820 	ldr.w	r2, [r0, #2080]	@ 0x820
100061e8:	50ca      	str	r2, [r1, r3]
}
100061ea:	e7e9      	b.n	100061c0 <SetReadMarginTrimLp+0x34>
100061ec:	08002c40 	.word	0x08002c40
100061f0:	16001000 	.word	0x16001000

100061f4 <Cy_SysPm_RegisterCallback>:
{
100061f4:	b570      	push	{r4, r5, r6, lr}
    if ((handler != NULL) && (handler->callbackParams != NULL) && (handler->callback != NULL))
100061f6:	b1c0      	cbz	r0, 1000622a <Cy_SysPm_RegisterCallback+0x36>
100061f8:	68c3      	ldr	r3, [r0, #12]
100061fa:	b37b      	cbz	r3, 1000625c <Cy_SysPm_RegisterCallback+0x68>
100061fc:	6803      	ldr	r3, [r0, #0]
100061fe:	b36b      	cbz	r3, 1000625c <Cy_SysPm_RegisterCallback+0x68>
        uint32_t callbackRootIdx = (uint32_t) handler->type;
10006200:	7905      	ldrb	r5, [r0, #4]
        if (pmCallbackRoot[callbackRootIdx] != NULL)
10006202:	4c17      	ldr	r4, [pc, #92]	@ (10006260 <Cy_SysPm_RegisterCallback+0x6c>)
10006204:	f854 1025 	ldr.w	r1, [r4, r5, lsl #2]
10006208:	b981      	cbnz	r1, 1000622c <Cy_SysPm_RegisterCallback+0x38>
            handler->prevItm = NULL;
1000620a:	e9c0 1104 	strd	r1, r1, [r0, #16]
            pmCallbackRoot[callbackRootIdx] = handler;
1000620e:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
            handler->nextItm = NULL;
10006212:	e01a      	b.n	1000624a <Cy_SysPm_RegisterCallback+0x56>
                if (curCallback->order <= handler->order)
10006214:	7e01      	ldrb	r1, [r0, #24]
10006216:	7e1e      	ldrb	r6, [r3, #24]
10006218:	428e      	cmp	r6, r1
1000621a:	bf98      	it	ls
1000621c:	461a      	movls	r2, r3
1000621e:	4619      	mov	r1, r3
            while ((NULL != curCallback->nextItm) && (curCallback != handler))
10006220:	694b      	ldr	r3, [r1, #20]
10006222:	b12b      	cbz	r3, 10006230 <Cy_SysPm_RegisterCallback+0x3c>
10006224:	4281      	cmp	r1, r0
10006226:	d1f5      	bne.n	10006214 <Cy_SysPm_RegisterCallback+0x20>
    bool retVal = false;
10006228:	2000      	movs	r0, #0
}
1000622a:	bd70      	pop	{r4, r5, r6, pc}
1000622c:	460a      	mov	r2, r1
1000622e:	e7f7      	b.n	10006220 <Cy_SysPm_RegisterCallback+0x2c>
            if (curCallback != handler)
10006230:	4281      	cmp	r1, r0
10006232:	d013      	beq.n	1000625c <Cy_SysPm_RegisterCallback+0x68>
                if ((insertPos->prevItm == NULL) && (handler->order < insertPos->order))
10006234:	6913      	ldr	r3, [r2, #16]
10006236:	b953      	cbnz	r3, 1000624e <Cy_SysPm_RegisterCallback+0x5a>
10006238:	7e06      	ldrb	r6, [r0, #24]
1000623a:	7e11      	ldrb	r1, [r2, #24]
1000623c:	428e      	cmp	r6, r1
1000623e:	d206      	bcs.n	1000624e <Cy_SysPm_RegisterCallback+0x5a>
                    pmCallbackRoot[callbackRootIdx] = handler;
10006240:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
                    handler->prevItm = NULL;
10006244:	e9c0 3204 	strd	r3, r2, [r0, #16]
                    handler->nextItm->prevItm = handler;
10006248:	6110      	str	r0, [r2, #16]
            retVal = true;
1000624a:	2001      	movs	r0, #1
1000624c:	e7ed      	b.n	1000622a <Cy_SysPm_RegisterCallback+0x36>
                    handler->nextItm = insertPos->nextItm;
1000624e:	6953      	ldr	r3, [r2, #20]
                    handler->prevItm = insertPos;
10006250:	e9c0 2304 	strd	r2, r3, [r0, #16]
                    if (handler->nextItm != NULL)
10006254:	b103      	cbz	r3, 10006258 <Cy_SysPm_RegisterCallback+0x64>
                        handler->nextItm->prevItm = handler;
10006256:	6118      	str	r0, [r3, #16]
                    insertPos->nextItm = handler;
10006258:	6150      	str	r0, [r2, #20]
1000625a:	e7f6      	b.n	1000624a <Cy_SysPm_RegisterCallback+0x56>
    bool retVal = false;
1000625c:	4618      	mov	r0, r3
1000625e:	e7e4      	b.n	1000622a <Cy_SysPm_RegisterCallback+0x36>
10006260:	08002c70 	.word	0x08002c70

10006264 <Cy_SysPm_IoUnfreeze>:
{
10006264:	b508      	push	{r3, lr}
    interruptState = Cy_SysLib_EnterCriticalSection();
10006266:	f7fc fc2c 	bl	10002ac2 <Cy_SysLib_EnterCriticalSection>
    SRSS_PWR_HIBERNATE = (SRSS_PWR_HIBERNATE & HIBERNATE_RETAIN_STATUS_MASK) | HIBERNATE_UNLOCK_VAL;
1000626a:	4b07      	ldr	r3, [pc, #28]	@ (10006288 <Cy_SysPm_IoUnfreeze+0x24>)
1000626c:	4907      	ldr	r1, [pc, #28]	@ (1000628c <Cy_SysPm_IoUnfreeze+0x28>)
1000626e:	685a      	ldr	r2, [r3, #4]
10006270:	400a      	ands	r2, r1
10006272:	f442 5268 	orr.w	r2, r2, #14848	@ 0x3a00
10006276:	605a      	str	r2, [r3, #4]
    SRSS_PWR_HIBERNATE &= HIBERNATE_RETAIN_STATUS_MASK;
10006278:	685a      	ldr	r2, [r3, #4]
1000627a:	400a      	ands	r2, r1
1000627c:	605a      	str	r2, [r3, #4]
    (void) SRSS_PWR_HIBERNATE;
1000627e:	685b      	ldr	r3, [r3, #4]
}
10006280:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Cy_SysLib_ExitCriticalSection(interruptState);
10006284:	f7fc bc21 	b.w	10002aca <Cy_SysLib_ExitCriticalSection>
10006288:	40260000 	.word	0x40260000
1000628c:	0ffc00ff 	.word	0x0ffc00ff

10006290 <Cy_SysPm_WriteVoltageBitForFlash>:
{
10006290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10006292:	4604      	mov	r4, r0
    uint16_t curDeviceRevision = Cy_SysLib_GetDeviceRevision();
10006294:	f7ff fea8 	bl	10005fe8 <Cy_SysLib_GetDeviceRevision>
10006298:	b285      	uxth	r5, r0
    uint16_t curDevice = Cy_SysLib_GetDevice();
1000629a:	f7ff feae 	bl	10005ffa <Cy_SysLib_GetDevice>
1000629e:	4606      	mov	r6, r0
    if ((Cy_Prot_GetActivePC(ACTIVE_BUS_MASTER) == 0U) && (curDevice == CY_SYSLIB_DEVICE_PSOC6ABLE2) &&
100062a0:	200e      	movs	r0, #14
100062a2:	f7fe fc23 	bl	10004aec <Cy_Prot_GetActivePC>
100062a6:	b990      	cbnz	r0, 100062ce <Cy_SysPm_WriteVoltageBitForFlash+0x3e>
100062a8:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
100062ac:	d114      	bne.n	100062d8 <Cy_SysPm_WriteVoltageBitForFlash+0x48>
100062ae:	2d22      	cmp	r5, #34	@ 0x22
100062b0:	d812      	bhi.n	100062d8 <Cy_SysPm_WriteVoltageBitForFlash+0x48>
        _CLR_SET_FLD32U((FLASHC_FM_CTL_ANA_CTL0), FLASHC_FM_CTL_ANA_CTL0_VCC_SEL, value);
100062b2:	4b1b      	ldr	r3, [pc, #108]	@ (10006320 <Cy_SysPm_WriteVoltageBitForFlash+0x90>)
100062b4:	681b      	ldr	r3, [r3, #0]
100062b6:	685b      	ldr	r3, [r3, #4]
100062b8:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
100062bc:	0624      	lsls	r4, r4, #24
100062be:	699a      	ldr	r2, [r3, #24]
100062c0:	f004 7480 	and.w	r4, r4, #16777216	@ 0x1000000
100062c4:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
100062c8:	4314      	orrs	r4, r2
        FLASHC_FM_CTL_ANA_CTL0 =
100062ca:	619c      	str	r4, [r3, #24]
}
100062cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((curDevice == CY_SYSLIB_DEVICE_PSOC6ABLE2) && (curDeviceRevision > SYSPM_DEVICE_PSOC6ABLE2_REV_0B)) ||
100062ce:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
100062d2:	d101      	bne.n	100062d8 <Cy_SysPm_WriteVoltageBitForFlash+0x48>
100062d4:	2d22      	cmp	r5, #34	@ 0x22
100062d6:	d921      	bls.n	1000631c <Cy_SysPm_WriteVoltageBitForFlash+0x8c>
    return ( (IPC_STRUCT_Type*) CY_IPC_STRUCT_PTR(ipcIndex));
100062d8:	4f11      	ldr	r7, [pc, #68]	@ (10006320 <Cy_SysPm_WriteVoltageBitForFlash+0x90>)
100062da:	683b      	ldr	r3, [r7, #0]
100062dc:	f8b3 50be 	ldrh.w	r5, [r3, #190]	@ 0xbe
100062e0:	6a1b      	ldr	r3, [r3, #32]
        if (curDevice == CY_SYSLIB_DEVICE_PSOC6ABLE2)
100062e2:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
100062e6:	441d      	add	r5, r3
            FLASH_VOLTAGE_BIT_ULP_PSOC6ABLE2_OPCODE : FLASH_VOLTAGE_BIT_LP_PSOC6ABLE2_OPCODE;
100062e8:	bf07      	ittee	eq
100062ea:	4a0e      	ldreq	r2, [pc, #56]	@ (10006324 <Cy_SysPm_WriteVoltageBitForFlash+0x94>)
100062ec:	4b0e      	ldreq	r3, [pc, #56]	@ (10006328 <Cy_SysPm_WriteVoltageBitForFlash+0x98>)
            FLASH_VOLTAGE_BIT_ULP_OPCODE : FLASH_VOLTAGE_BIT_LP_OPCODE;
100062ee:	4a0f      	ldrne	r2, [pc, #60]	@ (1000632c <Cy_SysPm_WriteVoltageBitForFlash+0x9c>)
100062f0:	4b0f      	ldrne	r3, [pc, #60]	@ (10006330 <Cy_SysPm_WriteVoltageBitForFlash+0xa0>)
        if (Cy_IPC_Drv_SendMsgWord(ipcSyscallBase, SYSPM_IPC_NOTIFY_STRUCT0, syscallCode) == CY_IPC_DRV_SUCCESS)
100062f2:	2101      	movs	r1, #1
            FLASH_VOLTAGE_BIT_ULP_OPCODE : FLASH_VOLTAGE_BIT_LP_OPCODE;
100062f4:	2c00      	cmp	r4, #0
100062f6:	bf08      	it	eq
100062f8:	461a      	moveq	r2, r3
        if (Cy_IPC_Drv_SendMsgWord(ipcSyscallBase, SYSPM_IPC_NOTIFY_STRUCT0, syscallCode) == CY_IPC_DRV_SUCCESS)
100062fa:	4628      	mov	r0, r5
100062fc:	f7fe fa18 	bl	10004730 <Cy_IPC_Drv_SendMsgWord>
10006300:	b960      	cbnz	r0, 1000631c <Cy_SysPm_WriteVoltageBitForFlash+0x8c>
    return ( 0u != _FLD2VAL(IPC_STRUCT_ACQUIRE_SUCCESS, REG_IPC_STRUCT_LOCK_STATUS(base)) );
10006302:	683b      	ldr	r3, [r7, #0]
10006304:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
10006308:	442b      	add	r3, r5
1000630a:	681a      	ldr	r2, [r3, #0]
            while (Cy_IPC_Drv_IsLockAcquired(ipcSyscallBase))
1000630c:	2a00      	cmp	r2, #0
1000630e:	dbfc      	blt.n	1000630a <Cy_SysPm_WriteVoltageBitForFlash+0x7a>
    return REG_IPC_STRUCT_DATA(base);
10006310:	68eb      	ldr	r3, [r5, #12]
            if (SYSCALL_STATUS_SUCCESS == (syscallStatus & SYSCALL_STATUS_MASK))
10006312:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
10006316:	f1b3 4f20 	cmp.w	r3, #2684354560	@ 0xa0000000
1000631a:	d0d7      	beq.n	100062cc <Cy_SysPm_WriteVoltageBitForFlash+0x3c>
            FLASH_VOLTAGE_BIT_ULP_PSOC6ABLE2_OPCODE : FLASH_VOLTAGE_BIT_LP_PSOC6ABLE2_OPCODE;
1000631c:	4805      	ldr	r0, [pc, #20]	@ (10006334 <Cy_SysPm_WriteVoltageBitForFlash+0xa4>)
    return retVal;
1000631e:	e7d5      	b.n	100062cc <Cy_SysPm_WriteVoltageBitForFlash+0x3c>
10006320:	08002c40 	.word	0x08002c40
10006324:	30000101 	.word	0x30000101
10006328:	30000001 	.word	0x30000001
1000632c:	0c000003 	.word	0x0c000003
10006330:	0c000001 	.word	0x0c000001
10006334:	00420004 	.word	0x00420004

10006338 <Cy_SysPm_LdoGetVoltage>:

cy_en_syspm_ldo_voltage_t Cy_SysPm_LdoGetVoltage(void)
{
    uint32_t curVoltage;

    curVoltage = _FLD2VAL(SRSS_PWR_TRIM_PWRSYS_CTL_ACT_REG_TRIM, SRSS_PWR_TRIM_PWRSYS_CTL);
10006338:	4b06      	ldr	r3, [pc, #24]	@ (10006354 <Cy_SysPm_LdoGetVoltage+0x1c>)

    return ((curVoltage == (SFLASH_LDO_0P9V_TRIM)) ? CY_SYSPM_LDO_VOLTAGE_ULP : CY_SYSPM_LDO_VOLTAGE_LP);
1000633a:	f04f 52b0 	mov.w	r2, #369098752	@ 0x16000000
    curVoltage = _FLD2VAL(SRSS_PWR_TRIM_PWRSYS_CTL_ACT_REG_TRIM, SRSS_PWR_TRIM_PWRSYS_CTL);
1000633e:	f8d3 3f1c 	ldr.w	r3, [r3, #3868]	@ 0xf1c
    return ((curVoltage == (SFLASH_LDO_0P9V_TRIM)) ? CY_SYSPM_LDO_VOLTAGE_ULP : CY_SYSPM_LDO_VOLTAGE_LP);
10006342:	f892 0740 	ldrb.w	r0, [r2, #1856]	@ 0x740
    curVoltage = _FLD2VAL(SRSS_PWR_TRIM_PWRSYS_CTL_ACT_REG_TRIM, SRSS_PWR_TRIM_PWRSYS_CTL);
10006346:	f003 031f 	and.w	r3, r3, #31
}
1000634a:	1a18      	subs	r0, r3, r0
1000634c:	bf18      	it	ne
1000634e:	2001      	movne	r0, #1
10006350:	4770      	bx	lr
10006352:	bf00      	nop
10006354:	4026f000 	.word	0x4026f000

10006358 <Cy_SysPm_LdoIsEnabled>:


bool Cy_SysPm_LdoIsEnabled(void)
{
    return ((0U != _FLD2VAL(SRSS_PWR_CTL_LINREG_DIS, SRSS_PWR_CTL)) ? false : true);
10006358:	4b03      	ldr	r3, [pc, #12]	@ (10006368 <Cy_SysPm_LdoIsEnabled+0x10>)
1000635a:	6818      	ldr	r0, [r3, #0]
1000635c:	f480 0000 	eor.w	r0, r0, #8388608	@ 0x800000
}
10006360:	f3c0 50c0 	ubfx	r0, r0, #23, #1
10006364:	4770      	bx	lr
10006366:	bf00      	nop
10006368:	40260000 	.word	0x40260000

1000636c <Cy_SysPm_ReadStatus>:
{
1000636c:	b508      	push	{r3, lr}
    if ((CPUSS_CM4_STATUS & CM4_DEEPSLEEP_MASK) == CM4_DEEPSLEEP_MASK)
1000636e:	4b1a      	ldr	r3, [pc, #104]	@ (100063d8 <Cy_SysPm_ReadStatus+0x6c>)
10006370:	681a      	ldr	r2, [r3, #0]
10006372:	f8d2 0094 	ldr.w	r0, [r2, #148]	@ 0x94
10006376:	6813      	ldr	r3, [r2, #0]
10006378:	5819      	ldr	r1, [r3, r0]
1000637a:	f001 0103 	and.w	r1, r1, #3
1000637e:	2903      	cmp	r1, #3
    else if(0U != _FLD2VAL(CPUSS_CM4_STATUS_SLEEPING, CPUSS_CM4_STATUS))
10006380:	bf18      	it	ne
10006382:	5819      	ldrne	r1, [r3, r0]
    if ((CPUSS_CM0_STATUS & CM0_DEEPSLEEP_MASK) == CM0_DEEPSLEEP_MASK)
10006384:	f8d2 0098 	ldr.w	r0, [r2, #152]	@ 0x98
10006388:	581a      	ldr	r2, [r3, r0]
    else if(0U != _FLD2VAL(CPUSS_CM4_STATUS_SLEEPING, CPUSS_CM4_STATUS))
1000638a:	bf18      	it	ne
1000638c:	f001 0101 	andne.w	r1, r1, #1
    if ((CPUSS_CM0_STATUS & CM0_DEEPSLEEP_MASK) == CM0_DEEPSLEEP_MASK)
10006390:	f002 0203 	and.w	r2, r2, #3
    else if(0U != _FLD2VAL(CPUSS_CM4_STATUS_SLEEPING, CPUSS_CM4_STATUS))
10006394:	bf14      	ite	ne
10006396:	3101      	addne	r1, #1
        pmStatus |= CY_SYSPM_STATUS_CM4_DEEPSLEEP;
10006398:	2104      	moveq	r1, #4
    if ((CPUSS_CM0_STATUS & CM0_DEEPSLEEP_MASK) == CM0_DEEPSLEEP_MASK)
1000639a:	2a03      	cmp	r2, #3
1000639c:	d10a      	bne.n	100063b4 <Cy_SysPm_ReadStatus+0x48>
        pmStatus |= CY_SYSPM_STATUS_CM0_DEEPSLEEP;
1000639e:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
    if (Cy_SysPm_LdoIsEnabled())
100063a2:	f7ff ffd9 	bl	10006358 <Cy_SysPm_LdoIsEnabled>
100063a6:	b168      	cbz	r0, 100063c4 <Cy_SysPm_ReadStatus+0x58>
        if (Cy_SysPm_LdoGetVoltage() != CY_SYSPM_LDO_VOLTAGE_ULP)
100063a8:	f7ff ffc6 	bl	10006338 <Cy_SysPm_LdoGetVoltage>
100063ac:	b180      	cbz	r0, 100063d0 <Cy_SysPm_ReadStatus+0x64>
            pmStatus |= CY_SYSPM_STATUS_SYSTEM_LP;
100063ae:	f041 0080 	orr.w	r0, r1, #128	@ 0x80
}
100063b2:	bd08      	pop	{r3, pc}
    else if (0U != _FLD2VAL(CPUSS_CM0_STATUS_SLEEPING, CPUSS_CM0_STATUS))
100063b4:	581b      	ldr	r3, [r3, r0]
100063b6:	07db      	lsls	r3, r3, #31
        pmStatus |= CY_SYSPM_STATUS_CM0_SLEEP;
100063b8:	bf4c      	ite	mi
100063ba:	f041 0120 	orrmi.w	r1, r1, #32
        pmStatus |= CY_SYSPM_STATUS_CM0_ACTIVE;
100063be:	f041 0110 	orrpl.w	r1, r1, #16
100063c2:	e7ee      	b.n	100063a2 <Cy_SysPm_ReadStatus+0x36>
    retVal = _FLD2VAL(SRSS_PWR_BUCK_CTL_BUCK_OUT1_SEL, SRSS_PWR_BUCK_CTL);
100063c4:	4b05      	ldr	r3, [pc, #20]	@ (100063dc <Cy_SysPm_ReadStatus+0x70>)
100063c6:	695b      	ldr	r3, [r3, #20]
100063c8:	f003 0307 	and.w	r3, r3, #7
        if (Cy_SysPm_BuckGetVoltage1() != CY_SYSPM_BUCK_OUT1_VOLTAGE_ULP)
100063cc:	2b02      	cmp	r3, #2
100063ce:	d1ee      	bne.n	100063ae <Cy_SysPm_ReadStatus+0x42>
            pmStatus |= CY_SYSPM_STATUS_SYSTEM_ULP;
100063d0:	f441 6000 	orr.w	r0, r1, #2048	@ 0x800
    return pmStatus;
100063d4:	e7ed      	b.n	100063b2 <Cy_SysPm_ReadStatus+0x46>
100063d6:	bf00      	nop
100063d8:	08002c40 	.word	0x08002c40
100063dc:	40260000 	.word	0x40260000

100063e0 <Cy_SysPm_IsSystemUlp>:
{
100063e0:	b508      	push	{r3, lr}
    return((Cy_SysPm_ReadStatus() & CY_SYSPM_STATUS_SYSTEM_ULP) != 0U);
100063e2:	f7ff ffc3 	bl	1000636c <Cy_SysPm_ReadStatus>
}
100063e6:	f3c0 20c0 	ubfx	r0, r0, #11, #1
100063ea:	bd08      	pop	{r3, pc}

100063ec <Cy_SysPm_SystemSetNormalRegulatorCurrent>:
{
100063ec:	b508      	push	{r3, lr}
    if (Cy_SysPm_LdoIsEnabled())
100063ee:	f7ff ffb3 	bl	10006358 <Cy_SysPm_LdoIsEnabled>
100063f2:	4a18      	ldr	r2, [pc, #96]	@ (10006454 <Cy_SysPm_SystemSetNormalRegulatorCurrent+0x68>)
        SRSS_PWR_CTL &= (uint32_t) ~CY_SYSPM_PWR_CIRCUITS_LPMODE_ACTIVE_LDO_MASK;
100063f4:	6813      	ldr	r3, [r2, #0]
    if (Cy_SysPm_LdoIsEnabled())
100063f6:	b178      	cbz	r0, 10006418 <Cy_SysPm_SystemSetNormalRegulatorCurrent+0x2c>
        SRSS_PWR_CTL &= (uint32_t) ~CY_SYSPM_PWR_CIRCUITS_LPMODE_ACTIVE_LDO_MASK;
100063f8:	f023 43a6 	bic.w	r3, r3, #1392508928	@ 0x53000000
        SRSS_PWR_CTL &= (uint32_t) ~CY_SYSPM_PWR_CIRCUITS_LPMODE_ACTIVE_BUCK_MASK;
100063fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
10006400:	6013      	str	r3, [r2, #0]
    Cy_SysLib_DelayUs(ACT_REF_SETTLE_DELAY_US);
10006402:	2008      	movs	r0, #8
10006404:	f7ff fd20 	bl	10005e48 <Cy_SysLib_DelayUs>
    while ((0U == _FLD2VAL(SRSS_PWR_CTL_ACT_REF_OK, SRSS_PWR_CTL)) && (0U != timeOut))
10006408:	4a12      	ldr	r2, [pc, #72]	@ (10006454 <Cy_SysPm_SystemSetNormalRegulatorCurrent+0x68>)
    uint32_t timeOut = WAIT_DELAY_TRYES;
1000640a:	2364      	movs	r3, #100	@ 0x64
    while ((0U == _FLD2VAL(SRSS_PWR_CTL_ACT_REF_OK, SRSS_PWR_CTL)) && (0U != timeOut))
1000640c:	6811      	ldr	r1, [r2, #0]
1000640e:	2900      	cmp	r1, #0
10006410:	db07      	blt.n	10006422 <Cy_SysPm_SystemSetNormalRegulatorCurrent+0x36>
10006412:	b923      	cbnz	r3, 1000641e <Cy_SysPm_SystemSetNormalRegulatorCurrent+0x32>
    cy_en_syspm_status_t retVal = CY_SYSPM_TIMEOUT;
10006414:	4810      	ldr	r0, [pc, #64]	@ (10006458 <Cy_SysPm_SystemSetNormalRegulatorCurrent+0x6c>)
    return retVal;
10006416:	e011      	b.n	1000643c <Cy_SysPm_SystemSetNormalRegulatorCurrent+0x50>
        SRSS_PWR_CTL &= (uint32_t) ~CY_SYSPM_PWR_CIRCUITS_LPMODE_ACTIVE_BUCK_MASK;
10006418:	f023 43a4 	bic.w	r3, r3, #1375731712	@ 0x52000000
1000641c:	e7ee      	b.n	100063fc <Cy_SysPm_SystemSetNormalRegulatorCurrent+0x10>
        timeOut--;
1000641e:	3b01      	subs	r3, #1
10006420:	e7f4      	b.n	1000640c <Cy_SysPm_SystemSetNormalRegulatorCurrent+0x20>
    if (0U != timeOut)
10006422:	2b00      	cmp	r3, #0
10006424:	d0f6      	beq.n	10006414 <Cy_SysPm_SystemSetNormalRegulatorCurrent+0x28>
        SRSS_PWR_CTL &= (uint32_t) ~SRSS_PWR_CTL_BGREF_LPMODE_Msk;
10006426:	6813      	ldr	r3, [r2, #0]
10006428:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
1000642c:	6013      	str	r3, [r2, #0]
        Cy_SysLib_DelayUs(SET_NORMAL_CURRENT_MODE_DELAY_US);
1000642e:	2001      	movs	r0, #1
10006430:	f7ff fd0a 	bl	10005e48 <Cy_SysLib_DelayUs>
        if (Cy_SysPm_LdoIsEnabled() && (Cy_SysPm_LdoGetVoltage() == CY_SYSPM_LDO_VOLTAGE_1_1V))
10006434:	f7ff ff90 	bl	10006358 <Cy_SysPm_LdoIsEnabled>
10006438:	b908      	cbnz	r0, 1000643e <Cy_SysPm_SystemSetNormalRegulatorCurrent+0x52>
            SRSS_PWR_TRIM_WAKE_CTL = SFLASH_PWR_TRIM_WAKE_CTL;
1000643a:	2000      	movs	r0, #0
}
1000643c:	bd08      	pop	{r3, pc}
        if (Cy_SysPm_LdoIsEnabled() && (Cy_SysPm_LdoGetVoltage() == CY_SYSPM_LDO_VOLTAGE_1_1V))
1000643e:	f7ff ff7b 	bl	10006338 <Cy_SysPm_LdoGetVoltage>
10006442:	2801      	cmp	r0, #1
            SRSS_PWR_TRIM_WAKE_CTL = SFLASH_PWR_TRIM_WAKE_CTL;
10006444:	bf01      	itttt	eq
10006446:	4b05      	ldreq	r3, [pc, #20]	@ (1000645c <Cy_SysPm_SystemSetNormalRegulatorCurrent+0x70>)
10006448:	f8d3 2810 	ldreq.w	r2, [r3, #2064]	@ 0x810
1000644c:	4b04      	ldreq	r3, [pc, #16]	@ (10006460 <Cy_SysPm_SystemSetNormalRegulatorCurrent+0x74>)
1000644e:	f8c3 2f30 	streq.w	r2, [r3, #3888]	@ 0xf30
10006452:	e7f2      	b.n	1000643a <Cy_SysPm_SystemSetNormalRegulatorCurrent+0x4e>
10006454:	40260000 	.word	0x40260000
10006458:	00420002 	.word	0x00420002
1000645c:	16001000 	.word	0x16001000
10006460:	40267000 	.word	0x40267000

10006464 <Cy_SysPm_SystemIsMinRegulatorCurrentSet>:
{
10006464:	b508      	push	{r3, lr}
    uint32_t regMask = Cy_SysPm_LdoIsEnabled() ? CY_SYSPM_PWR_CIRCUITS_LPMODE_ACTIVE_LDO_MASK : CY_SYSPM_PWR_CIRCUITS_LPMODE_ACTIVE_BUCK_MASK;
10006466:	f7ff ff77 	bl	10006358 <Cy_SysPm_LdoIsEnabled>
1000646a:	4a06      	ldr	r2, [pc, #24]	@ (10006484 <Cy_SysPm_SystemIsMinRegulatorCurrentSet+0x20>)
1000646c:	4b06      	ldr	r3, [pc, #24]	@ (10006488 <Cy_SysPm_SystemIsMinRegulatorCurrentSet+0x24>)
1000646e:	2800      	cmp	r0, #0
10006470:	bf08      	it	eq
10006472:	4613      	moveq	r3, r2
    return ((SRSS_PWR_CTL & regMask) == regMask);
10006474:	4a05      	ldr	r2, [pc, #20]	@ (1000648c <Cy_SysPm_SystemIsMinRegulatorCurrentSet+0x28>)
10006476:	6812      	ldr	r2, [r2, #0]
10006478:	4393      	bics	r3, r2
}
1000647a:	bf0c      	ite	eq
1000647c:	2001      	moveq	r0, #1
1000647e:	2000      	movne	r0, #0
10006480:	bd08      	pop	{r3, pc}
10006482:	bf00      	nop
10006484:	52040000 	.word	0x52040000
10006488:	53040000 	.word	0x53040000
1000648c:	40260000 	.word	0x40260000

10006490 <Cy_SysPm_LdoSetVoltage>:
{
10006490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10006492:	4606      	mov	r6, r0
    if (IsVoltageChangePossible())
10006494:	f7ff fdbc 	bl	10006010 <IsVoltageChangePossible>
10006498:	2800      	cmp	r0, #0
1000649a:	d04d      	beq.n	10006538 <Cy_SysPm_LdoSetVoltage+0xa8>
        interruptState = Cy_SysLib_EnterCriticalSection();
1000649c:	f7fc fb11 	bl	10002ac2 <Cy_SysLib_EnterCriticalSection>
100064a0:	4926      	ldr	r1, [pc, #152]	@ (1000653c <Cy_SysPm_LdoSetVoltage+0xac>)
100064a2:	4607      	mov	r7, r0
        if (CY_SYSPM_LDO_VOLTAGE_0_9V == voltage)
100064a4:	bb06      	cbnz	r6, 100064e8 <Cy_SysPm_LdoSetVoltage+0x58>
            trimVoltage =  SFLASH_LDO_0P9V_TRIM;
100064a6:	f04f 53b0 	mov.w	r3, #369098752	@ 0x16000000
            SRSS_PWR_TRIM_WAKE_CTL = 0UL;
100064aa:	f8c1 6f30 	str.w	r6, [r1, #3888]	@ 0xf30
            retVal = Cy_SysPm_WriteVoltageBitForFlash(CY_SYSPM_FLASH_VOLTAGE_BIT_ULP);
100064ae:	2001      	movs	r0, #1
            trimVoltage =  SFLASH_LDO_0P9V_TRIM;
100064b0:	f893 4740 	ldrb.w	r4, [r3, #1856]	@ 0x740
            retVal = Cy_SysPm_WriteVoltageBitForFlash(CY_SYSPM_FLASH_VOLTAGE_BIT_ULP);
100064b4:	f7ff feec 	bl	10006290 <Cy_SysPm_WriteVoltageBitForFlash>
            trimVoltage =  SFLASH_LDO_0P9V_TRIM;
100064b8:	b2e4      	uxtb	r4, r4
            if (CY_SYSPM_SUCCESS == retVal)
100064ba:	4605      	mov	r5, r0
100064bc:	b978      	cbnz	r0, 100064de <Cy_SysPm_LdoSetVoltage+0x4e>
                SetReadMarginTrimUlp();
100064be:	f7ff fddf 	bl	10006080 <SetReadMarginTrimUlp>
            _CLR_SET_FLD32U((SRSS_PWR_TRIM_PWRSYS_CTL), SRSS_PWR_TRIM_PWRSYS_CTL_ACT_REG_TRIM, trimVoltage);
100064c2:	4a1f      	ldr	r2, [pc, #124]	@ (10006540 <Cy_SysPm_LdoSetVoltage+0xb0>)
100064c4:	f8d2 3f1c 	ldr.w	r3, [r2, #3868]	@ 0xf1c
100064c8:	f004 041f 	and.w	r4, r4, #31
100064cc:	f023 031f 	bic.w	r3, r3, #31
100064d0:	431c      	orrs	r4, r3
            SRSS_PWR_TRIM_PWRSYS_CTL =
100064d2:	f8c2 4f1c 	str.w	r4, [r2, #3868]	@ 0xf1c
            if (CY_SYSPM_LDO_VOLTAGE_0_9V == voltage)
100064d6:	bb2e      	cbnz	r6, 10006524 <Cy_SysPm_LdoSetVoltage+0x94>
                SetWriteAssistTrimUlp();
100064d8:	f7ff fe32 	bl	10006140 <SetWriteAssistTrimUlp>
100064dc:	4635      	mov	r5, r6
        Cy_SysLib_ExitCriticalSection(interruptState);
100064de:	4638      	mov	r0, r7
100064e0:	f7fc faf3 	bl	10002aca <Cy_SysLib_ExitCriticalSection>
}
100064e4:	4628      	mov	r0, r5
100064e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if (Cy_SysPm_SystemIsMinRegulatorCurrentSet())
100064e8:	f7ff ffbc 	bl	10006464 <Cy_SysPm_SystemIsMinRegulatorCurrentSet>
100064ec:	b1b0      	cbz	r0, 1000651c <Cy_SysPm_LdoSetVoltage+0x8c>
                SRSS_PWR_TRIM_WAKE_CTL = SRSS_PWR_TRIM_WAKE_LP;
100064ee:	2350      	movs	r3, #80	@ 0x50
                SRSS_PWR_TRIM_WAKE_CTL = SFLASH_PWR_TRIM_WAKE_CTL;
100064f0:	f8c1 3f30 	str.w	r3, [r1, #3888]	@ 0xf30
            _CLR_SET_FLD32U((SRSS_PWR_TRIM_PWRSYS_CTL), SRSS_PWR_TRIM_PWRSYS_CTL_ACT_REG_TRIM, LDO_OUT_VOLTAGE_0_95V);
100064f4:	4a12      	ldr	r2, [pc, #72]	@ (10006540 <Cy_SysPm_LdoSetVoltage+0xb0>)
            trimVoltage = SFLASH_LDO_1P1V_TRIM;
100064f6:	f04f 53b0 	mov.w	r3, #369098752	@ 0x16000000
            Cy_SysLib_DelayUs(LDO_0_9V_TO_0_95V_DELAY_US);
100064fa:	2003      	movs	r0, #3
            trimVoltage = SFLASH_LDO_1P1V_TRIM;
100064fc:	f893 4741 	ldrb.w	r4, [r3, #1857]	@ 0x741
            _CLR_SET_FLD32U((SRSS_PWR_TRIM_PWRSYS_CTL), SRSS_PWR_TRIM_PWRSYS_CTL_ACT_REG_TRIM, LDO_OUT_VOLTAGE_0_95V);
10006500:	f8d2 3f1c 	ldr.w	r3, [r2, #3868]	@ 0xf1c
10006504:	f023 031f 	bic.w	r3, r3, #31
10006508:	f043 030b 	orr.w	r3, r3, #11
            SRSS_PWR_TRIM_PWRSYS_CTL =
1000650c:	f8c2 3f1c 	str.w	r3, [r2, #3868]	@ 0xf1c
            trimVoltage = SFLASH_LDO_1P1V_TRIM;
10006510:	b2e4      	uxtb	r4, r4
            Cy_SysLib_DelayUs(LDO_0_9V_TO_0_95V_DELAY_US);
10006512:	f7ff fc99 	bl	10005e48 <Cy_SysLib_DelayUs>
            SetWriteAssistTrimLp();
10006516:	f7ff fde7 	bl	100060e8 <SetWriteAssistTrimLp>
        if (CY_SYSPM_SUCCESS == retVal)
1000651a:	e7d2      	b.n	100064c2 <Cy_SysPm_LdoSetVoltage+0x32>
                SRSS_PWR_TRIM_WAKE_CTL = SFLASH_PWR_TRIM_WAKE_CTL;
1000651c:	4b09      	ldr	r3, [pc, #36]	@ (10006544 <Cy_SysPm_LdoSetVoltage+0xb4>)
1000651e:	f8d3 3810 	ldr.w	r3, [r3, #2064]	@ 0x810
10006522:	e7e5      	b.n	100064f0 <Cy_SysPm_LdoSetVoltage+0x60>
                Cy_SysLib_DelayUs(LDO_0_95V_TO_1_1V_DELAY_US);
10006524:	2007      	movs	r0, #7
10006526:	f7ff fc8f 	bl	10005e48 <Cy_SysLib_DelayUs>
                SetReadMarginTrimLp();
1000652a:	f7ff fe2f 	bl	1000618c <SetReadMarginTrimLp>
                retVal = Cy_SysPm_WriteVoltageBitForFlash(CY_SYSPM_FLASH_VOLTAGE_BIT_LP);
1000652e:	2000      	movs	r0, #0
10006530:	f7ff feae 	bl	10006290 <Cy_SysPm_WriteVoltageBitForFlash>
10006534:	4605      	mov	r5, r0
10006536:	e7d2      	b.n	100064de <Cy_SysPm_LdoSetVoltage+0x4e>
    cy_en_syspm_status_t retVal = CY_SYSPM_INVALID_STATE;
10006538:	4d03      	ldr	r5, [pc, #12]	@ (10006548 <Cy_SysPm_LdoSetVoltage+0xb8>)
    return retVal;
1000653a:	e7d3      	b.n	100064e4 <Cy_SysPm_LdoSetVoltage+0x54>
1000653c:	40267000 	.word	0x40267000
10006540:	4026f000 	.word	0x4026f000
10006544:	16001000 	.word	0x16001000
10006548:	00420003 	.word	0x00420003

1000654c <Cy_SysPm_IoIsFrozen>:


bool Cy_SysPm_IoIsFrozen(void)
{
    return (0U != _FLD2VAL(SRSS_PWR_HIBERNATE_FREEZE, SRSS_PWR_HIBERNATE));
1000654c:	4b02      	ldr	r3, [pc, #8]	@ (10006558 <Cy_SysPm_IoIsFrozen+0xc>)
1000654e:	6858      	ldr	r0, [r3, #4]
}
10006550:	f3c0 4040 	ubfx	r0, r0, #17, #1
10006554:	4770      	bx	lr
10006556:	bf00      	nop
10006558:	40260000 	.word	0x40260000

1000655c <Cy_SysPm_PmicDisableOutput>:
}


void Cy_SysPm_PmicDisableOutput(void)
{
    if (CY_SYSPM_PMIC_UNLOCK_KEY == _FLD2VAL(BACKUP_PMIC_CTL_UNLOCK, BACKUP_PMIC_CTL))
1000655c:	4a07      	ldr	r2, [pc, #28]	@ (1000657c <Cy_SysPm_PmicDisableOutput+0x20>)
1000655e:	6c53      	ldr	r3, [r2, #68]	@ 0x44
10006560:	f3c3 2307 	ubfx	r3, r3, #8, #8
10006564:	2b3a      	cmp	r3, #58	@ 0x3a
10006566:	d107      	bne.n	10006578 <Cy_SysPm_PmicDisableOutput+0x1c>
    {
        BACKUP_PMIC_CTL =
        (BACKUP_PMIC_CTL | _VAL2FLD(BACKUP_PMIC_CTL_UNLOCK, CY_SYSPM_PMIC_UNLOCK_KEY)) &
10006568:	6c53      	ldr	r3, [r2, #68]	@ 0x44
1000656a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
1000656e:	f423 5368 	bic.w	r3, r3, #14848	@ 0x3a00
10006572:	f443 5368 	orr.w	r3, r3, #14848	@ 0x3a00
        BACKUP_PMIC_CTL =
10006576:	6453      	str	r3, [r2, #68]	@ 0x44
        ((uint32_t) ~ _VAL2FLD(BACKUP_PMIC_CTL_PMIC_EN_OUTEN, 1U));
    }
}
10006578:	4770      	bx	lr
1000657a:	bf00      	nop
1000657c:	40270000 	.word	0x40270000

10006580 <Cy_SysPm_PmicUnlock>:
}


void Cy_SysPm_PmicUnlock(void)
{
    BACKUP_PMIC_CTL = _CLR_SET_FLD32U(BACKUP_PMIC_CTL, BACKUP_PMIC_CTL_UNLOCK, CY_SYSPM_PMIC_UNLOCK_KEY);
10006580:	4a03      	ldr	r2, [pc, #12]	@ (10006590 <Cy_SysPm_PmicUnlock+0x10>)
10006582:	6c53      	ldr	r3, [r2, #68]	@ 0x44
10006584:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10006588:	f443 5368 	orr.w	r3, r3, #14848	@ 0x3a00
1000658c:	6453      	str	r3, [r2, #68]	@ 0x44
}
1000658e:	4770      	bx	lr
10006590:	40270000 	.word	0x40270000

10006594 <Cy_SysTick_ServiceCallbacks>:

    return (retVal);
}

static void Cy_SysTick_ServiceCallbacks(void)
{
10006594:	b538      	push	{r3, r4, r5, lr}
    return (SYSTICK_CTRL & SysTick_CTRL_COUNTFLAG_Msk);
10006596:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
1000659a:	691b      	ldr	r3, [r3, #16]
    uint32_t i;

    /* Verify that tick timer flag was set */
    if (0u != Cy_SysTick_GetCountFlag())
1000659c:	03db      	lsls	r3, r3, #15
1000659e:	d508      	bpl.n	100065b2 <Cy_SysTick_ServiceCallbacks+0x1e>
100065a0:	4d04      	ldr	r5, [pc, #16]	@ (100065b4 <Cy_SysTick_ServiceCallbacks+0x20>)
    {
        for (i=0u; i < CY_SYS_SYST_NUM_OF_CALLBACKS; i++)
100065a2:	2400      	movs	r4, #0
        {
            if (Cy_SysTick_Callbacks[i] != NULL)
100065a4:	f855 3b04 	ldr.w	r3, [r5], #4
100065a8:	b103      	cbz	r3, 100065ac <Cy_SysTick_ServiceCallbacks+0x18>
            {
                (void)(Cy_SysTick_Callbacks[i])();
100065aa:	4798      	blx	r3
        for (i=0u; i < CY_SYS_SYST_NUM_OF_CALLBACKS; i++)
100065ac:	3401      	adds	r4, #1
100065ae:	2c05      	cmp	r4, #5
100065b0:	d1f8      	bne.n	100065a4 <Cy_SysTick_ServiceCallbacks+0x10>
            }
        }
    }
}
100065b2:	bd38      	pop	{r3, r4, r5, pc}
100065b4:	08002c88 	.word	0x08002c88

100065b8 <Cy_SysTick_EnableInterrupt>:
    SYSTICK_CTRL = SYSTICK_CTRL | SysTick_CTRL_TICKINT_Msk;
100065b8:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
100065bc:	6913      	ldr	r3, [r2, #16]
100065be:	f043 0302 	orr.w	r3, r3, #2
100065c2:	6113      	str	r3, [r2, #16]
}
100065c4:	4770      	bx	lr

100065c6 <Cy_SysTick_Enable>:
{
100065c6:	b508      	push	{r3, lr}
    Cy_SysTick_EnableInterrupt();
100065c8:	f7ff fff6 	bl	100065b8 <Cy_SysTick_EnableInterrupt>
    SYSTICK_CTRL |= SysTick_CTRL_ENABLE_Msk;
100065cc:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
100065d0:	6913      	ldr	r3, [r2, #16]
100065d2:	f043 0301 	orr.w	r3, r3, #1
100065d6:	6113      	str	r3, [r2, #16]
}
100065d8:	bd08      	pop	{r3, pc}
	...

100065dc <Cy_SysTick_SetClockSource>:
    if (clockSource == CY_SYSTICK_CLOCK_SOURCE_CLK_CPU)
100065dc:	2804      	cmp	r0, #4
100065de:	d106      	bne.n	100065ee <Cy_SysTick_SetClockSource+0x12>
        SYSTICK_CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
100065e0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
100065e4:	6913      	ldr	r3, [r2, #16]
100065e6:	f043 0304 	orr.w	r3, r3, #4
        SYSTICK_CTRL &= ~SysTick_CTRL_CLKSOURCE_Msk;
100065ea:	6113      	str	r3, [r2, #16]
}
100065ec:	4770      	bx	lr
            CPUSS_SYSTICK_CTL = _VAL2FLD(CPUSS_SYSTICK_CTL_CLOCK_SOURCE, (uint32_t) clockSource);
100065ee:	4b07      	ldr	r3, [pc, #28]	@ (1000660c <Cy_SysTick_SetClockSource+0x30>)
100065f0:	681b      	ldr	r3, [r3, #0]
100065f2:	0600      	lsls	r0, r0, #24
100065f4:	681a      	ldr	r2, [r3, #0]
100065f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
100065fa:	f000 7040 	and.w	r0, r0, #50331648	@ 0x3000000
100065fe:	50d0      	str	r0, [r2, r3]
        SYSTICK_CTRL &= ~SysTick_CTRL_CLKSOURCE_Msk;
10006600:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
10006604:	6913      	ldr	r3, [r2, #16]
10006606:	f023 0304 	bic.w	r3, r3, #4
1000660a:	e7ee      	b.n	100065ea <Cy_SysTick_SetClockSource+0xe>
1000660c:	08002c40 	.word	0x08002c40

10006610 <Cy_SysTick_Init>:
        Cy_SysTick_Callbacks[i] = NULL;
10006610:	4b0d      	ldr	r3, [pc, #52]	@ (10006648 <Cy_SysTick_Init+0x38>)
{
10006612:	b570      	push	{r4, r5, r6, lr}
        Cy_SysTick_Callbacks[i] = NULL;
10006614:	2400      	movs	r4, #0
10006616:	e9c3 4400 	strd	r4, r4, [r3]
1000661a:	e9c3 4402 	strd	r4, r4, [r3, #8]
1000661e:	611c      	str	r4, [r3, #16]
{
10006620:	4606      	mov	r6, r0
10006622:	460d      	mov	r5, r1
    (void)Cy_SysInt_SetVector((IRQn_Type)CY_SYSTICK_IRQ_NUM, Cy_SysTick_ServiceCallbacks); /* Suppress a compiler warning about unused return value */
10006624:	f04f 30ff 	mov.w	r0, #4294967295
10006628:	4908      	ldr	r1, [pc, #32]	@ (1000664c <Cy_SysTick_Init+0x3c>)
1000662a:	f7ff fbb5 	bl	10005d98 <Cy_SysInt_SetVector>
    Cy_SysTick_SetClockSource(clockSource);
1000662e:	4630      	mov	r0, r6
10006630:	f7ff ffd4 	bl	100065dc <Cy_SysTick_SetClockSource>
    SYSTICK_LOAD = (value & SysTick_LOAD_RELOAD_Msk);
10006634:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
10006638:	f025 457f 	bic.w	r5, r5, #4278190080	@ 0xff000000
1000663c:	615d      	str	r5, [r3, #20]
    SYSTICK_VAL = 0u;
1000663e:	619c      	str	r4, [r3, #24]
}
10006640:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Cy_SysTick_Enable();
10006644:	f7ff bfbf 	b.w	100065c6 <Cy_SysTick_Enable>
10006648:	08002c88 	.word	0x08002c88
1000664c:	10006595 	.word	0x10006595

10006650 <Cy_TrigMux_Connect>:
* \funcusage
* \snippet trigmux/snippet/main.c snippet_Cy_TrigMux_Connect
*
*******************************************************************************/
cy_en_trigmux_status_t Cy_TrigMux_Connect(uint32_t inTrig, uint32_t outTrig, bool invert, en_trig_type_t trigType)
{
10006650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    CY_ASSERT_L3(CY_TRIGMUX_IS_TRIGTYPE_VALID(trigType));
    CY_ASSERT_L2(CY_TRIGMUX_IS_INTRIG_VALID(inTrig));
    CY_ASSERT_L2(CY_TRIGMUX_IS_OUTTRIG_VALID(outTrig));

    /* inTrig and outTrig should be in the same group */
    if ((inTrig & PERI_TR_CMD_GROUP_SEL_Msk) == (outTrig & PERI_TR_CMD_GROUP_SEL_Msk))
10006654:	ea80 0601 	eor.w	r6, r0, r1
10006658:	f416 6670 	ands.w	r6, r6, #3840	@ 0xf00
{
1000665c:	4605      	mov	r5, r0
1000665e:	460f      	mov	r7, r1
10006660:	4690      	mov	r8, r2
10006662:	461c      	mov	r4, r3
    if ((inTrig & PERI_TR_CMD_GROUP_SEL_Msk) == (outTrig & PERI_TR_CMD_GROUP_SEL_Msk))
10006664:	d12c      	bne.n	100066c0 <Cy_TrigMux_Connect+0x70>
    {
        uint32_t interruptState = Cy_SysLib_EnterCriticalSection();
10006666:	f7fc fa2c 	bl	10002ac2 <Cy_SysLib_EnterCriticalSection>
                                        _BOOL2FLD(PERI_TR_GR_TR_OUT_CTL_TR_INV, invert) |
                                         _VAL2FLD(PERI_TR_GR_TR_OUT_CTL_TR_EDGE, trigType));
        }
#else

        CY_TRIGMUX_TR_CTL(outTrig) = (CY_TRIGMUX_TR_CTL(outTrig) &
1000666a:	4b16      	ldr	r3, [pc, #88]	@ (100066c4 <Cy_TrigMux_Connect+0x74>)
1000666c:	6819      	ldr	r1, [r3, #0]
1000666e:	f8b1 e076 	ldrh.w	lr, [r1, #118]	@ 0x76
10006672:	688a      	ldr	r2, [r1, #8]
10006674:	f8b1 c074 	ldrh.w	ip, [r1, #116]	@ 0x74
10006678:	ea4f 039e 	mov.w	r3, lr, lsr #2
1000667c:	3b01      	subs	r3, #1
1000667e:	403b      	ands	r3, r7
10006680:	4494      	add	ip, r2
10006682:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
10006686:	f8b1 3072 	ldrh.w	r3, [r1, #114]	@ 0x72
1000668a:	ea03 0107 	and.w	r1, r3, r7
1000668e:	0a09      	lsrs	r1, r1, #8
10006690:	fb0e f101 	mul.w	r1, lr, r1
                                      (uint32_t)~(PERI_TR_GR_TR_OUT_CTL_TR_SEL_Msk |
                                                  PERI_TR_GR_TR_OUT_CTL_TR_INV_Msk |
                                                  PERI_TR_GR_TR_OUT_CTL_TR_EDGE_Msk)) |
                                        (_VAL2FLD(PERI_TR_GR_TR_OUT_CTL_TR_SEL, inTrig) |
                                        _BOOL2FLD(PERI_TR_GR_TR_OUT_CTL_TR_INV, invert) |
                                         _VAL2FLD(PERI_TR_GR_TR_OUT_CTL_TR_EDGE, trigType));
10006694:	0263      	lsls	r3, r4, #9
        CY_TRIGMUX_TR_CTL(outTrig) = (CY_TRIGMUX_TR_CTL(outTrig) &
10006696:	f85c 7001 	ldr.w	r7, [ip, r1]
                                         _VAL2FLD(PERI_TR_GR_TR_OUT_CTL_TR_EDGE, trigType));
1000669a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        _BOOL2FLD(PERI_TR_GR_TR_OUT_CTL_TR_INV, invert) |
1000669e:	ea43 2208 	orr.w	r2, r3, r8, lsl #8
                                        (_VAL2FLD(PERI_TR_GR_TR_OUT_CTL_TR_SEL, inTrig) |
100066a2:	b2ed      	uxtb	r5, r5
                                        _BOOL2FLD(PERI_TR_GR_TR_OUT_CTL_TR_INV, invert) |
100066a4:	ea42 0305 	orr.w	r3, r2, r5
        CY_TRIGMUX_TR_CTL(outTrig) = (CY_TRIGMUX_TR_CTL(outTrig) &
100066a8:	f427 727f 	bic.w	r2, r7, #1020	@ 0x3fc
100066ac:	f022 0203 	bic.w	r2, r2, #3
                                                  PERI_TR_GR_TR_OUT_CTL_TR_EDGE_Msk)) |
100066b0:	4313      	orrs	r3, r2
        CY_TRIGMUX_TR_CTL(outTrig) = (CY_TRIGMUX_TR_CTL(outTrig) &
100066b2:	f84c 3001 	str.w	r3, [ip, r1]
#endif

        Cy_SysLib_ExitCriticalSection(interruptState);
100066b6:	f7fc fa08 	bl	10002aca <Cy_SysLib_ExitCriticalSection>

        retVal = CY_TRIGMUX_SUCCESS;
    }

    return retVal;
}
100066ba:	4630      	mov	r0, r6
100066bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cy_en_trigmux_status_t retVal = CY_TRIGMUX_BAD_PARAM;
100066c0:	4e01      	ldr	r6, [pc, #4]	@ (100066c8 <Cy_TrigMux_Connect+0x78>)
    return retVal;
100066c2:	e7fa      	b.n	100066ba <Cy_TrigMux_Connect+0x6a>
100066c4:	08002c40 	.word	0x08002c40
100066c8:	00ce0001 	.word	0x00ce0001

100066cc <_write>:
#endif
//--------------------------------------------------------------------------------------------------
// _write
//--------------------------------------------------------------------------------------------------
__attribute__((weak)) int32_t _write(int32_t fd, const cy_char8_t* ptr, int32_t len)
{
100066cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100066ce:	4616      	mov	r6, r2
    int32_t nChars = 0;
    (void)fd;
    if (ptr != NULL)
100066d0:	460d      	mov	r5, r1
100066d2:	b961      	cbnz	r1, 100066ee <_write+0x22>
    int32_t nChars = 0;
100066d4:	460c      	mov	r4, r1
            ++ptr;
        }
        cy_retarget_io_mutex_release();
    }
    return (nChars);
}
100066d6:	4620      	mov	r0, r4
100066d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return cyhal_uart_putc(&cy_retarget_io_uart_obj, (uint8_t)c);
100066da:	5d29      	ldrb	r1, [r5, r4]
100066dc:	4638      	mov	r0, r7
100066de:	f7fd fc1f 	bl	10003f20 <cyhal_uart_putc>
            if (CY_RSLT_SUCCESS != rslt)
100066e2:	2800      	cmp	r0, #0
100066e4:	d1f7      	bne.n	100066d6 <_write+0xa>
        for (; nChars < len; ++nChars)
100066e6:	3401      	adds	r4, #1
100066e8:	42b4      	cmp	r4, r6
100066ea:	dbf6      	blt.n	100066da <_write+0xe>
100066ec:	e7f3      	b.n	100066d6 <_write+0xa>
    return cyhal_uart_putc(&cy_retarget_io_uart_obj, (uint8_t)c);
100066ee:	4f01      	ldr	r7, [pc, #4]	@ (100066f4 <_write+0x28>)
    int32_t nChars = 0;
100066f0:	2400      	movs	r4, #0
100066f2:	e7f9      	b.n	100066e8 <_write+0x1c>
100066f4:	08002c9c 	.word	0x08002c9c

100066f8 <_read>:
#endif
//--------------------------------------------------------------------------------------------------
// _read
//--------------------------------------------------------------------------------------------------
__attribute__((weak)) int32_t _read(int32_t fd, cy_char8_t* ptr, int32_t len)
{
100066f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100066fa:	4615      	mov	r5, r2
    (void)fd;

    int32_t nChars = 0;
    if (ptr != NULL)
100066fc:	b1a1      	cbz	r1, 10006728 <_read+0x30>
    return cyhal_uart_getc(&cy_retarget_io_uart_obj, (uint8_t*)c, 0);
100066fe:	4f0b      	ldr	r7, [pc, #44]	@ (1000672c <_read+0x34>)
10006700:	460e      	mov	r6, r1
    int32_t nChars = 0;
10006702:	2400      	movs	r4, #0
    return cyhal_uart_getc(&cy_retarget_io_uart_obj, (uint8_t*)c, 0);
10006704:	2200      	movs	r2, #0
10006706:	4631      	mov	r1, r6
10006708:	4638      	mov	r0, r7
1000670a:	f7fd fbe7 	bl	10003edc <cyhal_uart_getc>
    {
        cy_rslt_t rslt;
        do
        {
            rslt = cy_retarget_io_getchar(ptr);
            if (rslt == CY_RSLT_SUCCESS)
1000670e:	b948      	cbnz	r0, 10006724 <_read+0x2c>
            {
                ++nChars;
                if ((*ptr == '\n') || (*ptr == '\r'))
10006710:	f816 3b01 	ldrb.w	r3, [r6], #1
10006714:	2b0a      	cmp	r3, #10
                ++nChars;
10006716:	f104 0401 	add.w	r4, r4, #1
                if ((*ptr == '\n') || (*ptr == '\r'))
1000671a:	d003      	beq.n	10006724 <_read+0x2c>
1000671c:	2b0d      	cmp	r3, #13
1000671e:	d001      	beq.n	10006724 <_read+0x2c>
                {
                    break;
                }
                ptr++;
            }
        } while ((rslt == CY_RSLT_SUCCESS) && (nChars < len));
10006720:	42ac      	cmp	r4, r5
10006722:	dbef      	blt.n	10006704 <_read+0xc>
    }

    return (nChars);
}
10006724:	4620      	mov	r0, r4
10006726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    int32_t nChars = 0;
10006728:	460c      	mov	r4, r1
    return (nChars);
1000672a:	e7fb      	b.n	10006724 <_read+0x2c>
1000672c:	08002c9c 	.word	0x08002c9c

10006730 <cy_retarget_io_init_fc>:
//
// Enables user to provide flow control pins during initialization
//--------------------------------------------------------------------------------------------------
cy_rslt_t cy_retarget_io_init_fc(cyhal_gpio_t tx, cyhal_gpio_t rx, cyhal_gpio_t cts,
                                 cyhal_gpio_t rts, uint32_t baudrate)
{
10006730:	b5f0      	push	{r4, r5, r6, r7, lr}
    const cyhal_uart_cfg_t uart_config =
10006732:	4d0f      	ldr	r5, [pc, #60]	@ (10006770 <cy_retarget_io_init_fc+0x40>)
{
10006734:	4606      	mov	r6, r0
10006736:	460f      	mov	r7, r1
10006738:	4694      	mov	ip, r2
1000673a:	469e      	mov	lr, r3
    const cyhal_uart_cfg_t uart_config =
1000673c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
1000673e:	b08b      	sub	sp, #44	@ 0x2c
    const cyhal_uart_cfg_t uart_config =
10006740:	ac05      	add	r4, sp, #20
10006742:	c40f      	stmia	r4!, {r0, r1, r2, r3}
10006744:	682b      	ldr	r3, [r5, #0]
10006746:	6023      	str	r3, [r4, #0]
        .rx_buffer          = NULL,
        .rx_buffer_size     = 0
    };

    #if (CYHAL_API_VERSION >= 2)
    cy_rslt_t result = cyhal_uart_init(&cy_retarget_io_uart_obj, tx, rx, cts, rts, NULL,
10006748:	ab05      	add	r3, sp, #20
1000674a:	9302      	str	r3, [sp, #8]
1000674c:	2300      	movs	r3, #0
1000674e:	e9cd e300 	strd	lr, r3, [sp]
10006752:	4808      	ldr	r0, [pc, #32]	@ (10006774 <cy_retarget_io_init_fc+0x44>)
10006754:	4663      	mov	r3, ip
10006756:	463a      	mov	r2, r7
10006758:	4631      	mov	r1, r6
1000675a:	f7fd fc03 	bl	10003f64 <cyhal_uart_init>
    {
        result = cyhal_uart_set_flow_control(&cy_retarget_io_uart_obj, cts, rts);
    }
    #endif

    if (result == CY_RSLT_SUCCESS)
1000675e:	b920      	cbnz	r0, 1000676a <cy_retarget_io_init_fc+0x3a>
    {
        result = cyhal_uart_set_baud(&cy_retarget_io_uart_obj, baudrate, NULL);
10006760:	4602      	mov	r2, r0
10006762:	9910      	ldr	r1, [sp, #64]	@ 0x40
10006764:	4803      	ldr	r0, [pc, #12]	@ (10006774 <cy_retarget_io_init_fc+0x44>)
10006766:	f7fd fa2f 	bl	10003bc8 <cyhal_uart_set_baud>
    {
        result = cy_retarget_io_mutex_init();
    }

    return result;
}
1000676a:	b00b      	add	sp, #44	@ 0x2c
1000676c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000676e:	bf00      	nop
10006770:	1000c940 	.word	0x1000c940
10006774:	08002c9c 	.word	0x08002c9c

10006778 <arm_cmplx_mag_q15>:
10006778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000677c:	ea5f 0992 	movs.w	r9, r2, lsr #2
10006780:	b083      	sub	sp, #12
10006782:	4617      	mov	r7, r2
10006784:	4606      	mov	r6, r0
10006786:	4688      	mov	r8, r1
10006788:	d03c      	beq.n	10006804 <arm_cmplx_mag_q15+0x8c>
1000678a:	f101 0508 	add.w	r5, r1, #8
1000678e:	46ca      	mov	sl, r9
10006790:	4604      	mov	r4, r0
10006792:	f10d 0b04 	add.w	fp, sp, #4
10006796:	6820      	ldr	r0, [r4, #0]
10006798:	fb20 f000 	smuad	r0, r0, r0
1000679c:	4659      	mov	r1, fp
1000679e:	0840      	lsrs	r0, r0, #1
100067a0:	f000 f848 	bl	10006834 <arm_sqrt_q31>
100067a4:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
100067a8:	f825 3c08 	strh.w	r3, [r5, #-8]
100067ac:	6860      	ldr	r0, [r4, #4]
100067ae:	fb20 f000 	smuad	r0, r0, r0
100067b2:	4659      	mov	r1, fp
100067b4:	0840      	lsrs	r0, r0, #1
100067b6:	f000 f83d 	bl	10006834 <arm_sqrt_q31>
100067ba:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
100067be:	f825 3c06 	strh.w	r3, [r5, #-6]
100067c2:	68a0      	ldr	r0, [r4, #8]
100067c4:	fb20 f000 	smuad	r0, r0, r0
100067c8:	4659      	mov	r1, fp
100067ca:	0840      	lsrs	r0, r0, #1
100067cc:	f000 f832 	bl	10006834 <arm_sqrt_q31>
100067d0:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
100067d4:	f825 2c04 	strh.w	r2, [r5, #-4]
100067d8:	68e3      	ldr	r3, [r4, #12]
100067da:	fb23 f303 	smuad	r3, r3, r3
100067de:	0858      	lsrs	r0, r3, #1
100067e0:	4659      	mov	r1, fp
100067e2:	f000 f827 	bl	10006834 <arm_sqrt_q31>
100067e6:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
100067ea:	f825 3c02 	strh.w	r3, [r5, #-2]
100067ee:	f1ba 0a01 	subs.w	sl, sl, #1
100067f2:	f104 0410 	add.w	r4, r4, #16
100067f6:	f105 0508 	add.w	r5, r5, #8
100067fa:	d1cc      	bne.n	10006796 <arm_cmplx_mag_q15+0x1e>
100067fc:	eb06 1609 	add.w	r6, r6, r9, lsl #4
10006800:	eb08 08c9 	add.w	r8, r8, r9, lsl #3
10006804:	f017 0703 	ands.w	r7, r7, #3
10006808:	d011      	beq.n	1000682e <arm_cmplx_mag_q15+0xb6>
1000680a:	eb06 0787 	add.w	r7, r6, r7, lsl #2
1000680e:	f10d 0b04 	add.w	fp, sp, #4
10006812:	f856 0b04 	ldr.w	r0, [r6], #4
10006816:	fb20 f000 	smuad	r0, r0, r0
1000681a:	4659      	mov	r1, fp
1000681c:	0840      	lsrs	r0, r0, #1
1000681e:	f000 f809 	bl	10006834 <arm_sqrt_q31>
10006822:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
10006826:	f828 3b02 	strh.w	r3, [r8], #2
1000682a:	42be      	cmp	r6, r7
1000682c:	d1f1      	bne.n	10006812 <arm_cmplx_mag_q15+0x9a>
1000682e:	b003      	add	sp, #12
10006830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

10006834 <arm_sqrt_q31>:
10006834:	2800      	cmp	r0, #0
10006836:	dc07      	bgt.n	10006848 <arm_sqrt_q31+0x14>
10006838:	f04f 0300 	mov.w	r3, #0
1000683c:	600b      	str	r3, [r1, #0]
1000683e:	bf14      	ite	ne
10006840:	f04f 30ff 	movne.w	r0, #4294967295
10006844:	4618      	moveq	r0, r3
10006846:	4770      	bx	lr
10006848:	fab0 fc80 	clz	ip, r0
1000684c:	b530      	push	{r4, r5, lr}
1000684e:	f10c 3eff 	add.w	lr, ip, #4294967295
10006852:	f01e 0401 	ands.w	r4, lr, #1
10006856:	bf16      	itet	ne
10006858:	f1ac 0302 	subne.w	r3, ip, #2
1000685c:	fa00 f00e 	lsleq.w	r0, r0, lr
10006860:	4098      	lslne	r0, r3
10006862:	1683      	asrs	r3, r0, #26
10006864:	3b08      	subs	r3, #8
10006866:	4a27      	ldr	r2, [pc, #156]	@ (10006904 <arm_sqrt_q31+0xd0>)
10006868:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
1000686c:	fb82 3502 	smull	r3, r5, r2, r2
10006870:	0f1b      	lsrs	r3, r3, #28
10006872:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
10006876:	fb80 3503 	smull	r3, r5, r0, r3
1000687a:	0fdb      	lsrs	r3, r3, #31
1000687c:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
10006880:	f1c3 5340 	rsb	r3, r3, #805306368	@ 0x30000000
10006884:	fb83 3202 	smull	r3, r2, r3, r2
10006888:	0f5b      	lsrs	r3, r3, #29
1000688a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
1000688e:	fb83 2503 	smull	r2, r5, r3, r3
10006892:	0f12      	lsrs	r2, r2, #28
10006894:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
10006898:	fb80 2502 	smull	r2, r5, r0, r2
1000689c:	0fd2      	lsrs	r2, r2, #31
1000689e:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
100068a2:	f1c2 5240 	rsb	r2, r2, #805306368	@ 0x30000000
100068a6:	fb82 2503 	smull	r2, r5, r2, r3
100068aa:	0f53      	lsrs	r3, r2, #29
100068ac:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
100068b0:	fb83 2503 	smull	r2, r5, r3, r3
100068b4:	0f12      	lsrs	r2, r2, #28
100068b6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
100068ba:	fb80 2502 	smull	r2, r5, r0, r2
100068be:	0fd2      	lsrs	r2, r2, #31
100068c0:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
100068c4:	f1c2 5240 	rsb	r2, r2, #805306368	@ 0x30000000
100068c8:	fb82 2303 	smull	r2, r3, r2, r3
100068cc:	0f52      	lsrs	r2, r2, #29
100068ce:	ea42 02c3 	orr.w	r2, r2, r3, lsl #3
100068d2:	fb80 0202 	smull	r0, r2, r0, r2
100068d6:	0f00      	lsrs	r0, r0, #28
100068d8:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
100068dc:	b934      	cbnz	r4, 100068ec <arm_sqrt_q31+0xb8>
100068de:	ea4f 0e6e 	mov.w	lr, lr, asr #1
100068e2:	fa40 f00e 	asr.w	r0, r0, lr
100068e6:	6008      	str	r0, [r1, #0]
100068e8:	2000      	movs	r0, #0
100068ea:	bd30      	pop	{r4, r5, pc}
100068ec:	f1ac 0c02 	sub.w	ip, ip, #2
100068f0:	eb0c 7cdc 	add.w	ip, ip, ip, lsr #31
100068f4:	ea4f 0c6c 	mov.w	ip, ip, asr #1
100068f8:	fa40 f00c 	asr.w	r0, r0, ip
100068fc:	6008      	str	r0, [r1, #0]
100068fe:	2000      	movs	r0, #0
10006900:	bd30      	pop	{r4, r5, pc}
10006902:	bf00      	nop
10006904:	1001074c 	.word	0x1001074c

10006908 <arm_radix4_butterfly_inverse_q15.constprop.0>:
10006908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000690c:	b093      	sub	sp, #76	@ 0x4c
1000690e:	f021 0603 	bic.w	r6, r1, #3
10006912:	9101      	str	r1, [sp, #4]
10006914:	eb00 0e46 	add.w	lr, r0, r6, lsl #1
10006918:	0889      	lsrs	r1, r1, #2
1000691a:	1987      	adds	r7, r0, r6
1000691c:	900f      	str	r0, [sp, #60]	@ 0x3c
1000691e:	4693      	mov	fp, r2
10006920:	9210      	str	r2, [sp, #64]	@ 0x40
10006922:	9111      	str	r1, [sp, #68]	@ 0x44
10006924:	4476      	add	r6, lr
10006926:	4691      	mov	r9, r2
10006928:	4692      	mov	sl, r2
1000692a:	4680      	mov	r8, r0
1000692c:	468c      	mov	ip, r1
1000692e:	2300      	movs	r3, #0
10006930:	683a      	ldr	r2, [r7, #0]
10006932:	f8d8 1000 	ldr.w	r1, [r8]
10006936:	f8de 0000 	ldr.w	r0, [lr]
1000693a:	fa92 f223 	shadd16	r2, r2, r3
1000693e:	fa92 f423 	shadd16	r4, r2, r3
10006942:	6832      	ldr	r2, [r6, #0]
10006944:	fa91 f123 	shadd16	r1, r1, r3
10006948:	fa90 f023 	shadd16	r0, r0, r3
1000694c:	fa92 f223 	shadd16	r2, r2, r3
10006950:	fa90 f023 	shadd16	r0, r0, r3
10006954:	fa91 f123 	shadd16	r1, r1, r3
10006958:	fa92 f223 	shadd16	r2, r2, r3
1000695c:	fa94 f212 	qadd16	r2, r4, r2
10006960:	fa91 f410 	qadd16	r4, r1, r0
10006964:	fad1 f110 	qsub16	r1, r1, r0
10006968:	fa94 f022 	shadd16	r0, r4, r2
1000696c:	f848 0b04 	str.w	r0, [r8], #4
10006970:	f85b 5b10 	ldr.w	r5, [fp], #16
10006974:	fad4 f412 	qsub16	r4, r4, r2
10006978:	fb45 f004 	smusd	r0, r5, r4
1000697c:	683a      	ldr	r2, [r7, #0]
1000697e:	fb25 f414 	smuadx	r4, r5, r4
10006982:	1400      	asrs	r0, r0, #16
10006984:	eac0 0004 	pkhbt	r0, r0, r4
10006988:	f847 0b04 	str.w	r0, [r7], #4
1000698c:	6830      	ldr	r0, [r6, #0]
1000698e:	fa92 f223 	shadd16	r2, r2, r3
10006992:	fa90 f023 	shadd16	r0, r0, r3
10006996:	fa90 f023 	shadd16	r0, r0, r3
1000699a:	fa92 f223 	shadd16	r2, r2, r3
1000699e:	fad2 f210 	qsub16	r2, r2, r0
100069a2:	f85a 0b08 	ldr.w	r0, [sl], #8
100069a6:	faa1 f412 	qasx	r4, r1, r2
100069aa:	fae1 f112 	qsax	r1, r1, r2
100069ae:	fb40 f204 	smusd	r2, r0, r4
100069b2:	1412      	asrs	r2, r2, #16
100069b4:	fb20 f014 	smuadx	r0, r0, r4
100069b8:	eac2 0200 	pkhbt	r2, r2, r0
100069bc:	f84e 2b04 	str.w	r2, [lr], #4
100069c0:	f859 0b18 	ldr.w	r0, [r9], #24
100069c4:	f1bc 0c01 	subs.w	ip, ip, #1
100069c8:	fb40 f201 	smusd	r2, r0, r1
100069cc:	ea4f 4222 	mov.w	r2, r2, asr #16
100069d0:	fb20 f111 	smuadx	r1, r0, r1
100069d4:	eac2 0201 	pkhbt	r2, r2, r1
100069d8:	f846 2b04 	str.w	r2, [r6], #4
100069dc:	d1a8      	bne.n	10006930 <arm_radix4_butterfly_inverse_q15.constprop.0+0x28>
100069de:	9b11      	ldr	r3, [sp, #68]	@ 0x44
100069e0:	2b04      	cmp	r3, #4
100069e2:	f240 80b1 	bls.w	10006b48 <arm_radix4_butterfly_inverse_q15.constprop.0+0x240>
100069e6:	930e      	str	r3, [sp, #56]	@ 0x38
100069e8:	f8cd c008 	str.w	ip, [sp, #8]
100069ec:	2308      	movs	r3, #8
100069ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
100069f0:	0891      	lsrs	r1, r2, #2
100069f2:	4692      	mov	sl, r2
100069f4:	008a      	lsls	r2, r1, #2
100069f6:	920a      	str	r2, [sp, #40]	@ 0x28
100069f8:	9a01      	ldr	r2, [sp, #4]
100069fa:	910e      	str	r1, [sp, #56]	@ 0x38
100069fc:	428a      	cmp	r2, r1
100069fe:	bf28      	it	cs
10006a00:	460a      	movcs	r2, r1
10006a02:	920c      	str	r2, [sp, #48]	@ 0x30
10006a04:	009a      	lsls	r2, r3, #2
10006a06:	9209      	str	r2, [sp, #36]	@ 0x24
10006a08:	eb03 0243 	add.w	r2, r3, r3, lsl #1
10006a0c:	00db      	lsls	r3, r3, #3
10006a0e:	930b      	str	r3, [sp, #44]	@ 0x2c
10006a10:	0093      	lsls	r3, r2, #2
10006a12:	930d      	str	r3, [sp, #52]	@ 0x34
10006a14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
10006a16:	9307      	str	r3, [sp, #28]
10006a18:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
10006a1c:	9306      	str	r3, [sp, #24]
10006a1e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
10006a20:	9308      	str	r3, [sp, #32]
10006a22:	9303      	str	r3, [sp, #12]
10006a24:	9305      	str	r3, [sp, #20]
10006a26:	2300      	movs	r3, #0
10006a28:	ea4f 078a 	mov.w	r7, sl, lsl #2
10006a2c:	9304      	str	r3, [sp, #16]
10006a2e:	9b05      	ldr	r3, [sp, #20]
10006a30:	9a07      	ldr	r2, [sp, #28]
10006a32:	f8d3 9000 	ldr.w	r9, [r3]
10006a36:	9b03      	ldr	r3, [sp, #12]
10006a38:	f8dd c010 	ldr.w	ip, [sp, #16]
10006a3c:	f8d3 8000 	ldr.w	r8, [r3]
10006a40:	9b08      	ldr	r3, [sp, #32]
10006a42:	f8d3 e000 	ldr.w	lr, [r3]
10006a46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
10006a48:	4616      	mov	r6, r2
10006a4a:	1898      	adds	r0, r3, r2
10006a4c:	9a06      	ldr	r2, [sp, #24]
10006a4e:	4615      	mov	r5, r2
10006a50:	1899      	adds	r1, r3, r2
10006a52:	f8d5 b000 	ldr.w	fp, [r5]
10006a56:	6833      	ldr	r3, [r6, #0]
10006a58:	680a      	ldr	r2, [r1, #0]
10006a5a:	6804      	ldr	r4, [r0, #0]
10006a5c:	fa94 f412 	qadd16	r4, r4, r2
10006a60:	fa93 f21b 	qadd16	r2, r3, fp
10006a64:	fad3 f31b 	qsub16	r3, r3, fp
10006a68:	fa92 fb24 	shadd16	fp, r2, r4
10006a6c:	fad2 f424 	shsub16	r4, r2, r4
10006a70:	9a02      	ldr	r2, [sp, #8]
10006a72:	fa9b fb22 	shadd16	fp, fp, r2
10006a76:	f8c6 b000 	str.w	fp, [r6]
10006a7a:	fb48 fb04 	smusd	fp, r8, r4
10006a7e:	ea4f 422b 	mov.w	r2, fp, asr #16
10006a82:	fb28 f414 	smuadx	r4, r8, r4
10006a86:	eac2 0204 	pkhbt	r2, r2, r4
10006a8a:	6804      	ldr	r4, [r0, #0]
10006a8c:	6002      	str	r2, [r0, #0]
10006a8e:	680a      	ldr	r2, [r1, #0]
10006a90:	fad4 f412 	qsub16	r4, r4, r2
10006a94:	fae3 f224 	shsax	r2, r3, r4
10006a98:	faa3 f324 	shasx	r3, r3, r4
10006a9c:	fb49 f403 	smusd	r4, r9, r3
10006aa0:	1424      	asrs	r4, r4, #16
10006aa2:	fb29 f313 	smuadx	r3, r9, r3
10006aa6:	eac4 0303 	pkhbt	r3, r4, r3
10006aaa:	602b      	str	r3, [r5, #0]
10006aac:	fb4e f302 	smusd	r3, lr, r2
10006ab0:	141b      	asrs	r3, r3, #16
10006ab2:	fb2e f212 	smuadx	r2, lr, r2
10006ab6:	eac3 0302 	pkhbt	r3, r3, r2
10006aba:	600b      	str	r3, [r1, #0]
10006abc:	9b01      	ldr	r3, [sp, #4]
10006abe:	44d4      	add	ip, sl
10006ac0:	4563      	cmp	r3, ip
10006ac2:	443e      	add	r6, r7
10006ac4:	4438      	add	r0, r7
10006ac6:	443d      	add	r5, r7
10006ac8:	4439      	add	r1, r7
10006aca:	d8c2      	bhi.n	10006a52 <arm_radix4_butterfly_inverse_q15.constprop.0+0x14a>
10006acc:	9a05      	ldr	r2, [sp, #20]
10006ace:	9909      	ldr	r1, [sp, #36]	@ 0x24
10006ad0:	9b04      	ldr	r3, [sp, #16]
10006ad2:	440a      	add	r2, r1
10006ad4:	9205      	str	r2, [sp, #20]
10006ad6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
10006ad8:	9a03      	ldr	r2, [sp, #12]
10006ada:	440a      	add	r2, r1
10006adc:	9203      	str	r2, [sp, #12]
10006ade:	990d      	ldr	r1, [sp, #52]	@ 0x34
10006ae0:	9a08      	ldr	r2, [sp, #32]
10006ae2:	440a      	add	r2, r1
10006ae4:	9208      	str	r2, [sp, #32]
10006ae6:	9a07      	ldr	r2, [sp, #28]
10006ae8:	3204      	adds	r2, #4
10006aea:	9207      	str	r2, [sp, #28]
10006aec:	9a06      	ldr	r2, [sp, #24]
10006aee:	3204      	adds	r2, #4
10006af0:	9206      	str	r2, [sp, #24]
10006af2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
10006af4:	3301      	adds	r3, #1
10006af6:	4293      	cmp	r3, r2
10006af8:	9304      	str	r3, [sp, #16]
10006afa:	d398      	bcc.n	10006a2e <arm_radix4_butterfly_inverse_q15.constprop.0+0x126>
10006afc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
10006afe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10006b00:	2a04      	cmp	r2, #4
10006b02:	f63f af74 	bhi.w	100069ee <arm_radix4_butterfly_inverse_q15.constprop.0+0xe6>
10006b06:	9c11      	ldr	r4, [sp, #68]	@ 0x44
10006b08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
10006b0a:	68de      	ldr	r6, [r3, #12]
10006b0c:	681a      	ldr	r2, [r3, #0]
10006b0e:	6859      	ldr	r1, [r3, #4]
10006b10:	689f      	ldr	r7, [r3, #8]
10006b12:	fa91 f516 	qadd16	r5, r1, r6
10006b16:	fa92 f017 	qadd16	r0, r2, r7
10006b1a:	fad1 f116 	qsub16	r1, r1, r6
10006b1e:	fad2 f217 	qsub16	r2, r2, r7
10006b22:	fa90 f625 	shadd16	r6, r0, r5
10006b26:	3c01      	subs	r4, #1
10006b28:	fad0 f025 	shsub16	r0, r0, r5
10006b2c:	faa2 f521 	shasx	r5, r2, r1
10006b30:	fae2 f221 	shsax	r2, r2, r1
10006b34:	601e      	str	r6, [r3, #0]
10006b36:	6058      	str	r0, [r3, #4]
10006b38:	609d      	str	r5, [r3, #8]
10006b3a:	60da      	str	r2, [r3, #12]
10006b3c:	f103 0310 	add.w	r3, r3, #16
10006b40:	d1e3      	bne.n	10006b0a <arm_radix4_butterfly_inverse_q15.constprop.0+0x202>
10006b42:	b013      	add	sp, #76	@ 0x4c
10006b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10006b48:	461c      	mov	r4, r3
10006b4a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
10006b4c:	e7dd      	b.n	10006b0a <arm_radix4_butterfly_inverse_q15.constprop.0+0x202>
10006b4e:	bf00      	nop

10006b50 <arm_radix4_butterfly_q15.constprop.0>:
10006b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10006b54:	b093      	sub	sp, #76	@ 0x4c
10006b56:	f021 0603 	bic.w	r6, r1, #3
10006b5a:	9101      	str	r1, [sp, #4]
10006b5c:	eb00 0e46 	add.w	lr, r0, r6, lsl #1
10006b60:	0889      	lsrs	r1, r1, #2
10006b62:	1987      	adds	r7, r0, r6
10006b64:	900f      	str	r0, [sp, #60]	@ 0x3c
10006b66:	4693      	mov	fp, r2
10006b68:	9210      	str	r2, [sp, #64]	@ 0x40
10006b6a:	9111      	str	r1, [sp, #68]	@ 0x44
10006b6c:	4476      	add	r6, lr
10006b6e:	4691      	mov	r9, r2
10006b70:	4692      	mov	sl, r2
10006b72:	4680      	mov	r8, r0
10006b74:	468c      	mov	ip, r1
10006b76:	2300      	movs	r3, #0
10006b78:	683a      	ldr	r2, [r7, #0]
10006b7a:	f8d8 1000 	ldr.w	r1, [r8]
10006b7e:	f8de 0000 	ldr.w	r0, [lr]
10006b82:	fa92 f223 	shadd16	r2, r2, r3
10006b86:	fa92 f423 	shadd16	r4, r2, r3
10006b8a:	6832      	ldr	r2, [r6, #0]
10006b8c:	fa91 f123 	shadd16	r1, r1, r3
10006b90:	fa90 f023 	shadd16	r0, r0, r3
10006b94:	fa92 f223 	shadd16	r2, r2, r3
10006b98:	fa90 f023 	shadd16	r0, r0, r3
10006b9c:	fa91 f123 	shadd16	r1, r1, r3
10006ba0:	fa92 f223 	shadd16	r2, r2, r3
10006ba4:	fa94 f212 	qadd16	r2, r4, r2
10006ba8:	fa91 f410 	qadd16	r4, r1, r0
10006bac:	fad1 f110 	qsub16	r1, r1, r0
10006bb0:	fa94 f022 	shadd16	r0, r4, r2
10006bb4:	f848 0b04 	str.w	r0, [r8], #4
10006bb8:	f85b 5b10 	ldr.w	r5, [fp], #16
10006bbc:	fad4 f412 	qsub16	r4, r4, r2
10006bc0:	fb25 f004 	smuad	r0, r5, r4
10006bc4:	683a      	ldr	r2, [r7, #0]
10006bc6:	fb45 f414 	smusdx	r4, r5, r4
10006bca:	1400      	asrs	r0, r0, #16
10006bcc:	eac0 0004 	pkhbt	r0, r0, r4
10006bd0:	f847 0b04 	str.w	r0, [r7], #4
10006bd4:	6830      	ldr	r0, [r6, #0]
10006bd6:	fa92 f223 	shadd16	r2, r2, r3
10006bda:	fa90 f023 	shadd16	r0, r0, r3
10006bde:	fa90 f023 	shadd16	r0, r0, r3
10006be2:	fa92 f223 	shadd16	r2, r2, r3
10006be6:	fad2 f210 	qsub16	r2, r2, r0
10006bea:	f85a 0b08 	ldr.w	r0, [sl], #8
10006bee:	fae1 f412 	qsax	r4, r1, r2
10006bf2:	faa1 f112 	qasx	r1, r1, r2
10006bf6:	fb20 f204 	smuad	r2, r0, r4
10006bfa:	1412      	asrs	r2, r2, #16
10006bfc:	fb40 f014 	smusdx	r0, r0, r4
10006c00:	eac2 0200 	pkhbt	r2, r2, r0
10006c04:	f84e 2b04 	str.w	r2, [lr], #4
10006c08:	f859 0b18 	ldr.w	r0, [r9], #24
10006c0c:	f1bc 0c01 	subs.w	ip, ip, #1
10006c10:	fb20 f201 	smuad	r2, r0, r1
10006c14:	ea4f 4222 	mov.w	r2, r2, asr #16
10006c18:	fb40 f111 	smusdx	r1, r0, r1
10006c1c:	eac2 0201 	pkhbt	r2, r2, r1
10006c20:	f846 2b04 	str.w	r2, [r6], #4
10006c24:	d1a8      	bne.n	10006b78 <arm_radix4_butterfly_q15.constprop.0+0x28>
10006c26:	9b11      	ldr	r3, [sp, #68]	@ 0x44
10006c28:	2b04      	cmp	r3, #4
10006c2a:	f240 80b1 	bls.w	10006d90 <arm_radix4_butterfly_q15.constprop.0+0x240>
10006c2e:	930e      	str	r3, [sp, #56]	@ 0x38
10006c30:	f8cd c008 	str.w	ip, [sp, #8]
10006c34:	2308      	movs	r3, #8
10006c36:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
10006c38:	0891      	lsrs	r1, r2, #2
10006c3a:	4692      	mov	sl, r2
10006c3c:	008a      	lsls	r2, r1, #2
10006c3e:	920a      	str	r2, [sp, #40]	@ 0x28
10006c40:	9a01      	ldr	r2, [sp, #4]
10006c42:	910e      	str	r1, [sp, #56]	@ 0x38
10006c44:	428a      	cmp	r2, r1
10006c46:	bf28      	it	cs
10006c48:	460a      	movcs	r2, r1
10006c4a:	920c      	str	r2, [sp, #48]	@ 0x30
10006c4c:	009a      	lsls	r2, r3, #2
10006c4e:	9209      	str	r2, [sp, #36]	@ 0x24
10006c50:	eb03 0243 	add.w	r2, r3, r3, lsl #1
10006c54:	00db      	lsls	r3, r3, #3
10006c56:	930b      	str	r3, [sp, #44]	@ 0x2c
10006c58:	0093      	lsls	r3, r2, #2
10006c5a:	930d      	str	r3, [sp, #52]	@ 0x34
10006c5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
10006c5e:	9307      	str	r3, [sp, #28]
10006c60:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
10006c64:	9306      	str	r3, [sp, #24]
10006c66:	9b10      	ldr	r3, [sp, #64]	@ 0x40
10006c68:	9308      	str	r3, [sp, #32]
10006c6a:	9303      	str	r3, [sp, #12]
10006c6c:	9305      	str	r3, [sp, #20]
10006c6e:	2300      	movs	r3, #0
10006c70:	ea4f 078a 	mov.w	r7, sl, lsl #2
10006c74:	9304      	str	r3, [sp, #16]
10006c76:	9b05      	ldr	r3, [sp, #20]
10006c78:	9a07      	ldr	r2, [sp, #28]
10006c7a:	f8d3 9000 	ldr.w	r9, [r3]
10006c7e:	9b03      	ldr	r3, [sp, #12]
10006c80:	f8dd c010 	ldr.w	ip, [sp, #16]
10006c84:	f8d3 8000 	ldr.w	r8, [r3]
10006c88:	9b08      	ldr	r3, [sp, #32]
10006c8a:	f8d3 e000 	ldr.w	lr, [r3]
10006c8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
10006c90:	4616      	mov	r6, r2
10006c92:	1898      	adds	r0, r3, r2
10006c94:	9a06      	ldr	r2, [sp, #24]
10006c96:	4615      	mov	r5, r2
10006c98:	1899      	adds	r1, r3, r2
10006c9a:	f8d5 b000 	ldr.w	fp, [r5]
10006c9e:	6833      	ldr	r3, [r6, #0]
10006ca0:	680a      	ldr	r2, [r1, #0]
10006ca2:	6804      	ldr	r4, [r0, #0]
10006ca4:	fa94 f412 	qadd16	r4, r4, r2
10006ca8:	fa93 f21b 	qadd16	r2, r3, fp
10006cac:	fad3 f31b 	qsub16	r3, r3, fp
10006cb0:	fa92 fb24 	shadd16	fp, r2, r4
10006cb4:	fad2 f424 	shsub16	r4, r2, r4
10006cb8:	9a02      	ldr	r2, [sp, #8]
10006cba:	fa9b fb22 	shadd16	fp, fp, r2
10006cbe:	f8c6 b000 	str.w	fp, [r6]
10006cc2:	fb28 fb04 	smuad	fp, r8, r4
10006cc6:	ea4f 422b 	mov.w	r2, fp, asr #16
10006cca:	fb48 f414 	smusdx	r4, r8, r4
10006cce:	eac2 0204 	pkhbt	r2, r2, r4
10006cd2:	6804      	ldr	r4, [r0, #0]
10006cd4:	6002      	str	r2, [r0, #0]
10006cd6:	680a      	ldr	r2, [r1, #0]
10006cd8:	fad4 f412 	qsub16	r4, r4, r2
10006cdc:	faa3 f224 	shasx	r2, r3, r4
10006ce0:	fae3 f324 	shsax	r3, r3, r4
10006ce4:	fb29 f403 	smuad	r4, r9, r3
10006ce8:	1424      	asrs	r4, r4, #16
10006cea:	fb49 f313 	smusdx	r3, r9, r3
10006cee:	eac4 0303 	pkhbt	r3, r4, r3
10006cf2:	602b      	str	r3, [r5, #0]
10006cf4:	fb2e f302 	smuad	r3, lr, r2
10006cf8:	141b      	asrs	r3, r3, #16
10006cfa:	fb4e f212 	smusdx	r2, lr, r2
10006cfe:	eac3 0302 	pkhbt	r3, r3, r2
10006d02:	600b      	str	r3, [r1, #0]
10006d04:	9b01      	ldr	r3, [sp, #4]
10006d06:	44d4      	add	ip, sl
10006d08:	4563      	cmp	r3, ip
10006d0a:	443e      	add	r6, r7
10006d0c:	4438      	add	r0, r7
10006d0e:	443d      	add	r5, r7
10006d10:	4439      	add	r1, r7
10006d12:	d8c2      	bhi.n	10006c9a <arm_radix4_butterfly_q15.constprop.0+0x14a>
10006d14:	9a05      	ldr	r2, [sp, #20]
10006d16:	9909      	ldr	r1, [sp, #36]	@ 0x24
10006d18:	9b04      	ldr	r3, [sp, #16]
10006d1a:	440a      	add	r2, r1
10006d1c:	9205      	str	r2, [sp, #20]
10006d1e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
10006d20:	9a03      	ldr	r2, [sp, #12]
10006d22:	440a      	add	r2, r1
10006d24:	9203      	str	r2, [sp, #12]
10006d26:	990d      	ldr	r1, [sp, #52]	@ 0x34
10006d28:	9a08      	ldr	r2, [sp, #32]
10006d2a:	440a      	add	r2, r1
10006d2c:	9208      	str	r2, [sp, #32]
10006d2e:	9a07      	ldr	r2, [sp, #28]
10006d30:	3204      	adds	r2, #4
10006d32:	9207      	str	r2, [sp, #28]
10006d34:	9a06      	ldr	r2, [sp, #24]
10006d36:	3204      	adds	r2, #4
10006d38:	9206      	str	r2, [sp, #24]
10006d3a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
10006d3c:	3301      	adds	r3, #1
10006d3e:	4293      	cmp	r3, r2
10006d40:	9304      	str	r3, [sp, #16]
10006d42:	d398      	bcc.n	10006c76 <arm_radix4_butterfly_q15.constprop.0+0x126>
10006d44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
10006d46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10006d48:	2a04      	cmp	r2, #4
10006d4a:	f63f af74 	bhi.w	10006c36 <arm_radix4_butterfly_q15.constprop.0+0xe6>
10006d4e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
10006d50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
10006d52:	68de      	ldr	r6, [r3, #12]
10006d54:	681a      	ldr	r2, [r3, #0]
10006d56:	6859      	ldr	r1, [r3, #4]
10006d58:	689f      	ldr	r7, [r3, #8]
10006d5a:	fa91 f516 	qadd16	r5, r1, r6
10006d5e:	fa92 f017 	qadd16	r0, r2, r7
10006d62:	fad1 f116 	qsub16	r1, r1, r6
10006d66:	fad2 f217 	qsub16	r2, r2, r7
10006d6a:	fa90 f625 	shadd16	r6, r0, r5
10006d6e:	3c01      	subs	r4, #1
10006d70:	fad0 f025 	shsub16	r0, r0, r5
10006d74:	fae2 f521 	shsax	r5, r2, r1
10006d78:	faa2 f221 	shasx	r2, r2, r1
10006d7c:	601e      	str	r6, [r3, #0]
10006d7e:	6058      	str	r0, [r3, #4]
10006d80:	609d      	str	r5, [r3, #8]
10006d82:	60da      	str	r2, [r3, #12]
10006d84:	f103 0310 	add.w	r3, r3, #16
10006d88:	d1e3      	bne.n	10006d52 <arm_radix4_butterfly_q15.constprop.0+0x202>
10006d8a:	b013      	add	sp, #76	@ 0x4c
10006d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10006d90:	461c      	mov	r4, r3
10006d92:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
10006d94:	e7dd      	b.n	10006d52 <arm_radix4_butterfly_q15.constprop.0+0x202>
10006d96:	bf00      	nop

10006d98 <arm_cfft_radix4by2_q15>:
10006d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
10006d9c:	084d      	lsrs	r5, r1, #1
10006d9e:	4616      	mov	r6, r2
10006da0:	eb00 0741 	add.w	r7, r0, r1, lsl #1
10006da4:	d043      	beq.n	10006e2e <arm_cfft_radix4by2_q15+0x96>
10006da6:	4604      	mov	r4, r0
10006da8:	4696      	mov	lr, r2
10006daa:	4638      	mov	r0, r7
10006dac:	4621      	mov	r1, r4
10006dae:	462a      	mov	r2, r5
10006db0:	f04f 0c00 	mov.w	ip, #0
10006db4:	680b      	ldr	r3, [r1, #0]
10006db6:	f8d0 8000 	ldr.w	r8, [r0]
10006dba:	f85e 9b04 	ldr.w	r9, [lr], #4
10006dbe:	fa98 f82c 	shadd16	r8, r8, ip
10006dc2:	fa93 f32c 	shadd16	r3, r3, ip
10006dc6:	fad3 fa18 	qsub16	sl, r3, r8
10006dca:	3a01      	subs	r2, #1
10006dcc:	fa93 f328 	shadd16	r3, r3, r8
10006dd0:	fb29 f80a 	smuad	r8, r9, sl
10006dd4:	f841 3b04 	str.w	r3, [r1], #4
10006dd8:	fb49 f91a 	smusdx	r9, r9, sl
10006ddc:	ea4f 4328 	mov.w	r3, r8, asr #16
10006de0:	eac3 0309 	pkhbt	r3, r3, r9
10006de4:	f840 3b04 	str.w	r3, [r0], #4
10006de8:	d1e4      	bne.n	10006db4 <arm_cfft_radix4by2_q15+0x1c>
10006dea:	4629      	mov	r1, r5
10006dec:	4632      	mov	r2, r6
10006dee:	4620      	mov	r0, r4
10006df0:	f7ff feae 	bl	10006b50 <arm_radix4_butterfly_q15.constprop.0>
10006df4:	4629      	mov	r1, r5
10006df6:	4638      	mov	r0, r7
10006df8:	4632      	mov	r2, r6
10006dfa:	f7ff fea9 	bl	10006b50 <arm_radix4_butterfly_q15.constprop.0>
10006dfe:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
10006e02:	4620      	mov	r0, r4
10006e04:	f9b0 6000 	ldrsh.w	r6, [r0]
10006e08:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
10006e0c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
10006e10:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
10006e14:	0076      	lsls	r6, r6, #1
10006e16:	0064      	lsls	r4, r4, #1
10006e18:	0052      	lsls	r2, r2, #1
10006e1a:	005b      	lsls	r3, r3, #1
10006e1c:	8006      	strh	r6, [r0, #0]
10006e1e:	8044      	strh	r4, [r0, #2]
10006e20:	8082      	strh	r2, [r0, #4]
10006e22:	80c3      	strh	r3, [r0, #6]
10006e24:	3008      	adds	r0, #8
10006e26:	4285      	cmp	r5, r0
10006e28:	d1ec      	bne.n	10006e04 <arm_cfft_radix4by2_q15+0x6c>
10006e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
10006e2e:	4629      	mov	r1, r5
10006e30:	f7ff fe8e 	bl	10006b50 <arm_radix4_butterfly_q15.constprop.0>
10006e34:	4632      	mov	r2, r6
10006e36:	4629      	mov	r1, r5
10006e38:	4638      	mov	r0, r7
10006e3a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
10006e3e:	f7ff be87 	b.w	10006b50 <arm_radix4_butterfly_q15.constprop.0>
10006e42:	bf00      	nop

10006e44 <arm_cfft_radix4by2_inverse_q15>:
10006e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
10006e48:	084d      	lsrs	r5, r1, #1
10006e4a:	4616      	mov	r6, r2
10006e4c:	eb00 0741 	add.w	r7, r0, r1, lsl #1
10006e50:	d043      	beq.n	10006eda <arm_cfft_radix4by2_inverse_q15+0x96>
10006e52:	4604      	mov	r4, r0
10006e54:	4696      	mov	lr, r2
10006e56:	4638      	mov	r0, r7
10006e58:	4621      	mov	r1, r4
10006e5a:	462a      	mov	r2, r5
10006e5c:	f04f 0c00 	mov.w	ip, #0
10006e60:	680b      	ldr	r3, [r1, #0]
10006e62:	f8d0 8000 	ldr.w	r8, [r0]
10006e66:	f85e 9b04 	ldr.w	r9, [lr], #4
10006e6a:	fa98 f82c 	shadd16	r8, r8, ip
10006e6e:	fa93 f32c 	shadd16	r3, r3, ip
10006e72:	fad3 fa18 	qsub16	sl, r3, r8
10006e76:	3a01      	subs	r2, #1
10006e78:	fa93 f328 	shadd16	r3, r3, r8
10006e7c:	fb49 f80a 	smusd	r8, r9, sl
10006e80:	f841 3b04 	str.w	r3, [r1], #4
10006e84:	fb29 f91a 	smuadx	r9, r9, sl
10006e88:	ea4f 4328 	mov.w	r3, r8, asr #16
10006e8c:	eac3 0309 	pkhbt	r3, r3, r9
10006e90:	f840 3b04 	str.w	r3, [r0], #4
10006e94:	d1e4      	bne.n	10006e60 <arm_cfft_radix4by2_inverse_q15+0x1c>
10006e96:	4629      	mov	r1, r5
10006e98:	4632      	mov	r2, r6
10006e9a:	4620      	mov	r0, r4
10006e9c:	f7ff fd34 	bl	10006908 <arm_radix4_butterfly_inverse_q15.constprop.0>
10006ea0:	4629      	mov	r1, r5
10006ea2:	4638      	mov	r0, r7
10006ea4:	4632      	mov	r2, r6
10006ea6:	f7ff fd2f 	bl	10006908 <arm_radix4_butterfly_inverse_q15.constprop.0>
10006eaa:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
10006eae:	4620      	mov	r0, r4
10006eb0:	f9b0 6000 	ldrsh.w	r6, [r0]
10006eb4:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
10006eb8:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
10006ebc:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
10006ec0:	0076      	lsls	r6, r6, #1
10006ec2:	0064      	lsls	r4, r4, #1
10006ec4:	0052      	lsls	r2, r2, #1
10006ec6:	005b      	lsls	r3, r3, #1
10006ec8:	8006      	strh	r6, [r0, #0]
10006eca:	8044      	strh	r4, [r0, #2]
10006ecc:	8082      	strh	r2, [r0, #4]
10006ece:	80c3      	strh	r3, [r0, #6]
10006ed0:	3008      	adds	r0, #8
10006ed2:	4285      	cmp	r5, r0
10006ed4:	d1ec      	bne.n	10006eb0 <arm_cfft_radix4by2_inverse_q15+0x6c>
10006ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
10006eda:	4629      	mov	r1, r5
10006edc:	f7ff fd14 	bl	10006908 <arm_radix4_butterfly_inverse_q15.constprop.0>
10006ee0:	4632      	mov	r2, r6
10006ee2:	4629      	mov	r1, r5
10006ee4:	4638      	mov	r0, r7
10006ee6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
10006eea:	f7ff bd0d 	b.w	10006908 <arm_radix4_butterfly_inverse_q15.constprop.0>
10006eee:	bf00      	nop

10006ef0 <arm_cfft_q15>:
10006ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10006ef4:	b095      	sub	sp, #84	@ 0x54
10006ef6:	2a01      	cmp	r2, #1
10006ef8:	f8b0 a000 	ldrh.w	sl, [r0]
10006efc:	9012      	str	r0, [sp, #72]	@ 0x48
10006efe:	910f      	str	r1, [sp, #60]	@ 0x3c
10006f00:	9311      	str	r3, [sp, #68]	@ 0x44
10006f02:	f000 8173 	beq.w	100071ec <arm_cfft_q15+0x2fc>
10006f06:	f5ba 7f80 	cmp.w	sl, #256	@ 0x100
10006f0a:	d04f      	beq.n	10006fac <arm_cfft_q15+0xbc>
10006f0c:	d90b      	bls.n	10006f26 <arm_cfft_q15+0x36>
10006f0e:	f5ba 6f00 	cmp.w	sl, #2048	@ 0x800
10006f12:	d03e      	beq.n	10006f92 <arm_cfft_q15+0xa2>
10006f14:	d944      	bls.n	10006fa0 <arm_cfft_q15+0xb0>
10006f16:	f5ba 5f80 	cmp.w	sl, #4096	@ 0x1000
10006f1a:	d047      	beq.n	10006fac <arm_cfft_q15+0xbc>
10006f1c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
10006f1e:	b963      	cbnz	r3, 10006f3a <arm_cfft_q15+0x4a>
10006f20:	b015      	add	sp, #84	@ 0x54
10006f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10006f26:	f1ba 0f40 	cmp.w	sl, #64	@ 0x40
10006f2a:	d03f      	beq.n	10006fac <arm_cfft_q15+0xbc>
10006f2c:	d92b      	bls.n	10006f86 <arm_cfft_q15+0x96>
10006f2e:	f1ba 0f80 	cmp.w	sl, #128	@ 0x80
10006f32:	d02e      	beq.n	10006f92 <arm_cfft_q15+0xa2>
10006f34:	9b11      	ldr	r3, [sp, #68]	@ 0x44
10006f36:	2b00      	cmp	r3, #0
10006f38:	d0f2      	beq.n	10006f20 <arm_cfft_q15+0x30>
10006f3a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
10006f3c:	899e      	ldrh	r6, [r3, #12]
10006f3e:	689d      	ldr	r5, [r3, #8]
10006f40:	2e00      	cmp	r6, #0
10006f42:	d0ed      	beq.n	10006f20 <arm_cfft_q15+0x30>
10006f44:	980f      	ldr	r0, [sp, #60]	@ 0x3c
10006f46:	2100      	movs	r1, #0
10006f48:	1caf      	adds	r7, r5, #2
10006f4a:	f835 2011 	ldrh.w	r2, [r5, r1, lsl #1]
10006f4e:	f837 3011 	ldrh.w	r3, [r7, r1, lsl #1]
10006f52:	0892      	lsrs	r2, r2, #2
10006f54:	089b      	lsrs	r3, r3, #2
10006f56:	f830 4012 	ldrh.w	r4, [r0, r2, lsl #1]
10006f5a:	f830 c013 	ldrh.w	ip, [r0, r3, lsl #1]
10006f5e:	f820 c012 	strh.w	ip, [r0, r2, lsl #1]
10006f62:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
10006f66:	3201      	adds	r2, #1
10006f68:	3301      	adds	r3, #1
10006f6a:	3102      	adds	r1, #2
10006f6c:	f830 4012 	ldrh.w	r4, [r0, r2, lsl #1]
10006f70:	f830 c013 	ldrh.w	ip, [r0, r3, lsl #1]
10006f74:	f820 c012 	strh.w	ip, [r0, r2, lsl #1]
10006f78:	42b1      	cmp	r1, r6
10006f7a:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
10006f7e:	d3e4      	bcc.n	10006f4a <arm_cfft_q15+0x5a>
10006f80:	b015      	add	sp, #84	@ 0x54
10006f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10006f86:	f1ba 0f10 	cmp.w	sl, #16
10006f8a:	d00f      	beq.n	10006fac <arm_cfft_q15+0xbc>
10006f8c:	f1ba 0f20 	cmp.w	sl, #32
10006f90:	d1c4      	bne.n	10006f1c <arm_cfft_q15+0x2c>
10006f92:	9b12      	ldr	r3, [sp, #72]	@ 0x48
10006f94:	980f      	ldr	r0, [sp, #60]	@ 0x3c
10006f96:	685a      	ldr	r2, [r3, #4]
10006f98:	4651      	mov	r1, sl
10006f9a:	f7ff fefd 	bl	10006d98 <arm_cfft_radix4by2_q15>
10006f9e:	e7bd      	b.n	10006f1c <arm_cfft_q15+0x2c>
10006fa0:	f5ba 7f00 	cmp.w	sl, #512	@ 0x200
10006fa4:	d0f5      	beq.n	10006f92 <arm_cfft_q15+0xa2>
10006fa6:	f5ba 6f80 	cmp.w	sl, #1024	@ 0x400
10006faa:	d1b7      	bne.n	10006f1c <arm_cfft_q15+0x2c>
10006fac:	9a12      	ldr	r2, [sp, #72]	@ 0x48
10006fae:	f8cd a004 	str.w	sl, [sp, #4]
10006fb2:	6851      	ldr	r1, [r2, #4]
10006fb4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
10006fb6:	9110      	str	r1, [sp, #64]	@ 0x40
10006fb8:	ea4f 039a 	mov.w	r3, sl, lsr #2
10006fbc:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
10006fc0:	9313      	str	r3, [sp, #76]	@ 0x4c
10006fc2:	eb02 0783 	add.w	r7, r2, r3, lsl #2
10006fc6:	eb0e 0683 	add.w	r6, lr, r3, lsl #2
10006fca:	469c      	mov	ip, r3
10006fcc:	4689      	mov	r9, r1
10006fce:	468b      	mov	fp, r1
10006fd0:	4690      	mov	r8, r2
10006fd2:	2300      	movs	r3, #0
10006fd4:	468a      	mov	sl, r1
10006fd6:	f8d8 1000 	ldr.w	r1, [r8]
10006fda:	f8de 0000 	ldr.w	r0, [lr]
10006fde:	683a      	ldr	r2, [r7, #0]
10006fe0:	6834      	ldr	r4, [r6, #0]
10006fe2:	fa91 f123 	shadd16	r1, r1, r3
10006fe6:	fa90 f023 	shadd16	r0, r0, r3
10006fea:	fa92 f223 	shadd16	r2, r2, r3
10006fee:	fa94 f423 	shadd16	r4, r4, r3
10006ff2:	fa90 f023 	shadd16	r0, r0, r3
10006ff6:	fa91 f123 	shadd16	r1, r1, r3
10006ffa:	fa94 f423 	shadd16	r4, r4, r3
10006ffe:	fa92 f223 	shadd16	r2, r2, r3
10007002:	fa92 f214 	qadd16	r2, r2, r4
10007006:	fa91 f410 	qadd16	r4, r1, r0
1000700a:	fad1 f110 	qsub16	r1, r1, r0
1000700e:	fa94 f022 	shadd16	r0, r4, r2
10007012:	f848 0b04 	str.w	r0, [r8], #4
10007016:	f85b 5b08 	ldr.w	r5, [fp], #8
1000701a:	fad4 f412 	qsub16	r4, r4, r2
1000701e:	fb25 f004 	smuad	r0, r5, r4
10007022:	683a      	ldr	r2, [r7, #0]
10007024:	fb45 f414 	smusdx	r4, r5, r4
10007028:	1400      	asrs	r0, r0, #16
1000702a:	eac0 0004 	pkhbt	r0, r0, r4
1000702e:	f847 0b04 	str.w	r0, [r7], #4
10007032:	6830      	ldr	r0, [r6, #0]
10007034:	fa92 f223 	shadd16	r2, r2, r3
10007038:	fa90 f023 	shadd16	r0, r0, r3
1000703c:	fa90 f023 	shadd16	r0, r0, r3
10007040:	fa92 f223 	shadd16	r2, r2, r3
10007044:	fad2 f210 	qsub16	r2, r2, r0
10007048:	f85a 0b04 	ldr.w	r0, [sl], #4
1000704c:	fae1 f412 	qsax	r4, r1, r2
10007050:	faa1 f112 	qasx	r1, r1, r2
10007054:	fb20 f204 	smuad	r2, r0, r4
10007058:	1412      	asrs	r2, r2, #16
1000705a:	fb40 f014 	smusdx	r0, r0, r4
1000705e:	eac2 0200 	pkhbt	r2, r2, r0
10007062:	f84e 2b04 	str.w	r2, [lr], #4
10007066:	f859 0b0c 	ldr.w	r0, [r9], #12
1000706a:	f1bc 0c01 	subs.w	ip, ip, #1
1000706e:	fb20 f201 	smuad	r2, r0, r1
10007072:	ea4f 4222 	mov.w	r2, r2, asr #16
10007076:	fb40 f111 	smusdx	r1, r0, r1
1000707a:	eac2 0201 	pkhbt	r2, r2, r1
1000707e:	f846 2b04 	str.w	r2, [r6], #4
10007082:	d1a8      	bne.n	10006fd6 <arm_cfft_q15+0xe6>
10007084:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10007086:	2b04      	cmp	r3, #4
10007088:	f240 8091 	bls.w	100071ae <arm_cfft_q15+0x2be>
1000708c:	930e      	str	r3, [sp, #56]	@ 0x38
1000708e:	f8cd c008 	str.w	ip, [sp, #8]
10007092:	2304      	movs	r3, #4
10007094:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
10007096:	0891      	lsrs	r1, r2, #2
10007098:	4692      	mov	sl, r2
1000709a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1000709e:	0092      	lsls	r2, r2, #2
100070a0:	910e      	str	r1, [sp, #56]	@ 0x38
100070a2:	920d      	str	r2, [sp, #52]	@ 0x34
100070a4:	460a      	mov	r2, r1
100070a6:	0089      	lsls	r1, r1, #2
100070a8:	910a      	str	r1, [sp, #40]	@ 0x28
100070aa:	9901      	ldr	r1, [sp, #4]
100070ac:	4291      	cmp	r1, r2
100070ae:	bf28      	it	cs
100070b0:	4611      	movcs	r1, r2
100070b2:	910b      	str	r1, [sp, #44]	@ 0x2c
100070b4:	0099      	lsls	r1, r3, #2
100070b6:	00db      	lsls	r3, r3, #3
100070b8:	930c      	str	r3, [sp, #48]	@ 0x30
100070ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
100070bc:	9305      	str	r3, [sp, #20]
100070be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
100070c2:	9304      	str	r3, [sp, #16]
100070c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
100070c6:	9308      	str	r3, [sp, #32]
100070c8:	e9cd 3306 	strd	r3, r3, [sp, #24]
100070cc:	2300      	movs	r3, #0
100070ce:	ea4f 078a 	mov.w	r7, sl, lsl #2
100070d2:	9109      	str	r1, [sp, #36]	@ 0x24
100070d4:	9303      	str	r3, [sp, #12]
100070d6:	9b08      	ldr	r3, [sp, #32]
100070d8:	9a05      	ldr	r2, [sp, #20]
100070da:	f8d3 9000 	ldr.w	r9, [r3]
100070de:	9b07      	ldr	r3, [sp, #28]
100070e0:	f8dd c00c 	ldr.w	ip, [sp, #12]
100070e4:	f8d3 8000 	ldr.w	r8, [r3]
100070e8:	9b06      	ldr	r3, [sp, #24]
100070ea:	f8d3 e000 	ldr.w	lr, [r3]
100070ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
100070f0:	4616      	mov	r6, r2
100070f2:	1898      	adds	r0, r3, r2
100070f4:	9a04      	ldr	r2, [sp, #16]
100070f6:	4615      	mov	r5, r2
100070f8:	1899      	adds	r1, r3, r2
100070fa:	f8d5 b000 	ldr.w	fp, [r5]
100070fe:	6833      	ldr	r3, [r6, #0]
10007100:	680a      	ldr	r2, [r1, #0]
10007102:	6804      	ldr	r4, [r0, #0]
10007104:	fa94 f412 	qadd16	r4, r4, r2
10007108:	fa93 f21b 	qadd16	r2, r3, fp
1000710c:	fad3 f31b 	qsub16	r3, r3, fp
10007110:	fa92 fb24 	shadd16	fp, r2, r4
10007114:	fad2 f424 	shsub16	r4, r2, r4
10007118:	9a02      	ldr	r2, [sp, #8]
1000711a:	fa9b fb22 	shadd16	fp, fp, r2
1000711e:	f8c6 b000 	str.w	fp, [r6]
10007122:	fb28 fb04 	smuad	fp, r8, r4
10007126:	ea4f 422b 	mov.w	r2, fp, asr #16
1000712a:	fb48 f414 	smusdx	r4, r8, r4
1000712e:	eac2 0204 	pkhbt	r2, r2, r4
10007132:	6804      	ldr	r4, [r0, #0]
10007134:	6002      	str	r2, [r0, #0]
10007136:	680a      	ldr	r2, [r1, #0]
10007138:	fad4 f412 	qsub16	r4, r4, r2
1000713c:	faa3 f224 	shasx	r2, r3, r4
10007140:	fae3 f324 	shsax	r3, r3, r4
10007144:	fb29 f403 	smuad	r4, r9, r3
10007148:	1424      	asrs	r4, r4, #16
1000714a:	fb49 f313 	smusdx	r3, r9, r3
1000714e:	eac4 0303 	pkhbt	r3, r4, r3
10007152:	602b      	str	r3, [r5, #0]
10007154:	fb2e f302 	smuad	r3, lr, r2
10007158:	141b      	asrs	r3, r3, #16
1000715a:	fb4e f212 	smusdx	r2, lr, r2
1000715e:	eac3 0302 	pkhbt	r3, r3, r2
10007162:	600b      	str	r3, [r1, #0]
10007164:	9b01      	ldr	r3, [sp, #4]
10007166:	44d4      	add	ip, sl
10007168:	4563      	cmp	r3, ip
1000716a:	443e      	add	r6, r7
1000716c:	4438      	add	r0, r7
1000716e:	443d      	add	r5, r7
10007170:	4439      	add	r1, r7
10007172:	d8c2      	bhi.n	100070fa <arm_cfft_q15+0x20a>
10007174:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
10007178:	440a      	add	r2, r1
1000717a:	9208      	str	r2, [sp, #32]
1000717c:	990c      	ldr	r1, [sp, #48]	@ 0x30
1000717e:	9a07      	ldr	r2, [sp, #28]
10007180:	9b03      	ldr	r3, [sp, #12]
10007182:	440a      	add	r2, r1
10007184:	9207      	str	r2, [sp, #28]
10007186:	990d      	ldr	r1, [sp, #52]	@ 0x34
10007188:	9a06      	ldr	r2, [sp, #24]
1000718a:	440a      	add	r2, r1
1000718c:	9206      	str	r2, [sp, #24]
1000718e:	9a05      	ldr	r2, [sp, #20]
10007190:	3204      	adds	r2, #4
10007192:	9205      	str	r2, [sp, #20]
10007194:	9a04      	ldr	r2, [sp, #16]
10007196:	3204      	adds	r2, #4
10007198:	9204      	str	r2, [sp, #16]
1000719a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1000719c:	3301      	adds	r3, #1
1000719e:	4293      	cmp	r3, r2
100071a0:	9303      	str	r3, [sp, #12]
100071a2:	d398      	bcc.n	100070d6 <arm_cfft_q15+0x1e6>
100071a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
100071a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
100071a8:	2a04      	cmp	r2, #4
100071aa:	f63f af73 	bhi.w	10007094 <arm_cfft_q15+0x1a4>
100071ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
100071b0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
100071b2:	689d      	ldr	r5, [r3, #8]
100071b4:	68de      	ldr	r6, [r3, #12]
100071b6:	681a      	ldr	r2, [r3, #0]
100071b8:	6859      	ldr	r1, [r3, #4]
100071ba:	fa92 f015 	qadd16	r0, r2, r5
100071be:	fad2 f215 	qsub16	r2, r2, r5
100071c2:	fad1 f516 	qsub16	r5, r1, r6
100071c6:	fa91 f116 	qadd16	r1, r1, r6
100071ca:	fa90 f621 	shadd16	r6, r0, r1
100071ce:	3c01      	subs	r4, #1
100071d0:	fad0 f121 	shsub16	r1, r0, r1
100071d4:	fae2 f025 	shsax	r0, r2, r5
100071d8:	faa2 f225 	shasx	r2, r2, r5
100071dc:	601e      	str	r6, [r3, #0]
100071de:	6059      	str	r1, [r3, #4]
100071e0:	6098      	str	r0, [r3, #8]
100071e2:	60da      	str	r2, [r3, #12]
100071e4:	f103 0310 	add.w	r3, r3, #16
100071e8:	d1e3      	bne.n	100071b2 <arm_cfft_q15+0x2c2>
100071ea:	e697      	b.n	10006f1c <arm_cfft_q15+0x2c>
100071ec:	f5ba 7f80 	cmp.w	sl, #256	@ 0x100
100071f0:	d026      	beq.n	10007240 <arm_cfft_q15+0x350>
100071f2:	d908      	bls.n	10007206 <arm_cfft_q15+0x316>
100071f4:	f5ba 6f00 	cmp.w	sl, #2048	@ 0x800
100071f8:	d014      	beq.n	10007224 <arm_cfft_q15+0x334>
100071fa:	d91a      	bls.n	10007232 <arm_cfft_q15+0x342>
100071fc:	f5ba 5f80 	cmp.w	sl, #4096	@ 0x1000
10007200:	f47f ae8c 	bne.w	10006f1c <arm_cfft_q15+0x2c>
10007204:	e01c      	b.n	10007240 <arm_cfft_q15+0x350>
10007206:	f1ba 0f40 	cmp.w	sl, #64	@ 0x40
1000720a:	d019      	beq.n	10007240 <arm_cfft_q15+0x350>
1000720c:	d903      	bls.n	10007216 <arm_cfft_q15+0x326>
1000720e:	f1ba 0f80 	cmp.w	sl, #128	@ 0x80
10007212:	d007      	beq.n	10007224 <arm_cfft_q15+0x334>
10007214:	e682      	b.n	10006f1c <arm_cfft_q15+0x2c>
10007216:	f1ba 0f10 	cmp.w	sl, #16
1000721a:	d011      	beq.n	10007240 <arm_cfft_q15+0x350>
1000721c:	f1ba 0f20 	cmp.w	sl, #32
10007220:	f47f ae7c 	bne.w	10006f1c <arm_cfft_q15+0x2c>
10007224:	9b12      	ldr	r3, [sp, #72]	@ 0x48
10007226:	980f      	ldr	r0, [sp, #60]	@ 0x3c
10007228:	685a      	ldr	r2, [r3, #4]
1000722a:	4651      	mov	r1, sl
1000722c:	f7ff fe0a 	bl	10006e44 <arm_cfft_radix4by2_inverse_q15>
10007230:	e674      	b.n	10006f1c <arm_cfft_q15+0x2c>
10007232:	f5ba 7f00 	cmp.w	sl, #512	@ 0x200
10007236:	d0f5      	beq.n	10007224 <arm_cfft_q15+0x334>
10007238:	f5ba 6f80 	cmp.w	sl, #1024	@ 0x400
1000723c:	f47f ae6e 	bne.w	10006f1c <arm_cfft_q15+0x2c>
10007240:	9a12      	ldr	r2, [sp, #72]	@ 0x48
10007242:	f8cd a004 	str.w	sl, [sp, #4]
10007246:	6851      	ldr	r1, [r2, #4]
10007248:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
1000724a:	9110      	str	r1, [sp, #64]	@ 0x40
1000724c:	ea4f 039a 	mov.w	r3, sl, lsr #2
10007250:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
10007254:	9313      	str	r3, [sp, #76]	@ 0x4c
10007256:	eb02 0783 	add.w	r7, r2, r3, lsl #2
1000725a:	eb0e 0683 	add.w	r6, lr, r3, lsl #2
1000725e:	469c      	mov	ip, r3
10007260:	4689      	mov	r9, r1
10007262:	468b      	mov	fp, r1
10007264:	4690      	mov	r8, r2
10007266:	2300      	movs	r3, #0
10007268:	468a      	mov	sl, r1
1000726a:	f8d8 1000 	ldr.w	r1, [r8]
1000726e:	f8de 0000 	ldr.w	r0, [lr]
10007272:	683a      	ldr	r2, [r7, #0]
10007274:	6834      	ldr	r4, [r6, #0]
10007276:	fa91 f123 	shadd16	r1, r1, r3
1000727a:	fa90 f023 	shadd16	r0, r0, r3
1000727e:	fa92 f223 	shadd16	r2, r2, r3
10007282:	fa94 f423 	shadd16	r4, r4, r3
10007286:	fa90 f023 	shadd16	r0, r0, r3
1000728a:	fa91 f123 	shadd16	r1, r1, r3
1000728e:	fa94 f423 	shadd16	r4, r4, r3
10007292:	fa92 f223 	shadd16	r2, r2, r3
10007296:	fa92 f214 	qadd16	r2, r2, r4
1000729a:	fa91 f410 	qadd16	r4, r1, r0
1000729e:	fad1 f110 	qsub16	r1, r1, r0
100072a2:	fa94 f022 	shadd16	r0, r4, r2
100072a6:	f848 0b04 	str.w	r0, [r8], #4
100072aa:	f85b 5b08 	ldr.w	r5, [fp], #8
100072ae:	fad4 f412 	qsub16	r4, r4, r2
100072b2:	fb45 f004 	smusd	r0, r5, r4
100072b6:	683a      	ldr	r2, [r7, #0]
100072b8:	fb25 f414 	smuadx	r4, r5, r4
100072bc:	1400      	asrs	r0, r0, #16
100072be:	eac0 0004 	pkhbt	r0, r0, r4
100072c2:	f847 0b04 	str.w	r0, [r7], #4
100072c6:	6830      	ldr	r0, [r6, #0]
100072c8:	fa92 f223 	shadd16	r2, r2, r3
100072cc:	fa90 f023 	shadd16	r0, r0, r3
100072d0:	fa90 f023 	shadd16	r0, r0, r3
100072d4:	fa92 f223 	shadd16	r2, r2, r3
100072d8:	fad2 f210 	qsub16	r2, r2, r0
100072dc:	f85a 0b04 	ldr.w	r0, [sl], #4
100072e0:	faa1 f412 	qasx	r4, r1, r2
100072e4:	fae1 f112 	qsax	r1, r1, r2
100072e8:	fb40 f204 	smusd	r2, r0, r4
100072ec:	1412      	asrs	r2, r2, #16
100072ee:	fb20 f014 	smuadx	r0, r0, r4
100072f2:	eac2 0200 	pkhbt	r2, r2, r0
100072f6:	f84e 2b04 	str.w	r2, [lr], #4
100072fa:	f859 0b0c 	ldr.w	r0, [r9], #12
100072fe:	f1bc 0c01 	subs.w	ip, ip, #1
10007302:	fb40 f201 	smusd	r2, r0, r1
10007306:	ea4f 4222 	mov.w	r2, r2, asr #16
1000730a:	fb20 f111 	smuadx	r1, r0, r1
1000730e:	eac2 0201 	pkhbt	r2, r2, r1
10007312:	f846 2b04 	str.w	r2, [r6], #4
10007316:	d1a8      	bne.n	1000726a <arm_cfft_q15+0x37a>
10007318:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
1000731a:	2b04      	cmp	r3, #4
1000731c:	f240 8091 	bls.w	10007442 <arm_cfft_q15+0x552>
10007320:	930e      	str	r3, [sp, #56]	@ 0x38
10007322:	f8cd c008 	str.w	ip, [sp, #8]
10007326:	2304      	movs	r3, #4
10007328:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1000732a:	0891      	lsrs	r1, r2, #2
1000732c:	4692      	mov	sl, r2
1000732e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
10007332:	0092      	lsls	r2, r2, #2
10007334:	910e      	str	r1, [sp, #56]	@ 0x38
10007336:	920d      	str	r2, [sp, #52]	@ 0x34
10007338:	460a      	mov	r2, r1
1000733a:	0089      	lsls	r1, r1, #2
1000733c:	910b      	str	r1, [sp, #44]	@ 0x2c
1000733e:	9901      	ldr	r1, [sp, #4]
10007340:	4291      	cmp	r1, r2
10007342:	bf28      	it	cs
10007344:	4611      	movcs	r1, r2
10007346:	910c      	str	r1, [sp, #48]	@ 0x30
10007348:	0099      	lsls	r1, r3, #2
1000734a:	00db      	lsls	r3, r3, #3
1000734c:	930a      	str	r3, [sp, #40]	@ 0x28
1000734e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
10007350:	9305      	str	r3, [sp, #20]
10007352:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
10007356:	9307      	str	r3, [sp, #28]
10007358:	9b10      	ldr	r3, [sp, #64]	@ 0x40
1000735a:	9308      	str	r3, [sp, #32]
1000735c:	9304      	str	r3, [sp, #16]
1000735e:	9306      	str	r3, [sp, #24]
10007360:	2300      	movs	r3, #0
10007362:	ea4f 078a 	mov.w	r7, sl, lsl #2
10007366:	9109      	str	r1, [sp, #36]	@ 0x24
10007368:	9303      	str	r3, [sp, #12]
1000736a:	9b06      	ldr	r3, [sp, #24]
1000736c:	9a05      	ldr	r2, [sp, #20]
1000736e:	f8d3 9000 	ldr.w	r9, [r3]
10007372:	9b04      	ldr	r3, [sp, #16]
10007374:	f8dd c00c 	ldr.w	ip, [sp, #12]
10007378:	f8d3 8000 	ldr.w	r8, [r3]
1000737c:	9b08      	ldr	r3, [sp, #32]
1000737e:	f8d3 e000 	ldr.w	lr, [r3]
10007382:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
10007384:	4616      	mov	r6, r2
10007386:	1898      	adds	r0, r3, r2
10007388:	9a07      	ldr	r2, [sp, #28]
1000738a:	4615      	mov	r5, r2
1000738c:	1899      	adds	r1, r3, r2
1000738e:	f8d5 b000 	ldr.w	fp, [r5]
10007392:	6833      	ldr	r3, [r6, #0]
10007394:	680a      	ldr	r2, [r1, #0]
10007396:	6804      	ldr	r4, [r0, #0]
10007398:	fa94 f412 	qadd16	r4, r4, r2
1000739c:	fa93 f21b 	qadd16	r2, r3, fp
100073a0:	fad3 f31b 	qsub16	r3, r3, fp
100073a4:	fa92 fb24 	shadd16	fp, r2, r4
100073a8:	fad2 f424 	shsub16	r4, r2, r4
100073ac:	9a02      	ldr	r2, [sp, #8]
100073ae:	fa9b fb22 	shadd16	fp, fp, r2
100073b2:	f8c6 b000 	str.w	fp, [r6]
100073b6:	fb48 fb04 	smusd	fp, r8, r4
100073ba:	ea4f 422b 	mov.w	r2, fp, asr #16
100073be:	fb28 f414 	smuadx	r4, r8, r4
100073c2:	eac2 0204 	pkhbt	r2, r2, r4
100073c6:	6804      	ldr	r4, [r0, #0]
100073c8:	6002      	str	r2, [r0, #0]
100073ca:	680a      	ldr	r2, [r1, #0]
100073cc:	fad4 f412 	qsub16	r4, r4, r2
100073d0:	fae3 f224 	shsax	r2, r3, r4
100073d4:	faa3 f324 	shasx	r3, r3, r4
100073d8:	fb49 f403 	smusd	r4, r9, r3
100073dc:	1424      	asrs	r4, r4, #16
100073de:	fb29 f313 	smuadx	r3, r9, r3
100073e2:	eac4 0303 	pkhbt	r3, r4, r3
100073e6:	602b      	str	r3, [r5, #0]
100073e8:	fb4e f302 	smusd	r3, lr, r2
100073ec:	141b      	asrs	r3, r3, #16
100073ee:	fb2e f212 	smuadx	r2, lr, r2
100073f2:	eac3 0302 	pkhbt	r3, r3, r2
100073f6:	600b      	str	r3, [r1, #0]
100073f8:	9b01      	ldr	r3, [sp, #4]
100073fa:	44d4      	add	ip, sl
100073fc:	4563      	cmp	r3, ip
100073fe:	443e      	add	r6, r7
10007400:	4438      	add	r0, r7
10007402:	443d      	add	r5, r7
10007404:	4439      	add	r1, r7
10007406:	d8c2      	bhi.n	1000738e <arm_cfft_q15+0x49e>
10007408:	9a06      	ldr	r2, [sp, #24]
1000740a:	9909      	ldr	r1, [sp, #36]	@ 0x24
1000740c:	9b03      	ldr	r3, [sp, #12]
1000740e:	440a      	add	r2, r1
10007410:	9206      	str	r2, [sp, #24]
10007412:	990a      	ldr	r1, [sp, #40]	@ 0x28
10007414:	9a04      	ldr	r2, [sp, #16]
10007416:	440a      	add	r2, r1
10007418:	9204      	str	r2, [sp, #16]
1000741a:	990d      	ldr	r1, [sp, #52]	@ 0x34
1000741c:	9a08      	ldr	r2, [sp, #32]
1000741e:	440a      	add	r2, r1
10007420:	9208      	str	r2, [sp, #32]
10007422:	9a05      	ldr	r2, [sp, #20]
10007424:	3204      	adds	r2, #4
10007426:	9205      	str	r2, [sp, #20]
10007428:	9a07      	ldr	r2, [sp, #28]
1000742a:	3204      	adds	r2, #4
1000742c:	9207      	str	r2, [sp, #28]
1000742e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
10007430:	3301      	adds	r3, #1
10007432:	4293      	cmp	r3, r2
10007434:	9303      	str	r3, [sp, #12]
10007436:	d398      	bcc.n	1000736a <arm_cfft_q15+0x47a>
10007438:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1000743a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1000743c:	2a04      	cmp	r2, #4
1000743e:	f63f af73 	bhi.w	10007328 <arm_cfft_q15+0x438>
10007442:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
10007444:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
10007446:	689d      	ldr	r5, [r3, #8]
10007448:	68de      	ldr	r6, [r3, #12]
1000744a:	681a      	ldr	r2, [r3, #0]
1000744c:	6859      	ldr	r1, [r3, #4]
1000744e:	fa92 f015 	qadd16	r0, r2, r5
10007452:	fad2 f215 	qsub16	r2, r2, r5
10007456:	fa91 f516 	qadd16	r5, r1, r6
1000745a:	fad1 f116 	qsub16	r1, r1, r6
1000745e:	fa90 f625 	shadd16	r6, r0, r5
10007462:	fad0 f025 	shsub16	r0, r0, r5
10007466:	6058      	str	r0, [r3, #4]
10007468:	3c01      	subs	r4, #1
1000746a:	faa2 f021 	shasx	r0, r2, r1
1000746e:	fae2 f221 	shsax	r2, r2, r1
10007472:	601e      	str	r6, [r3, #0]
10007474:	6098      	str	r0, [r3, #8]
10007476:	60da      	str	r2, [r3, #12]
10007478:	f103 0310 	add.w	r3, r3, #16
1000747c:	d1e3      	bne.n	10007446 <arm_cfft_q15+0x556>
1000747e:	e54d      	b.n	10006f1c <arm_cfft_q15+0x2c>

10007480 <arm_cfft_init_q15>:
10007480:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
10007484:	d031      	beq.n	100074ea <arm_cfft_init_q15+0x6a>
10007486:	d918      	bls.n	100074ba <arm_cfft_init_q15+0x3a>
10007488:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
1000748c:	d025      	beq.n	100074da <arm_cfft_init_q15+0x5a>
1000748e:	d90c      	bls.n	100074aa <arm_cfft_init_q15+0x2a>
10007490:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
10007494:	d11e      	bne.n	100074d4 <arm_cfft_init_q15+0x54>
10007496:	4b16      	ldr	r3, [pc, #88]	@ (100074f0 <arm_cfft_init_q15+0x70>)
10007498:	8001      	strh	r1, [r0, #0]
1000749a:	8999      	ldrh	r1, [r3, #12]
1000749c:	8181      	strh	r1, [r0, #12]
1000749e:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
100074a2:	e9c0 3201 	strd	r3, r2, [r0, #4]
100074a6:	2000      	movs	r0, #0
100074a8:	4770      	bx	lr
100074aa:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
100074ae:	d016      	beq.n	100074de <arm_cfft_init_q15+0x5e>
100074b0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
100074b4:	d10e      	bne.n	100074d4 <arm_cfft_init_q15+0x54>
100074b6:	4b0f      	ldr	r3, [pc, #60]	@ (100074f4 <arm_cfft_init_q15+0x74>)
100074b8:	e7ee      	b.n	10007498 <arm_cfft_init_q15+0x18>
100074ba:	2940      	cmp	r1, #64	@ 0x40
100074bc:	d011      	beq.n	100074e2 <arm_cfft_init_q15+0x62>
100074be:	d903      	bls.n	100074c8 <arm_cfft_init_q15+0x48>
100074c0:	2980      	cmp	r1, #128	@ 0x80
100074c2:	d107      	bne.n	100074d4 <arm_cfft_init_q15+0x54>
100074c4:	4b0c      	ldr	r3, [pc, #48]	@ (100074f8 <arm_cfft_init_q15+0x78>)
100074c6:	e7e7      	b.n	10007498 <arm_cfft_init_q15+0x18>
100074c8:	2910      	cmp	r1, #16
100074ca:	d00c      	beq.n	100074e6 <arm_cfft_init_q15+0x66>
100074cc:	2920      	cmp	r1, #32
100074ce:	d101      	bne.n	100074d4 <arm_cfft_init_q15+0x54>
100074d0:	4b0a      	ldr	r3, [pc, #40]	@ (100074fc <arm_cfft_init_q15+0x7c>)
100074d2:	e7e1      	b.n	10007498 <arm_cfft_init_q15+0x18>
100074d4:	f04f 30ff 	mov.w	r0, #4294967295
100074d8:	4770      	bx	lr
100074da:	4b09      	ldr	r3, [pc, #36]	@ (10007500 <arm_cfft_init_q15+0x80>)
100074dc:	e7dc      	b.n	10007498 <arm_cfft_init_q15+0x18>
100074de:	4b09      	ldr	r3, [pc, #36]	@ (10007504 <arm_cfft_init_q15+0x84>)
100074e0:	e7da      	b.n	10007498 <arm_cfft_init_q15+0x18>
100074e2:	4b09      	ldr	r3, [pc, #36]	@ (10007508 <arm_cfft_init_q15+0x88>)
100074e4:	e7d8      	b.n	10007498 <arm_cfft_init_q15+0x18>
100074e6:	4b09      	ldr	r3, [pc, #36]	@ (1000750c <arm_cfft_init_q15+0x8c>)
100074e8:	e7d6      	b.n	10007498 <arm_cfft_init_q15+0x18>
100074ea:	4b09      	ldr	r3, [pc, #36]	@ (10007510 <arm_cfft_init_q15+0x90>)
100074ec:	e7d4      	b.n	10007498 <arm_cfft_init_q15+0x18>
100074ee:	bf00      	nop
100074f0:	100167fc 	.word	0x100167fc
100074f4:	1001679c 	.word	0x1001679c
100074f8:	100167ac 	.word	0x100167ac
100074fc:	100167ec 	.word	0x100167ec
10007500:	100167cc 	.word	0x100167cc
10007504:	1001680c 	.word	0x1001680c
10007508:	1001681c 	.word	0x1001681c
1000750c:	100167bc 	.word	0x100167bc
10007510:	100167dc 	.word	0x100167dc

10007514 <sinf>:
10007514:	4a1b      	ldr	r2, [pc, #108]	@ (10007584 <sinf+0x70>)
10007516:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
1000751a:	4293      	cmp	r3, r2
1000751c:	dd1e      	ble.n	1000755c <sinf+0x48>
1000751e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
10007522:	db06      	blt.n	10007532 <sinf+0x1e>
10007524:	ee07 0a90 	vmov	s15, r0
10007528:	ee77 7ae7 	vsub.f32	s15, s15, s15
1000752c:	ee17 0a90 	vmov	r0, s15
10007530:	4770      	bx	lr
10007532:	b500      	push	{lr}
10007534:	b083      	sub	sp, #12
10007536:	4669      	mov	r1, sp
10007538:	f000 f8fc 	bl	10007734 <__ieee754_rem_pio2f>
1000753c:	f000 0003 	and.w	r0, r0, #3
10007540:	2801      	cmp	r0, #1
10007542:	9901      	ldr	r1, [sp, #4]
10007544:	d00e      	beq.n	10007564 <sinf+0x50>
10007546:	2802      	cmp	r0, #2
10007548:	d015      	beq.n	10007576 <sinf+0x62>
1000754a:	b178      	cbz	r0, 1000756c <sinf+0x58>
1000754c:	9800      	ldr	r0, [sp, #0]
1000754e:	f000 f81b 	bl	10007588 <__kernel_cosf>
10007552:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
10007556:	b003      	add	sp, #12
10007558:	f85d fb04 	ldr.w	pc, [sp], #4
1000755c:	2100      	movs	r1, #0
1000755e:	2200      	movs	r2, #0
10007560:	f000 b89a 	b.w	10007698 <__kernel_sinf>
10007564:	9800      	ldr	r0, [sp, #0]
10007566:	f000 f80f 	bl	10007588 <__kernel_cosf>
1000756a:	e7f4      	b.n	10007556 <sinf+0x42>
1000756c:	9800      	ldr	r0, [sp, #0]
1000756e:	2201      	movs	r2, #1
10007570:	f000 f892 	bl	10007698 <__kernel_sinf>
10007574:	e7ef      	b.n	10007556 <sinf+0x42>
10007576:	9800      	ldr	r0, [sp, #0]
10007578:	2201      	movs	r2, #1
1000757a:	f000 f88d 	bl	10007698 <__kernel_sinf>
1000757e:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
10007582:	e7e8      	b.n	10007556 <sinf+0x42>
10007584:	3f490fd8 	.word	0x3f490fd8

10007588 <__kernel_cosf>:
10007588:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
1000758c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
10007590:	ee06 0a10 	vmov	s12, r0
10007594:	ee07 1a90 	vmov	s15, r1
10007598:	da2e      	bge.n	100075f8 <__kernel_cosf+0x70>
1000759a:	eebd 7ac6 	vcvt.s32.f32	s14, s12
1000759e:	ee17 3a10 	vmov	r3, s14
100075a2:	2b00      	cmp	r3, #0
100075a4:	d064      	beq.n	10007670 <__kernel_cosf+0xe8>
100075a6:	ee66 6a06 	vmul.f32	s13, s12, s12
100075aa:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 10007678 <__kernel_cosf+0xf0>
100075ae:	ed9f 4a33 	vldr	s8, [pc, #204]	@ 1000767c <__kernel_cosf+0xf4>
100075b2:	eddf 4a33 	vldr	s9, [pc, #204]	@ 10007680 <__kernel_cosf+0xf8>
100075b6:	ed9f 5a33 	vldr	s10, [pc, #204]	@ 10007684 <__kernel_cosf+0xfc>
100075ba:	eddf 5a33 	vldr	s11, [pc, #204]	@ 10007688 <__kernel_cosf+0x100>
100075be:	eea6 4a87 	vfma.f32	s8, s13, s14
100075c2:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 1000768c <__kernel_cosf+0x104>
100075c6:	eee6 4a84 	vfma.f32	s9, s13, s8
100075ca:	eea6 5aa4 	vfma.f32	s10, s13, s9
100075ce:	eea6 7a85 	vfma.f32	s14, s13, s10
100075d2:	eee6 5a87 	vfma.f32	s11, s13, s14
100075d6:	ee66 5aa5 	vmul.f32	s11, s13, s11
100075da:	ee67 7ac6 	vnmul.f32	s15, s15, s12
100075de:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
100075e2:	eee6 7aa5 	vfma.f32	s15, s13, s11
100075e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
100075ea:	eed6 7a86 	vfnms.f32	s15, s13, s12
100075ee:	ee77 7a67 	vsub.f32	s15, s14, s15
100075f2:	ee17 0a90 	vmov	r0, s15
100075f6:	4770      	bx	lr
100075f8:	ee66 6a06 	vmul.f32	s13, s12, s12
100075fc:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 10007678 <__kernel_cosf+0xf0>
10007600:	ed9f 4a1e 	vldr	s8, [pc, #120]	@ 1000767c <__kernel_cosf+0xf4>
10007604:	eddf 4a1e 	vldr	s9, [pc, #120]	@ 10007680 <__kernel_cosf+0xf8>
10007608:	ed9f 5a1e 	vldr	s10, [pc, #120]	@ 10007684 <__kernel_cosf+0xfc>
1000760c:	eddf 5a1e 	vldr	s11, [pc, #120]	@ 10007688 <__kernel_cosf+0x100>
10007610:	4a1f      	ldr	r2, [pc, #124]	@ (10007690 <__kernel_cosf+0x108>)
10007612:	eea6 4a87 	vfma.f32	s8, s13, s14
10007616:	4293      	cmp	r3, r2
10007618:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 1000768c <__kernel_cosf+0x104>
1000761c:	eee4 4a26 	vfma.f32	s9, s8, s13
10007620:	eea4 5aa6 	vfma.f32	s10, s9, s13
10007624:	eea5 7a26 	vfma.f32	s14, s10, s13
10007628:	eee7 5a26 	vfma.f32	s11, s14, s13
1000762c:	ee65 5aa6 	vmul.f32	s11, s11, s13
10007630:	ddd3      	ble.n	100075da <__kernel_cosf+0x52>
10007632:	4a18      	ldr	r2, [pc, #96]	@ (10007694 <__kernel_cosf+0x10c>)
10007634:	4293      	cmp	r3, r2
10007636:	dc16      	bgt.n	10007666 <__kernel_cosf+0xde>
10007638:	f103 437f 	add.w	r3, r3, #4278190080	@ 0xff000000
1000763c:	ee07 3a10 	vmov	s14, r3
10007640:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
10007644:	ee35 5a47 	vsub.f32	s10, s10, s14
10007648:	ee67 7ac6 	vnmul.f32	s15, s15, s12
1000764c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
10007650:	eee6 7aa5 	vfma.f32	s15, s13, s11
10007654:	ee96 7a86 	vfnms.f32	s14, s13, s12
10007658:	ee37 7a67 	vsub.f32	s14, s14, s15
1000765c:	ee75 7a47 	vsub.f32	s15, s10, s14
10007660:	ee17 0a90 	vmov	r0, s15
10007664:	4770      	bx	lr
10007666:	eeb6 5a07 	vmov.f32	s10, #103	@ 0x3f380000  0.7187500
1000766a:	eeb5 7a02 	vmov.f32	s14, #82	@ 0x3e900000  0.2812500
1000766e:	e7eb      	b.n	10007648 <__kernel_cosf+0xc0>
10007670:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
10007674:	4770      	bx	lr
10007676:	bf00      	nop
10007678:	ad47d74e 	.word	0xad47d74e
1000767c:	310f74f6 	.word	0x310f74f6
10007680:	b493f27c 	.word	0xb493f27c
10007684:	37d00d01 	.word	0x37d00d01
10007688:	3d2aaaab 	.word	0x3d2aaaab
1000768c:	bab60b61 	.word	0xbab60b61
10007690:	3e999999 	.word	0x3e999999
10007694:	3f480000 	.word	0x3f480000

10007698 <__kernel_sinf>:
10007698:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
1000769c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
100076a0:	ee07 0a90 	vmov	s15, r0
100076a4:	ee06 1a90 	vmov	s13, r1
100076a8:	da04      	bge.n	100076b4 <__kernel_sinf+0x1c>
100076aa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
100076ae:	ee17 3a10 	vmov	r3, s14
100076b2:	b383      	cbz	r3, 10007716 <__kernel_sinf+0x7e>
100076b4:	ee27 7aa7 	vmul.f32	s14, s15, s15
100076b8:	ed9f 6a17 	vldr	s12, [pc, #92]	@ 10007718 <__kernel_sinf+0x80>
100076bc:	eddf 4a17 	vldr	s9, [pc, #92]	@ 1000771c <__kernel_sinf+0x84>
100076c0:	ed9f 5a17 	vldr	s10, [pc, #92]	@ 10007720 <__kernel_sinf+0x88>
100076c4:	eddf 5a17 	vldr	s11, [pc, #92]	@ 10007724 <__kernel_sinf+0x8c>
100076c8:	eee7 4a06 	vfma.f32	s9, s14, s12
100076cc:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 10007728 <__kernel_sinf+0x90>
100076d0:	eea4 5a87 	vfma.f32	s10, s9, s14
100076d4:	ee27 4a87 	vmul.f32	s8, s15, s14
100076d8:	eee5 5a07 	vfma.f32	s11, s10, s14
100076dc:	eea5 6a87 	vfma.f32	s12, s11, s14
100076e0:	b942      	cbnz	r2, 100076f4 <__kernel_sinf+0x5c>
100076e2:	eddf 6a12 	vldr	s13, [pc, #72]	@ 1000772c <__kernel_sinf+0x94>
100076e6:	eee7 6a06 	vfma.f32	s13, s14, s12
100076ea:	eee6 7a84 	vfma.f32	s15, s13, s8
100076ee:	ee17 0a90 	vmov	r0, s15
100076f2:	4770      	bx	lr
100076f4:	ee26 6a44 	vnmul.f32	s12, s12, s8
100076f8:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
100076fc:	eea6 6aa5 	vfma.f32	s12, s13, s11
10007700:	eddf 5a0b 	vldr	s11, [pc, #44]	@ 10007730 <__kernel_sinf+0x98>
10007704:	eed6 6a07 	vfnms.f32	s13, s12, s14
10007708:	eee4 6a25 	vfma.f32	s13, s8, s11
1000770c:	ee77 7ae6 	vsub.f32	s15, s15, s13
10007710:	ee17 0a90 	vmov	r0, s15
10007714:	4770      	bx	lr
10007716:	4770      	bx	lr
10007718:	2f2ec9d3 	.word	0x2f2ec9d3
1000771c:	b2d72f34 	.word	0xb2d72f34
10007720:	3638ef1b 	.word	0x3638ef1b
10007724:	b9500d01 	.word	0xb9500d01
10007728:	3c088889 	.word	0x3c088889
1000772c:	be2aaaab 	.word	0xbe2aaaab
10007730:	3e2aaaab 	.word	0x3e2aaaab

10007734 <__ieee754_rem_pio2f>:
10007734:	b570      	push	{r4, r5, r6, lr}
10007736:	4a8a      	ldr	r2, [pc, #552]	@ (10007960 <__ieee754_rem_pio2f+0x22c>)
10007738:	f020 4400 	bic.w	r4, r0, #2147483648	@ 0x80000000
1000773c:	4294      	cmp	r4, r2
1000773e:	b086      	sub	sp, #24
10007740:	460d      	mov	r5, r1
10007742:	dd6f      	ble.n	10007824 <__ieee754_rem_pio2f+0xf0>
10007744:	4a87      	ldr	r2, [pc, #540]	@ (10007964 <__ieee754_rem_pio2f+0x230>)
10007746:	4294      	cmp	r4, r2
10007748:	4606      	mov	r6, r0
1000774a:	dc22      	bgt.n	10007792 <__ieee754_rem_pio2f+0x5e>
1000774c:	2800      	cmp	r0, #0
1000774e:	eddf 7a86 	vldr	s15, [pc, #536]	@ 10007968 <__ieee754_rem_pio2f+0x234>
10007752:	4a86      	ldr	r2, [pc, #536]	@ (1000796c <__ieee754_rem_pio2f+0x238>)
10007754:	ee07 0a10 	vmov	s14, r0
10007758:	f024 040f 	bic.w	r4, r4, #15
1000775c:	f340 80e7 	ble.w	1000792e <__ieee754_rem_pio2f+0x1fa>
10007760:	4294      	cmp	r4, r2
10007762:	ee77 7a67 	vsub.f32	s15, s14, s15
10007766:	bf09      	itett	eq
10007768:	eddf 6a81 	vldreq	s13, [pc, #516]	@ 10007970 <__ieee754_rem_pio2f+0x23c>
1000776c:	ed9f 7a81 	vldrne	s14, [pc, #516]	@ 10007974 <__ieee754_rem_pio2f+0x240>
10007770:	ed9f 7a81 	vldreq	s14, [pc, #516]	@ 10007978 <__ieee754_rem_pio2f+0x244>
10007774:	ee77 7ae6 	vsubeq.f32	s15, s15, s13
10007778:	2001      	movs	r0, #1
1000777a:	ee77 6ac7 	vsub.f32	s13, s15, s14
1000777e:	ee77 7ae6 	vsub.f32	s15, s15, s13
10007782:	edc1 6a00 	vstr	s13, [r1]
10007786:	ee77 7ac7 	vsub.f32	s15, s15, s14
1000778a:	edc1 7a01 	vstr	s15, [r1, #4]
1000778e:	b006      	add	sp, #24
10007790:	bd70      	pop	{r4, r5, r6, pc}
10007792:	4a7a      	ldr	r2, [pc, #488]	@ (1000797c <__ieee754_rem_pio2f+0x248>)
10007794:	4294      	cmp	r4, r2
10007796:	dd55      	ble.n	10007844 <__ieee754_rem_pio2f+0x110>
10007798:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
1000779c:	da48      	bge.n	10007830 <__ieee754_rem_pio2f+0xfc>
1000779e:	15e2      	asrs	r2, r4, #23
100077a0:	3a86      	subs	r2, #134	@ 0x86
100077a2:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
100077a6:	ee07 3a90 	vmov	s15, r3
100077aa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
100077ae:	eddf 6a74 	vldr	s13, [pc, #464]	@ 10007980 <__ieee754_rem_pio2f+0x24c>
100077b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
100077b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
100077ba:	ed8d 7a03 	vstr	s14, [sp, #12]
100077be:	ee67 7aa6 	vmul.f32	s15, s15, s13
100077c2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
100077c6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
100077ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
100077ce:	ed8d 7a04 	vstr	s14, [sp, #16]
100077d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
100077d6:	eef5 7a40 	vcmp.f32	s15, #0.0
100077da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
100077de:	edcd 7a05 	vstr	s15, [sp, #20]
100077e2:	f040 8093 	bne.w	1000790c <__ieee754_rem_pio2f+0x1d8>
100077e6:	eeb5 7a40 	vcmp.f32	s14, #0.0
100077ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
100077ee:	bf14      	ite	ne
100077f0:	2302      	movne	r3, #2
100077f2:	2301      	moveq	r3, #1
100077f4:	4963      	ldr	r1, [pc, #396]	@ (10007984 <__ieee754_rem_pio2f+0x250>)
100077f6:	9101      	str	r1, [sp, #4]
100077f8:	2102      	movs	r1, #2
100077fa:	9100      	str	r1, [sp, #0]
100077fc:	a803      	add	r0, sp, #12
100077fe:	4629      	mov	r1, r5
10007800:	f000 f8ce 	bl	100079a0 <__kernel_rem_pio2f>
10007804:	2e00      	cmp	r6, #0
10007806:	dac2      	bge.n	1000778e <__ieee754_rem_pio2f+0x5a>
10007808:	ed95 7a00 	vldr	s14, [r5]
1000780c:	edd5 7a01 	vldr	s15, [r5, #4]
10007810:	eeb1 7a47 	vneg.f32	s14, s14
10007814:	eef1 7a67 	vneg.f32	s15, s15
10007818:	ed85 7a00 	vstr	s14, [r5]
1000781c:	edc5 7a01 	vstr	s15, [r5, #4]
10007820:	4240      	negs	r0, r0
10007822:	e7b4      	b.n	1000778e <__ieee754_rem_pio2f+0x5a>
10007824:	6028      	str	r0, [r5, #0]
10007826:	2200      	movs	r2, #0
10007828:	2000      	movs	r0, #0
1000782a:	604a      	str	r2, [r1, #4]
1000782c:	b006      	add	sp, #24
1000782e:	bd70      	pop	{r4, r5, r6, pc}
10007830:	ee07 0a90 	vmov	s15, r0
10007834:	ee77 7ae7 	vsub.f32	s15, s15, s15
10007838:	2000      	movs	r0, #0
1000783a:	edc1 7a01 	vstr	s15, [r1, #4]
1000783e:	edc1 7a00 	vstr	s15, [r1]
10007842:	e7a4      	b.n	1000778e <__ieee754_rem_pio2f+0x5a>
10007844:	f000 f8a8 	bl	10007998 <fabsf>
10007848:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 10007988 <__ieee754_rem_pio2f+0x254>
1000784c:	eddf 5a46 	vldr	s11, [pc, #280]	@ 10007968 <__ieee754_rem_pio2f+0x234>
10007850:	ee07 0a10 	vmov	s14, r0
10007854:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
10007858:	eee7 7a26 	vfma.f32	s15, s14, s13
1000785c:	eddf 6a45 	vldr	s13, [pc, #276]	@ 10007974 <__ieee754_rem_pio2f+0x240>
10007860:	eefd 7ae7 	vcvt.s32.f32	s15, s15
10007864:	ee17 0a90 	vmov	r0, s15
10007868:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
1000786c:	281f      	cmp	r0, #31
1000786e:	eef0 7a47 	vmov.f32	s15, s14
10007872:	eee6 7a65 	vfms.f32	s15, s12, s11
10007876:	ee26 7a26 	vmul.f32	s14, s12, s13
1000787a:	eef1 5a46 	vneg.f32	s11, s12
1000787e:	dc1e      	bgt.n	100078be <__ieee754_rem_pio2f+0x18a>
10007880:	4a42      	ldr	r2, [pc, #264]	@ (1000798c <__ieee754_rem_pio2f+0x258>)
10007882:	1e41      	subs	r1, r0, #1
10007884:	f024 03ff 	bic.w	r3, r4, #255	@ 0xff
10007888:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
1000788c:	4293      	cmp	r3, r2
1000788e:	d016      	beq.n	100078be <__ieee754_rem_pio2f+0x18a>
10007890:	ee77 6ac7 	vsub.f32	s13, s15, s14
10007894:	edc5 6a00 	vstr	s13, [r5]
10007898:	ee77 7ae6 	vsub.f32	s15, s15, s13
1000789c:	2e00      	cmp	r6, #0
1000789e:	ee77 7ac7 	vsub.f32	s15, s15, s14
100078a2:	edc5 7a01 	vstr	s15, [r5, #4]
100078a6:	f6bf af72 	bge.w	1000778e <__ieee754_rem_pio2f+0x5a>
100078aa:	eef1 6a66 	vneg.f32	s13, s13
100078ae:	eef1 7a67 	vneg.f32	s15, s15
100078b2:	edc5 6a00 	vstr	s13, [r5]
100078b6:	edc5 7a01 	vstr	s15, [r5, #4]
100078ba:	4240      	negs	r0, r0
100078bc:	e767      	b.n	1000778e <__ieee754_rem_pio2f+0x5a>
100078be:	ee77 6ac7 	vsub.f32	s13, s15, s14
100078c2:	15e2      	asrs	r2, r4, #23
100078c4:	ee16 3a90 	vmov	r3, s13
100078c8:	f3c3 53c7 	ubfx	r3, r3, #23, #8
100078cc:	ebc3 53d4 	rsb	r3, r3, r4, lsr #23
100078d0:	2b08      	cmp	r3, #8
100078d2:	dddf      	ble.n	10007894 <__ieee754_rem_pio2f+0x160>
100078d4:	eddf 6a26 	vldr	s13, [pc, #152]	@ 10007970 <__ieee754_rem_pio2f+0x23c>
100078d8:	eddf 4a27 	vldr	s9, [pc, #156]	@ 10007978 <__ieee754_rem_pio2f+0x244>
100078dc:	eeb0 5a67 	vmov.f32	s10, s15
100078e0:	eea5 5aa6 	vfma.f32	s10, s11, s13
100078e4:	ee37 7ac5 	vsub.f32	s14, s15, s10
100078e8:	eea5 7aa6 	vfma.f32	s14, s11, s13
100078ec:	ee96 7a24 	vfnms.f32	s14, s12, s9
100078f0:	ee75 6a47 	vsub.f32	s13, s10, s14
100078f4:	ee16 3a90 	vmov	r3, s13
100078f8:	f3c3 53c7 	ubfx	r3, r3, #23, #8
100078fc:	1ad2      	subs	r2, r2, r3
100078fe:	2a19      	cmp	r2, #25
10007900:	dc06      	bgt.n	10007910 <__ieee754_rem_pio2f+0x1dc>
10007902:	eef0 7a45 	vmov.f32	s15, s10
10007906:	edc5 6a00 	vstr	s13, [r5]
1000790a:	e7c5      	b.n	10007898 <__ieee754_rem_pio2f+0x164>
1000790c:	2303      	movs	r3, #3
1000790e:	e771      	b.n	100077f4 <__ieee754_rem_pio2f+0xc0>
10007910:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 10007990 <__ieee754_rem_pio2f+0x25c>
10007914:	eddf 4a1f 	vldr	s9, [pc, #124]	@ 10007994 <__ieee754_rem_pio2f+0x260>
10007918:	eef0 7a45 	vmov.f32	s15, s10
1000791c:	eee5 7aa6 	vfma.f32	s15, s11, s13
10007920:	ee35 7a67 	vsub.f32	s14, s10, s15
10007924:	eea5 7aa6 	vfma.f32	s14, s11, s13
10007928:	ee96 7a24 	vfnms.f32	s14, s12, s9
1000792c:	e7b0      	b.n	10007890 <__ieee754_rem_pio2f+0x15c>
1000792e:	4294      	cmp	r4, r2
10007930:	ee77 7a27 	vadd.f32	s15, s14, s15
10007934:	bf09      	itett	eq
10007936:	eddf 6a0e 	vldreq	s13, [pc, #56]	@ 10007970 <__ieee754_rem_pio2f+0x23c>
1000793a:	ed9f 7a0e 	vldrne	s14, [pc, #56]	@ 10007974 <__ieee754_rem_pio2f+0x240>
1000793e:	ed9f 7a0e 	vldreq	s14, [pc, #56]	@ 10007978 <__ieee754_rem_pio2f+0x244>
10007942:	ee77 7aa6 	vaddeq.f32	s15, s15, s13
10007946:	f04f 30ff 	mov.w	r0, #4294967295
1000794a:	ee77 6a87 	vadd.f32	s13, s15, s14
1000794e:	ee77 7ae6 	vsub.f32	s15, s15, s13
10007952:	edc1 6a00 	vstr	s13, [r1]
10007956:	ee77 7a87 	vadd.f32	s15, s15, s14
1000795a:	edc1 7a01 	vstr	s15, [r1, #4]
1000795e:	e716      	b.n	1000778e <__ieee754_rem_pio2f+0x5a>
10007960:	3f490fd8 	.word	0x3f490fd8
10007964:	4016cbe3 	.word	0x4016cbe3
10007968:	3fc90f80 	.word	0x3fc90f80
1000796c:	3fc90fd0 	.word	0x3fc90fd0
10007970:	37354400 	.word	0x37354400
10007974:	37354443 	.word	0x37354443
10007978:	2e85a308 	.word	0x2e85a308
1000797c:	43490f80 	.word	0x43490f80
10007980:	43800000 	.word	0x43800000
10007984:	100168ac 	.word	0x100168ac
10007988:	3f22f984 	.word	0x3f22f984
1000798c:	1001682c 	.word	0x1001682c
10007990:	2e85a300 	.word	0x2e85a300
10007994:	248d3132 	.word	0x248d3132

10007998 <fabsf>:
10007998:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
1000799c:	4770      	bx	lr
1000799e:	bf00      	nop

100079a0 <__kernel_rem_pio2f>:
100079a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
100079a4:	ed2d 8b04 	vpush	{d8-d9}
100079a8:	b0db      	sub	sp, #364	@ 0x16c
100079aa:	461c      	mov	r4, r3
100079ac:	9303      	str	r3, [sp, #12]
100079ae:	9106      	str	r1, [sp, #24]
100079b0:	4ba6      	ldr	r3, [pc, #664]	@ (10007c4c <__kernel_rem_pio2f+0x2ac>)
100079b2:	9968      	ldr	r1, [sp, #416]	@ 0x1a0
100079b4:	9208      	str	r2, [sp, #32]
100079b6:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
100079ba:	1d11      	adds	r1, r2, #4
100079bc:	4682      	mov	sl, r0
100079be:	f104 38ff 	add.w	r8, r4, #4294967295
100079c2:	f2c0 82b0 	blt.w	10007f26 <__kernel_rem_pio2f+0x586>
100079c6:	1ed3      	subs	r3, r2, #3
100079c8:	bf48      	it	mi
100079ca:	1d13      	addmi	r3, r2, #4
100079cc:	10db      	asrs	r3, r3, #3
100079ce:	9302      	str	r3, [sp, #8]
100079d0:	3301      	adds	r3, #1
100079d2:	00db      	lsls	r3, r3, #3
100079d4:	9307      	str	r3, [sp, #28]
100079d6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
100079da:	1a9b      	subs	r3, r3, r2
100079dc:	9305      	str	r3, [sp, #20]
100079de:	9b02      	ldr	r3, [sp, #8]
100079e0:	eb15 0108 	adds.w	r1, r5, r8
100079e4:	eba3 0208 	sub.w	r2, r3, r8
100079e8:	d416      	bmi.n	10007a18 <__kernel_rem_pio2f+0x78>
100079ea:	3101      	adds	r1, #1
100079ec:	ed9f 7a98 	vldr	s14, [pc, #608]	@ 10007c50 <__kernel_rem_pio2f+0x2b0>
100079f0:	9869      	ldr	r0, [sp, #420]	@ 0x1a4
100079f2:	4411      	add	r1, r2
100079f4:	ab1e      	add	r3, sp, #120	@ 0x78
100079f6:	2a00      	cmp	r2, #0
100079f8:	bfa4      	itt	ge
100079fa:	f850 4022 	ldrge.w	r4, [r0, r2, lsl #2]
100079fe:	ee07 4a90 	vmovge	s15, r4
10007a02:	f102 0201 	add.w	r2, r2, #1
10007a06:	bfac      	ite	ge
10007a08:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
10007a0c:	eef0 7a47 	vmovlt.f32	s15, s14
10007a10:	428a      	cmp	r2, r1
10007a12:	ece3 7a01 	vstmia	r3!, {s15}
10007a16:	d1ee      	bne.n	100079f6 <__kernel_rem_pio2f+0x56>
10007a18:	2d00      	cmp	r5, #0
10007a1a:	f2c0 82f4 	blt.w	10008006 <__kernel_rem_pio2f+0x666>
10007a1e:	9b03      	ldr	r3, [sp, #12]
10007a20:	aa1e      	add	r2, sp, #120	@ 0x78
10007a22:	eb02 0483 	add.w	r4, r2, r3, lsl #2
10007a26:	ae46      	add	r6, sp, #280	@ 0x118
10007a28:	ea4f 0c83 	mov.w	ip, r3, lsl #2
10007a2c:	4640      	mov	r0, r8
10007a2e:	18ef      	adds	r7, r5, r3
10007a30:	eb0a 0183 	add.w	r1, sl, r3, lsl #2
10007a34:	f1b8 0f00 	cmp.w	r8, #0
10007a38:	eddf 7a85 	vldr	s15, [pc, #532]	@ 10007c50 <__kernel_rem_pio2f+0x2b0>
10007a3c:	db09      	blt.n	10007a52 <__kernel_rem_pio2f+0xb2>
10007a3e:	4622      	mov	r2, r4
10007a40:	4653      	mov	r3, sl
10007a42:	ecf3 6a01 	vldmia	r3!, {s13}
10007a46:	ed32 7a01 	vldmdb	r2!, {s14}
10007a4a:	428b      	cmp	r3, r1
10007a4c:	eee6 7a87 	vfma.f32	s15, s13, s14
10007a50:	d1f7      	bne.n	10007a42 <__kernel_rem_pio2f+0xa2>
10007a52:	3001      	adds	r0, #1
10007a54:	42b8      	cmp	r0, r7
10007a56:	ece6 7a01 	vstmia	r6!, {s15}
10007a5a:	f104 0404 	add.w	r4, r4, #4
10007a5e:	d1e9      	bne.n	10007a34 <__kernel_rem_pio2f+0x94>
10007a60:	af0a      	add	r7, sp, #40	@ 0x28
10007a62:	eb07 0385 	add.w	r3, r7, r5, lsl #2
10007a66:	3b04      	subs	r3, #4
10007a68:	ed9f 9a7b 	vldr	s18, [pc, #492]	@ 10007c58 <__kernel_rem_pio2f+0x2b8>
10007a6c:	eddf 8a79 	vldr	s17, [pc, #484]	@ 10007c54 <__kernel_rem_pio2f+0x2b4>
10007a70:	f8dd b014 	ldr.w	fp, [sp, #20]
10007a74:	9304      	str	r3, [sp, #16]
10007a76:	eb0a 040c 	add.w	r4, sl, ip
10007a7a:	eb07 0985 	add.w	r9, r7, r5, lsl #2
10007a7e:	462b      	mov	r3, r5
10007a80:	ae46      	add	r6, sp, #280	@ 0x118
10007a82:	9500      	str	r5, [sp, #0]
10007a84:	aa5a      	add	r2, sp, #360	@ 0x168
10007a86:	eb02 0283 	add.w	r2, r2, r3, lsl #2
10007a8a:	2b00      	cmp	r3, #0
10007a8c:	ed52 6a14 	vldr	s13, [r2, #-80]	@ 0xffffffb0
10007a90:	ea4f 0583 	mov.w	r5, r3, lsl #2
10007a94:	dd16      	ble.n	10007ac4 <__kernel_rem_pio2f+0x124>
10007a96:	eb06 0283 	add.w	r2, r6, r3, lsl #2
10007a9a:	4639      	mov	r1, r7
10007a9c:	ee66 7a89 	vmul.f32	s15, s13, s18
10007aa0:	eeb0 7a66 	vmov.f32	s14, s13
10007aa4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
10007aa8:	ed32 6a01 	vldmdb	r2!, {s12}
10007aac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
10007ab0:	42b2      	cmp	r2, r6
10007ab2:	eea7 7ae8 	vfms.f32	s14, s15, s17
10007ab6:	ee77 6a86 	vadd.f32	s13, s15, s12
10007aba:	eebd 7ac7 	vcvt.s32.f32	s14, s14
10007abe:	eca1 7a01 	vstmia	r1!, {s14}
10007ac2:	d1eb      	bne.n	10007a9c <__kernel_rem_pio2f+0xfc>
10007ac4:	ee16 0a90 	vmov	r0, s13
10007ac8:	4659      	mov	r1, fp
10007aca:	9301      	str	r3, [sp, #4]
10007acc:	f000 fab0 	bl	10008030 <scalbnf>
10007ad0:	ee08 0a10 	vmov	s16, r0
10007ad4:	eef4 7a00 	vmov.f32	s15, #64	@ 0x3e000000  0.125
10007ad8:	ee68 7a27 	vmul.f32	s15, s16, s15
10007adc:	ee17 0a90 	vmov	r0, s15
10007ae0:	f000 fb18 	bl	10008114 <floorf>
10007ae4:	ee06 0a90 	vmov	s13, r0
10007ae8:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
10007aec:	eef0 7a48 	vmov.f32	s15, s16
10007af0:	eee6 7ac7 	vfms.f32	s15, s13, s14
10007af4:	f1bb 0f00 	cmp.w	fp, #0
10007af8:	9b01      	ldr	r3, [sp, #4]
10007afa:	eefd 9ae7 	vcvt.s32.f32	s19, s15
10007afe:	eeb8 7ae9 	vcvt.f32.s32	s14, s19
10007b02:	ee37 8ac7 	vsub.f32	s16, s15, s14
10007b06:	dd73      	ble.n	10007bf0 <__kernel_rem_pio2f+0x250>
10007b08:	f103 3eff 	add.w	lr, r3, #4294967295
10007b0c:	f1cb 0208 	rsb	r2, fp, #8
10007b10:	f857 102e 	ldr.w	r1, [r7, lr, lsl #2]
10007b14:	fa41 fc02 	asr.w	ip, r1, r2
10007b18:	fa0c f202 	lsl.w	r2, ip, r2
10007b1c:	1a8a      	subs	r2, r1, r2
10007b1e:	f1cb 0007 	rsb	r0, fp, #7
10007b22:	ee19 1a90 	vmov	r1, s19
10007b26:	f847 202e 	str.w	r2, [r7, lr, lsl #2]
10007b2a:	4102      	asrs	r2, r0
10007b2c:	4461      	add	r1, ip
10007b2e:	2a00      	cmp	r2, #0
10007b30:	ee09 1a90 	vmov	s19, r1
10007b34:	dc64      	bgt.n	10007c00 <__kernel_rem_pio2f+0x260>
10007b36:	eeb5 8a40 	vcmp.f32	s16, #0.0
10007b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
10007b3e:	f040 80c5 	bne.w	10007ccc <__kernel_rem_pio2f+0x32c>
10007b42:	9900      	ldr	r1, [sp, #0]
10007b44:	f103 3cff 	add.w	ip, r3, #4294967295
10007b48:	4561      	cmp	r1, ip
10007b4a:	dc0d      	bgt.n	10007b68 <__kernel_rem_pio2f+0x1c8>
10007b4c:	ea4f 0e83 	mov.w	lr, r3, lsl #2
10007b50:	eb07 0183 	add.w	r1, r7, r3, lsl #2
10007b54:	2000      	movs	r0, #0
10007b56:	f851 5d04 	ldr.w	r5, [r1, #-4]!
10007b5a:	4549      	cmp	r1, r9
10007b5c:	ea40 0005 	orr.w	r0, r0, r5
10007b60:	d1f9      	bne.n	10007b56 <__kernel_rem_pio2f+0x1b6>
10007b62:	2800      	cmp	r0, #0
10007b64:	f040 80fd 	bne.w	10007d62 <__kernel_rem_pio2f+0x3c2>
10007b68:	9a00      	ldr	r2, [sp, #0]
10007b6a:	3a01      	subs	r2, #1
10007b6c:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
10007b70:	2a00      	cmp	r2, #0
10007b72:	f040 80f1 	bne.w	10007d58 <__kernel_rem_pio2f+0x3b8>
10007b76:	9a04      	ldr	r2, [sp, #16]
10007b78:	2501      	movs	r5, #1
10007b7a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
10007b7e:	3501      	adds	r5, #1
10007b80:	2900      	cmp	r1, #0
10007b82:	d0fa      	beq.n	10007b7a <__kernel_rem_pio2f+0x1da>
10007b84:	f103 0e01 	add.w	lr, r3, #1
10007b88:	441d      	add	r5, r3
10007b8a:	4671      	mov	r1, lr
10007b8c:	9a03      	ldr	r2, [sp, #12]
10007b8e:	4413      	add	r3, r2
10007b90:	9a02      	ldr	r2, [sp, #8]
10007b92:	eb02 0c0e 	add.w	ip, r2, lr
10007b96:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
10007b9a:	9a69      	ldr	r2, [sp, #420]	@ 0x1a4
10007b9c:	f10c 3cff 	add.w	ip, ip, #4294967295
10007ba0:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
10007ba4:	aa1e      	add	r2, sp, #120	@ 0x78
10007ba6:	eb06 0e8e 	add.w	lr, r6, lr, lsl #2
10007baa:	eb02 0083 	add.w	r0, r2, r3, lsl #2
10007bae:	eddc 7a01 	vldr	s15, [ip, #4]
10007bb2:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 10007c50 <__kernel_rem_pio2f+0x2b0>
10007bb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
10007bba:	f1b8 0f00 	cmp.w	r8, #0
10007bbe:	f10c 0c04 	add.w	ip, ip, #4
10007bc2:	edc0 7a00 	vstr	s15, [r0]
10007bc6:	4602      	mov	r2, r0
10007bc8:	f100 0004 	add.w	r0, r0, #4
10007bcc:	db09      	blt.n	10007be2 <__kernel_rem_pio2f+0x242>
10007bce:	4653      	mov	r3, sl
10007bd0:	e001      	b.n	10007bd6 <__kernel_rem_pio2f+0x236>
10007bd2:	ed72 7a01 	vldmdb	r2!, {s15}
10007bd6:	ecf3 6a01 	vldmia	r3!, {s13}
10007bda:	42a3      	cmp	r3, r4
10007bdc:	eea6 7aa7 	vfma.f32	s14, s13, s15
10007be0:	d1f7      	bne.n	10007bd2 <__kernel_rem_pio2f+0x232>
10007be2:	3101      	adds	r1, #1
10007be4:	42a9      	cmp	r1, r5
10007be6:	ecae 7a01 	vstmia	lr!, {s14}
10007bea:	dde0      	ble.n	10007bae <__kernel_rem_pio2f+0x20e>
10007bec:	462b      	mov	r3, r5
10007bee:	e749      	b.n	10007a84 <__kernel_rem_pio2f+0xe4>
10007bf0:	f040 80a8 	bne.w	10007d44 <__kernel_rem_pio2f+0x3a4>
10007bf4:	1e5a      	subs	r2, r3, #1
10007bf6:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
10007bfa:	11d2      	asrs	r2, r2, #7
10007bfc:	2a00      	cmp	r2, #0
10007bfe:	dd9a      	ble.n	10007b36 <__kernel_rem_pio2f+0x196>
10007c00:	ee19 1a90 	vmov	r1, s19
10007c04:	2b00      	cmp	r3, #0
10007c06:	f101 0101 	add.w	r1, r1, #1
10007c0a:	ee09 1a90 	vmov	s19, r1
10007c0e:	f340 81a0 	ble.w	10007f52 <__kernel_rem_pio2f+0x5b2>
10007c12:	6838      	ldr	r0, [r7, #0]
10007c14:	2800      	cmp	r0, #0
10007c16:	f040 808b 	bne.w	10007d30 <__kernel_rem_pio2f+0x390>
10007c1a:	2b01      	cmp	r3, #1
10007c1c:	d028      	beq.n	10007c70 <__kernel_rem_pio2f+0x2d0>
10007c1e:	4639      	mov	r1, r7
10007c20:	f04f 0c01 	mov.w	ip, #1
10007c24:	f851 0f04 	ldr.w	r0, [r1, #4]!
10007c28:	2800      	cmp	r0, #0
10007c2a:	f000 8085 	beq.w	10007d38 <__kernel_rem_pio2f+0x398>
10007c2e:	f10c 0101 	add.w	r1, ip, #1
10007c32:	f5c0 7080 	rsb	r0, r0, #256	@ 0x100
10007c36:	428b      	cmp	r3, r1
10007c38:	f847 002c 	str.w	r0, [r7, ip, lsl #2]
10007c3c:	dd17      	ble.n	10007c6e <__kernel_rem_pio2f+0x2ce>
10007c3e:	f857 0021 	ldr.w	r0, [r7, r1, lsl #2]
10007c42:	443d      	add	r5, r7
10007c44:	eb07 0181 	add.w	r1, r7, r1, lsl #2
10007c48:	e00b      	b.n	10007c62 <__kernel_rem_pio2f+0x2c2>
10007c4a:	bf00      	nop
10007c4c:	10016bf0 	.word	0x10016bf0
10007c50:	00000000 	.word	0x00000000
10007c54:	43800000 	.word	0x43800000
10007c58:	3b800000 	.word	0x3b800000
10007c5c:	3fc90000 	.word	0x3fc90000
10007c60:	6808      	ldr	r0, [r1, #0]
10007c62:	f1c0 00ff 	rsb	r0, r0, #255	@ 0xff
10007c66:	f841 0b04 	str.w	r0, [r1], #4
10007c6a:	42a9      	cmp	r1, r5
10007c6c:	d1f8      	bne.n	10007c60 <__kernel_rem_pio2f+0x2c0>
10007c6e:	2001      	movs	r0, #1
10007c70:	f1bb 0f00 	cmp.w	fp, #0
10007c74:	dd0d      	ble.n	10007c92 <__kernel_rem_pio2f+0x2f2>
10007c76:	f1bb 0f01 	cmp.w	fp, #1
10007c7a:	f000 814c 	beq.w	10007f16 <__kernel_rem_pio2f+0x576>
10007c7e:	f1bb 0f02 	cmp.w	fp, #2
10007c82:	d106      	bne.n	10007c92 <__kernel_rem_pio2f+0x2f2>
10007c84:	1e5d      	subs	r5, r3, #1
10007c86:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
10007c8a:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
10007c8e:	f847 1025 	str.w	r1, [r7, r5, lsl #2]
10007c92:	2a02      	cmp	r2, #2
10007c94:	f47f af4f 	bne.w	10007b36 <__kernel_rem_pio2f+0x196>
10007c98:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
10007c9c:	ee37 8ac8 	vsub.f32	s16, s15, s16
10007ca0:	2800      	cmp	r0, #0
10007ca2:	f43f af48 	beq.w	10007b36 <__kernel_rem_pio2f+0x196>
10007ca6:	ee17 0a90 	vmov	r0, s15
10007caa:	4659      	mov	r1, fp
10007cac:	9209      	str	r2, [sp, #36]	@ 0x24
10007cae:	9301      	str	r3, [sp, #4]
10007cb0:	f000 f9be 	bl	10008030 <scalbnf>
10007cb4:	ee07 0a90 	vmov	s15, r0
10007cb8:	ee38 8a67 	vsub.f32	s16, s16, s15
10007cbc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
10007cbe:	9b01      	ldr	r3, [sp, #4]
10007cc0:	eeb5 8a40 	vcmp.f32	s16, #0.0
10007cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
10007cc8:	f43f af3b 	beq.w	10007b42 <__kernel_rem_pio2f+0x1a2>
10007ccc:	e9cd 3201 	strd	r3, r2, [sp, #4]
10007cd0:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
10007cd4:	ee18 0a10 	vmov	r0, s16
10007cd8:	1a99      	subs	r1, r3, r2
10007cda:	9d00      	ldr	r5, [sp, #0]
10007cdc:	f000 f9a8 	bl	10008030 <scalbnf>
10007ce0:	ed5f 6a24 	vldr	s13, [pc, #-144]	@ 10007c54 <__kernel_rem_pio2f+0x2b4>
10007ce4:	ee07 0a90 	vmov	s15, r0
10007ce8:	eef4 7ae6 	vcmpe.f32	s15, s13
10007cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
10007cf0:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
10007cf4:	f2c0 8155 	blt.w	10007fa2 <__kernel_rem_pio2f+0x602>
10007cf8:	ed1f 7a29 	vldr	s14, [pc, #-164]	@ 10007c58 <__kernel_rem_pio2f+0x2b8>
10007cfc:	9905      	ldr	r1, [sp, #20]
10007cfe:	ee27 7a87 	vmul.f32	s14, s15, s14
10007d02:	3108      	adds	r1, #8
10007d04:	eebd 7ac7 	vcvt.s32.f32	s14, s14
10007d08:	9105      	str	r1, [sp, #20]
10007d0a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
10007d0e:	f103 0b01 	add.w	fp, r3, #1
10007d12:	eee7 7a66 	vfms.f32	s15, s14, s13
10007d16:	eebd 7ac7 	vcvt.s32.f32	s14, s14
10007d1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
10007d1e:	ee17 1a90 	vmov	r1, s15
10007d22:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
10007d26:	ee17 3a10 	vmov	r3, s14
10007d2a:	f847 302b 	str.w	r3, [r7, fp, lsl #2]
10007d2e:	e02c      	b.n	10007d8a <__kernel_rem_pio2f+0x3ea>
10007d30:	2101      	movs	r1, #1
10007d32:	f04f 0c00 	mov.w	ip, #0
10007d36:	e77c      	b.n	10007c32 <__kernel_rem_pio2f+0x292>
10007d38:	f10c 0c01 	add.w	ip, ip, #1
10007d3c:	459c      	cmp	ip, r3
10007d3e:	f47f af71 	bne.w	10007c24 <__kernel_rem_pio2f+0x284>
10007d42:	e795      	b.n	10007c70 <__kernel_rem_pio2f+0x2d0>
10007d44:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
10007d48:	eeb4 8ae7 	vcmpe.f32	s16, s15
10007d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
10007d50:	f280 80ee 	bge.w	10007f30 <__kernel_rem_pio2f+0x590>
10007d54:	2200      	movs	r2, #0
10007d56:	e6ee      	b.n	10007b36 <__kernel_rem_pio2f+0x196>
10007d58:	f103 0e01 	add.w	lr, r3, #1
10007d5c:	4671      	mov	r1, lr
10007d5e:	4675      	mov	r5, lr
10007d60:	e714      	b.n	10007b8c <__kernel_rem_pio2f+0x1ec>
10007d62:	9b05      	ldr	r3, [sp, #20]
10007d64:	9d00      	ldr	r5, [sp, #0]
10007d66:	f1a3 0108 	sub.w	r1, r3, #8
10007d6a:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
10007d6e:	9105      	str	r1, [sp, #20]
10007d70:	46e3      	mov	fp, ip
10007d72:	b953      	cbnz	r3, 10007d8a <__kernel_rem_pio2f+0x3ea>
10007d74:	f1ae 0304 	sub.w	r3, lr, #4
10007d78:	443b      	add	r3, r7
10007d7a:	f853 0d04 	ldr.w	r0, [r3, #-4]!
10007d7e:	f10b 3bff 	add.w	fp, fp, #4294967295
10007d82:	3908      	subs	r1, #8
10007d84:	2800      	cmp	r0, #0
10007d86:	d0f8      	beq.n	10007d7a <__kernel_rem_pio2f+0x3da>
10007d88:	9105      	str	r1, [sp, #20]
10007d8a:	9905      	ldr	r1, [sp, #20]
10007d8c:	9200      	str	r2, [sp, #0]
10007d8e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
10007d92:	f000 f94d 	bl	10008030 <scalbnf>
10007d96:	f1bb 0f00 	cmp.w	fp, #0
10007d9a:	ee07 0a10 	vmov	s14, r0
10007d9e:	9a00      	ldr	r2, [sp, #0]
10007da0:	f2c0 8124 	blt.w	10007fec <__kernel_rem_pio2f+0x64c>
10007da4:	f10b 0601 	add.w	r6, fp, #1
10007da8:	a946      	add	r1, sp, #280	@ 0x118
10007daa:	ed5f 6a55 	vldr	s13, [pc, #-340]	@ 10007c58 <__kernel_rem_pio2f+0x2b8>
10007dae:	ea4f 0c86 	mov.w	ip, r6, lsl #2
10007db2:	eb07 0386 	add.w	r3, r7, r6, lsl #2
10007db6:	eb01 0186 	add.w	r1, r1, r6, lsl #2
10007dba:	ed73 7a01 	vldmdb	r3!, {s15}
10007dbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
10007dc2:	42bb      	cmp	r3, r7
10007dc4:	ee67 7a87 	vmul.f32	s15, s15, s14
10007dc8:	ee27 7a26 	vmul.f32	s14, s14, s13
10007dcc:	ed61 7a01 	vstmdb	r1!, {s15}
10007dd0:	d1f3      	bne.n	10007dba <__kernel_rem_pio2f+0x41a>
10007dd2:	f1ac 0304 	sub.w	r3, ip, #4
10007dd6:	a946      	add	r1, sp, #280	@ 0x118
10007dd8:	2d00      	cmp	r5, #0
10007dda:	ed1f 6a60 	vldr	s12, [pc, #-384]	@ 10007c5c <__kernel_rem_pio2f+0x2bc>
10007dde:	eb01 0703 	add.w	r7, r1, r3
10007de2:	f04f 0400 	mov.w	r4, #0
10007de6:	db22      	blt.n	10007e2e <__kernel_rem_pio2f+0x48e>
10007de8:	488f      	ldr	r0, [pc, #572]	@ (10008028 <__kernel_rem_pio2f+0x688>)
10007dea:	eddf 7a90 	vldr	s15, [pc, #576]	@ 1000802c <__kernel_rem_pio2f+0x68c>
10007dee:	eeb0 7a46 	vmov.f32	s14, s12
10007df2:	4639      	mov	r1, r7
10007df4:	2300      	movs	r3, #0
10007df6:	e003      	b.n	10007e00 <__kernel_rem_pio2f+0x460>
10007df8:	429c      	cmp	r4, r3
10007dfa:	db08      	blt.n	10007e0e <__kernel_rem_pio2f+0x46e>
10007dfc:	ecb0 7a01 	vldmia	r0!, {s14}
10007e00:	ecf1 6a01 	vldmia	r1!, {s13}
10007e04:	3301      	adds	r3, #1
10007e06:	429d      	cmp	r5, r3
10007e08:	eee6 7a87 	vfma.f32	s15, s13, s14
10007e0c:	daf4      	bge.n	10007df8 <__kernel_rem_pio2f+0x458>
10007e0e:	ab5a      	add	r3, sp, #360	@ 0x168
10007e10:	eb03 0384 	add.w	r3, r3, r4, lsl #2
10007e14:	455c      	cmp	r4, fp
10007e16:	ed43 7a28 	vstr	s15, [r3, #-160]	@ 0xffffff60
10007e1a:	ea4f 0084 	mov.w	r0, r4, lsl #2
10007e1e:	f104 0101 	add.w	r1, r4, #1
10007e22:	f1a7 0704 	sub.w	r7, r7, #4
10007e26:	d005      	beq.n	10007e34 <__kernel_rem_pio2f+0x494>
10007e28:	2d00      	cmp	r5, #0
10007e2a:	460c      	mov	r4, r1
10007e2c:	dadc      	bge.n	10007de8 <__kernel_rem_pio2f+0x448>
10007e2e:	eddf 7a7f 	vldr	s15, [pc, #508]	@ 1000802c <__kernel_rem_pio2f+0x68c>
10007e32:	e7ec      	b.n	10007e0e <__kernel_rem_pio2f+0x46e>
10007e34:	9968      	ldr	r1, [sp, #416]	@ 0x1a0
10007e36:	2902      	cmp	r1, #2
10007e38:	dc1c      	bgt.n	10007e74 <__kernel_rem_pio2f+0x4d4>
10007e3a:	2900      	cmp	r1, #0
10007e3c:	f300 808b 	bgt.w	10007f56 <__kernel_rem_pio2f+0x5b6>
10007e40:	d10f      	bne.n	10007e62 <__kernel_rem_pio2f+0x4c2>
10007e42:	ab32      	add	r3, sp, #200	@ 0xc8
10007e44:	eddf 7a79 	vldr	s15, [pc, #484]	@ 1000802c <__kernel_rem_pio2f+0x68c>
10007e48:	449c      	add	ip, r3
10007e4a:	ed3c 7a01 	vldmdb	ip!, {s14}
10007e4e:	4563      	cmp	r3, ip
10007e50:	ee77 7a87 	vadd.f32	s15, s15, s14
10007e54:	d1f9      	bne.n	10007e4a <__kernel_rem_pio2f+0x4aa>
10007e56:	b10a      	cbz	r2, 10007e5c <__kernel_rem_pio2f+0x4bc>
10007e58:	eef1 7a67 	vneg.f32	s15, s15
10007e5c:	9b06      	ldr	r3, [sp, #24]
10007e5e:	edc3 7a00 	vstr	s15, [r3]
10007e62:	ee19 3a90 	vmov	r3, s19
10007e66:	f003 0007 	and.w	r0, r3, #7
10007e6a:	b05b      	add	sp, #364	@ 0x16c
10007e6c:	ecbd 8b04 	vpop	{d8-d9}
10007e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10007e74:	9968      	ldr	r1, [sp, #416]	@ 0x1a0
10007e76:	2903      	cmp	r1, #3
10007e78:	d1f3      	bne.n	10007e62 <__kernel_rem_pio2f+0x4c2>
10007e7a:	f1bb 0f00 	cmp.w	fp, #0
10007e7e:	f000 80ca 	beq.w	10008016 <__kernel_rem_pio2f+0x676>
10007e82:	ac32      	add	r4, sp, #200	@ 0xc8
10007e84:	ed13 7a28 	vldr	s14, [r3, #-160]	@ 0xffffff60
10007e88:	eb04 018b 	add.w	r1, r4, fp, lsl #2
10007e8c:	f10b 4380 	add.w	r3, fp, #1073741824	@ 0x40000000
10007e90:	ed71 7a01 	vldmdb	r1!, {s15}
10007e94:	eef0 6a47 	vmov.f32	s13, s14
10007e98:	ee37 7a27 	vadd.f32	s14, s14, s15
10007e9c:	428c      	cmp	r4, r1
10007e9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
10007ea2:	ed81 7a00 	vstr	s14, [r1]
10007ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
10007eaa:	edc1 7a01 	vstr	s15, [r1, #4]
10007eae:	d1ef      	bne.n	10007e90 <__kernel_rem_pio2f+0x4f0>
10007eb0:	f1bb 0f01 	cmp.w	fp, #1
10007eb4:	f340 80af 	ble.w	10008016 <__kernel_rem_pio2f+0x676>
10007eb8:	f500 71b4 	add.w	r1, r0, #360	@ 0x168
10007ebc:	eb0d 0001 	add.w	r0, sp, r1
10007ec0:	ed10 7a28 	vldr	s14, [r0, #-160]	@ 0xffffff60
10007ec4:	0099      	lsls	r1, r3, #2
10007ec6:	a833      	add	r0, sp, #204	@ 0xcc
10007ec8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
10007ecc:	ed73 7a01 	vldmdb	r3!, {s15}
10007ed0:	eef0 6a47 	vmov.f32	s13, s14
10007ed4:	ee37 7a27 	vadd.f32	s14, s14, s15
10007ed8:	4298      	cmp	r0, r3
10007eda:	ee77 7ac7 	vsub.f32	s15, s15, s14
10007ede:	ed83 7a00 	vstr	s14, [r3]
10007ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
10007ee6:	edc3 7a01 	vstr	s15, [r3, #4]
10007eea:	d1ef      	bne.n	10007ecc <__kernel_rem_pio2f+0x52c>
10007eec:	1d0b      	adds	r3, r1, #4
10007eee:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 1000802c <__kernel_rem_pio2f+0x68c>
10007ef2:	4423      	add	r3, r4
10007ef4:	3408      	adds	r4, #8
10007ef6:	ed33 7a01 	vldmdb	r3!, {s14}
10007efa:	429c      	cmp	r4, r3
10007efc:	ee77 7a87 	vadd.f32	s15, s15, s14
10007f00:	d1f9      	bne.n	10007ef6 <__kernel_rem_pio2f+0x556>
10007f02:	2a00      	cmp	r2, #0
10007f04:	d155      	bne.n	10007fb2 <__kernel_rem_pio2f+0x612>
10007f06:	9906      	ldr	r1, [sp, #24]
10007f08:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
10007f0a:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
10007f0c:	600a      	str	r2, [r1, #0]
10007f0e:	604b      	str	r3, [r1, #4]
10007f10:	edc1 7a02 	vstr	s15, [r1, #8]
10007f14:	e7a5      	b.n	10007e62 <__kernel_rem_pio2f+0x4c2>
10007f16:	1e5d      	subs	r5, r3, #1
10007f18:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
10007f1c:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
10007f20:	f847 1025 	str.w	r1, [r7, r5, lsl #2]
10007f24:	e6b5      	b.n	10007c92 <__kernel_rem_pio2f+0x2f2>
10007f26:	2308      	movs	r3, #8
10007f28:	9307      	str	r3, [sp, #28]
10007f2a:	2300      	movs	r3, #0
10007f2c:	9302      	str	r3, [sp, #8]
10007f2e:	e552      	b.n	100079d6 <__kernel_rem_pio2f+0x36>
10007f30:	ee19 2a90 	vmov	r2, s19
10007f34:	2b00      	cmp	r3, #0
10007f36:	f102 0201 	add.w	r2, r2, #1
10007f3a:	ee09 2a90 	vmov	s19, r2
10007f3e:	bfc8      	it	gt
10007f40:	2202      	movgt	r2, #2
10007f42:	f73f ae66 	bgt.w	10007c12 <__kernel_rem_pio2f+0x272>
10007f46:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
10007f4a:	ee37 8ac8 	vsub.f32	s16, s15, s16
10007f4e:	2202      	movs	r2, #2
10007f50:	e5f1      	b.n	10007b36 <__kernel_rem_pio2f+0x196>
10007f52:	2000      	movs	r0, #0
10007f54:	e68c      	b.n	10007c70 <__kernel_rem_pio2f+0x2d0>
10007f56:	ab32      	add	r3, sp, #200	@ 0xc8
10007f58:	eddf 7a34 	vldr	s15, [pc, #208]	@ 1000802c <__kernel_rem_pio2f+0x68c>
10007f5c:	eb03 0686 	add.w	r6, r3, r6, lsl #2
10007f60:	ed36 7a01 	vldmdb	r6!, {s14}
10007f64:	42b3      	cmp	r3, r6
10007f66:	ee77 7a87 	vadd.f32	s15, s15, s14
10007f6a:	d1f9      	bne.n	10007f60 <__kernel_rem_pio2f+0x5c0>
10007f6c:	ed9d 7a32 	vldr	s14, [sp, #200]	@ 0xc8
10007f70:	bb8a      	cbnz	r2, 10007fd6 <__kernel_rem_pio2f+0x636>
10007f72:	9b06      	ldr	r3, [sp, #24]
10007f74:	f1bb 0f00 	cmp.w	fp, #0
10007f78:	edc3 7a00 	vstr	s15, [r3]
10007f7c:	ee77 7a67 	vsub.f32	s15, s14, s15
10007f80:	dd0b      	ble.n	10007f9a <__kernel_rem_pio2f+0x5fa>
10007f82:	a933      	add	r1, sp, #204	@ 0xcc
10007f84:	2301      	movs	r3, #1
10007f86:	ecb1 7a01 	vldmia	r1!, {s14}
10007f8a:	3301      	adds	r3, #1
10007f8c:	459b      	cmp	fp, r3
10007f8e:	ee77 7a87 	vadd.f32	s15, s15, s14
10007f92:	daf8      	bge.n	10007f86 <__kernel_rem_pio2f+0x5e6>
10007f94:	b10a      	cbz	r2, 10007f9a <__kernel_rem_pio2f+0x5fa>
10007f96:	eef1 7a67 	vneg.f32	s15, s15
10007f9a:	9b06      	ldr	r3, [sp, #24]
10007f9c:	edc3 7a01 	vstr	s15, [r3, #4]
10007fa0:	e75f      	b.n	10007e62 <__kernel_rem_pio2f+0x4c2>
10007fa2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
10007fa6:	469b      	mov	fp, r3
10007fa8:	ee17 1a90 	vmov	r1, s15
10007fac:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
10007fb0:	e6eb      	b.n	10007d8a <__kernel_rem_pio2f+0x3ea>
10007fb2:	eddd 6a32 	vldr	s13, [sp, #200]	@ 0xc8
10007fb6:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
10007fba:	9b06      	ldr	r3, [sp, #24]
10007fbc:	eef1 6a66 	vneg.f32	s13, s13
10007fc0:	eeb1 7a47 	vneg.f32	s14, s14
10007fc4:	eef1 7a67 	vneg.f32	s15, s15
10007fc8:	edc3 6a00 	vstr	s13, [r3]
10007fcc:	ed83 7a01 	vstr	s14, [r3, #4]
10007fd0:	edc3 7a02 	vstr	s15, [r3, #8]
10007fd4:	e745      	b.n	10007e62 <__kernel_rem_pio2f+0x4c2>
10007fd6:	9b06      	ldr	r3, [sp, #24]
10007fd8:	eef1 6a67 	vneg.f32	s13, s15
10007fdc:	f1bb 0f00 	cmp.w	fp, #0
10007fe0:	ee77 7a67 	vsub.f32	s15, s14, s15
10007fe4:	edc3 6a00 	vstr	s13, [r3]
10007fe8:	dccb      	bgt.n	10007f82 <__kernel_rem_pio2f+0x5e2>
10007fea:	e7d4      	b.n	10007f96 <__kernel_rem_pio2f+0x5f6>
10007fec:	9b68      	ldr	r3, [sp, #416]	@ 0x1a0
10007fee:	2b02      	cmp	r3, #2
10007ff0:	dc0d      	bgt.n	1000800e <__kernel_rem_pio2f+0x66e>
10007ff2:	2b00      	cmp	r3, #0
10007ff4:	dc14      	bgt.n	10008020 <__kernel_rem_pio2f+0x680>
10007ff6:	f47f af34 	bne.w	10007e62 <__kernel_rem_pio2f+0x4c2>
10007ffa:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 1000802c <__kernel_rem_pio2f+0x68c>
10007ffe:	2a00      	cmp	r2, #0
10008000:	f43f af2c 	beq.w	10007e5c <__kernel_rem_pio2f+0x4bc>
10008004:	e728      	b.n	10007e58 <__kernel_rem_pio2f+0x4b8>
10008006:	9b03      	ldr	r3, [sp, #12]
10008008:	ea4f 0c83 	mov.w	ip, r3, lsl #2
1000800c:	e528      	b.n	10007a60 <__kernel_rem_pio2f+0xc0>
1000800e:	9b68      	ldr	r3, [sp, #416]	@ 0x1a0
10008010:	2b03      	cmp	r3, #3
10008012:	f47f af26 	bne.w	10007e62 <__kernel_rem_pio2f+0x4c2>
10008016:	eddf 7a05 	vldr	s15, [pc, #20]	@ 1000802c <__kernel_rem_pio2f+0x68c>
1000801a:	2a00      	cmp	r2, #0
1000801c:	d1c9      	bne.n	10007fb2 <__kernel_rem_pio2f+0x612>
1000801e:	e772      	b.n	10007f06 <__kernel_rem_pio2f+0x566>
10008020:	eddf 7a02 	vldr	s15, [pc, #8]	@ 1000802c <__kernel_rem_pio2f+0x68c>
10008024:	e7a2      	b.n	10007f6c <__kernel_rem_pio2f+0x5cc>
10008026:	bf00      	nop
10008028:	10016bc8 	.word	0x10016bc8
1000802c:	00000000 	.word	0x00000000

10008030 <scalbnf>:
10008030:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
10008034:	4603      	mov	r3, r0
10008036:	d044      	beq.n	100080c2 <scalbnf+0x92>
10008038:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
1000803c:	d242      	bcs.n	100080c4 <scalbnf+0x94>
1000803e:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
10008042:	d123      	bne.n	1000808c <scalbnf+0x5c>
10008044:	ee07 0a10 	vmov	s14, r0
10008048:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 100080f8 <scalbnf+0xc8>
1000804c:	4b2b      	ldr	r3, [pc, #172]	@ (100080fc <scalbnf+0xcc>)
1000804e:	ee67 7a27 	vmul.f32	s15, s14, s15
10008052:	4299      	cmp	r1, r3
10008054:	ee17 0a90 	vmov	r0, s15
10008058:	db3b      	blt.n	100080d2 <scalbnf+0xa2>
1000805a:	f24c 3c50 	movw	ip, #50000	@ 0xc350
1000805e:	f3c0 52c7 	ubfx	r2, r0, #23, #8
10008062:	4561      	cmp	r1, ip
10008064:	ee17 3a90 	vmov	r3, s15
10008068:	f1a2 0219 	sub.w	r2, r2, #25
1000806c:	dd14      	ble.n	10008098 <scalbnf+0x68>
1000806e:	eddf 7a24 	vldr	s15, [pc, #144]	@ 10008100 <scalbnf+0xd0>
10008072:	eddf 6a24 	vldr	s13, [pc, #144]	@ 10008104 <scalbnf+0xd4>
10008076:	2800      	cmp	r0, #0
10008078:	eeb0 7a67 	vmov.f32	s14, s15
1000807c:	bfb8      	it	lt
1000807e:	eef0 7a66 	vmovlt.f32	s15, s13
10008082:	ee67 7a87 	vmul.f32	s15, s15, s14
10008086:	ee17 0a90 	vmov	r0, s15
1000808a:	4770      	bx	lr
1000808c:	f24c 3c50 	movw	ip, #50000	@ 0xc350
10008090:	4561      	cmp	r1, ip
10008092:	ea4f 52d2 	mov.w	r2, r2, lsr #23
10008096:	dcea      	bgt.n	1000806e <scalbnf+0x3e>
10008098:	440a      	add	r2, r1
1000809a:	2afe      	cmp	r2, #254	@ 0xfe
1000809c:	dce7      	bgt.n	1000806e <scalbnf+0x3e>
1000809e:	2a00      	cmp	r2, #0
100080a0:	dc20      	bgt.n	100080e4 <scalbnf+0xb4>
100080a2:	f112 0f16 	cmn.w	r2, #22
100080a6:	db22      	blt.n	100080ee <scalbnf+0xbe>
100080a8:	3219      	adds	r2, #25
100080aa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
100080ae:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
100080b2:	eddf 7a15 	vldr	s15, [pc, #84]	@ 10008108 <scalbnf+0xd8>
100080b6:	ee07 3a10 	vmov	s14, r3
100080ba:	ee67 7a27 	vmul.f32	s15, s14, s15
100080be:	ee17 0a90 	vmov	r0, s15
100080c2:	4770      	bx	lr
100080c4:	ee07 0a90 	vmov	s15, r0
100080c8:	ee77 7aa7 	vadd.f32	s15, s15, s15
100080cc:	ee17 0a90 	vmov	r0, s15
100080d0:	4770      	bx	lr
100080d2:	ee07 0a10 	vmov	s14, r0
100080d6:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 1000810c <scalbnf+0xdc>
100080da:	ee67 7a27 	vmul.f32	s15, s14, s15
100080de:	ee17 0a90 	vmov	r0, s15
100080e2:	4770      	bx	lr
100080e4:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
100080e8:	ea43 50c2 	orr.w	r0, r3, r2, lsl #23
100080ec:	4770      	bx	lr
100080ee:	eddf 7a07 	vldr	s15, [pc, #28]	@ 1000810c <scalbnf+0xdc>
100080f2:	eddf 6a07 	vldr	s13, [pc, #28]	@ 10008110 <scalbnf+0xe0>
100080f6:	e7be      	b.n	10008076 <scalbnf+0x46>
100080f8:	4c000000 	.word	0x4c000000
100080fc:	ffff3cb0 	.word	0xffff3cb0
10008100:	7149f2ca 	.word	0x7149f2ca
10008104:	f149f2ca 	.word	0xf149f2ca
10008108:	33000000 	.word	0x33000000
1000810c:	0da24260 	.word	0x0da24260
10008110:	8da24260 	.word	0x8da24260

10008114 <floorf>:
10008114:	f3c0 53c7 	ubfx	r3, r0, #23, #8
10008118:	3b7f      	subs	r3, #127	@ 0x7f
1000811a:	2b16      	cmp	r3, #22
1000811c:	ee07 0a90 	vmov	s15, r0
10008120:	f020 4100 	bic.w	r1, r0, #2147483648	@ 0x80000000
10008124:	dc28      	bgt.n	10008178 <floorf+0x64>
10008126:	2b00      	cmp	r3, #0
10008128:	db16      	blt.n	10008158 <floorf+0x44>
1000812a:	491c      	ldr	r1, [pc, #112]	@ (1000819c <floorf+0x88>)
1000812c:	4119      	asrs	r1, r3
1000812e:	4208      	tst	r0, r1
10008130:	d01f      	beq.n	10008172 <floorf+0x5e>
10008132:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 100081a0 <floorf+0x8c>
10008136:	ee37 7a87 	vadd.f32	s14, s15, s14
1000813a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
1000813e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
10008142:	dd16      	ble.n	10008172 <floorf+0x5e>
10008144:	2800      	cmp	r0, #0
10008146:	da04      	bge.n	10008152 <floorf+0x3e>
10008148:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
1000814c:	fa42 f303 	asr.w	r3, r2, r3
10008150:	4418      	add	r0, r3
10008152:	ea20 0001 	bic.w	r0, r0, r1
10008156:	4770      	bx	lr
10008158:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 100081a0 <floorf+0x8c>
1000815c:	ee37 7a87 	vadd.f32	s14, s15, s14
10008160:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
10008164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
10008168:	dd03      	ble.n	10008172 <floorf+0x5e>
1000816a:	2800      	cmp	r0, #0
1000816c:	db0c      	blt.n	10008188 <floorf+0x74>
1000816e:	2000      	movs	r0, #0
10008170:	4770      	bx	lr
10008172:	ee17 0a90 	vmov	r0, s15
10008176:	4770      	bx	lr
10008178:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
1000817c:	d3f9      	bcc.n	10008172 <floorf+0x5e>
1000817e:	ee77 7aa7 	vadd.f32	s15, s15, s15
10008182:	ee17 0a90 	vmov	r0, s15
10008186:	4770      	bx	lr
10008188:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
1000818c:	2900      	cmp	r1, #0
1000818e:	bf14      	ite	ne
10008190:	ee17 0a10 	vmovne	r0, s14
10008194:	ee17 0a90 	vmoveq	r0, s15
10008198:	4770      	bx	lr
1000819a:	bf00      	nop
1000819c:	007fffff 	.word	0x007fffff
100081a0:	7149f2ca 	.word	0x7149f2ca

100081a4 <__aeabi_drsub>:
100081a4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
100081a8:	e002      	b.n	100081b0 <__adddf3>
100081aa:	bf00      	nop

100081ac <__aeabi_dsub>:
100081ac:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

100081b0 <__adddf3>:
100081b0:	b530      	push	{r4, r5, lr}
100081b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
100081b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
100081ba:	ea94 0f05 	teq	r4, r5
100081be:	bf08      	it	eq
100081c0:	ea90 0f02 	teqeq	r0, r2
100081c4:	bf1f      	itttt	ne
100081c6:	ea54 0c00 	orrsne.w	ip, r4, r0
100081ca:	ea55 0c02 	orrsne.w	ip, r5, r2
100081ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
100081d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
100081d6:	f000 80e2 	beq.w	1000839e <__adddf3+0x1ee>
100081da:	ea4f 5454 	mov.w	r4, r4, lsr #21
100081de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
100081e2:	bfb8      	it	lt
100081e4:	426d      	neglt	r5, r5
100081e6:	dd0c      	ble.n	10008202 <__adddf3+0x52>
100081e8:	442c      	add	r4, r5
100081ea:	ea80 0202 	eor.w	r2, r0, r2
100081ee:	ea81 0303 	eor.w	r3, r1, r3
100081f2:	ea82 0000 	eor.w	r0, r2, r0
100081f6:	ea83 0101 	eor.w	r1, r3, r1
100081fa:	ea80 0202 	eor.w	r2, r0, r2
100081fe:	ea81 0303 	eor.w	r3, r1, r3
10008202:	2d36      	cmp	r5, #54	@ 0x36
10008204:	bf88      	it	hi
10008206:	bd30      	pophi	{r4, r5, pc}
10008208:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
1000820c:	ea4f 3101 	mov.w	r1, r1, lsl #12
10008210:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
10008214:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
10008218:	d002      	beq.n	10008220 <__adddf3+0x70>
1000821a:	4240      	negs	r0, r0
1000821c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
10008220:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
10008224:	ea4f 3303 	mov.w	r3, r3, lsl #12
10008228:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1000822c:	d002      	beq.n	10008234 <__adddf3+0x84>
1000822e:	4252      	negs	r2, r2
10008230:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
10008234:	ea94 0f05 	teq	r4, r5
10008238:	f000 80a7 	beq.w	1000838a <__adddf3+0x1da>
1000823c:	f1a4 0401 	sub.w	r4, r4, #1
10008240:	f1d5 0e20 	rsbs	lr, r5, #32
10008244:	db0d      	blt.n	10008262 <__adddf3+0xb2>
10008246:	fa02 fc0e 	lsl.w	ip, r2, lr
1000824a:	fa22 f205 	lsr.w	r2, r2, r5
1000824e:	1880      	adds	r0, r0, r2
10008250:	f141 0100 	adc.w	r1, r1, #0
10008254:	fa03 f20e 	lsl.w	r2, r3, lr
10008258:	1880      	adds	r0, r0, r2
1000825a:	fa43 f305 	asr.w	r3, r3, r5
1000825e:	4159      	adcs	r1, r3
10008260:	e00e      	b.n	10008280 <__adddf3+0xd0>
10008262:	f1a5 0520 	sub.w	r5, r5, #32
10008266:	f10e 0e20 	add.w	lr, lr, #32
1000826a:	2a01      	cmp	r2, #1
1000826c:	fa03 fc0e 	lsl.w	ip, r3, lr
10008270:	bf28      	it	cs
10008272:	f04c 0c02 	orrcs.w	ip, ip, #2
10008276:	fa43 f305 	asr.w	r3, r3, r5
1000827a:	18c0      	adds	r0, r0, r3
1000827c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
10008280:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
10008284:	d507      	bpl.n	10008296 <__adddf3+0xe6>
10008286:	f04f 0e00 	mov.w	lr, #0
1000828a:	f1dc 0c00 	rsbs	ip, ip, #0
1000828e:	eb7e 0000 	sbcs.w	r0, lr, r0
10008292:	eb6e 0101 	sbc.w	r1, lr, r1
10008296:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
1000829a:	d31b      	bcc.n	100082d4 <__adddf3+0x124>
1000829c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
100082a0:	d30c      	bcc.n	100082bc <__adddf3+0x10c>
100082a2:	0849      	lsrs	r1, r1, #1
100082a4:	ea5f 0030 	movs.w	r0, r0, rrx
100082a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
100082ac:	f104 0401 	add.w	r4, r4, #1
100082b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
100082b4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
100082b8:	f080 809a 	bcs.w	100083f0 <__adddf3+0x240>
100082bc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
100082c0:	bf08      	it	eq
100082c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
100082c6:	f150 0000 	adcs.w	r0, r0, #0
100082ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
100082ce:	ea41 0105 	orr.w	r1, r1, r5
100082d2:	bd30      	pop	{r4, r5, pc}
100082d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
100082d8:	4140      	adcs	r0, r0
100082da:	eb41 0101 	adc.w	r1, r1, r1
100082de:	3c01      	subs	r4, #1
100082e0:	bf28      	it	cs
100082e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
100082e6:	d2e9      	bcs.n	100082bc <__adddf3+0x10c>
100082e8:	f091 0f00 	teq	r1, #0
100082ec:	bf04      	itt	eq
100082ee:	4601      	moveq	r1, r0
100082f0:	2000      	moveq	r0, #0
100082f2:	fab1 f381 	clz	r3, r1
100082f6:	bf08      	it	eq
100082f8:	3320      	addeq	r3, #32
100082fa:	f1a3 030b 	sub.w	r3, r3, #11
100082fe:	f1b3 0220 	subs.w	r2, r3, #32
10008302:	da0c      	bge.n	1000831e <__adddf3+0x16e>
10008304:	320c      	adds	r2, #12
10008306:	dd08      	ble.n	1000831a <__adddf3+0x16a>
10008308:	f102 0c14 	add.w	ip, r2, #20
1000830c:	f1c2 020c 	rsb	r2, r2, #12
10008310:	fa01 f00c 	lsl.w	r0, r1, ip
10008314:	fa21 f102 	lsr.w	r1, r1, r2
10008318:	e00c      	b.n	10008334 <__adddf3+0x184>
1000831a:	f102 0214 	add.w	r2, r2, #20
1000831e:	bfd8      	it	le
10008320:	f1c2 0c20 	rsble	ip, r2, #32
10008324:	fa01 f102 	lsl.w	r1, r1, r2
10008328:	fa20 fc0c 	lsr.w	ip, r0, ip
1000832c:	bfdc      	itt	le
1000832e:	ea41 010c 	orrle.w	r1, r1, ip
10008332:	4090      	lslle	r0, r2
10008334:	1ae4      	subs	r4, r4, r3
10008336:	bfa2      	ittt	ge
10008338:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1000833c:	4329      	orrge	r1, r5
1000833e:	bd30      	popge	{r4, r5, pc}
10008340:	ea6f 0404 	mvn.w	r4, r4
10008344:	3c1f      	subs	r4, #31
10008346:	da1c      	bge.n	10008382 <__adddf3+0x1d2>
10008348:	340c      	adds	r4, #12
1000834a:	dc0e      	bgt.n	1000836a <__adddf3+0x1ba>
1000834c:	f104 0414 	add.w	r4, r4, #20
10008350:	f1c4 0220 	rsb	r2, r4, #32
10008354:	fa20 f004 	lsr.w	r0, r0, r4
10008358:	fa01 f302 	lsl.w	r3, r1, r2
1000835c:	ea40 0003 	orr.w	r0, r0, r3
10008360:	fa21 f304 	lsr.w	r3, r1, r4
10008364:	ea45 0103 	orr.w	r1, r5, r3
10008368:	bd30      	pop	{r4, r5, pc}
1000836a:	f1c4 040c 	rsb	r4, r4, #12
1000836e:	f1c4 0220 	rsb	r2, r4, #32
10008372:	fa20 f002 	lsr.w	r0, r0, r2
10008376:	fa01 f304 	lsl.w	r3, r1, r4
1000837a:	ea40 0003 	orr.w	r0, r0, r3
1000837e:	4629      	mov	r1, r5
10008380:	bd30      	pop	{r4, r5, pc}
10008382:	fa21 f004 	lsr.w	r0, r1, r4
10008386:	4629      	mov	r1, r5
10008388:	bd30      	pop	{r4, r5, pc}
1000838a:	f094 0f00 	teq	r4, #0
1000838e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
10008392:	bf06      	itte	eq
10008394:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
10008398:	3401      	addeq	r4, #1
1000839a:	3d01      	subne	r5, #1
1000839c:	e74e      	b.n	1000823c <__adddf3+0x8c>
1000839e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
100083a2:	bf18      	it	ne
100083a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
100083a8:	d029      	beq.n	100083fe <__adddf3+0x24e>
100083aa:	ea94 0f05 	teq	r4, r5
100083ae:	bf08      	it	eq
100083b0:	ea90 0f02 	teqeq	r0, r2
100083b4:	d005      	beq.n	100083c2 <__adddf3+0x212>
100083b6:	ea54 0c00 	orrs.w	ip, r4, r0
100083ba:	bf04      	itt	eq
100083bc:	4619      	moveq	r1, r3
100083be:	4610      	moveq	r0, r2
100083c0:	bd30      	pop	{r4, r5, pc}
100083c2:	ea91 0f03 	teq	r1, r3
100083c6:	bf1e      	ittt	ne
100083c8:	2100      	movne	r1, #0
100083ca:	2000      	movne	r0, #0
100083cc:	bd30      	popne	{r4, r5, pc}
100083ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
100083d2:	d105      	bne.n	100083e0 <__adddf3+0x230>
100083d4:	0040      	lsls	r0, r0, #1
100083d6:	4149      	adcs	r1, r1
100083d8:	bf28      	it	cs
100083da:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
100083de:	bd30      	pop	{r4, r5, pc}
100083e0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
100083e4:	bf3c      	itt	cc
100083e6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
100083ea:	bd30      	popcc	{r4, r5, pc}
100083ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
100083f0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
100083f4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
100083f8:	f04f 0000 	mov.w	r0, #0
100083fc:	bd30      	pop	{r4, r5, pc}
100083fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
10008402:	bf1a      	itte	ne
10008404:	4619      	movne	r1, r3
10008406:	4610      	movne	r0, r2
10008408:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1000840c:	bf1c      	itt	ne
1000840e:	460b      	movne	r3, r1
10008410:	4602      	movne	r2, r0
10008412:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
10008416:	bf06      	itte	eq
10008418:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1000841c:	ea91 0f03 	teqeq	r1, r3
10008420:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
10008424:	bd30      	pop	{r4, r5, pc}
10008426:	bf00      	nop

10008428 <__aeabi_ui2d>:
10008428:	f090 0f00 	teq	r0, #0
1000842c:	bf04      	itt	eq
1000842e:	2100      	moveq	r1, #0
10008430:	4770      	bxeq	lr
10008432:	b530      	push	{r4, r5, lr}
10008434:	f44f 6480 	mov.w	r4, #1024	@ 0x400
10008438:	f104 0432 	add.w	r4, r4, #50	@ 0x32
1000843c:	f04f 0500 	mov.w	r5, #0
10008440:	f04f 0100 	mov.w	r1, #0
10008444:	e750      	b.n	100082e8 <__adddf3+0x138>
10008446:	bf00      	nop

10008448 <__aeabi_i2d>:
10008448:	f090 0f00 	teq	r0, #0
1000844c:	bf04      	itt	eq
1000844e:	2100      	moveq	r1, #0
10008450:	4770      	bxeq	lr
10008452:	b530      	push	{r4, r5, lr}
10008454:	f44f 6480 	mov.w	r4, #1024	@ 0x400
10008458:	f104 0432 	add.w	r4, r4, #50	@ 0x32
1000845c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
10008460:	bf48      	it	mi
10008462:	4240      	negmi	r0, r0
10008464:	f04f 0100 	mov.w	r1, #0
10008468:	e73e      	b.n	100082e8 <__adddf3+0x138>
1000846a:	bf00      	nop

1000846c <__aeabi_f2d>:
1000846c:	0042      	lsls	r2, r0, #1
1000846e:	ea4f 01e2 	mov.w	r1, r2, asr #3
10008472:	ea4f 0131 	mov.w	r1, r1, rrx
10008476:	ea4f 7002 	mov.w	r0, r2, lsl #28
1000847a:	bf1f      	itttt	ne
1000847c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
10008480:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
10008484:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
10008488:	4770      	bxne	lr
1000848a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
1000848e:	bf08      	it	eq
10008490:	4770      	bxeq	lr
10008492:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
10008496:	bf04      	itt	eq
10008498:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
1000849c:	4770      	bxeq	lr
1000849e:	b530      	push	{r4, r5, lr}
100084a0:	f44f 7460 	mov.w	r4, #896	@ 0x380
100084a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
100084a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
100084ac:	e71c      	b.n	100082e8 <__adddf3+0x138>
100084ae:	bf00      	nop

100084b0 <__aeabi_ul2d>:
100084b0:	ea50 0201 	orrs.w	r2, r0, r1
100084b4:	bf08      	it	eq
100084b6:	4770      	bxeq	lr
100084b8:	b530      	push	{r4, r5, lr}
100084ba:	f04f 0500 	mov.w	r5, #0
100084be:	e00a      	b.n	100084d6 <__aeabi_l2d+0x16>

100084c0 <__aeabi_l2d>:
100084c0:	ea50 0201 	orrs.w	r2, r0, r1
100084c4:	bf08      	it	eq
100084c6:	4770      	bxeq	lr
100084c8:	b530      	push	{r4, r5, lr}
100084ca:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
100084ce:	d502      	bpl.n	100084d6 <__aeabi_l2d+0x16>
100084d0:	4240      	negs	r0, r0
100084d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
100084d6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
100084da:	f104 0432 	add.w	r4, r4, #50	@ 0x32
100084de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
100084e2:	f43f aed8 	beq.w	10008296 <__adddf3+0xe6>
100084e6:	f04f 0203 	mov.w	r2, #3
100084ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
100084ee:	bf18      	it	ne
100084f0:	3203      	addne	r2, #3
100084f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
100084f6:	bf18      	it	ne
100084f8:	3203      	addne	r2, #3
100084fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
100084fe:	f1c2 0320 	rsb	r3, r2, #32
10008502:	fa00 fc03 	lsl.w	ip, r0, r3
10008506:	fa20 f002 	lsr.w	r0, r0, r2
1000850a:	fa01 fe03 	lsl.w	lr, r1, r3
1000850e:	ea40 000e 	orr.w	r0, r0, lr
10008512:	fa21 f102 	lsr.w	r1, r1, r2
10008516:	4414      	add	r4, r2
10008518:	e6bd      	b.n	10008296 <__adddf3+0xe6>
1000851a:	bf00      	nop

1000851c <__aeabi_dmul>:
1000851c:	b570      	push	{r4, r5, r6, lr}
1000851e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
10008522:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
10008526:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1000852a:	bf1d      	ittte	ne
1000852c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
10008530:	ea94 0f0c 	teqne	r4, ip
10008534:	ea95 0f0c 	teqne	r5, ip
10008538:	f000 f8de 	bleq	100086f8 <__aeabi_dmul+0x1dc>
1000853c:	442c      	add	r4, r5
1000853e:	ea81 0603 	eor.w	r6, r1, r3
10008542:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
10008546:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
1000854a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
1000854e:	bf18      	it	ne
10008550:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
10008554:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
10008558:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
1000855c:	d038      	beq.n	100085d0 <__aeabi_dmul+0xb4>
1000855e:	fba0 ce02 	umull	ip, lr, r0, r2
10008562:	f04f 0500 	mov.w	r5, #0
10008566:	fbe1 e502 	umlal	lr, r5, r1, r2
1000856a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
1000856e:	fbe0 e503 	umlal	lr, r5, r0, r3
10008572:	f04f 0600 	mov.w	r6, #0
10008576:	fbe1 5603 	umlal	r5, r6, r1, r3
1000857a:	f09c 0f00 	teq	ip, #0
1000857e:	bf18      	it	ne
10008580:	f04e 0e01 	orrne.w	lr, lr, #1
10008584:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
10008588:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
1000858c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
10008590:	d204      	bcs.n	1000859c <__aeabi_dmul+0x80>
10008592:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
10008596:	416d      	adcs	r5, r5
10008598:	eb46 0606 	adc.w	r6, r6, r6
1000859c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
100085a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
100085a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
100085a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
100085ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
100085b0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
100085b4:	bf88      	it	hi
100085b6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
100085ba:	d81e      	bhi.n	100085fa <__aeabi_dmul+0xde>
100085bc:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
100085c0:	bf08      	it	eq
100085c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
100085c6:	f150 0000 	adcs.w	r0, r0, #0
100085ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
100085ce:	bd70      	pop	{r4, r5, r6, pc}
100085d0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
100085d4:	ea46 0101 	orr.w	r1, r6, r1
100085d8:	ea40 0002 	orr.w	r0, r0, r2
100085dc:	ea81 0103 	eor.w	r1, r1, r3
100085e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
100085e4:	bfc2      	ittt	gt
100085e6:	ebd4 050c 	rsbsgt	r5, r4, ip
100085ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
100085ee:	bd70      	popgt	{r4, r5, r6, pc}
100085f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
100085f4:	f04f 0e00 	mov.w	lr, #0
100085f8:	3c01      	subs	r4, #1
100085fa:	f300 80ab 	bgt.w	10008754 <__aeabi_dmul+0x238>
100085fe:	f114 0f36 	cmn.w	r4, #54	@ 0x36
10008602:	bfde      	ittt	le
10008604:	2000      	movle	r0, #0
10008606:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
1000860a:	bd70      	pople	{r4, r5, r6, pc}
1000860c:	f1c4 0400 	rsb	r4, r4, #0
10008610:	3c20      	subs	r4, #32
10008612:	da35      	bge.n	10008680 <__aeabi_dmul+0x164>
10008614:	340c      	adds	r4, #12
10008616:	dc1b      	bgt.n	10008650 <__aeabi_dmul+0x134>
10008618:	f104 0414 	add.w	r4, r4, #20
1000861c:	f1c4 0520 	rsb	r5, r4, #32
10008620:	fa00 f305 	lsl.w	r3, r0, r5
10008624:	fa20 f004 	lsr.w	r0, r0, r4
10008628:	fa01 f205 	lsl.w	r2, r1, r5
1000862c:	ea40 0002 	orr.w	r0, r0, r2
10008630:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
10008634:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
10008638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1000863c:	fa21 f604 	lsr.w	r6, r1, r4
10008640:	eb42 0106 	adc.w	r1, r2, r6
10008644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
10008648:	bf08      	it	eq
1000864a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1000864e:	bd70      	pop	{r4, r5, r6, pc}
10008650:	f1c4 040c 	rsb	r4, r4, #12
10008654:	f1c4 0520 	rsb	r5, r4, #32
10008658:	fa00 f304 	lsl.w	r3, r0, r4
1000865c:	fa20 f005 	lsr.w	r0, r0, r5
10008660:	fa01 f204 	lsl.w	r2, r1, r4
10008664:	ea40 0002 	orr.w	r0, r0, r2
10008668:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
1000866c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
10008670:	f141 0100 	adc.w	r1, r1, #0
10008674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
10008678:	bf08      	it	eq
1000867a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1000867e:	bd70      	pop	{r4, r5, r6, pc}
10008680:	f1c4 0520 	rsb	r5, r4, #32
10008684:	fa00 f205 	lsl.w	r2, r0, r5
10008688:	ea4e 0e02 	orr.w	lr, lr, r2
1000868c:	fa20 f304 	lsr.w	r3, r0, r4
10008690:	fa01 f205 	lsl.w	r2, r1, r5
10008694:	ea43 0302 	orr.w	r3, r3, r2
10008698:	fa21 f004 	lsr.w	r0, r1, r4
1000869c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
100086a0:	fa21 f204 	lsr.w	r2, r1, r4
100086a4:	ea20 0002 	bic.w	r0, r0, r2
100086a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
100086ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
100086b0:	bf08      	it	eq
100086b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
100086b6:	bd70      	pop	{r4, r5, r6, pc}
100086b8:	f094 0f00 	teq	r4, #0
100086bc:	d10f      	bne.n	100086de <__aeabi_dmul+0x1c2>
100086be:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
100086c2:	0040      	lsls	r0, r0, #1
100086c4:	eb41 0101 	adc.w	r1, r1, r1
100086c8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
100086cc:	bf08      	it	eq
100086ce:	3c01      	subeq	r4, #1
100086d0:	d0f7      	beq.n	100086c2 <__aeabi_dmul+0x1a6>
100086d2:	ea41 0106 	orr.w	r1, r1, r6
100086d6:	f095 0f00 	teq	r5, #0
100086da:	bf18      	it	ne
100086dc:	4770      	bxne	lr
100086de:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
100086e2:	0052      	lsls	r2, r2, #1
100086e4:	eb43 0303 	adc.w	r3, r3, r3
100086e8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
100086ec:	bf08      	it	eq
100086ee:	3d01      	subeq	r5, #1
100086f0:	d0f7      	beq.n	100086e2 <__aeabi_dmul+0x1c6>
100086f2:	ea43 0306 	orr.w	r3, r3, r6
100086f6:	4770      	bx	lr
100086f8:	ea94 0f0c 	teq	r4, ip
100086fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
10008700:	bf18      	it	ne
10008702:	ea95 0f0c 	teqne	r5, ip
10008706:	d00c      	beq.n	10008722 <__aeabi_dmul+0x206>
10008708:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1000870c:	bf18      	it	ne
1000870e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
10008712:	d1d1      	bne.n	100086b8 <__aeabi_dmul+0x19c>
10008714:	ea81 0103 	eor.w	r1, r1, r3
10008718:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
1000871c:	f04f 0000 	mov.w	r0, #0
10008720:	bd70      	pop	{r4, r5, r6, pc}
10008722:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
10008726:	bf06      	itte	eq
10008728:	4610      	moveq	r0, r2
1000872a:	4619      	moveq	r1, r3
1000872c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
10008730:	d019      	beq.n	10008766 <__aeabi_dmul+0x24a>
10008732:	ea94 0f0c 	teq	r4, ip
10008736:	d102      	bne.n	1000873e <__aeabi_dmul+0x222>
10008738:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
1000873c:	d113      	bne.n	10008766 <__aeabi_dmul+0x24a>
1000873e:	ea95 0f0c 	teq	r5, ip
10008742:	d105      	bne.n	10008750 <__aeabi_dmul+0x234>
10008744:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
10008748:	bf1c      	itt	ne
1000874a:	4610      	movne	r0, r2
1000874c:	4619      	movne	r1, r3
1000874e:	d10a      	bne.n	10008766 <__aeabi_dmul+0x24a>
10008750:	ea81 0103 	eor.w	r1, r1, r3
10008754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
10008758:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
1000875c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
10008760:	f04f 0000 	mov.w	r0, #0
10008764:	bd70      	pop	{r4, r5, r6, pc}
10008766:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
1000876a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
1000876e:	bd70      	pop	{r4, r5, r6, pc}

10008770 <__aeabi_ddiv>:
10008770:	b570      	push	{r4, r5, r6, lr}
10008772:	f04f 0cff 	mov.w	ip, #255	@ 0xff
10008776:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
1000877a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1000877e:	bf1d      	ittte	ne
10008780:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
10008784:	ea94 0f0c 	teqne	r4, ip
10008788:	ea95 0f0c 	teqne	r5, ip
1000878c:	f000 f8a7 	bleq	100088de <__aeabi_ddiv+0x16e>
10008790:	eba4 0405 	sub.w	r4, r4, r5
10008794:	ea81 0e03 	eor.w	lr, r1, r3
10008798:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1000879c:	ea4f 3101 	mov.w	r1, r1, lsl #12
100087a0:	f000 8088 	beq.w	100088b4 <__aeabi_ddiv+0x144>
100087a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
100087a8:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
100087ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
100087b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
100087b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
100087b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
100087bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
100087c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
100087c4:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
100087c8:	429d      	cmp	r5, r3
100087ca:	bf08      	it	eq
100087cc:	4296      	cmpeq	r6, r2
100087ce:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
100087d2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
100087d6:	d202      	bcs.n	100087de <__aeabi_ddiv+0x6e>
100087d8:	085b      	lsrs	r3, r3, #1
100087da:	ea4f 0232 	mov.w	r2, r2, rrx
100087de:	1ab6      	subs	r6, r6, r2
100087e0:	eb65 0503 	sbc.w	r5, r5, r3
100087e4:	085b      	lsrs	r3, r3, #1
100087e6:	ea4f 0232 	mov.w	r2, r2, rrx
100087ea:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
100087ee:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
100087f2:	ebb6 0e02 	subs.w	lr, r6, r2
100087f6:	eb75 0e03 	sbcs.w	lr, r5, r3
100087fa:	bf22      	ittt	cs
100087fc:	1ab6      	subcs	r6, r6, r2
100087fe:	4675      	movcs	r5, lr
10008800:	ea40 000c 	orrcs.w	r0, r0, ip
10008804:	085b      	lsrs	r3, r3, #1
10008806:	ea4f 0232 	mov.w	r2, r2, rrx
1000880a:	ebb6 0e02 	subs.w	lr, r6, r2
1000880e:	eb75 0e03 	sbcs.w	lr, r5, r3
10008812:	bf22      	ittt	cs
10008814:	1ab6      	subcs	r6, r6, r2
10008816:	4675      	movcs	r5, lr
10008818:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
1000881c:	085b      	lsrs	r3, r3, #1
1000881e:	ea4f 0232 	mov.w	r2, r2, rrx
10008822:	ebb6 0e02 	subs.w	lr, r6, r2
10008826:	eb75 0e03 	sbcs.w	lr, r5, r3
1000882a:	bf22      	ittt	cs
1000882c:	1ab6      	subcs	r6, r6, r2
1000882e:	4675      	movcs	r5, lr
10008830:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
10008834:	085b      	lsrs	r3, r3, #1
10008836:	ea4f 0232 	mov.w	r2, r2, rrx
1000883a:	ebb6 0e02 	subs.w	lr, r6, r2
1000883e:	eb75 0e03 	sbcs.w	lr, r5, r3
10008842:	bf22      	ittt	cs
10008844:	1ab6      	subcs	r6, r6, r2
10008846:	4675      	movcs	r5, lr
10008848:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
1000884c:	ea55 0e06 	orrs.w	lr, r5, r6
10008850:	d018      	beq.n	10008884 <__aeabi_ddiv+0x114>
10008852:	ea4f 1505 	mov.w	r5, r5, lsl #4
10008856:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
1000885a:	ea4f 1606 	mov.w	r6, r6, lsl #4
1000885e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
10008862:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
10008866:	ea4f 02c2 	mov.w	r2, r2, lsl #3
1000886a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
1000886e:	d1c0      	bne.n	100087f2 <__aeabi_ddiv+0x82>
10008870:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
10008874:	d10b      	bne.n	1000888e <__aeabi_ddiv+0x11e>
10008876:	ea41 0100 	orr.w	r1, r1, r0
1000887a:	f04f 0000 	mov.w	r0, #0
1000887e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
10008882:	e7b6      	b.n	100087f2 <__aeabi_ddiv+0x82>
10008884:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
10008888:	bf04      	itt	eq
1000888a:	4301      	orreq	r1, r0
1000888c:	2000      	moveq	r0, #0
1000888e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
10008892:	bf88      	it	hi
10008894:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
10008898:	f63f aeaf 	bhi.w	100085fa <__aeabi_dmul+0xde>
1000889c:	ebb5 0c03 	subs.w	ip, r5, r3
100088a0:	bf04      	itt	eq
100088a2:	ebb6 0c02 	subseq.w	ip, r6, r2
100088a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
100088aa:	f150 0000 	adcs.w	r0, r0, #0
100088ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
100088b2:	bd70      	pop	{r4, r5, r6, pc}
100088b4:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
100088b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
100088bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
100088c0:	bfc2      	ittt	gt
100088c2:	ebd4 050c 	rsbsgt	r5, r4, ip
100088c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
100088ca:	bd70      	popgt	{r4, r5, r6, pc}
100088cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
100088d0:	f04f 0e00 	mov.w	lr, #0
100088d4:	3c01      	subs	r4, #1
100088d6:	e690      	b.n	100085fa <__aeabi_dmul+0xde>
100088d8:	ea45 0e06 	orr.w	lr, r5, r6
100088dc:	e68d      	b.n	100085fa <__aeabi_dmul+0xde>
100088de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
100088e2:	ea94 0f0c 	teq	r4, ip
100088e6:	bf08      	it	eq
100088e8:	ea95 0f0c 	teqeq	r5, ip
100088ec:	f43f af3b 	beq.w	10008766 <__aeabi_dmul+0x24a>
100088f0:	ea94 0f0c 	teq	r4, ip
100088f4:	d10a      	bne.n	1000890c <__aeabi_ddiv+0x19c>
100088f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
100088fa:	f47f af34 	bne.w	10008766 <__aeabi_dmul+0x24a>
100088fe:	ea95 0f0c 	teq	r5, ip
10008902:	f47f af25 	bne.w	10008750 <__aeabi_dmul+0x234>
10008906:	4610      	mov	r0, r2
10008908:	4619      	mov	r1, r3
1000890a:	e72c      	b.n	10008766 <__aeabi_dmul+0x24a>
1000890c:	ea95 0f0c 	teq	r5, ip
10008910:	d106      	bne.n	10008920 <__aeabi_ddiv+0x1b0>
10008912:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
10008916:	f43f aefd 	beq.w	10008714 <__aeabi_dmul+0x1f8>
1000891a:	4610      	mov	r0, r2
1000891c:	4619      	mov	r1, r3
1000891e:	e722      	b.n	10008766 <__aeabi_dmul+0x24a>
10008920:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
10008924:	bf18      	it	ne
10008926:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1000892a:	f47f aec5 	bne.w	100086b8 <__aeabi_dmul+0x19c>
1000892e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
10008932:	f47f af0d 	bne.w	10008750 <__aeabi_dmul+0x234>
10008936:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
1000893a:	f47f aeeb 	bne.w	10008714 <__aeabi_dmul+0x1f8>
1000893e:	e712      	b.n	10008766 <__aeabi_dmul+0x24a>

10008940 <__gedf2>:
10008940:	f04f 3cff 	mov.w	ip, #4294967295
10008944:	e006      	b.n	10008954 <__cmpdf2+0x4>
10008946:	bf00      	nop

10008948 <__ledf2>:
10008948:	f04f 0c01 	mov.w	ip, #1
1000894c:	e002      	b.n	10008954 <__cmpdf2+0x4>
1000894e:	bf00      	nop

10008950 <__cmpdf2>:
10008950:	f04f 0c01 	mov.w	ip, #1
10008954:	f84d cd04 	str.w	ip, [sp, #-4]!
10008958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1000895c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
10008960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
10008964:	bf18      	it	ne
10008966:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
1000896a:	d01b      	beq.n	100089a4 <__cmpdf2+0x54>
1000896c:	b001      	add	sp, #4
1000896e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
10008972:	bf0c      	ite	eq
10008974:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
10008978:	ea91 0f03 	teqne	r1, r3
1000897c:	bf02      	ittt	eq
1000897e:	ea90 0f02 	teqeq	r0, r2
10008982:	2000      	moveq	r0, #0
10008984:	4770      	bxeq	lr
10008986:	f110 0f00 	cmn.w	r0, #0
1000898a:	ea91 0f03 	teq	r1, r3
1000898e:	bf58      	it	pl
10008990:	4299      	cmppl	r1, r3
10008992:	bf08      	it	eq
10008994:	4290      	cmpeq	r0, r2
10008996:	bf2c      	ite	cs
10008998:	17d8      	asrcs	r0, r3, #31
1000899a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
1000899e:	f040 0001 	orr.w	r0, r0, #1
100089a2:	4770      	bx	lr
100089a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
100089a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
100089ac:	d102      	bne.n	100089b4 <__cmpdf2+0x64>
100089ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
100089b2:	d107      	bne.n	100089c4 <__cmpdf2+0x74>
100089b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
100089b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
100089bc:	d1d6      	bne.n	1000896c <__cmpdf2+0x1c>
100089be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
100089c2:	d0d3      	beq.n	1000896c <__cmpdf2+0x1c>
100089c4:	f85d 0b04 	ldr.w	r0, [sp], #4
100089c8:	4770      	bx	lr
100089ca:	bf00      	nop

100089cc <__aeabi_cdrcmple>:
100089cc:	4684      	mov	ip, r0
100089ce:	4610      	mov	r0, r2
100089d0:	4662      	mov	r2, ip
100089d2:	468c      	mov	ip, r1
100089d4:	4619      	mov	r1, r3
100089d6:	4663      	mov	r3, ip
100089d8:	e000      	b.n	100089dc <__aeabi_cdcmpeq>
100089da:	bf00      	nop

100089dc <__aeabi_cdcmpeq>:
100089dc:	b501      	push	{r0, lr}
100089de:	f7ff ffb7 	bl	10008950 <__cmpdf2>
100089e2:	2800      	cmp	r0, #0
100089e4:	bf48      	it	mi
100089e6:	f110 0f00 	cmnmi.w	r0, #0
100089ea:	bd01      	pop	{r0, pc}

100089ec <__aeabi_dcmpeq>:
100089ec:	f84d ed08 	str.w	lr, [sp, #-8]!
100089f0:	f7ff fff4 	bl	100089dc <__aeabi_cdcmpeq>
100089f4:	bf0c      	ite	eq
100089f6:	2001      	moveq	r0, #1
100089f8:	2000      	movne	r0, #0
100089fa:	f85d fb08 	ldr.w	pc, [sp], #8
100089fe:	bf00      	nop

10008a00 <__aeabi_dcmplt>:
10008a00:	f84d ed08 	str.w	lr, [sp, #-8]!
10008a04:	f7ff ffea 	bl	100089dc <__aeabi_cdcmpeq>
10008a08:	bf34      	ite	cc
10008a0a:	2001      	movcc	r0, #1
10008a0c:	2000      	movcs	r0, #0
10008a0e:	f85d fb08 	ldr.w	pc, [sp], #8
10008a12:	bf00      	nop

10008a14 <__aeabi_dcmple>:
10008a14:	f84d ed08 	str.w	lr, [sp, #-8]!
10008a18:	f7ff ffe0 	bl	100089dc <__aeabi_cdcmpeq>
10008a1c:	bf94      	ite	ls
10008a1e:	2001      	movls	r0, #1
10008a20:	2000      	movhi	r0, #0
10008a22:	f85d fb08 	ldr.w	pc, [sp], #8
10008a26:	bf00      	nop

10008a28 <__aeabi_dcmpge>:
10008a28:	f84d ed08 	str.w	lr, [sp, #-8]!
10008a2c:	f7ff ffce 	bl	100089cc <__aeabi_cdrcmple>
10008a30:	bf94      	ite	ls
10008a32:	2001      	movls	r0, #1
10008a34:	2000      	movhi	r0, #0
10008a36:	f85d fb08 	ldr.w	pc, [sp], #8
10008a3a:	bf00      	nop

10008a3c <__aeabi_dcmpgt>:
10008a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
10008a40:	f7ff ffc4 	bl	100089cc <__aeabi_cdrcmple>
10008a44:	bf34      	ite	cc
10008a46:	2001      	movcc	r0, #1
10008a48:	2000      	movcs	r0, #0
10008a4a:	f85d fb08 	ldr.w	pc, [sp], #8
10008a4e:	bf00      	nop

10008a50 <__aeabi_dcmpun>:
10008a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
10008a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
10008a58:	d102      	bne.n	10008a60 <__aeabi_dcmpun+0x10>
10008a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
10008a5e:	d10a      	bne.n	10008a76 <__aeabi_dcmpun+0x26>
10008a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
10008a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
10008a68:	d102      	bne.n	10008a70 <__aeabi_dcmpun+0x20>
10008a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
10008a6e:	d102      	bne.n	10008a76 <__aeabi_dcmpun+0x26>
10008a70:	f04f 0000 	mov.w	r0, #0
10008a74:	4770      	bx	lr
10008a76:	f04f 0001 	mov.w	r0, #1
10008a7a:	4770      	bx	lr

10008a7c <__aeabi_d2iz>:
10008a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
10008a80:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
10008a84:	d215      	bcs.n	10008ab2 <__aeabi_d2iz+0x36>
10008a86:	d511      	bpl.n	10008aac <__aeabi_d2iz+0x30>
10008a88:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
10008a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
10008a90:	d912      	bls.n	10008ab8 <__aeabi_d2iz+0x3c>
10008a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
10008a96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
10008a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
10008a9e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
10008aa2:	fa23 f002 	lsr.w	r0, r3, r2
10008aa6:	bf18      	it	ne
10008aa8:	4240      	negne	r0, r0
10008aaa:	4770      	bx	lr
10008aac:	f04f 0000 	mov.w	r0, #0
10008ab0:	4770      	bx	lr
10008ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
10008ab6:	d105      	bne.n	10008ac4 <__aeabi_d2iz+0x48>
10008ab8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
10008abc:	bf08      	it	eq
10008abe:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
10008ac2:	4770      	bx	lr
10008ac4:	f04f 0000 	mov.w	r0, #0
10008ac8:	4770      	bx	lr
10008aca:	bf00      	nop

10008acc <__aeabi_d2f>:
10008acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
10008ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
10008ad4:	bf24      	itt	cs
10008ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
10008ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
10008ade:	d90d      	bls.n	10008afc <__aeabi_d2f+0x30>
10008ae0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
10008ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
10008ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
10008aec:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
10008af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
10008af4:	bf08      	it	eq
10008af6:	f020 0001 	biceq.w	r0, r0, #1
10008afa:	4770      	bx	lr
10008afc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
10008b00:	d121      	bne.n	10008b46 <__aeabi_d2f+0x7a>
10008b02:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
10008b06:	bfbc      	itt	lt
10008b08:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
10008b0c:	4770      	bxlt	lr
10008b0e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
10008b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
10008b16:	f1c2 0218 	rsb	r2, r2, #24
10008b1a:	f1c2 0c20 	rsb	ip, r2, #32
10008b1e:	fa10 f30c 	lsls.w	r3, r0, ip
10008b22:	fa20 f002 	lsr.w	r0, r0, r2
10008b26:	bf18      	it	ne
10008b28:	f040 0001 	orrne.w	r0, r0, #1
10008b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
10008b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
10008b34:	fa03 fc0c 	lsl.w	ip, r3, ip
10008b38:	ea40 000c 	orr.w	r0, r0, ip
10008b3c:	fa23 f302 	lsr.w	r3, r3, r2
10008b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
10008b44:	e7cc      	b.n	10008ae0 <__aeabi_d2f+0x14>
10008b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
10008b4a:	d107      	bne.n	10008b5c <__aeabi_d2f+0x90>
10008b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
10008b50:	bf1e      	ittt	ne
10008b52:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
10008b56:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
10008b5a:	4770      	bxne	lr
10008b5c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
10008b60:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
10008b64:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
10008b68:	4770      	bx	lr
10008b6a:	bf00      	nop

10008b6c <__aeabi_uldivmod>:
10008b6c:	b953      	cbnz	r3, 10008b84 <__aeabi_uldivmod+0x18>
10008b6e:	b94a      	cbnz	r2, 10008b84 <__aeabi_uldivmod+0x18>
10008b70:	2900      	cmp	r1, #0
10008b72:	bf08      	it	eq
10008b74:	2800      	cmpeq	r0, #0
10008b76:	bf1c      	itt	ne
10008b78:	f04f 31ff 	movne.w	r1, #4294967295
10008b7c:	f04f 30ff 	movne.w	r0, #4294967295
10008b80:	f000 b970 	b.w	10008e64 <__aeabi_idiv0>
10008b84:	f1ad 0c08 	sub.w	ip, sp, #8
10008b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
10008b8c:	f000 f806 	bl	10008b9c <__udivmoddi4>
10008b90:	f8dd e004 	ldr.w	lr, [sp, #4]
10008b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
10008b98:	b004      	add	sp, #16
10008b9a:	4770      	bx	lr

10008b9c <__udivmoddi4>:
10008b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
10008ba0:	9e08      	ldr	r6, [sp, #32]
10008ba2:	460d      	mov	r5, r1
10008ba4:	4604      	mov	r4, r0
10008ba6:	460f      	mov	r7, r1
10008ba8:	2b00      	cmp	r3, #0
10008baa:	d14a      	bne.n	10008c42 <__udivmoddi4+0xa6>
10008bac:	428a      	cmp	r2, r1
10008bae:	4694      	mov	ip, r2
10008bb0:	d965      	bls.n	10008c7e <__udivmoddi4+0xe2>
10008bb2:	fab2 f382 	clz	r3, r2
10008bb6:	b143      	cbz	r3, 10008bca <__udivmoddi4+0x2e>
10008bb8:	fa02 fc03 	lsl.w	ip, r2, r3
10008bbc:	f1c3 0220 	rsb	r2, r3, #32
10008bc0:	409f      	lsls	r7, r3
10008bc2:	fa20 f202 	lsr.w	r2, r0, r2
10008bc6:	4317      	orrs	r7, r2
10008bc8:	409c      	lsls	r4, r3
10008bca:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
10008bce:	fa1f f58c 	uxth.w	r5, ip
10008bd2:	fbb7 f1fe 	udiv	r1, r7, lr
10008bd6:	0c22      	lsrs	r2, r4, #16
10008bd8:	fb0e 7711 	mls	r7, lr, r1, r7
10008bdc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
10008be0:	fb01 f005 	mul.w	r0, r1, r5
10008be4:	4290      	cmp	r0, r2
10008be6:	d90a      	bls.n	10008bfe <__udivmoddi4+0x62>
10008be8:	eb1c 0202 	adds.w	r2, ip, r2
10008bec:	f101 37ff 	add.w	r7, r1, #4294967295
10008bf0:	f080 811c 	bcs.w	10008e2c <__udivmoddi4+0x290>
10008bf4:	4290      	cmp	r0, r2
10008bf6:	f240 8119 	bls.w	10008e2c <__udivmoddi4+0x290>
10008bfa:	3902      	subs	r1, #2
10008bfc:	4462      	add	r2, ip
10008bfe:	1a12      	subs	r2, r2, r0
10008c00:	b2a4      	uxth	r4, r4
10008c02:	fbb2 f0fe 	udiv	r0, r2, lr
10008c06:	fb0e 2210 	mls	r2, lr, r0, r2
10008c0a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
10008c0e:	fb00 f505 	mul.w	r5, r0, r5
10008c12:	42a5      	cmp	r5, r4
10008c14:	d90a      	bls.n	10008c2c <__udivmoddi4+0x90>
10008c16:	eb1c 0404 	adds.w	r4, ip, r4
10008c1a:	f100 32ff 	add.w	r2, r0, #4294967295
10008c1e:	f080 8107 	bcs.w	10008e30 <__udivmoddi4+0x294>
10008c22:	42a5      	cmp	r5, r4
10008c24:	f240 8104 	bls.w	10008e30 <__udivmoddi4+0x294>
10008c28:	4464      	add	r4, ip
10008c2a:	3802      	subs	r0, #2
10008c2c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
10008c30:	1b64      	subs	r4, r4, r5
10008c32:	2100      	movs	r1, #0
10008c34:	b11e      	cbz	r6, 10008c3e <__udivmoddi4+0xa2>
10008c36:	40dc      	lsrs	r4, r3
10008c38:	2300      	movs	r3, #0
10008c3a:	e9c6 4300 	strd	r4, r3, [r6]
10008c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
10008c42:	428b      	cmp	r3, r1
10008c44:	d908      	bls.n	10008c58 <__udivmoddi4+0xbc>
10008c46:	2e00      	cmp	r6, #0
10008c48:	f000 80ed 	beq.w	10008e26 <__udivmoddi4+0x28a>
10008c4c:	2100      	movs	r1, #0
10008c4e:	e9c6 0500 	strd	r0, r5, [r6]
10008c52:	4608      	mov	r0, r1
10008c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
10008c58:	fab3 f183 	clz	r1, r3
10008c5c:	2900      	cmp	r1, #0
10008c5e:	d149      	bne.n	10008cf4 <__udivmoddi4+0x158>
10008c60:	42ab      	cmp	r3, r5
10008c62:	d302      	bcc.n	10008c6a <__udivmoddi4+0xce>
10008c64:	4282      	cmp	r2, r0
10008c66:	f200 80f8 	bhi.w	10008e5a <__udivmoddi4+0x2be>
10008c6a:	1a84      	subs	r4, r0, r2
10008c6c:	eb65 0203 	sbc.w	r2, r5, r3
10008c70:	2001      	movs	r0, #1
10008c72:	4617      	mov	r7, r2
10008c74:	2e00      	cmp	r6, #0
10008c76:	d0e2      	beq.n	10008c3e <__udivmoddi4+0xa2>
10008c78:	e9c6 4700 	strd	r4, r7, [r6]
10008c7c:	e7df      	b.n	10008c3e <__udivmoddi4+0xa2>
10008c7e:	b902      	cbnz	r2, 10008c82 <__udivmoddi4+0xe6>
10008c80:	deff      	udf	#255	@ 0xff
10008c82:	fab2 f382 	clz	r3, r2
10008c86:	2b00      	cmp	r3, #0
10008c88:	f040 8090 	bne.w	10008dac <__udivmoddi4+0x210>
10008c8c:	1a8a      	subs	r2, r1, r2
10008c8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
10008c92:	fa1f fe8c 	uxth.w	lr, ip
10008c96:	2101      	movs	r1, #1
10008c98:	fbb2 f5f7 	udiv	r5, r2, r7
10008c9c:	fb07 2015 	mls	r0, r7, r5, r2
10008ca0:	0c22      	lsrs	r2, r4, #16
10008ca2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
10008ca6:	fb0e f005 	mul.w	r0, lr, r5
10008caa:	4290      	cmp	r0, r2
10008cac:	d908      	bls.n	10008cc0 <__udivmoddi4+0x124>
10008cae:	eb1c 0202 	adds.w	r2, ip, r2
10008cb2:	f105 38ff 	add.w	r8, r5, #4294967295
10008cb6:	d202      	bcs.n	10008cbe <__udivmoddi4+0x122>
10008cb8:	4290      	cmp	r0, r2
10008cba:	f200 80cb 	bhi.w	10008e54 <__udivmoddi4+0x2b8>
10008cbe:	4645      	mov	r5, r8
10008cc0:	1a12      	subs	r2, r2, r0
10008cc2:	b2a4      	uxth	r4, r4
10008cc4:	fbb2 f0f7 	udiv	r0, r2, r7
10008cc8:	fb07 2210 	mls	r2, r7, r0, r2
10008ccc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
10008cd0:	fb0e fe00 	mul.w	lr, lr, r0
10008cd4:	45a6      	cmp	lr, r4
10008cd6:	d908      	bls.n	10008cea <__udivmoddi4+0x14e>
10008cd8:	eb1c 0404 	adds.w	r4, ip, r4
10008cdc:	f100 32ff 	add.w	r2, r0, #4294967295
10008ce0:	d202      	bcs.n	10008ce8 <__udivmoddi4+0x14c>
10008ce2:	45a6      	cmp	lr, r4
10008ce4:	f200 80bb 	bhi.w	10008e5e <__udivmoddi4+0x2c2>
10008ce8:	4610      	mov	r0, r2
10008cea:	eba4 040e 	sub.w	r4, r4, lr
10008cee:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
10008cf2:	e79f      	b.n	10008c34 <__udivmoddi4+0x98>
10008cf4:	f1c1 0720 	rsb	r7, r1, #32
10008cf8:	408b      	lsls	r3, r1
10008cfa:	fa22 fc07 	lsr.w	ip, r2, r7
10008cfe:	ea4c 0c03 	orr.w	ip, ip, r3
10008d02:	fa05 f401 	lsl.w	r4, r5, r1
10008d06:	fa20 f307 	lsr.w	r3, r0, r7
10008d0a:	40fd      	lsrs	r5, r7
10008d0c:	ea4f 491c 	mov.w	r9, ip, lsr #16
10008d10:	4323      	orrs	r3, r4
10008d12:	fbb5 f8f9 	udiv	r8, r5, r9
10008d16:	fa1f fe8c 	uxth.w	lr, ip
10008d1a:	fb09 5518 	mls	r5, r9, r8, r5
10008d1e:	0c1c      	lsrs	r4, r3, #16
10008d20:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
10008d24:	fb08 f50e 	mul.w	r5, r8, lr
10008d28:	42a5      	cmp	r5, r4
10008d2a:	fa02 f201 	lsl.w	r2, r2, r1
10008d2e:	fa00 f001 	lsl.w	r0, r0, r1
10008d32:	d90b      	bls.n	10008d4c <__udivmoddi4+0x1b0>
10008d34:	eb1c 0404 	adds.w	r4, ip, r4
10008d38:	f108 3aff 	add.w	sl, r8, #4294967295
10008d3c:	f080 8088 	bcs.w	10008e50 <__udivmoddi4+0x2b4>
10008d40:	42a5      	cmp	r5, r4
10008d42:	f240 8085 	bls.w	10008e50 <__udivmoddi4+0x2b4>
10008d46:	f1a8 0802 	sub.w	r8, r8, #2
10008d4a:	4464      	add	r4, ip
10008d4c:	1b64      	subs	r4, r4, r5
10008d4e:	b29d      	uxth	r5, r3
10008d50:	fbb4 f3f9 	udiv	r3, r4, r9
10008d54:	fb09 4413 	mls	r4, r9, r3, r4
10008d58:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
10008d5c:	fb03 fe0e 	mul.w	lr, r3, lr
10008d60:	45a6      	cmp	lr, r4
10008d62:	d908      	bls.n	10008d76 <__udivmoddi4+0x1da>
10008d64:	eb1c 0404 	adds.w	r4, ip, r4
10008d68:	f103 35ff 	add.w	r5, r3, #4294967295
10008d6c:	d26c      	bcs.n	10008e48 <__udivmoddi4+0x2ac>
10008d6e:	45a6      	cmp	lr, r4
10008d70:	d96a      	bls.n	10008e48 <__udivmoddi4+0x2ac>
10008d72:	3b02      	subs	r3, #2
10008d74:	4464      	add	r4, ip
10008d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
10008d7a:	fba3 9502 	umull	r9, r5, r3, r2
10008d7e:	eba4 040e 	sub.w	r4, r4, lr
10008d82:	42ac      	cmp	r4, r5
10008d84:	46c8      	mov	r8, r9
10008d86:	46ae      	mov	lr, r5
10008d88:	d356      	bcc.n	10008e38 <__udivmoddi4+0x29c>
10008d8a:	d053      	beq.n	10008e34 <__udivmoddi4+0x298>
10008d8c:	b156      	cbz	r6, 10008da4 <__udivmoddi4+0x208>
10008d8e:	ebb0 0208 	subs.w	r2, r0, r8
10008d92:	eb64 040e 	sbc.w	r4, r4, lr
10008d96:	fa04 f707 	lsl.w	r7, r4, r7
10008d9a:	40ca      	lsrs	r2, r1
10008d9c:	40cc      	lsrs	r4, r1
10008d9e:	4317      	orrs	r7, r2
10008da0:	e9c6 7400 	strd	r7, r4, [r6]
10008da4:	4618      	mov	r0, r3
10008da6:	2100      	movs	r1, #0
10008da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
10008dac:	f1c3 0120 	rsb	r1, r3, #32
10008db0:	fa02 fc03 	lsl.w	ip, r2, r3
10008db4:	fa20 f201 	lsr.w	r2, r0, r1
10008db8:	fa25 f101 	lsr.w	r1, r5, r1
10008dbc:	409d      	lsls	r5, r3
10008dbe:	432a      	orrs	r2, r5
10008dc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
10008dc4:	fa1f fe8c 	uxth.w	lr, ip
10008dc8:	fbb1 f0f7 	udiv	r0, r1, r7
10008dcc:	fb07 1510 	mls	r5, r7, r0, r1
10008dd0:	0c11      	lsrs	r1, r2, #16
10008dd2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
10008dd6:	fb00 f50e 	mul.w	r5, r0, lr
10008dda:	428d      	cmp	r5, r1
10008ddc:	fa04 f403 	lsl.w	r4, r4, r3
10008de0:	d908      	bls.n	10008df4 <__udivmoddi4+0x258>
10008de2:	eb1c 0101 	adds.w	r1, ip, r1
10008de6:	f100 38ff 	add.w	r8, r0, #4294967295
10008dea:	d22f      	bcs.n	10008e4c <__udivmoddi4+0x2b0>
10008dec:	428d      	cmp	r5, r1
10008dee:	d92d      	bls.n	10008e4c <__udivmoddi4+0x2b0>
10008df0:	3802      	subs	r0, #2
10008df2:	4461      	add	r1, ip
10008df4:	1b49      	subs	r1, r1, r5
10008df6:	b292      	uxth	r2, r2
10008df8:	fbb1 f5f7 	udiv	r5, r1, r7
10008dfc:	fb07 1115 	mls	r1, r7, r5, r1
10008e00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
10008e04:	fb05 f10e 	mul.w	r1, r5, lr
10008e08:	4291      	cmp	r1, r2
10008e0a:	d908      	bls.n	10008e1e <__udivmoddi4+0x282>
10008e0c:	eb1c 0202 	adds.w	r2, ip, r2
10008e10:	f105 38ff 	add.w	r8, r5, #4294967295
10008e14:	d216      	bcs.n	10008e44 <__udivmoddi4+0x2a8>
10008e16:	4291      	cmp	r1, r2
10008e18:	d914      	bls.n	10008e44 <__udivmoddi4+0x2a8>
10008e1a:	3d02      	subs	r5, #2
10008e1c:	4462      	add	r2, ip
10008e1e:	1a52      	subs	r2, r2, r1
10008e20:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
10008e24:	e738      	b.n	10008c98 <__udivmoddi4+0xfc>
10008e26:	4631      	mov	r1, r6
10008e28:	4630      	mov	r0, r6
10008e2a:	e708      	b.n	10008c3e <__udivmoddi4+0xa2>
10008e2c:	4639      	mov	r1, r7
10008e2e:	e6e6      	b.n	10008bfe <__udivmoddi4+0x62>
10008e30:	4610      	mov	r0, r2
10008e32:	e6fb      	b.n	10008c2c <__udivmoddi4+0x90>
10008e34:	4548      	cmp	r0, r9
10008e36:	d2a9      	bcs.n	10008d8c <__udivmoddi4+0x1f0>
10008e38:	ebb9 0802 	subs.w	r8, r9, r2
10008e3c:	eb65 0e0c 	sbc.w	lr, r5, ip
10008e40:	3b01      	subs	r3, #1
10008e42:	e7a3      	b.n	10008d8c <__udivmoddi4+0x1f0>
10008e44:	4645      	mov	r5, r8
10008e46:	e7ea      	b.n	10008e1e <__udivmoddi4+0x282>
10008e48:	462b      	mov	r3, r5
10008e4a:	e794      	b.n	10008d76 <__udivmoddi4+0x1da>
10008e4c:	4640      	mov	r0, r8
10008e4e:	e7d1      	b.n	10008df4 <__udivmoddi4+0x258>
10008e50:	46d0      	mov	r8, sl
10008e52:	e77b      	b.n	10008d4c <__udivmoddi4+0x1b0>
10008e54:	3d02      	subs	r5, #2
10008e56:	4462      	add	r2, ip
10008e58:	e732      	b.n	10008cc0 <__udivmoddi4+0x124>
10008e5a:	4608      	mov	r0, r1
10008e5c:	e70a      	b.n	10008c74 <__udivmoddi4+0xd8>
10008e5e:	4464      	add	r4, ip
10008e60:	3802      	subs	r0, #2
10008e62:	e742      	b.n	10008cea <__udivmoddi4+0x14e>

10008e64 <__aeabi_idiv0>:
10008e64:	4770      	bx	lr
10008e66:	bf00      	nop

10008e68 <malloc>:
10008e68:	4b02      	ldr	r3, [pc, #8]	@ (10008e74 <malloc+0xc>)
10008e6a:	4601      	mov	r1, r0
10008e6c:	6818      	ldr	r0, [r3, #0]
10008e6e:	f000 b82b 	b.w	10008ec8 <_malloc_r>
10008e72:	bf00      	nop
10008e74:	08002398 	.word	0x08002398

10008e78 <free>:
10008e78:	4b02      	ldr	r3, [pc, #8]	@ (10008e84 <free+0xc>)
10008e7a:	4601      	mov	r1, r0
10008e7c:	6818      	ldr	r0, [r3, #0]
10008e7e:	f001 bd99 	b.w	1000a9b4 <_free_r>
10008e82:	bf00      	nop
10008e84:	08002398 	.word	0x08002398

10008e88 <sbrk_aligned>:
10008e88:	b570      	push	{r4, r5, r6, lr}
10008e8a:	4e0e      	ldr	r6, [pc, #56]	@ (10008ec4 <sbrk_aligned+0x3c>)
10008e8c:	460c      	mov	r4, r1
10008e8e:	6831      	ldr	r1, [r6, #0]
10008e90:	4605      	mov	r5, r0
10008e92:	b911      	cbnz	r1, 10008e9a <sbrk_aligned+0x12>
10008e94:	f000 fe50 	bl	10009b38 <_sbrk_r>
10008e98:	6030      	str	r0, [r6, #0]
10008e9a:	4621      	mov	r1, r4
10008e9c:	4628      	mov	r0, r5
10008e9e:	f000 fe4b 	bl	10009b38 <_sbrk_r>
10008ea2:	1c43      	adds	r3, r0, #1
10008ea4:	d00a      	beq.n	10008ebc <sbrk_aligned+0x34>
10008ea6:	1cc4      	adds	r4, r0, #3
10008ea8:	f024 0403 	bic.w	r4, r4, #3
10008eac:	42a0      	cmp	r0, r4
10008eae:	d007      	beq.n	10008ec0 <sbrk_aligned+0x38>
10008eb0:	1a21      	subs	r1, r4, r0
10008eb2:	4628      	mov	r0, r5
10008eb4:	f000 fe40 	bl	10009b38 <_sbrk_r>
10008eb8:	3001      	adds	r0, #1
10008eba:	d101      	bne.n	10008ec0 <sbrk_aligned+0x38>
10008ebc:	f04f 34ff 	mov.w	r4, #4294967295
10008ec0:	4620      	mov	r0, r4
10008ec2:	bd70      	pop	{r4, r5, r6, pc}
10008ec4:	08002e48 	.word	0x08002e48

10008ec8 <_malloc_r>:
10008ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
10008ecc:	1ccd      	adds	r5, r1, #3
10008ece:	f025 0503 	bic.w	r5, r5, #3
10008ed2:	3508      	adds	r5, #8
10008ed4:	2d0c      	cmp	r5, #12
10008ed6:	bf38      	it	cc
10008ed8:	250c      	movcc	r5, #12
10008eda:	2d00      	cmp	r5, #0
10008edc:	4607      	mov	r7, r0
10008ede:	db01      	blt.n	10008ee4 <_malloc_r+0x1c>
10008ee0:	42a9      	cmp	r1, r5
10008ee2:	d905      	bls.n	10008ef0 <_malloc_r+0x28>
10008ee4:	230c      	movs	r3, #12
10008ee6:	603b      	str	r3, [r7, #0]
10008ee8:	2600      	movs	r6, #0
10008eea:	4630      	mov	r0, r6
10008eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
10008ef0:	4e2f      	ldr	r6, [pc, #188]	@ (10008fb0 <_malloc_r+0xe8>)
10008ef2:	f000 f85f 	bl	10008fb4 <__malloc_lock>
10008ef6:	6833      	ldr	r3, [r6, #0]
10008ef8:	461c      	mov	r4, r3
10008efa:	bb44      	cbnz	r4, 10008f4e <_malloc_r+0x86>
10008efc:	4629      	mov	r1, r5
10008efe:	4638      	mov	r0, r7
10008f00:	f7ff ffc2 	bl	10008e88 <sbrk_aligned>
10008f04:	1c43      	adds	r3, r0, #1
10008f06:	4604      	mov	r4, r0
10008f08:	d14f      	bne.n	10008faa <_malloc_r+0xe2>
10008f0a:	6834      	ldr	r4, [r6, #0]
10008f0c:	4626      	mov	r6, r4
10008f0e:	2e00      	cmp	r6, #0
10008f10:	d142      	bne.n	10008f98 <_malloc_r+0xd0>
10008f12:	2c00      	cmp	r4, #0
10008f14:	d043      	beq.n	10008f9e <_malloc_r+0xd6>
10008f16:	6823      	ldr	r3, [r4, #0]
10008f18:	4631      	mov	r1, r6
10008f1a:	4638      	mov	r0, r7
10008f1c:	eb04 0803 	add.w	r8, r4, r3
10008f20:	f000 fe0a 	bl	10009b38 <_sbrk_r>
10008f24:	4580      	cmp	r8, r0
10008f26:	d13a      	bne.n	10008f9e <_malloc_r+0xd6>
10008f28:	6823      	ldr	r3, [r4, #0]
10008f2a:	3503      	adds	r5, #3
10008f2c:	1aed      	subs	r5, r5, r3
10008f2e:	f025 0503 	bic.w	r5, r5, #3
10008f32:	3508      	adds	r5, #8
10008f34:	2d0c      	cmp	r5, #12
10008f36:	bf38      	it	cc
10008f38:	250c      	movcc	r5, #12
10008f3a:	4629      	mov	r1, r5
10008f3c:	4638      	mov	r0, r7
10008f3e:	f7ff ffa3 	bl	10008e88 <sbrk_aligned>
10008f42:	3001      	adds	r0, #1
10008f44:	d02b      	beq.n	10008f9e <_malloc_r+0xd6>
10008f46:	6823      	ldr	r3, [r4, #0]
10008f48:	442b      	add	r3, r5
10008f4a:	6023      	str	r3, [r4, #0]
10008f4c:	e00e      	b.n	10008f6c <_malloc_r+0xa4>
10008f4e:	6822      	ldr	r2, [r4, #0]
10008f50:	1b52      	subs	r2, r2, r5
10008f52:	d41e      	bmi.n	10008f92 <_malloc_r+0xca>
10008f54:	2a0b      	cmp	r2, #11
10008f56:	d916      	bls.n	10008f86 <_malloc_r+0xbe>
10008f58:	1961      	adds	r1, r4, r5
10008f5a:	42a3      	cmp	r3, r4
10008f5c:	6025      	str	r5, [r4, #0]
10008f5e:	bf18      	it	ne
10008f60:	6059      	strne	r1, [r3, #4]
10008f62:	6863      	ldr	r3, [r4, #4]
10008f64:	bf08      	it	eq
10008f66:	6031      	streq	r1, [r6, #0]
10008f68:	5162      	str	r2, [r4, r5]
10008f6a:	604b      	str	r3, [r1, #4]
10008f6c:	4638      	mov	r0, r7
10008f6e:	f104 060b 	add.w	r6, r4, #11
10008f72:	f000 f825 	bl	10008fc0 <__malloc_unlock>
10008f76:	f026 0607 	bic.w	r6, r6, #7
10008f7a:	1d23      	adds	r3, r4, #4
10008f7c:	1af2      	subs	r2, r6, r3
10008f7e:	d0b4      	beq.n	10008eea <_malloc_r+0x22>
10008f80:	1b9b      	subs	r3, r3, r6
10008f82:	50a3      	str	r3, [r4, r2]
10008f84:	e7b1      	b.n	10008eea <_malloc_r+0x22>
10008f86:	6862      	ldr	r2, [r4, #4]
10008f88:	42a3      	cmp	r3, r4
10008f8a:	bf0c      	ite	eq
10008f8c:	6032      	streq	r2, [r6, #0]
10008f8e:	605a      	strne	r2, [r3, #4]
10008f90:	e7ec      	b.n	10008f6c <_malloc_r+0xa4>
10008f92:	4623      	mov	r3, r4
10008f94:	6864      	ldr	r4, [r4, #4]
10008f96:	e7b0      	b.n	10008efa <_malloc_r+0x32>
10008f98:	4634      	mov	r4, r6
10008f9a:	6876      	ldr	r6, [r6, #4]
10008f9c:	e7b7      	b.n	10008f0e <_malloc_r+0x46>
10008f9e:	230c      	movs	r3, #12
10008fa0:	603b      	str	r3, [r7, #0]
10008fa2:	4638      	mov	r0, r7
10008fa4:	f000 f80c 	bl	10008fc0 <__malloc_unlock>
10008fa8:	e79f      	b.n	10008eea <_malloc_r+0x22>
10008faa:	6025      	str	r5, [r4, #0]
10008fac:	e7de      	b.n	10008f6c <_malloc_r+0xa4>
10008fae:	bf00      	nop
10008fb0:	08002e44 	.word	0x08002e44

10008fb4 <__malloc_lock>:
10008fb4:	4801      	ldr	r0, [pc, #4]	@ (10008fbc <__malloc_lock+0x8>)
10008fb6:	f000 be19 	b.w	10009bec <__retarget_lock_acquire_recursive>
10008fba:	bf00      	nop
10008fbc:	08002f8c 	.word	0x08002f8c

10008fc0 <__malloc_unlock>:
10008fc0:	4801      	ldr	r0, [pc, #4]	@ (10008fc8 <__malloc_unlock+0x8>)
10008fc2:	f000 be14 	b.w	10009bee <__retarget_lock_release_recursive>
10008fc6:	bf00      	nop
10008fc8:	08002f8c 	.word	0x08002f8c

10008fcc <__cvt>:
10008fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
10008fd0:	b088      	sub	sp, #32
10008fd2:	2b00      	cmp	r3, #0
10008fd4:	461d      	mov	r5, r3
10008fd6:	4614      	mov	r4, r2
10008fd8:	bfbc      	itt	lt
10008fda:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
10008fde:	4614      	movlt	r4, r2
10008fe0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
10008fe2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
10008fe4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
10008fe8:	bfb6      	itet	lt
10008fea:	461d      	movlt	r5, r3
10008fec:	2300      	movge	r3, #0
10008fee:	232d      	movlt	r3, #45	@ 0x2d
10008ff0:	7013      	strb	r3, [r2, #0]
10008ff2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
10008ff4:	f023 0820 	bic.w	r8, r3, #32
10008ff8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
10008ffc:	d005      	beq.n	1000900a <__cvt+0x3e>
10008ffe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
10009002:	d100      	bne.n	10009006 <__cvt+0x3a>
10009004:	3601      	adds	r6, #1
10009006:	2302      	movs	r3, #2
10009008:	e000      	b.n	1000900c <__cvt+0x40>
1000900a:	2303      	movs	r3, #3
1000900c:	aa07      	add	r2, sp, #28
1000900e:	9204      	str	r2, [sp, #16]
10009010:	aa06      	add	r2, sp, #24
10009012:	e9cd a202 	strd	sl, r2, [sp, #8]
10009016:	e9cd 3600 	strd	r3, r6, [sp]
1000901a:	4622      	mov	r2, r4
1000901c:	462b      	mov	r3, r5
1000901e:	f000 fed7 	bl	10009dd0 <_dtoa_r>
10009022:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
10009026:	4607      	mov	r7, r0
10009028:	d102      	bne.n	10009030 <__cvt+0x64>
1000902a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
1000902c:	07db      	lsls	r3, r3, #31
1000902e:	d522      	bpl.n	10009076 <__cvt+0xaa>
10009030:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
10009034:	eb07 0906 	add.w	r9, r7, r6
10009038:	d110      	bne.n	1000905c <__cvt+0x90>
1000903a:	783b      	ldrb	r3, [r7, #0]
1000903c:	2b30      	cmp	r3, #48	@ 0x30
1000903e:	d10a      	bne.n	10009056 <__cvt+0x8a>
10009040:	2200      	movs	r2, #0
10009042:	2300      	movs	r3, #0
10009044:	4620      	mov	r0, r4
10009046:	4629      	mov	r1, r5
10009048:	f7ff fcd0 	bl	100089ec <__aeabi_dcmpeq>
1000904c:	b918      	cbnz	r0, 10009056 <__cvt+0x8a>
1000904e:	f1c6 0601 	rsb	r6, r6, #1
10009052:	f8ca 6000 	str.w	r6, [sl]
10009056:	f8da 3000 	ldr.w	r3, [sl]
1000905a:	4499      	add	r9, r3
1000905c:	2200      	movs	r2, #0
1000905e:	2300      	movs	r3, #0
10009060:	4620      	mov	r0, r4
10009062:	4629      	mov	r1, r5
10009064:	f7ff fcc2 	bl	100089ec <__aeabi_dcmpeq>
10009068:	b108      	cbz	r0, 1000906e <__cvt+0xa2>
1000906a:	f8cd 901c 	str.w	r9, [sp, #28]
1000906e:	2230      	movs	r2, #48	@ 0x30
10009070:	9b07      	ldr	r3, [sp, #28]
10009072:	454b      	cmp	r3, r9
10009074:	d307      	bcc.n	10009086 <__cvt+0xba>
10009076:	9b07      	ldr	r3, [sp, #28]
10009078:	9a15      	ldr	r2, [sp, #84]	@ 0x54
1000907a:	1bdb      	subs	r3, r3, r7
1000907c:	4638      	mov	r0, r7
1000907e:	6013      	str	r3, [r2, #0]
10009080:	b008      	add	sp, #32
10009082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
10009086:	1c59      	adds	r1, r3, #1
10009088:	9107      	str	r1, [sp, #28]
1000908a:	701a      	strb	r2, [r3, #0]
1000908c:	e7f0      	b.n	10009070 <__cvt+0xa4>

1000908e <__exponent>:
1000908e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10009090:	4603      	mov	r3, r0
10009092:	2900      	cmp	r1, #0
10009094:	bfb8      	it	lt
10009096:	4249      	neglt	r1, r1
10009098:	f803 2b02 	strb.w	r2, [r3], #2
1000909c:	bfb4      	ite	lt
1000909e:	222d      	movlt	r2, #45	@ 0x2d
100090a0:	222b      	movge	r2, #43	@ 0x2b
100090a2:	2909      	cmp	r1, #9
100090a4:	7042      	strb	r2, [r0, #1]
100090a6:	dd2a      	ble.n	100090fe <__exponent+0x70>
100090a8:	f10d 0207 	add.w	r2, sp, #7
100090ac:	4617      	mov	r7, r2
100090ae:	260a      	movs	r6, #10
100090b0:	4694      	mov	ip, r2
100090b2:	fb91 f5f6 	sdiv	r5, r1, r6
100090b6:	fb06 1415 	mls	r4, r6, r5, r1
100090ba:	3430      	adds	r4, #48	@ 0x30
100090bc:	f80c 4c01 	strb.w	r4, [ip, #-1]
100090c0:	460c      	mov	r4, r1
100090c2:	2c63      	cmp	r4, #99	@ 0x63
100090c4:	f102 32ff 	add.w	r2, r2, #4294967295
100090c8:	4629      	mov	r1, r5
100090ca:	dcf1      	bgt.n	100090b0 <__exponent+0x22>
100090cc:	3130      	adds	r1, #48	@ 0x30
100090ce:	f1ac 0402 	sub.w	r4, ip, #2
100090d2:	f802 1c01 	strb.w	r1, [r2, #-1]
100090d6:	1c41      	adds	r1, r0, #1
100090d8:	4622      	mov	r2, r4
100090da:	42ba      	cmp	r2, r7
100090dc:	d30a      	bcc.n	100090f4 <__exponent+0x66>
100090de:	f10d 0209 	add.w	r2, sp, #9
100090e2:	eba2 020c 	sub.w	r2, r2, ip
100090e6:	42bc      	cmp	r4, r7
100090e8:	bf88      	it	hi
100090ea:	2200      	movhi	r2, #0
100090ec:	4413      	add	r3, r2
100090ee:	1a18      	subs	r0, r3, r0
100090f0:	b003      	add	sp, #12
100090f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100090f4:	f812 5b01 	ldrb.w	r5, [r2], #1
100090f8:	f801 5f01 	strb.w	r5, [r1, #1]!
100090fc:	e7ed      	b.n	100090da <__exponent+0x4c>
100090fe:	2330      	movs	r3, #48	@ 0x30
10009100:	3130      	adds	r1, #48	@ 0x30
10009102:	7083      	strb	r3, [r0, #2]
10009104:	70c1      	strb	r1, [r0, #3]
10009106:	1d03      	adds	r3, r0, #4
10009108:	e7f1      	b.n	100090ee <__exponent+0x60>
	...

1000910c <_printf_float>:
1000910c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10009110:	ed2d 8b02 	vpush	{d8}
10009114:	b091      	sub	sp, #68	@ 0x44
10009116:	460c      	mov	r4, r1
10009118:	f8dd 8070 	ldr.w	r8, [sp, #112]	@ 0x70
1000911c:	4616      	mov	r6, r2
1000911e:	461f      	mov	r7, r3
10009120:	4605      	mov	r5, r0
10009122:	f000 fcd1 	bl	10009ac8 <_localeconv_r>
10009126:	f8d0 a000 	ldr.w	sl, [r0]
1000912a:	4650      	mov	r0, sl
1000912c:	f000 fdbe 	bl	10009cac <strlen>
10009130:	2300      	movs	r3, #0
10009132:	930e      	str	r3, [sp, #56]	@ 0x38
10009134:	6823      	ldr	r3, [r4, #0]
10009136:	9309      	str	r3, [sp, #36]	@ 0x24
10009138:	f8d8 3000 	ldr.w	r3, [r8]
1000913c:	f894 b018 	ldrb.w	fp, [r4, #24]
10009140:	3307      	adds	r3, #7
10009142:	f023 0307 	bic.w	r3, r3, #7
10009146:	f103 0208 	add.w	r2, r3, #8
1000914a:	f8c8 2000 	str.w	r2, [r8]
1000914e:	e9d3 8900 	ldrd	r8, r9, [r3]
10009152:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
10009156:	930b      	str	r3, [sp, #44]	@ 0x2c
10009158:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
1000915c:	ee08 0a10 	vmov	s16, r0
10009160:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
10009164:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
10009168:	4b9f      	ldr	r3, [pc, #636]	@ (100093e8 <_printf_float+0x2dc>)
1000916a:	f04f 32ff 	mov.w	r2, #4294967295
1000916e:	f7ff fc6f 	bl	10008a50 <__aeabi_dcmpun>
10009172:	bb88      	cbnz	r0, 100091d8 <_printf_float+0xcc>
10009174:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
10009178:	4b9b      	ldr	r3, [pc, #620]	@ (100093e8 <_printf_float+0x2dc>)
1000917a:	f04f 32ff 	mov.w	r2, #4294967295
1000917e:	f7ff fc49 	bl	10008a14 <__aeabi_dcmple>
10009182:	bb48      	cbnz	r0, 100091d8 <_printf_float+0xcc>
10009184:	2200      	movs	r2, #0
10009186:	2300      	movs	r3, #0
10009188:	4640      	mov	r0, r8
1000918a:	4649      	mov	r1, r9
1000918c:	f7ff fc38 	bl	10008a00 <__aeabi_dcmplt>
10009190:	b110      	cbz	r0, 10009198 <_printf_float+0x8c>
10009192:	232d      	movs	r3, #45	@ 0x2d
10009194:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
10009198:	4a94      	ldr	r2, [pc, #592]	@ (100093ec <_printf_float+0x2e0>)
1000919a:	4b95      	ldr	r3, [pc, #596]	@ (100093f0 <_printf_float+0x2e4>)
1000919c:	f1bb 0f47 	cmp.w	fp, #71	@ 0x47
100091a0:	bf94      	ite	ls
100091a2:	4690      	movls	r8, r2
100091a4:	4698      	movhi	r8, r3
100091a6:	2303      	movs	r3, #3
100091a8:	6123      	str	r3, [r4, #16]
100091aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
100091ac:	f023 0304 	bic.w	r3, r3, #4
100091b0:	6023      	str	r3, [r4, #0]
100091b2:	f04f 0900 	mov.w	r9, #0
100091b6:	9700      	str	r7, [sp, #0]
100091b8:	4633      	mov	r3, r6
100091ba:	aa0f      	add	r2, sp, #60	@ 0x3c
100091bc:	4621      	mov	r1, r4
100091be:	4628      	mov	r0, r5
100091c0:	f000 f9dc 	bl	1000957c <_printf_common>
100091c4:	3001      	adds	r0, #1
100091c6:	f040 8092 	bne.w	100092ee <_printf_float+0x1e2>
100091ca:	f04f 30ff 	mov.w	r0, #4294967295
100091ce:	b011      	add	sp, #68	@ 0x44
100091d0:	ecbd 8b02 	vpop	{d8}
100091d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
100091d8:	4642      	mov	r2, r8
100091da:	464b      	mov	r3, r9
100091dc:	4640      	mov	r0, r8
100091de:	4649      	mov	r1, r9
100091e0:	f7ff fc36 	bl	10008a50 <__aeabi_dcmpun>
100091e4:	b140      	cbz	r0, 100091f8 <_printf_float+0xec>
100091e6:	464b      	mov	r3, r9
100091e8:	2b00      	cmp	r3, #0
100091ea:	bfbc      	itt	lt
100091ec:	232d      	movlt	r3, #45	@ 0x2d
100091ee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
100091f2:	4a80      	ldr	r2, [pc, #512]	@ (100093f4 <_printf_float+0x2e8>)
100091f4:	4b80      	ldr	r3, [pc, #512]	@ (100093f8 <_printf_float+0x2ec>)
100091f6:	e7d1      	b.n	1000919c <_printf_float+0x90>
100091f8:	6863      	ldr	r3, [r4, #4]
100091fa:	1c5a      	adds	r2, r3, #1
100091fc:	f00b 01df 	and.w	r1, fp, #223	@ 0xdf
10009200:	d143      	bne.n	1000928a <_printf_float+0x17e>
10009202:	2306      	movs	r3, #6
10009204:	6063      	str	r3, [r4, #4]
10009206:	2200      	movs	r2, #0
10009208:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1000920a:	9206      	str	r2, [sp, #24]
1000920c:	aa0e      	add	r2, sp, #56	@ 0x38
1000920e:	e9cd b204 	strd	fp, r2, [sp, #16]
10009212:	aa0d      	add	r2, sp, #52	@ 0x34
10009214:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
10009218:	9203      	str	r2, [sp, #12]
1000921a:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
1000921e:	e9cd 3201 	strd	r3, r2, [sp, #4]
10009222:	6023      	str	r3, [r4, #0]
10009224:	6863      	ldr	r3, [r4, #4]
10009226:	9300      	str	r3, [sp, #0]
10009228:	4642      	mov	r2, r8
1000922a:	464b      	mov	r3, r9
1000922c:	4628      	mov	r0, r5
1000922e:	910a      	str	r1, [sp, #40]	@ 0x28
10009230:	f7ff fecc 	bl	10008fcc <__cvt>
10009234:	990a      	ldr	r1, [sp, #40]	@ 0x28
10009236:	2947      	cmp	r1, #71	@ 0x47
10009238:	4680      	mov	r8, r0
1000923a:	990d      	ldr	r1, [sp, #52]	@ 0x34
1000923c:	d108      	bne.n	10009250 <_printf_float+0x144>
1000923e:	1cc8      	adds	r0, r1, #3
10009240:	db02      	blt.n	10009248 <_printf_float+0x13c>
10009242:	6863      	ldr	r3, [r4, #4]
10009244:	4299      	cmp	r1, r3
10009246:	dd40      	ble.n	100092ca <_printf_float+0x1be>
10009248:	f1ab 0302 	sub.w	r3, fp, #2
1000924c:	fa5f fb83 	uxtb.w	fp, r3
10009250:	f1bb 0f65 	cmp.w	fp, #101	@ 0x65
10009254:	d81f      	bhi.n	10009296 <_printf_float+0x18a>
10009256:	3901      	subs	r1, #1
10009258:	465a      	mov	r2, fp
1000925a:	f104 0050 	add.w	r0, r4, #80	@ 0x50
1000925e:	910d      	str	r1, [sp, #52]	@ 0x34
10009260:	f7ff ff15 	bl	1000908e <__exponent>
10009264:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
10009266:	1813      	adds	r3, r2, r0
10009268:	2a01      	cmp	r2, #1
1000926a:	4681      	mov	r9, r0
1000926c:	6123      	str	r3, [r4, #16]
1000926e:	dc02      	bgt.n	10009276 <_printf_float+0x16a>
10009270:	6822      	ldr	r2, [r4, #0]
10009272:	07d2      	lsls	r2, r2, #31
10009274:	d501      	bpl.n	1000927a <_printf_float+0x16e>
10009276:	3301      	adds	r3, #1
10009278:	6123      	str	r3, [r4, #16]
1000927a:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
1000927e:	2b00      	cmp	r3, #0
10009280:	d099      	beq.n	100091b6 <_printf_float+0xaa>
10009282:	232d      	movs	r3, #45	@ 0x2d
10009284:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
10009288:	e795      	b.n	100091b6 <_printf_float+0xaa>
1000928a:	2947      	cmp	r1, #71	@ 0x47
1000928c:	d1bb      	bne.n	10009206 <_printf_float+0xfa>
1000928e:	2b00      	cmp	r3, #0
10009290:	d1b9      	bne.n	10009206 <_printf_float+0xfa>
10009292:	2301      	movs	r3, #1
10009294:	e7b6      	b.n	10009204 <_printf_float+0xf8>
10009296:	f1bb 0f66 	cmp.w	fp, #102	@ 0x66
1000929a:	d118      	bne.n	100092ce <_printf_float+0x1c2>
1000929c:	2900      	cmp	r1, #0
1000929e:	6863      	ldr	r3, [r4, #4]
100092a0:	dd0b      	ble.n	100092ba <_printf_float+0x1ae>
100092a2:	6121      	str	r1, [r4, #16]
100092a4:	b913      	cbnz	r3, 100092ac <_printf_float+0x1a0>
100092a6:	6822      	ldr	r2, [r4, #0]
100092a8:	07d0      	lsls	r0, r2, #31
100092aa:	d502      	bpl.n	100092b2 <_printf_float+0x1a6>
100092ac:	3301      	adds	r3, #1
100092ae:	440b      	add	r3, r1
100092b0:	6123      	str	r3, [r4, #16]
100092b2:	65a1      	str	r1, [r4, #88]	@ 0x58
100092b4:	f04f 0900 	mov.w	r9, #0
100092b8:	e7df      	b.n	1000927a <_printf_float+0x16e>
100092ba:	b913      	cbnz	r3, 100092c2 <_printf_float+0x1b6>
100092bc:	6822      	ldr	r2, [r4, #0]
100092be:	07d2      	lsls	r2, r2, #31
100092c0:	d501      	bpl.n	100092c6 <_printf_float+0x1ba>
100092c2:	3302      	adds	r3, #2
100092c4:	e7f4      	b.n	100092b0 <_printf_float+0x1a4>
100092c6:	2301      	movs	r3, #1
100092c8:	e7f2      	b.n	100092b0 <_printf_float+0x1a4>
100092ca:	f04f 0b67 	mov.w	fp, #103	@ 0x67
100092ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
100092d0:	4299      	cmp	r1, r3
100092d2:	db05      	blt.n	100092e0 <_printf_float+0x1d4>
100092d4:	6823      	ldr	r3, [r4, #0]
100092d6:	6121      	str	r1, [r4, #16]
100092d8:	07d8      	lsls	r0, r3, #31
100092da:	d5ea      	bpl.n	100092b2 <_printf_float+0x1a6>
100092dc:	1c4b      	adds	r3, r1, #1
100092de:	e7e7      	b.n	100092b0 <_printf_float+0x1a4>
100092e0:	2900      	cmp	r1, #0
100092e2:	bfd4      	ite	le
100092e4:	f1c1 0202 	rsble	r2, r1, #2
100092e8:	2201      	movgt	r2, #1
100092ea:	4413      	add	r3, r2
100092ec:	e7e0      	b.n	100092b0 <_printf_float+0x1a4>
100092ee:	6823      	ldr	r3, [r4, #0]
100092f0:	055a      	lsls	r2, r3, #21
100092f2:	d407      	bmi.n	10009304 <_printf_float+0x1f8>
100092f4:	6923      	ldr	r3, [r4, #16]
100092f6:	4642      	mov	r2, r8
100092f8:	4631      	mov	r1, r6
100092fa:	4628      	mov	r0, r5
100092fc:	47b8      	blx	r7
100092fe:	3001      	adds	r0, #1
10009300:	d12c      	bne.n	1000935c <_printf_float+0x250>
10009302:	e762      	b.n	100091ca <_printf_float+0xbe>
10009304:	f1bb 0f65 	cmp.w	fp, #101	@ 0x65
10009308:	f240 80e0 	bls.w	100094cc <_printf_float+0x3c0>
1000930c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
10009310:	2200      	movs	r2, #0
10009312:	2300      	movs	r3, #0
10009314:	f7ff fb6a 	bl	100089ec <__aeabi_dcmpeq>
10009318:	2800      	cmp	r0, #0
1000931a:	d034      	beq.n	10009386 <_printf_float+0x27a>
1000931c:	4a37      	ldr	r2, [pc, #220]	@ (100093fc <_printf_float+0x2f0>)
1000931e:	2301      	movs	r3, #1
10009320:	4631      	mov	r1, r6
10009322:	4628      	mov	r0, r5
10009324:	47b8      	blx	r7
10009326:	3001      	adds	r0, #1
10009328:	f43f af4f 	beq.w	100091ca <_printf_float+0xbe>
1000932c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	@ 0x34
10009330:	429a      	cmp	r2, r3
10009332:	db02      	blt.n	1000933a <_printf_float+0x22e>
10009334:	6823      	ldr	r3, [r4, #0]
10009336:	07d8      	lsls	r0, r3, #31
10009338:	d510      	bpl.n	1000935c <_printf_float+0x250>
1000933a:	ee18 3a10 	vmov	r3, s16
1000933e:	4652      	mov	r2, sl
10009340:	4631      	mov	r1, r6
10009342:	4628      	mov	r0, r5
10009344:	47b8      	blx	r7
10009346:	3001      	adds	r0, #1
10009348:	f43f af3f 	beq.w	100091ca <_printf_float+0xbe>
1000934c:	f04f 0800 	mov.w	r8, #0
10009350:	f104 091a 	add.w	r9, r4, #26
10009354:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
10009356:	3b01      	subs	r3, #1
10009358:	4543      	cmp	r3, r8
1000935a:	dc09      	bgt.n	10009370 <_printf_float+0x264>
1000935c:	6823      	ldr	r3, [r4, #0]
1000935e:	079b      	lsls	r3, r3, #30
10009360:	f100 8107 	bmi.w	10009572 <_printf_float+0x466>
10009364:	68e0      	ldr	r0, [r4, #12]
10009366:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
10009368:	4298      	cmp	r0, r3
1000936a:	bfb8      	it	lt
1000936c:	4618      	movlt	r0, r3
1000936e:	e72e      	b.n	100091ce <_printf_float+0xc2>
10009370:	2301      	movs	r3, #1
10009372:	464a      	mov	r2, r9
10009374:	4631      	mov	r1, r6
10009376:	4628      	mov	r0, r5
10009378:	47b8      	blx	r7
1000937a:	3001      	adds	r0, #1
1000937c:	f43f af25 	beq.w	100091ca <_printf_float+0xbe>
10009380:	f108 0801 	add.w	r8, r8, #1
10009384:	e7e6      	b.n	10009354 <_printf_float+0x248>
10009386:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
10009388:	2b00      	cmp	r3, #0
1000938a:	dc39      	bgt.n	10009400 <_printf_float+0x2f4>
1000938c:	4a1b      	ldr	r2, [pc, #108]	@ (100093fc <_printf_float+0x2f0>)
1000938e:	2301      	movs	r3, #1
10009390:	4631      	mov	r1, r6
10009392:	4628      	mov	r0, r5
10009394:	47b8      	blx	r7
10009396:	3001      	adds	r0, #1
10009398:	f43f af17 	beq.w	100091ca <_printf_float+0xbe>
1000939c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
100093a0:	4313      	orrs	r3, r2
100093a2:	d102      	bne.n	100093aa <_printf_float+0x29e>
100093a4:	6823      	ldr	r3, [r4, #0]
100093a6:	07d9      	lsls	r1, r3, #31
100093a8:	d5d8      	bpl.n	1000935c <_printf_float+0x250>
100093aa:	ee18 3a10 	vmov	r3, s16
100093ae:	4652      	mov	r2, sl
100093b0:	4631      	mov	r1, r6
100093b2:	4628      	mov	r0, r5
100093b4:	47b8      	blx	r7
100093b6:	3001      	adds	r0, #1
100093b8:	f43f af07 	beq.w	100091ca <_printf_float+0xbe>
100093bc:	f04f 0900 	mov.w	r9, #0
100093c0:	f104 0a1a 	add.w	sl, r4, #26
100093c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
100093c6:	425b      	negs	r3, r3
100093c8:	454b      	cmp	r3, r9
100093ca:	dc01      	bgt.n	100093d0 <_printf_float+0x2c4>
100093cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
100093ce:	e792      	b.n	100092f6 <_printf_float+0x1ea>
100093d0:	2301      	movs	r3, #1
100093d2:	4652      	mov	r2, sl
100093d4:	4631      	mov	r1, r6
100093d6:	4628      	mov	r0, r5
100093d8:	47b8      	blx	r7
100093da:	3001      	adds	r0, #1
100093dc:	f43f aef5 	beq.w	100091ca <_printf_float+0xbe>
100093e0:	f109 0901 	add.w	r9, r9, #1
100093e4:	e7ee      	b.n	100093c4 <_printf_float+0x2b8>
100093e6:	bf00      	nop
100093e8:	7fefffff 	.word	0x7fefffff
100093ec:	10016bfc 	.word	0x10016bfc
100093f0:	10016c00 	.word	0x10016c00
100093f4:	10016c04 	.word	0x10016c04
100093f8:	10016c08 	.word	0x10016c08
100093fc:	10016c0c 	.word	0x10016c0c
10009400:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
10009402:	6da3      	ldr	r3, [r4, #88]	@ 0x58
10009404:	429a      	cmp	r2, r3
10009406:	bfa8      	it	ge
10009408:	461a      	movge	r2, r3
1000940a:	2a00      	cmp	r2, #0
1000940c:	4691      	mov	r9, r2
1000940e:	dc37      	bgt.n	10009480 <_printf_float+0x374>
10009410:	f04f 0b00 	mov.w	fp, #0
10009414:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
10009418:	f104 021a 	add.w	r2, r4, #26
1000941c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
1000941e:	9309      	str	r3, [sp, #36]	@ 0x24
10009420:	eba3 0309 	sub.w	r3, r3, r9
10009424:	455b      	cmp	r3, fp
10009426:	dc33      	bgt.n	10009490 <_printf_float+0x384>
10009428:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	@ 0x34
1000942c:	429a      	cmp	r2, r3
1000942e:	db3b      	blt.n	100094a8 <_printf_float+0x39c>
10009430:	6823      	ldr	r3, [r4, #0]
10009432:	07da      	lsls	r2, r3, #31
10009434:	d438      	bmi.n	100094a8 <_printf_float+0x39c>
10009436:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
1000943a:	eba2 0903 	sub.w	r9, r2, r3
1000943e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10009440:	1ad2      	subs	r2, r2, r3
10009442:	4591      	cmp	r9, r2
10009444:	bfa8      	it	ge
10009446:	4691      	movge	r9, r2
10009448:	f1b9 0f00 	cmp.w	r9, #0
1000944c:	dc35      	bgt.n	100094ba <_printf_float+0x3ae>
1000944e:	f04f 0800 	mov.w	r8, #0
10009452:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
10009456:	f104 0a1a 	add.w	sl, r4, #26
1000945a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	@ 0x34
1000945e:	1a9b      	subs	r3, r3, r2
10009460:	eba3 0309 	sub.w	r3, r3, r9
10009464:	4543      	cmp	r3, r8
10009466:	f77f af79 	ble.w	1000935c <_printf_float+0x250>
1000946a:	2301      	movs	r3, #1
1000946c:	4652      	mov	r2, sl
1000946e:	4631      	mov	r1, r6
10009470:	4628      	mov	r0, r5
10009472:	47b8      	blx	r7
10009474:	3001      	adds	r0, #1
10009476:	f43f aea8 	beq.w	100091ca <_printf_float+0xbe>
1000947a:	f108 0801 	add.w	r8, r8, #1
1000947e:	e7ec      	b.n	1000945a <_printf_float+0x34e>
10009480:	4613      	mov	r3, r2
10009482:	4631      	mov	r1, r6
10009484:	4642      	mov	r2, r8
10009486:	4628      	mov	r0, r5
10009488:	47b8      	blx	r7
1000948a:	3001      	adds	r0, #1
1000948c:	d1c0      	bne.n	10009410 <_printf_float+0x304>
1000948e:	e69c      	b.n	100091ca <_printf_float+0xbe>
10009490:	2301      	movs	r3, #1
10009492:	4631      	mov	r1, r6
10009494:	4628      	mov	r0, r5
10009496:	9209      	str	r2, [sp, #36]	@ 0x24
10009498:	47b8      	blx	r7
1000949a:	3001      	adds	r0, #1
1000949c:	f43f ae95 	beq.w	100091ca <_printf_float+0xbe>
100094a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
100094a2:	f10b 0b01 	add.w	fp, fp, #1
100094a6:	e7b9      	b.n	1000941c <_printf_float+0x310>
100094a8:	ee18 3a10 	vmov	r3, s16
100094ac:	4652      	mov	r2, sl
100094ae:	4631      	mov	r1, r6
100094b0:	4628      	mov	r0, r5
100094b2:	47b8      	blx	r7
100094b4:	3001      	adds	r0, #1
100094b6:	d1be      	bne.n	10009436 <_printf_float+0x32a>
100094b8:	e687      	b.n	100091ca <_printf_float+0xbe>
100094ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
100094bc:	464b      	mov	r3, r9
100094be:	4442      	add	r2, r8
100094c0:	4631      	mov	r1, r6
100094c2:	4628      	mov	r0, r5
100094c4:	47b8      	blx	r7
100094c6:	3001      	adds	r0, #1
100094c8:	d1c1      	bne.n	1000944e <_printf_float+0x342>
100094ca:	e67e      	b.n	100091ca <_printf_float+0xbe>
100094cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
100094ce:	2a01      	cmp	r2, #1
100094d0:	dc01      	bgt.n	100094d6 <_printf_float+0x3ca>
100094d2:	07db      	lsls	r3, r3, #31
100094d4:	d53a      	bpl.n	1000954c <_printf_float+0x440>
100094d6:	2301      	movs	r3, #1
100094d8:	4642      	mov	r2, r8
100094da:	4631      	mov	r1, r6
100094dc:	4628      	mov	r0, r5
100094de:	47b8      	blx	r7
100094e0:	3001      	adds	r0, #1
100094e2:	f43f ae72 	beq.w	100091ca <_printf_float+0xbe>
100094e6:	ee18 3a10 	vmov	r3, s16
100094ea:	4652      	mov	r2, sl
100094ec:	4631      	mov	r1, r6
100094ee:	4628      	mov	r0, r5
100094f0:	47b8      	blx	r7
100094f2:	3001      	adds	r0, #1
100094f4:	f43f ae69 	beq.w	100091ca <_printf_float+0xbe>
100094f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
100094fc:	2200      	movs	r2, #0
100094fe:	2300      	movs	r3, #0
10009500:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
10009504:	f7ff fa72 	bl	100089ec <__aeabi_dcmpeq>
10009508:	b9d8      	cbnz	r0, 10009542 <_printf_float+0x436>
1000950a:	f10a 33ff 	add.w	r3, sl, #4294967295
1000950e:	f108 0201 	add.w	r2, r8, #1
10009512:	4631      	mov	r1, r6
10009514:	4628      	mov	r0, r5
10009516:	47b8      	blx	r7
10009518:	3001      	adds	r0, #1
1000951a:	d10e      	bne.n	1000953a <_printf_float+0x42e>
1000951c:	e655      	b.n	100091ca <_printf_float+0xbe>
1000951e:	2301      	movs	r3, #1
10009520:	4652      	mov	r2, sl
10009522:	4631      	mov	r1, r6
10009524:	4628      	mov	r0, r5
10009526:	47b8      	blx	r7
10009528:	3001      	adds	r0, #1
1000952a:	f43f ae4e 	beq.w	100091ca <_printf_float+0xbe>
1000952e:	f108 0801 	add.w	r8, r8, #1
10009532:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
10009534:	3b01      	subs	r3, #1
10009536:	4543      	cmp	r3, r8
10009538:	dcf1      	bgt.n	1000951e <_printf_float+0x412>
1000953a:	464b      	mov	r3, r9
1000953c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
10009540:	e6da      	b.n	100092f8 <_printf_float+0x1ec>
10009542:	f04f 0800 	mov.w	r8, #0
10009546:	f104 0a1a 	add.w	sl, r4, #26
1000954a:	e7f2      	b.n	10009532 <_printf_float+0x426>
1000954c:	2301      	movs	r3, #1
1000954e:	4642      	mov	r2, r8
10009550:	e7df      	b.n	10009512 <_printf_float+0x406>
10009552:	2301      	movs	r3, #1
10009554:	464a      	mov	r2, r9
10009556:	4631      	mov	r1, r6
10009558:	4628      	mov	r0, r5
1000955a:	47b8      	blx	r7
1000955c:	3001      	adds	r0, #1
1000955e:	f43f ae34 	beq.w	100091ca <_printf_float+0xbe>
10009562:	f108 0801 	add.w	r8, r8, #1
10009566:	68e3      	ldr	r3, [r4, #12]
10009568:	990f      	ldr	r1, [sp, #60]	@ 0x3c
1000956a:	1a5b      	subs	r3, r3, r1
1000956c:	4543      	cmp	r3, r8
1000956e:	dcf0      	bgt.n	10009552 <_printf_float+0x446>
10009570:	e6f8      	b.n	10009364 <_printf_float+0x258>
10009572:	f04f 0800 	mov.w	r8, #0
10009576:	f104 0919 	add.w	r9, r4, #25
1000957a:	e7f4      	b.n	10009566 <_printf_float+0x45a>

1000957c <_printf_common>:
1000957c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
10009580:	4616      	mov	r6, r2
10009582:	4699      	mov	r9, r3
10009584:	688a      	ldr	r2, [r1, #8]
10009586:	690b      	ldr	r3, [r1, #16]
10009588:	f8dd 8020 	ldr.w	r8, [sp, #32]
1000958c:	4293      	cmp	r3, r2
1000958e:	bfb8      	it	lt
10009590:	4613      	movlt	r3, r2
10009592:	6033      	str	r3, [r6, #0]
10009594:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
10009598:	4607      	mov	r7, r0
1000959a:	460c      	mov	r4, r1
1000959c:	b10a      	cbz	r2, 100095a2 <_printf_common+0x26>
1000959e:	3301      	adds	r3, #1
100095a0:	6033      	str	r3, [r6, #0]
100095a2:	6823      	ldr	r3, [r4, #0]
100095a4:	0699      	lsls	r1, r3, #26
100095a6:	bf42      	ittt	mi
100095a8:	6833      	ldrmi	r3, [r6, #0]
100095aa:	3302      	addmi	r3, #2
100095ac:	6033      	strmi	r3, [r6, #0]
100095ae:	6825      	ldr	r5, [r4, #0]
100095b0:	f015 0506 	ands.w	r5, r5, #6
100095b4:	d106      	bne.n	100095c4 <_printf_common+0x48>
100095b6:	f104 0a19 	add.w	sl, r4, #25
100095ba:	68e3      	ldr	r3, [r4, #12]
100095bc:	6832      	ldr	r2, [r6, #0]
100095be:	1a9b      	subs	r3, r3, r2
100095c0:	42ab      	cmp	r3, r5
100095c2:	dc26      	bgt.n	10009612 <_printf_common+0x96>
100095c4:	f894 2043 	ldrb.w	r2, [r4, #67]	@ 0x43
100095c8:	1e13      	subs	r3, r2, #0
100095ca:	6822      	ldr	r2, [r4, #0]
100095cc:	bf18      	it	ne
100095ce:	2301      	movne	r3, #1
100095d0:	0692      	lsls	r2, r2, #26
100095d2:	d42b      	bmi.n	1000962c <_printf_common+0xb0>
100095d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
100095d8:	4649      	mov	r1, r9
100095da:	4638      	mov	r0, r7
100095dc:	47c0      	blx	r8
100095de:	3001      	adds	r0, #1
100095e0:	d01e      	beq.n	10009620 <_printf_common+0xa4>
100095e2:	6823      	ldr	r3, [r4, #0]
100095e4:	6922      	ldr	r2, [r4, #16]
100095e6:	f003 0306 	and.w	r3, r3, #6
100095ea:	2b04      	cmp	r3, #4
100095ec:	bf02      	ittt	eq
100095ee:	68e5      	ldreq	r5, [r4, #12]
100095f0:	6833      	ldreq	r3, [r6, #0]
100095f2:	1aed      	subeq	r5, r5, r3
100095f4:	68a3      	ldr	r3, [r4, #8]
100095f6:	bf0c      	ite	eq
100095f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
100095fc:	2500      	movne	r5, #0
100095fe:	4293      	cmp	r3, r2
10009600:	bfc4      	itt	gt
10009602:	1a9b      	subgt	r3, r3, r2
10009604:	18ed      	addgt	r5, r5, r3
10009606:	2600      	movs	r6, #0
10009608:	341a      	adds	r4, #26
1000960a:	42b5      	cmp	r5, r6
1000960c:	d11a      	bne.n	10009644 <_printf_common+0xc8>
1000960e:	2000      	movs	r0, #0
10009610:	e008      	b.n	10009624 <_printf_common+0xa8>
10009612:	2301      	movs	r3, #1
10009614:	4652      	mov	r2, sl
10009616:	4649      	mov	r1, r9
10009618:	4638      	mov	r0, r7
1000961a:	47c0      	blx	r8
1000961c:	3001      	adds	r0, #1
1000961e:	d103      	bne.n	10009628 <_printf_common+0xac>
10009620:	f04f 30ff 	mov.w	r0, #4294967295
10009624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
10009628:	3501      	adds	r5, #1
1000962a:	e7c6      	b.n	100095ba <_printf_common+0x3e>
1000962c:	18e1      	adds	r1, r4, r3
1000962e:	1c5a      	adds	r2, r3, #1
10009630:	2030      	movs	r0, #48	@ 0x30
10009632:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
10009636:	4422      	add	r2, r4
10009638:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
1000963c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
10009640:	3302      	adds	r3, #2
10009642:	e7c7      	b.n	100095d4 <_printf_common+0x58>
10009644:	2301      	movs	r3, #1
10009646:	4622      	mov	r2, r4
10009648:	4649      	mov	r1, r9
1000964a:	4638      	mov	r0, r7
1000964c:	47c0      	blx	r8
1000964e:	3001      	adds	r0, #1
10009650:	d0e6      	beq.n	10009620 <_printf_common+0xa4>
10009652:	3601      	adds	r6, #1
10009654:	e7d9      	b.n	1000960a <_printf_common+0x8e>
	...

10009658 <_printf_i>:
10009658:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
1000965c:	7e0f      	ldrb	r7, [r1, #24]
1000965e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
10009660:	2f78      	cmp	r7, #120	@ 0x78
10009662:	4691      	mov	r9, r2
10009664:	4680      	mov	r8, r0
10009666:	460c      	mov	r4, r1
10009668:	469a      	mov	sl, r3
1000966a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
1000966e:	d807      	bhi.n	10009680 <_printf_i+0x28>
10009670:	2f62      	cmp	r7, #98	@ 0x62
10009672:	d80a      	bhi.n	1000968a <_printf_i+0x32>
10009674:	2f00      	cmp	r7, #0
10009676:	f000 80d4 	beq.w	10009822 <_printf_i+0x1ca>
1000967a:	2f58      	cmp	r7, #88	@ 0x58
1000967c:	f000 80c0 	beq.w	10009800 <_printf_i+0x1a8>
10009680:	f104 0542 	add.w	r5, r4, #66	@ 0x42
10009684:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
10009688:	e03a      	b.n	10009700 <_printf_i+0xa8>
1000968a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
1000968e:	2b15      	cmp	r3, #21
10009690:	d8f6      	bhi.n	10009680 <_printf_i+0x28>
10009692:	a101      	add	r1, pc, #4	@ (adr r1, 10009698 <_printf_i+0x40>)
10009694:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
10009698:	100096f1 	.word	0x100096f1
1000969c:	10009705 	.word	0x10009705
100096a0:	10009681 	.word	0x10009681
100096a4:	10009681 	.word	0x10009681
100096a8:	10009681 	.word	0x10009681
100096ac:	10009681 	.word	0x10009681
100096b0:	10009705 	.word	0x10009705
100096b4:	10009681 	.word	0x10009681
100096b8:	10009681 	.word	0x10009681
100096bc:	10009681 	.word	0x10009681
100096c0:	10009681 	.word	0x10009681
100096c4:	10009809 	.word	0x10009809
100096c8:	10009731 	.word	0x10009731
100096cc:	100097c3 	.word	0x100097c3
100096d0:	10009681 	.word	0x10009681
100096d4:	10009681 	.word	0x10009681
100096d8:	1000982b 	.word	0x1000982b
100096dc:	10009681 	.word	0x10009681
100096e0:	10009731 	.word	0x10009731
100096e4:	10009681 	.word	0x10009681
100096e8:	10009681 	.word	0x10009681
100096ec:	100097cb 	.word	0x100097cb
100096f0:	682b      	ldr	r3, [r5, #0]
100096f2:	1d1a      	adds	r2, r3, #4
100096f4:	681b      	ldr	r3, [r3, #0]
100096f6:	602a      	str	r2, [r5, #0]
100096f8:	f104 0542 	add.w	r5, r4, #66	@ 0x42
100096fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
10009700:	2301      	movs	r3, #1
10009702:	e09f      	b.n	10009844 <_printf_i+0x1ec>
10009704:	6820      	ldr	r0, [r4, #0]
10009706:	682b      	ldr	r3, [r5, #0]
10009708:	0607      	lsls	r7, r0, #24
1000970a:	f103 0104 	add.w	r1, r3, #4
1000970e:	6029      	str	r1, [r5, #0]
10009710:	d501      	bpl.n	10009716 <_printf_i+0xbe>
10009712:	681e      	ldr	r6, [r3, #0]
10009714:	e003      	b.n	1000971e <_printf_i+0xc6>
10009716:	0646      	lsls	r6, r0, #25
10009718:	d5fb      	bpl.n	10009712 <_printf_i+0xba>
1000971a:	f9b3 6000 	ldrsh.w	r6, [r3]
1000971e:	2e00      	cmp	r6, #0
10009720:	da03      	bge.n	1000972a <_printf_i+0xd2>
10009722:	232d      	movs	r3, #45	@ 0x2d
10009724:	4276      	negs	r6, r6
10009726:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
1000972a:	485a      	ldr	r0, [pc, #360]	@ (10009894 <_printf_i+0x23c>)
1000972c:	230a      	movs	r3, #10
1000972e:	e012      	b.n	10009756 <_printf_i+0xfe>
10009730:	682b      	ldr	r3, [r5, #0]
10009732:	6820      	ldr	r0, [r4, #0]
10009734:	1d19      	adds	r1, r3, #4
10009736:	6029      	str	r1, [r5, #0]
10009738:	0605      	lsls	r5, r0, #24
1000973a:	d501      	bpl.n	10009740 <_printf_i+0xe8>
1000973c:	681e      	ldr	r6, [r3, #0]
1000973e:	e002      	b.n	10009746 <_printf_i+0xee>
10009740:	0641      	lsls	r1, r0, #25
10009742:	d5fb      	bpl.n	1000973c <_printf_i+0xe4>
10009744:	881e      	ldrh	r6, [r3, #0]
10009746:	4853      	ldr	r0, [pc, #332]	@ (10009894 <_printf_i+0x23c>)
10009748:	2f6f      	cmp	r7, #111	@ 0x6f
1000974a:	bf0c      	ite	eq
1000974c:	2308      	moveq	r3, #8
1000974e:	230a      	movne	r3, #10
10009750:	2100      	movs	r1, #0
10009752:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
10009756:	6865      	ldr	r5, [r4, #4]
10009758:	60a5      	str	r5, [r4, #8]
1000975a:	2d00      	cmp	r5, #0
1000975c:	bfa2      	ittt	ge
1000975e:	6821      	ldrge	r1, [r4, #0]
10009760:	f021 0104 	bicge.w	r1, r1, #4
10009764:	6021      	strge	r1, [r4, #0]
10009766:	b90e      	cbnz	r6, 1000976c <_printf_i+0x114>
10009768:	2d00      	cmp	r5, #0
1000976a:	d04b      	beq.n	10009804 <_printf_i+0x1ac>
1000976c:	4615      	mov	r5, r2
1000976e:	fbb6 f1f3 	udiv	r1, r6, r3
10009772:	fb03 6711 	mls	r7, r3, r1, r6
10009776:	5dc7      	ldrb	r7, [r0, r7]
10009778:	f805 7d01 	strb.w	r7, [r5, #-1]!
1000977c:	4637      	mov	r7, r6
1000977e:	42bb      	cmp	r3, r7
10009780:	460e      	mov	r6, r1
10009782:	d9f4      	bls.n	1000976e <_printf_i+0x116>
10009784:	2b08      	cmp	r3, #8
10009786:	d10b      	bne.n	100097a0 <_printf_i+0x148>
10009788:	6823      	ldr	r3, [r4, #0]
1000978a:	07de      	lsls	r6, r3, #31
1000978c:	d508      	bpl.n	100097a0 <_printf_i+0x148>
1000978e:	6923      	ldr	r3, [r4, #16]
10009790:	6861      	ldr	r1, [r4, #4]
10009792:	4299      	cmp	r1, r3
10009794:	bfde      	ittt	le
10009796:	2330      	movle	r3, #48	@ 0x30
10009798:	f805 3c01 	strble.w	r3, [r5, #-1]
1000979c:	f105 35ff 	addle.w	r5, r5, #4294967295
100097a0:	1b52      	subs	r2, r2, r5
100097a2:	6122      	str	r2, [r4, #16]
100097a4:	f8cd a000 	str.w	sl, [sp]
100097a8:	464b      	mov	r3, r9
100097aa:	aa03      	add	r2, sp, #12
100097ac:	4621      	mov	r1, r4
100097ae:	4640      	mov	r0, r8
100097b0:	f7ff fee4 	bl	1000957c <_printf_common>
100097b4:	3001      	adds	r0, #1
100097b6:	d14a      	bne.n	1000984e <_printf_i+0x1f6>
100097b8:	f04f 30ff 	mov.w	r0, #4294967295
100097bc:	b004      	add	sp, #16
100097be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
100097c2:	6823      	ldr	r3, [r4, #0]
100097c4:	f043 0320 	orr.w	r3, r3, #32
100097c8:	6023      	str	r3, [r4, #0]
100097ca:	4833      	ldr	r0, [pc, #204]	@ (10009898 <_printf_i+0x240>)
100097cc:	2778      	movs	r7, #120	@ 0x78
100097ce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
100097d2:	6823      	ldr	r3, [r4, #0]
100097d4:	6829      	ldr	r1, [r5, #0]
100097d6:	061f      	lsls	r7, r3, #24
100097d8:	f851 6b04 	ldr.w	r6, [r1], #4
100097dc:	d402      	bmi.n	100097e4 <_printf_i+0x18c>
100097de:	065f      	lsls	r7, r3, #25
100097e0:	bf48      	it	mi
100097e2:	b2b6      	uxthmi	r6, r6
100097e4:	07df      	lsls	r7, r3, #31
100097e6:	bf48      	it	mi
100097e8:	f043 0320 	orrmi.w	r3, r3, #32
100097ec:	6029      	str	r1, [r5, #0]
100097ee:	bf48      	it	mi
100097f0:	6023      	strmi	r3, [r4, #0]
100097f2:	b91e      	cbnz	r6, 100097fc <_printf_i+0x1a4>
100097f4:	6823      	ldr	r3, [r4, #0]
100097f6:	f023 0320 	bic.w	r3, r3, #32
100097fa:	6023      	str	r3, [r4, #0]
100097fc:	2310      	movs	r3, #16
100097fe:	e7a7      	b.n	10009750 <_printf_i+0xf8>
10009800:	4824      	ldr	r0, [pc, #144]	@ (10009894 <_printf_i+0x23c>)
10009802:	e7e4      	b.n	100097ce <_printf_i+0x176>
10009804:	4615      	mov	r5, r2
10009806:	e7bd      	b.n	10009784 <_printf_i+0x12c>
10009808:	682b      	ldr	r3, [r5, #0]
1000980a:	6826      	ldr	r6, [r4, #0]
1000980c:	6961      	ldr	r1, [r4, #20]
1000980e:	1d18      	adds	r0, r3, #4
10009810:	6028      	str	r0, [r5, #0]
10009812:	0635      	lsls	r5, r6, #24
10009814:	681b      	ldr	r3, [r3, #0]
10009816:	d501      	bpl.n	1000981c <_printf_i+0x1c4>
10009818:	6019      	str	r1, [r3, #0]
1000981a:	e002      	b.n	10009822 <_printf_i+0x1ca>
1000981c:	0670      	lsls	r0, r6, #25
1000981e:	d5fb      	bpl.n	10009818 <_printf_i+0x1c0>
10009820:	8019      	strh	r1, [r3, #0]
10009822:	2300      	movs	r3, #0
10009824:	6123      	str	r3, [r4, #16]
10009826:	4615      	mov	r5, r2
10009828:	e7bc      	b.n	100097a4 <_printf_i+0x14c>
1000982a:	682b      	ldr	r3, [r5, #0]
1000982c:	1d1a      	adds	r2, r3, #4
1000982e:	602a      	str	r2, [r5, #0]
10009830:	681d      	ldr	r5, [r3, #0]
10009832:	6862      	ldr	r2, [r4, #4]
10009834:	2100      	movs	r1, #0
10009836:	4628      	mov	r0, r5
10009838:	f000 f9da 	bl	10009bf0 <memchr>
1000983c:	b108      	cbz	r0, 10009842 <_printf_i+0x1ea>
1000983e:	1b40      	subs	r0, r0, r5
10009840:	6060      	str	r0, [r4, #4]
10009842:	6863      	ldr	r3, [r4, #4]
10009844:	6123      	str	r3, [r4, #16]
10009846:	2300      	movs	r3, #0
10009848:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
1000984c:	e7aa      	b.n	100097a4 <_printf_i+0x14c>
1000984e:	6923      	ldr	r3, [r4, #16]
10009850:	462a      	mov	r2, r5
10009852:	4649      	mov	r1, r9
10009854:	4640      	mov	r0, r8
10009856:	47d0      	blx	sl
10009858:	3001      	adds	r0, #1
1000985a:	d0ad      	beq.n	100097b8 <_printf_i+0x160>
1000985c:	6823      	ldr	r3, [r4, #0]
1000985e:	079b      	lsls	r3, r3, #30
10009860:	d413      	bmi.n	1000988a <_printf_i+0x232>
10009862:	68e0      	ldr	r0, [r4, #12]
10009864:	9b03      	ldr	r3, [sp, #12]
10009866:	4298      	cmp	r0, r3
10009868:	bfb8      	it	lt
1000986a:	4618      	movlt	r0, r3
1000986c:	e7a6      	b.n	100097bc <_printf_i+0x164>
1000986e:	2301      	movs	r3, #1
10009870:	4632      	mov	r2, r6
10009872:	4649      	mov	r1, r9
10009874:	4640      	mov	r0, r8
10009876:	47d0      	blx	sl
10009878:	3001      	adds	r0, #1
1000987a:	d09d      	beq.n	100097b8 <_printf_i+0x160>
1000987c:	3501      	adds	r5, #1
1000987e:	68e3      	ldr	r3, [r4, #12]
10009880:	9903      	ldr	r1, [sp, #12]
10009882:	1a5b      	subs	r3, r3, r1
10009884:	42ab      	cmp	r3, r5
10009886:	dcf2      	bgt.n	1000986e <_printf_i+0x216>
10009888:	e7eb      	b.n	10009862 <_printf_i+0x20a>
1000988a:	2500      	movs	r5, #0
1000988c:	f104 0619 	add.w	r6, r4, #25
10009890:	e7f5      	b.n	1000987e <_printf_i+0x226>
10009892:	bf00      	nop
10009894:	10016c0e 	.word	0x10016c0e
10009898:	10016c1f 	.word	0x10016c1f

1000989c <std>:
1000989c:	2300      	movs	r3, #0
1000989e:	b510      	push	{r4, lr}
100098a0:	4604      	mov	r4, r0
100098a2:	e9c0 3300 	strd	r3, r3, [r0]
100098a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
100098aa:	6083      	str	r3, [r0, #8]
100098ac:	8181      	strh	r1, [r0, #12]
100098ae:	6643      	str	r3, [r0, #100]	@ 0x64
100098b0:	81c2      	strh	r2, [r0, #14]
100098b2:	6183      	str	r3, [r0, #24]
100098b4:	4619      	mov	r1, r3
100098b6:	2208      	movs	r2, #8
100098b8:	305c      	adds	r0, #92	@ 0x5c
100098ba:	f000 f8fc 	bl	10009ab6 <memset>
100098be:	4b05      	ldr	r3, [pc, #20]	@ (100098d4 <std+0x38>)
100098c0:	6263      	str	r3, [r4, #36]	@ 0x24
100098c2:	4b05      	ldr	r3, [pc, #20]	@ (100098d8 <std+0x3c>)
100098c4:	62a3      	str	r3, [r4, #40]	@ 0x28
100098c6:	4b05      	ldr	r3, [pc, #20]	@ (100098dc <std+0x40>)
100098c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
100098ca:	4b05      	ldr	r3, [pc, #20]	@ (100098e0 <std+0x44>)
100098cc:	6224      	str	r4, [r4, #32]
100098ce:	6323      	str	r3, [r4, #48]	@ 0x30
100098d0:	bd10      	pop	{r4, pc}
100098d2:	bf00      	nop
100098d4:	10009a31 	.word	0x10009a31
100098d8:	10009a53 	.word	0x10009a53
100098dc:	10009a8b 	.word	0x10009a8b
100098e0:	10009aaf 	.word	0x10009aaf

100098e4 <stdio_exit_handler>:
100098e4:	4a02      	ldr	r2, [pc, #8]	@ (100098f0 <stdio_exit_handler+0xc>)
100098e6:	4903      	ldr	r1, [pc, #12]	@ (100098f4 <stdio_exit_handler+0x10>)
100098e8:	4803      	ldr	r0, [pc, #12]	@ (100098f8 <stdio_exit_handler+0x14>)
100098ea:	f000 b869 	b.w	100099c0 <_fwalk_sglue>
100098ee:	bf00      	nop
100098f0:	08002340 	.word	0x08002340
100098f4:	1000b4d9 	.word	0x1000b4d9
100098f8:	0800234c 	.word	0x0800234c

100098fc <cleanup_stdio>:
100098fc:	6841      	ldr	r1, [r0, #4]
100098fe:	4b0c      	ldr	r3, [pc, #48]	@ (10009930 <cleanup_stdio+0x34>)
10009900:	4299      	cmp	r1, r3
10009902:	b510      	push	{r4, lr}
10009904:	4604      	mov	r4, r0
10009906:	d001      	beq.n	1000990c <cleanup_stdio+0x10>
10009908:	f001 fde6 	bl	1000b4d8 <_fflush_r>
1000990c:	68a1      	ldr	r1, [r4, #8]
1000990e:	4b09      	ldr	r3, [pc, #36]	@ (10009934 <cleanup_stdio+0x38>)
10009910:	4299      	cmp	r1, r3
10009912:	d002      	beq.n	1000991a <cleanup_stdio+0x1e>
10009914:	4620      	mov	r0, r4
10009916:	f001 fddf 	bl	1000b4d8 <_fflush_r>
1000991a:	68e1      	ldr	r1, [r4, #12]
1000991c:	4b06      	ldr	r3, [pc, #24]	@ (10009938 <cleanup_stdio+0x3c>)
1000991e:	4299      	cmp	r1, r3
10009920:	d004      	beq.n	1000992c <cleanup_stdio+0x30>
10009922:	4620      	mov	r0, r4
10009924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
10009928:	f001 bdd6 	b.w	1000b4d8 <_fflush_r>
1000992c:	bd10      	pop	{r4, pc}
1000992e:	bf00      	nop
10009930:	08002e4c 	.word	0x08002e4c
10009934:	08002eb4 	.word	0x08002eb4
10009938:	08002f1c 	.word	0x08002f1c

1000993c <global_stdio_init.part.0>:
1000993c:	b510      	push	{r4, lr}
1000993e:	4b0b      	ldr	r3, [pc, #44]	@ (1000996c <global_stdio_init.part.0+0x30>)
10009940:	4c0b      	ldr	r4, [pc, #44]	@ (10009970 <global_stdio_init.part.0+0x34>)
10009942:	4a0c      	ldr	r2, [pc, #48]	@ (10009974 <global_stdio_init.part.0+0x38>)
10009944:	601a      	str	r2, [r3, #0]
10009946:	4620      	mov	r0, r4
10009948:	2200      	movs	r2, #0
1000994a:	2104      	movs	r1, #4
1000994c:	f7ff ffa6 	bl	1000989c <std>
10009950:	f104 0068 	add.w	r0, r4, #104	@ 0x68
10009954:	2201      	movs	r2, #1
10009956:	2109      	movs	r1, #9
10009958:	f7ff ffa0 	bl	1000989c <std>
1000995c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
10009960:	2202      	movs	r2, #2
10009962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
10009966:	2112      	movs	r1, #18
10009968:	f7ff bf98 	b.w	1000989c <std>
1000996c:	08002f84 	.word	0x08002f84
10009970:	08002e4c 	.word	0x08002e4c
10009974:	100098e5 	.word	0x100098e5

10009978 <__sfp_lock_acquire>:
10009978:	4801      	ldr	r0, [pc, #4]	@ (10009980 <__sfp_lock_acquire+0x8>)
1000997a:	f000 b937 	b.w	10009bec <__retarget_lock_acquire_recursive>
1000997e:	bf00      	nop
10009980:	08002f8d 	.word	0x08002f8d

10009984 <__sfp_lock_release>:
10009984:	4801      	ldr	r0, [pc, #4]	@ (1000998c <__sfp_lock_release+0x8>)
10009986:	f000 b932 	b.w	10009bee <__retarget_lock_release_recursive>
1000998a:	bf00      	nop
1000998c:	08002f8d 	.word	0x08002f8d

10009990 <__sinit>:
10009990:	b510      	push	{r4, lr}
10009992:	4604      	mov	r4, r0
10009994:	f7ff fff0 	bl	10009978 <__sfp_lock_acquire>
10009998:	6a23      	ldr	r3, [r4, #32]
1000999a:	b11b      	cbz	r3, 100099a4 <__sinit+0x14>
1000999c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
100099a0:	f7ff bff0 	b.w	10009984 <__sfp_lock_release>
100099a4:	4b04      	ldr	r3, [pc, #16]	@ (100099b8 <__sinit+0x28>)
100099a6:	6223      	str	r3, [r4, #32]
100099a8:	4b04      	ldr	r3, [pc, #16]	@ (100099bc <__sinit+0x2c>)
100099aa:	681b      	ldr	r3, [r3, #0]
100099ac:	2b00      	cmp	r3, #0
100099ae:	d1f5      	bne.n	1000999c <__sinit+0xc>
100099b0:	f7ff ffc4 	bl	1000993c <global_stdio_init.part.0>
100099b4:	e7f2      	b.n	1000999c <__sinit+0xc>
100099b6:	bf00      	nop
100099b8:	100098fd 	.word	0x100098fd
100099bc:	08002f84 	.word	0x08002f84

100099c0 <_fwalk_sglue>:
100099c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
100099c4:	4607      	mov	r7, r0
100099c6:	4688      	mov	r8, r1
100099c8:	4614      	mov	r4, r2
100099ca:	2600      	movs	r6, #0
100099cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
100099d0:	f1b9 0901 	subs.w	r9, r9, #1
100099d4:	d505      	bpl.n	100099e2 <_fwalk_sglue+0x22>
100099d6:	6824      	ldr	r4, [r4, #0]
100099d8:	2c00      	cmp	r4, #0
100099da:	d1f7      	bne.n	100099cc <_fwalk_sglue+0xc>
100099dc:	4630      	mov	r0, r6
100099de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
100099e2:	89ab      	ldrh	r3, [r5, #12]
100099e4:	2b01      	cmp	r3, #1
100099e6:	d907      	bls.n	100099f8 <_fwalk_sglue+0x38>
100099e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
100099ec:	3301      	adds	r3, #1
100099ee:	d003      	beq.n	100099f8 <_fwalk_sglue+0x38>
100099f0:	4629      	mov	r1, r5
100099f2:	4638      	mov	r0, r7
100099f4:	47c0      	blx	r8
100099f6:	4306      	orrs	r6, r0
100099f8:	3568      	adds	r5, #104	@ 0x68
100099fa:	e7e9      	b.n	100099d0 <_fwalk_sglue+0x10>

100099fc <iprintf>:
100099fc:	b40f      	push	{r0, r1, r2, r3}
100099fe:	b507      	push	{r0, r1, r2, lr}
10009a00:	4906      	ldr	r1, [pc, #24]	@ (10009a1c <iprintf+0x20>)
10009a02:	ab04      	add	r3, sp, #16
10009a04:	6808      	ldr	r0, [r1, #0]
10009a06:	f853 2b04 	ldr.w	r2, [r3], #4
10009a0a:	6881      	ldr	r1, [r0, #8]
10009a0c:	9301      	str	r3, [sp, #4]
10009a0e:	f001 fbc3 	bl	1000b198 <_vfiprintf_r>
10009a12:	b003      	add	sp, #12
10009a14:	f85d eb04 	ldr.w	lr, [sp], #4
10009a18:	b004      	add	sp, #16
10009a1a:	4770      	bx	lr
10009a1c:	08002398 	.word	0x08002398

10009a20 <putchar>:
10009a20:	4b02      	ldr	r3, [pc, #8]	@ (10009a2c <putchar+0xc>)
10009a22:	4601      	mov	r1, r0
10009a24:	6818      	ldr	r0, [r3, #0]
10009a26:	6882      	ldr	r2, [r0, #8]
10009a28:	f001 bd7e 	b.w	1000b528 <_putc_r>
10009a2c:	08002398 	.word	0x08002398

10009a30 <__sread>:
10009a30:	b510      	push	{r4, lr}
10009a32:	460c      	mov	r4, r1
10009a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10009a38:	f000 f86c 	bl	10009b14 <_read_r>
10009a3c:	2800      	cmp	r0, #0
10009a3e:	bfab      	itete	ge
10009a40:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
10009a42:	89a3      	ldrhlt	r3, [r4, #12]
10009a44:	181b      	addge	r3, r3, r0
10009a46:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
10009a4a:	bfac      	ite	ge
10009a4c:	6563      	strge	r3, [r4, #84]	@ 0x54
10009a4e:	81a3      	strhlt	r3, [r4, #12]
10009a50:	bd10      	pop	{r4, pc}

10009a52 <__swrite>:
10009a52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
10009a56:	461f      	mov	r7, r3
10009a58:	898b      	ldrh	r3, [r1, #12]
10009a5a:	05db      	lsls	r3, r3, #23
10009a5c:	4605      	mov	r5, r0
10009a5e:	460c      	mov	r4, r1
10009a60:	4616      	mov	r6, r2
10009a62:	d505      	bpl.n	10009a70 <__swrite+0x1e>
10009a64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10009a68:	2302      	movs	r3, #2
10009a6a:	2200      	movs	r2, #0
10009a6c:	f000 f840 	bl	10009af0 <_lseek_r>
10009a70:	89a3      	ldrh	r3, [r4, #12]
10009a72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
10009a76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
10009a7a:	81a3      	strh	r3, [r4, #12]
10009a7c:	4632      	mov	r2, r6
10009a7e:	463b      	mov	r3, r7
10009a80:	4628      	mov	r0, r5
10009a82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
10009a86:	f000 b867 	b.w	10009b58 <_write_r>

10009a8a <__sseek>:
10009a8a:	b510      	push	{r4, lr}
10009a8c:	460c      	mov	r4, r1
10009a8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10009a92:	f000 f82d 	bl	10009af0 <_lseek_r>
10009a96:	1c43      	adds	r3, r0, #1
10009a98:	89a3      	ldrh	r3, [r4, #12]
10009a9a:	bf15      	itete	ne
10009a9c:	6560      	strne	r0, [r4, #84]	@ 0x54
10009a9e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
10009aa2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
10009aa6:	81a3      	strheq	r3, [r4, #12]
10009aa8:	bf18      	it	ne
10009aaa:	81a3      	strhne	r3, [r4, #12]
10009aac:	bd10      	pop	{r4, pc}

10009aae <__sclose>:
10009aae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10009ab2:	f000 b80d 	b.w	10009ad0 <_close_r>

10009ab6 <memset>:
10009ab6:	4402      	add	r2, r0
10009ab8:	4603      	mov	r3, r0
10009aba:	4293      	cmp	r3, r2
10009abc:	d100      	bne.n	10009ac0 <memset+0xa>
10009abe:	4770      	bx	lr
10009ac0:	f803 1b01 	strb.w	r1, [r3], #1
10009ac4:	e7f9      	b.n	10009aba <memset+0x4>
	...

10009ac8 <_localeconv_r>:
10009ac8:	4800      	ldr	r0, [pc, #0]	@ (10009acc <_localeconv_r+0x4>)
10009aca:	4770      	bx	lr
10009acc:	0800248c 	.word	0x0800248c

10009ad0 <_close_r>:
10009ad0:	b538      	push	{r3, r4, r5, lr}
10009ad2:	4d06      	ldr	r5, [pc, #24]	@ (10009aec <_close_r+0x1c>)
10009ad4:	2300      	movs	r3, #0
10009ad6:	4604      	mov	r4, r0
10009ad8:	4608      	mov	r0, r1
10009ada:	602b      	str	r3, [r5, #0]
10009adc:	f001 ff24 	bl	1000b928 <_close>
10009ae0:	1c43      	adds	r3, r0, #1
10009ae2:	d102      	bne.n	10009aea <_close_r+0x1a>
10009ae4:	682b      	ldr	r3, [r5, #0]
10009ae6:	b103      	cbz	r3, 10009aea <_close_r+0x1a>
10009ae8:	6023      	str	r3, [r4, #0]
10009aea:	bd38      	pop	{r3, r4, r5, pc}
10009aec:	08002f88 	.word	0x08002f88

10009af0 <_lseek_r>:
10009af0:	b538      	push	{r3, r4, r5, lr}
10009af2:	4d07      	ldr	r5, [pc, #28]	@ (10009b10 <_lseek_r+0x20>)
10009af4:	4604      	mov	r4, r0
10009af6:	4608      	mov	r0, r1
10009af8:	4611      	mov	r1, r2
10009afa:	2200      	movs	r2, #0
10009afc:	602a      	str	r2, [r5, #0]
10009afe:	461a      	mov	r2, r3
10009b00:	f001 ff3a 	bl	1000b978 <_lseek>
10009b04:	1c43      	adds	r3, r0, #1
10009b06:	d102      	bne.n	10009b0e <_lseek_r+0x1e>
10009b08:	682b      	ldr	r3, [r5, #0]
10009b0a:	b103      	cbz	r3, 10009b0e <_lseek_r+0x1e>
10009b0c:	6023      	str	r3, [r4, #0]
10009b0e:	bd38      	pop	{r3, r4, r5, pc}
10009b10:	08002f88 	.word	0x08002f88

10009b14 <_read_r>:
10009b14:	b538      	push	{r3, r4, r5, lr}
10009b16:	4d07      	ldr	r5, [pc, #28]	@ (10009b34 <_read_r+0x20>)
10009b18:	4604      	mov	r4, r0
10009b1a:	4608      	mov	r0, r1
10009b1c:	4611      	mov	r1, r2
10009b1e:	2200      	movs	r2, #0
10009b20:	602a      	str	r2, [r5, #0]
10009b22:	461a      	mov	r2, r3
10009b24:	f7fc fde8 	bl	100066f8 <_read>
10009b28:	1c43      	adds	r3, r0, #1
10009b2a:	d102      	bne.n	10009b32 <_read_r+0x1e>
10009b2c:	682b      	ldr	r3, [r5, #0]
10009b2e:	b103      	cbz	r3, 10009b32 <_read_r+0x1e>
10009b30:	6023      	str	r3, [r4, #0]
10009b32:	bd38      	pop	{r3, r4, r5, pc}
10009b34:	08002f88 	.word	0x08002f88

10009b38 <_sbrk_r>:
10009b38:	b538      	push	{r3, r4, r5, lr}
10009b3a:	4d06      	ldr	r5, [pc, #24]	@ (10009b54 <_sbrk_r+0x1c>)
10009b3c:	2300      	movs	r3, #0
10009b3e:	4604      	mov	r4, r0
10009b40:	4608      	mov	r0, r1
10009b42:	602b      	str	r3, [r5, #0]
10009b44:	f001 ff20 	bl	1000b988 <_sbrk>
10009b48:	1c43      	adds	r3, r0, #1
10009b4a:	d102      	bne.n	10009b52 <_sbrk_r+0x1a>
10009b4c:	682b      	ldr	r3, [r5, #0]
10009b4e:	b103      	cbz	r3, 10009b52 <_sbrk_r+0x1a>
10009b50:	6023      	str	r3, [r4, #0]
10009b52:	bd38      	pop	{r3, r4, r5, pc}
10009b54:	08002f88 	.word	0x08002f88

10009b58 <_write_r>:
10009b58:	b538      	push	{r3, r4, r5, lr}
10009b5a:	4d07      	ldr	r5, [pc, #28]	@ (10009b78 <_write_r+0x20>)
10009b5c:	4604      	mov	r4, r0
10009b5e:	4608      	mov	r0, r1
10009b60:	4611      	mov	r1, r2
10009b62:	2200      	movs	r2, #0
10009b64:	602a      	str	r2, [r5, #0]
10009b66:	461a      	mov	r2, r3
10009b68:	f7fc fdb0 	bl	100066cc <_write>
10009b6c:	1c43      	adds	r3, r0, #1
10009b6e:	d102      	bne.n	10009b76 <_write_r+0x1e>
10009b70:	682b      	ldr	r3, [r5, #0]
10009b72:	b103      	cbz	r3, 10009b76 <_write_r+0x1e>
10009b74:	6023      	str	r3, [r4, #0]
10009b76:	bd38      	pop	{r3, r4, r5, pc}
10009b78:	08002f88 	.word	0x08002f88

10009b7c <__libc_init_array>:
10009b7c:	b570      	push	{r4, r5, r6, lr}
10009b7e:	4d0d      	ldr	r5, [pc, #52]	@ (10009bb4 <__libc_init_array+0x38>)
10009b80:	4c0d      	ldr	r4, [pc, #52]	@ (10009bb8 <__libc_init_array+0x3c>)
10009b82:	1b64      	subs	r4, r4, r5
10009b84:	10a4      	asrs	r4, r4, #2
10009b86:	2600      	movs	r6, #0
10009b88:	42a6      	cmp	r6, r4
10009b8a:	d109      	bne.n	10009ba0 <__libc_init_array+0x24>
10009b8c:	4d0b      	ldr	r5, [pc, #44]	@ (10009bbc <__libc_init_array+0x40>)
10009b8e:	4c0c      	ldr	r4, [pc, #48]	@ (10009bc0 <__libc_init_array+0x44>)
10009b90:	f001 ff0a 	bl	1000b9a8 <_init>
10009b94:	1b64      	subs	r4, r4, r5
10009b96:	10a4      	asrs	r4, r4, #2
10009b98:	2600      	movs	r6, #0
10009b9a:	42a6      	cmp	r6, r4
10009b9c:	d105      	bne.n	10009baa <__libc_init_array+0x2e>
10009b9e:	bd70      	pop	{r4, r5, r6, pc}
10009ba0:	f855 3b04 	ldr.w	r3, [r5], #4
10009ba4:	4798      	blx	r3
10009ba6:	3601      	adds	r6, #1
10009ba8:	e7ee      	b.n	10009b88 <__libc_init_array+0xc>
10009baa:	f855 3b04 	ldr.w	r3, [r5], #4
10009bae:	4798      	blx	r3
10009bb0:	3601      	adds	r6, #1
10009bb2:	e7f2      	b.n	10009b9a <__libc_init_array+0x1e>
10009bb4:	08002508 	.word	0x08002508
10009bb8:	08002508 	.word	0x08002508
10009bbc:	08002508 	.word	0x08002508
10009bc0:	0800250c 	.word	0x0800250c

10009bc4 <__libc_fini_array>:
10009bc4:	b538      	push	{r3, r4, r5, lr}
10009bc6:	4d07      	ldr	r5, [pc, #28]	@ (10009be4 <__libc_fini_array+0x20>)
10009bc8:	4c07      	ldr	r4, [pc, #28]	@ (10009be8 <__libc_fini_array+0x24>)
10009bca:	1b64      	subs	r4, r4, r5
10009bcc:	10a4      	asrs	r4, r4, #2
10009bce:	b91c      	cbnz	r4, 10009bd8 <__libc_fini_array+0x14>
10009bd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
10009bd4:	f001 beee 	b.w	1000b9b4 <_fini>
10009bd8:	3c01      	subs	r4, #1
10009bda:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
10009bde:	4798      	blx	r3
10009be0:	e7f5      	b.n	10009bce <__libc_fini_array+0xa>
10009be2:	bf00      	nop
10009be4:	0800250c 	.word	0x0800250c
10009be8:	08002510 	.word	0x08002510

10009bec <__retarget_lock_acquire_recursive>:
10009bec:	4770      	bx	lr

10009bee <__retarget_lock_release_recursive>:
10009bee:	4770      	bx	lr

10009bf0 <memchr>:
10009bf0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
10009bf4:	2a10      	cmp	r2, #16
10009bf6:	db2b      	blt.n	10009c50 <memchr+0x60>
10009bf8:	f010 0f07 	tst.w	r0, #7
10009bfc:	d008      	beq.n	10009c10 <memchr+0x20>
10009bfe:	f810 3b01 	ldrb.w	r3, [r0], #1
10009c02:	3a01      	subs	r2, #1
10009c04:	428b      	cmp	r3, r1
10009c06:	d02d      	beq.n	10009c64 <memchr+0x74>
10009c08:	f010 0f07 	tst.w	r0, #7
10009c0c:	b342      	cbz	r2, 10009c60 <memchr+0x70>
10009c0e:	d1f6      	bne.n	10009bfe <memchr+0xe>
10009c10:	b4f0      	push	{r4, r5, r6, r7}
10009c12:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
10009c16:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
10009c1a:	f022 0407 	bic.w	r4, r2, #7
10009c1e:	f07f 0700 	mvns.w	r7, #0
10009c22:	2300      	movs	r3, #0
10009c24:	e8f0 5602 	ldrd	r5, r6, [r0], #8
10009c28:	3c08      	subs	r4, #8
10009c2a:	ea85 0501 	eor.w	r5, r5, r1
10009c2e:	ea86 0601 	eor.w	r6, r6, r1
10009c32:	fa85 f547 	uadd8	r5, r5, r7
10009c36:	faa3 f587 	sel	r5, r3, r7
10009c3a:	fa86 f647 	uadd8	r6, r6, r7
10009c3e:	faa5 f687 	sel	r6, r5, r7
10009c42:	b98e      	cbnz	r6, 10009c68 <memchr+0x78>
10009c44:	d1ee      	bne.n	10009c24 <memchr+0x34>
10009c46:	bcf0      	pop	{r4, r5, r6, r7}
10009c48:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
10009c4c:	f002 0207 	and.w	r2, r2, #7
10009c50:	b132      	cbz	r2, 10009c60 <memchr+0x70>
10009c52:	f810 3b01 	ldrb.w	r3, [r0], #1
10009c56:	3a01      	subs	r2, #1
10009c58:	ea83 0301 	eor.w	r3, r3, r1
10009c5c:	b113      	cbz	r3, 10009c64 <memchr+0x74>
10009c5e:	d1f8      	bne.n	10009c52 <memchr+0x62>
10009c60:	2000      	movs	r0, #0
10009c62:	4770      	bx	lr
10009c64:	3801      	subs	r0, #1
10009c66:	4770      	bx	lr
10009c68:	2d00      	cmp	r5, #0
10009c6a:	bf06      	itte	eq
10009c6c:	4635      	moveq	r5, r6
10009c6e:	3803      	subeq	r0, #3
10009c70:	3807      	subne	r0, #7
10009c72:	f015 0f01 	tst.w	r5, #1
10009c76:	d107      	bne.n	10009c88 <memchr+0x98>
10009c78:	3001      	adds	r0, #1
10009c7a:	f415 7f80 	tst.w	r5, #256	@ 0x100
10009c7e:	bf02      	ittt	eq
10009c80:	3001      	addeq	r0, #1
10009c82:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
10009c86:	3001      	addeq	r0, #1
10009c88:	bcf0      	pop	{r4, r5, r6, r7}
10009c8a:	3801      	subs	r0, #1
10009c8c:	4770      	bx	lr
10009c8e:	bf00      	nop

10009c90 <memcpy>:
10009c90:	440a      	add	r2, r1
10009c92:	4291      	cmp	r1, r2
10009c94:	f100 33ff 	add.w	r3, r0, #4294967295
10009c98:	d100      	bne.n	10009c9c <memcpy+0xc>
10009c9a:	4770      	bx	lr
10009c9c:	b510      	push	{r4, lr}
10009c9e:	f811 4b01 	ldrb.w	r4, [r1], #1
10009ca2:	f803 4f01 	strb.w	r4, [r3, #1]!
10009ca6:	4291      	cmp	r1, r2
10009ca8:	d1f9      	bne.n	10009c9e <memcpy+0xe>
10009caa:	bd10      	pop	{r4, pc}

10009cac <strlen>:
10009cac:	4603      	mov	r3, r0
10009cae:	f813 2b01 	ldrb.w	r2, [r3], #1
10009cb2:	2a00      	cmp	r2, #0
10009cb4:	d1fb      	bne.n	10009cae <strlen+0x2>
10009cb6:	1a18      	subs	r0, r3, r0
10009cb8:	3801      	subs	r0, #1
10009cba:	4770      	bx	lr

10009cbc <quorem>:
10009cbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
10009cc0:	6903      	ldr	r3, [r0, #16]
10009cc2:	690c      	ldr	r4, [r1, #16]
10009cc4:	42a3      	cmp	r3, r4
10009cc6:	4607      	mov	r7, r0
10009cc8:	db7e      	blt.n	10009dc8 <quorem+0x10c>
10009cca:	3c01      	subs	r4, #1
10009ccc:	f101 0814 	add.w	r8, r1, #20
10009cd0:	f100 0514 	add.w	r5, r0, #20
10009cd4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
10009cd8:	9301      	str	r3, [sp, #4]
10009cda:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
10009cde:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
10009ce2:	3301      	adds	r3, #1
10009ce4:	429a      	cmp	r2, r3
10009ce6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
10009cea:	eb08 0984 	add.w	r9, r8, r4, lsl #2
10009cee:	fbb2 f6f3 	udiv	r6, r2, r3
10009cf2:	d331      	bcc.n	10009d58 <quorem+0x9c>
10009cf4:	f04f 0e00 	mov.w	lr, #0
10009cf8:	4640      	mov	r0, r8
10009cfa:	46ac      	mov	ip, r5
10009cfc:	46f2      	mov	sl, lr
10009cfe:	f850 2b04 	ldr.w	r2, [r0], #4
10009d02:	b293      	uxth	r3, r2
10009d04:	fb06 e303 	mla	r3, r6, r3, lr
10009d08:	ea4f 4e12 	mov.w	lr, r2, lsr #16
10009d0c:	0c1a      	lsrs	r2, r3, #16
10009d0e:	b29b      	uxth	r3, r3
10009d10:	ebaa 0303 	sub.w	r3, sl, r3
10009d14:	f8dc a000 	ldr.w	sl, [ip]
10009d18:	fa13 f38a 	uxtah	r3, r3, sl
10009d1c:	fb06 220e 	mla	r2, r6, lr, r2
10009d20:	9300      	str	r3, [sp, #0]
10009d22:	9b00      	ldr	r3, [sp, #0]
10009d24:	ea4f 4e12 	mov.w	lr, r2, lsr #16
10009d28:	b292      	uxth	r2, r2
10009d2a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
10009d2e:	eb02 4223 	add.w	r2, r2, r3, asr #16
10009d32:	f8bd 3000 	ldrh.w	r3, [sp]
10009d36:	4581      	cmp	r9, r0
10009d38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
10009d3c:	f84c 3b04 	str.w	r3, [ip], #4
10009d40:	ea4f 4a22 	mov.w	sl, r2, asr #16
10009d44:	d2db      	bcs.n	10009cfe <quorem+0x42>
10009d46:	f855 300b 	ldr.w	r3, [r5, fp]
10009d4a:	b92b      	cbnz	r3, 10009d58 <quorem+0x9c>
10009d4c:	9b01      	ldr	r3, [sp, #4]
10009d4e:	3b04      	subs	r3, #4
10009d50:	429d      	cmp	r5, r3
10009d52:	461a      	mov	r2, r3
10009d54:	d32c      	bcc.n	10009db0 <quorem+0xf4>
10009d56:	613c      	str	r4, [r7, #16]
10009d58:	4638      	mov	r0, r7
10009d5a:	f001 f8f3 	bl	1000af44 <__mcmp>
10009d5e:	2800      	cmp	r0, #0
10009d60:	db22      	blt.n	10009da8 <quorem+0xec>
10009d62:	3601      	adds	r6, #1
10009d64:	4629      	mov	r1, r5
10009d66:	2000      	movs	r0, #0
10009d68:	f858 2b04 	ldr.w	r2, [r8], #4
10009d6c:	f8d1 c000 	ldr.w	ip, [r1]
10009d70:	b293      	uxth	r3, r2
10009d72:	1ac3      	subs	r3, r0, r3
10009d74:	0c12      	lsrs	r2, r2, #16
10009d76:	fa13 f38c 	uxtah	r3, r3, ip
10009d7a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
10009d7e:	eb02 4223 	add.w	r2, r2, r3, asr #16
10009d82:	b29b      	uxth	r3, r3
10009d84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
10009d88:	45c1      	cmp	r9, r8
10009d8a:	f841 3b04 	str.w	r3, [r1], #4
10009d8e:	ea4f 4022 	mov.w	r0, r2, asr #16
10009d92:	d2e9      	bcs.n	10009d68 <quorem+0xac>
10009d94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
10009d98:	eb05 0384 	add.w	r3, r5, r4, lsl #2
10009d9c:	b922      	cbnz	r2, 10009da8 <quorem+0xec>
10009d9e:	3b04      	subs	r3, #4
10009da0:	429d      	cmp	r5, r3
10009da2:	461a      	mov	r2, r3
10009da4:	d30a      	bcc.n	10009dbc <quorem+0x100>
10009da6:	613c      	str	r4, [r7, #16]
10009da8:	4630      	mov	r0, r6
10009daa:	b003      	add	sp, #12
10009dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10009db0:	6812      	ldr	r2, [r2, #0]
10009db2:	3b04      	subs	r3, #4
10009db4:	2a00      	cmp	r2, #0
10009db6:	d1ce      	bne.n	10009d56 <quorem+0x9a>
10009db8:	3c01      	subs	r4, #1
10009dba:	e7c9      	b.n	10009d50 <quorem+0x94>
10009dbc:	6812      	ldr	r2, [r2, #0]
10009dbe:	3b04      	subs	r3, #4
10009dc0:	2a00      	cmp	r2, #0
10009dc2:	d1f0      	bne.n	10009da6 <quorem+0xea>
10009dc4:	3c01      	subs	r4, #1
10009dc6:	e7eb      	b.n	10009da0 <quorem+0xe4>
10009dc8:	2000      	movs	r0, #0
10009dca:	e7ee      	b.n	10009daa <quorem+0xee>
10009dcc:	0000      	movs	r0, r0
	...

10009dd0 <_dtoa_r>:
10009dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10009dd4:	ed2d 8b04 	vpush	{d8-d9}
10009dd8:	69c5      	ldr	r5, [r0, #28]
10009dda:	b093      	sub	sp, #76	@ 0x4c
10009ddc:	4616      	mov	r6, r2
10009dde:	461f      	mov	r7, r3
10009de0:	e9cd 6706 	strd	r6, r7, [sp, #24]
10009de4:	f8dd 808c 	ldr.w	r8, [sp, #140]	@ 0x8c
10009de8:	4604      	mov	r4, r0
10009dea:	b975      	cbnz	r5, 10009e0a <_dtoa_r+0x3a>
10009dec:	2010      	movs	r0, #16
10009dee:	f7ff f83b 	bl	10008e68 <malloc>
10009df2:	4602      	mov	r2, r0
10009df4:	61e0      	str	r0, [r4, #28]
10009df6:	b920      	cbnz	r0, 10009e02 <_dtoa_r+0x32>
10009df8:	4baf      	ldr	r3, [pc, #700]	@ (1000a0b8 <_dtoa_r+0x2e8>)
10009dfa:	21ef      	movs	r1, #239	@ 0xef
10009dfc:	48af      	ldr	r0, [pc, #700]	@ (1000a0bc <_dtoa_r+0x2ec>)
10009dfe:	f001 fc5d 	bl	1000b6bc <__assert_func>
10009e02:	e9c0 5501 	strd	r5, r5, [r0, #4]
10009e06:	6005      	str	r5, [r0, #0]
10009e08:	60c5      	str	r5, [r0, #12]
10009e0a:	69e3      	ldr	r3, [r4, #28]
10009e0c:	6819      	ldr	r1, [r3, #0]
10009e0e:	b151      	cbz	r1, 10009e26 <_dtoa_r+0x56>
10009e10:	685a      	ldr	r2, [r3, #4]
10009e12:	604a      	str	r2, [r1, #4]
10009e14:	2301      	movs	r3, #1
10009e16:	4093      	lsls	r3, r2
10009e18:	608b      	str	r3, [r1, #8]
10009e1a:	4620      	mov	r0, r4
10009e1c:	f000 fe56 	bl	1000aacc <_Bfree>
10009e20:	69e3      	ldr	r3, [r4, #28]
10009e22:	2200      	movs	r2, #0
10009e24:	601a      	str	r2, [r3, #0]
10009e26:	1e3b      	subs	r3, r7, #0
10009e28:	bfb9      	ittee	lt
10009e2a:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
10009e2e:	9307      	strlt	r3, [sp, #28]
10009e30:	2300      	movge	r3, #0
10009e32:	f8c8 3000 	strge.w	r3, [r8]
10009e36:	f8dd 901c 	ldr.w	r9, [sp, #28]
10009e3a:	4ba1      	ldr	r3, [pc, #644]	@ (1000a0c0 <_dtoa_r+0x2f0>)
10009e3c:	bfbc      	itt	lt
10009e3e:	2201      	movlt	r2, #1
10009e40:	f8c8 2000 	strlt.w	r2, [r8]
10009e44:	ea33 0309 	bics.w	r3, r3, r9
10009e48:	d11b      	bne.n	10009e82 <_dtoa_r+0xb2>
10009e4a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
10009e4c:	f242 730f 	movw	r3, #9999	@ 0x270f
10009e50:	6013      	str	r3, [r2, #0]
10009e52:	f3c9 0313 	ubfx	r3, r9, #0, #20
10009e56:	4333      	orrs	r3, r6
10009e58:	f000 8596 	beq.w	1000a988 <_dtoa_r+0xbb8>
10009e5c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
10009e5e:	b963      	cbnz	r3, 10009e7a <_dtoa_r+0xaa>
10009e60:	4b98      	ldr	r3, [pc, #608]	@ (1000a0c4 <_dtoa_r+0x2f4>)
10009e62:	e027      	b.n	10009eb4 <_dtoa_r+0xe4>
10009e64:	4b98      	ldr	r3, [pc, #608]	@ (1000a0c8 <_dtoa_r+0x2f8>)
10009e66:	9303      	str	r3, [sp, #12]
10009e68:	3308      	adds	r3, #8
10009e6a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
10009e6c:	6013      	str	r3, [r2, #0]
10009e6e:	9803      	ldr	r0, [sp, #12]
10009e70:	b013      	add	sp, #76	@ 0x4c
10009e72:	ecbd 8b04 	vpop	{d8-d9}
10009e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10009e7a:	4b92      	ldr	r3, [pc, #584]	@ (1000a0c4 <_dtoa_r+0x2f4>)
10009e7c:	9303      	str	r3, [sp, #12]
10009e7e:	3303      	adds	r3, #3
10009e80:	e7f3      	b.n	10009e6a <_dtoa_r+0x9a>
10009e82:	ed9d 7b06 	vldr	d7, [sp, #24]
10009e86:	2200      	movs	r2, #0
10009e88:	ec51 0b17 	vmov	r0, r1, d7
10009e8c:	eeb0 8a47 	vmov.f32	s16, s14
10009e90:	eef0 8a67 	vmov.f32	s17, s15
10009e94:	2300      	movs	r3, #0
10009e96:	f7fe fda9 	bl	100089ec <__aeabi_dcmpeq>
10009e9a:	4680      	mov	r8, r0
10009e9c:	b160      	cbz	r0, 10009eb8 <_dtoa_r+0xe8>
10009e9e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
10009ea0:	2301      	movs	r3, #1
10009ea2:	6013      	str	r3, [r2, #0]
10009ea4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
10009ea6:	2b00      	cmp	r3, #0
10009ea8:	f000 856b 	beq.w	1000a982 <_dtoa_r+0xbb2>
10009eac:	4b87      	ldr	r3, [pc, #540]	@ (1000a0cc <_dtoa_r+0x2fc>)
10009eae:	9a24      	ldr	r2, [sp, #144]	@ 0x90
10009eb0:	6013      	str	r3, [r2, #0]
10009eb2:	3b01      	subs	r3, #1
10009eb4:	9303      	str	r3, [sp, #12]
10009eb6:	e7da      	b.n	10009e6e <_dtoa_r+0x9e>
10009eb8:	ab10      	add	r3, sp, #64	@ 0x40
10009eba:	9301      	str	r3, [sp, #4]
10009ebc:	ab11      	add	r3, sp, #68	@ 0x44
10009ebe:	9300      	str	r3, [sp, #0]
10009ec0:	4620      	mov	r0, r4
10009ec2:	ec53 2b18 	vmov	r2, r3, d8
10009ec6:	f001 f8e3 	bl	1000b090 <__d2b>
10009eca:	f3c9 550a 	ubfx	r5, r9, #20, #11
10009ece:	4682      	mov	sl, r0
10009ed0:	2d00      	cmp	r5, #0
10009ed2:	d07f      	beq.n	10009fd4 <_dtoa_r+0x204>
10009ed4:	ee18 3a90 	vmov	r3, s17
10009ed8:	f3c3 0313 	ubfx	r3, r3, #0, #20
10009edc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
10009ee0:	ec51 0b18 	vmov	r0, r1, d8
10009ee4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
10009ee8:	f2a5 35ff 	subw	r5, r5, #1023	@ 0x3ff
10009eec:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
10009ef0:	4619      	mov	r1, r3
10009ef2:	2200      	movs	r2, #0
10009ef4:	4b76      	ldr	r3, [pc, #472]	@ (1000a0d0 <_dtoa_r+0x300>)
10009ef6:	f7fe f959 	bl	100081ac <__aeabi_dsub>
10009efa:	a369      	add	r3, pc, #420	@ (adr r3, 1000a0a0 <_dtoa_r+0x2d0>)
10009efc:	e9d3 2300 	ldrd	r2, r3, [r3]
10009f00:	f7fe fb0c 	bl	1000851c <__aeabi_dmul>
10009f04:	a368      	add	r3, pc, #416	@ (adr r3, 1000a0a8 <_dtoa_r+0x2d8>)
10009f06:	e9d3 2300 	ldrd	r2, r3, [r3]
10009f0a:	f7fe f951 	bl	100081b0 <__adddf3>
10009f0e:	4606      	mov	r6, r0
10009f10:	4628      	mov	r0, r5
10009f12:	460f      	mov	r7, r1
10009f14:	f7fe fa98 	bl	10008448 <__aeabi_i2d>
10009f18:	a365      	add	r3, pc, #404	@ (adr r3, 1000a0b0 <_dtoa_r+0x2e0>)
10009f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
10009f1e:	f7fe fafd 	bl	1000851c <__aeabi_dmul>
10009f22:	4602      	mov	r2, r0
10009f24:	460b      	mov	r3, r1
10009f26:	4630      	mov	r0, r6
10009f28:	4639      	mov	r1, r7
10009f2a:	f7fe f941 	bl	100081b0 <__adddf3>
10009f2e:	4606      	mov	r6, r0
10009f30:	460f      	mov	r7, r1
10009f32:	f7fe fda3 	bl	10008a7c <__aeabi_d2iz>
10009f36:	2200      	movs	r2, #0
10009f38:	4683      	mov	fp, r0
10009f3a:	2300      	movs	r3, #0
10009f3c:	4630      	mov	r0, r6
10009f3e:	4639      	mov	r1, r7
10009f40:	f7fe fd5e 	bl	10008a00 <__aeabi_dcmplt>
10009f44:	b148      	cbz	r0, 10009f5a <_dtoa_r+0x18a>
10009f46:	4658      	mov	r0, fp
10009f48:	f7fe fa7e 	bl	10008448 <__aeabi_i2d>
10009f4c:	4632      	mov	r2, r6
10009f4e:	463b      	mov	r3, r7
10009f50:	f7fe fd4c 	bl	100089ec <__aeabi_dcmpeq>
10009f54:	b908      	cbnz	r0, 10009f5a <_dtoa_r+0x18a>
10009f56:	f10b 3bff 	add.w	fp, fp, #4294967295
10009f5a:	f1bb 0f16 	cmp.w	fp, #22
10009f5e:	d857      	bhi.n	1000a010 <_dtoa_r+0x240>
10009f60:	4b5c      	ldr	r3, [pc, #368]	@ (1000a0d4 <_dtoa_r+0x304>)
10009f62:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
10009f66:	e9d3 2300 	ldrd	r2, r3, [r3]
10009f6a:	ec51 0b18 	vmov	r0, r1, d8
10009f6e:	f7fe fd47 	bl	10008a00 <__aeabi_dcmplt>
10009f72:	2800      	cmp	r0, #0
10009f74:	d04e      	beq.n	1000a014 <_dtoa_r+0x244>
10009f76:	f10b 3bff 	add.w	fp, fp, #4294967295
10009f7a:	2300      	movs	r3, #0
10009f7c:	930d      	str	r3, [sp, #52]	@ 0x34
10009f7e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
10009f80:	1b5b      	subs	r3, r3, r5
10009f82:	1e5a      	subs	r2, r3, #1
10009f84:	bf45      	ittet	mi
10009f86:	f1c3 0301 	rsbmi	r3, r3, #1
10009f8a:	9308      	strmi	r3, [sp, #32]
10009f8c:	2300      	movpl	r3, #0
10009f8e:	2300      	movmi	r3, #0
10009f90:	9209      	str	r2, [sp, #36]	@ 0x24
10009f92:	bf54      	ite	pl
10009f94:	9308      	strpl	r3, [sp, #32]
10009f96:	9309      	strmi	r3, [sp, #36]	@ 0x24
10009f98:	f1bb 0f00 	cmp.w	fp, #0
10009f9c:	db3c      	blt.n	1000a018 <_dtoa_r+0x248>
10009f9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10009fa0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
10009fa4:	445b      	add	r3, fp
10009fa6:	9309      	str	r3, [sp, #36]	@ 0x24
10009fa8:	2300      	movs	r3, #0
10009faa:	930a      	str	r3, [sp, #40]	@ 0x28
10009fac:	9b20      	ldr	r3, [sp, #128]	@ 0x80
10009fae:	2b09      	cmp	r3, #9
10009fb0:	d868      	bhi.n	1000a084 <_dtoa_r+0x2b4>
10009fb2:	2b05      	cmp	r3, #5
10009fb4:	bfc4      	itt	gt
10009fb6:	3b04      	subgt	r3, #4
10009fb8:	9320      	strgt	r3, [sp, #128]	@ 0x80
10009fba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
10009fbc:	f1a3 0302 	sub.w	r3, r3, #2
10009fc0:	bfcc      	ite	gt
10009fc2:	2500      	movgt	r5, #0
10009fc4:	2501      	movle	r5, #1
10009fc6:	2b03      	cmp	r3, #3
10009fc8:	f200 8088 	bhi.w	1000a0dc <_dtoa_r+0x30c>
10009fcc:	e8df f003 	tbb	[pc, r3]
10009fd0:	58393b2e 	.word	0x58393b2e
10009fd4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	@ 0x40
10009fd8:	441d      	add	r5, r3
10009fda:	f205 4332 	addw	r3, r5, #1074	@ 0x432
10009fde:	2b20      	cmp	r3, #32
10009fe0:	bfc1      	itttt	gt
10009fe2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
10009fe6:	fa09 f903 	lslgt.w	r9, r9, r3
10009fea:	f205 4312 	addwgt	r3, r5, #1042	@ 0x412
10009fee:	fa26 f303 	lsrgt.w	r3, r6, r3
10009ff2:	bfd6      	itet	le
10009ff4:	f1c3 0320 	rsble	r3, r3, #32
10009ff8:	ea49 0003 	orrgt.w	r0, r9, r3
10009ffc:	fa06 f003 	lslle.w	r0, r6, r3
1000a000:	f7fe fa12 	bl	10008428 <__aeabi_ui2d>
1000a004:	2201      	movs	r2, #1
1000a006:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
1000a00a:	3d01      	subs	r5, #1
1000a00c:	920e      	str	r2, [sp, #56]	@ 0x38
1000a00e:	e76f      	b.n	10009ef0 <_dtoa_r+0x120>
1000a010:	2301      	movs	r3, #1
1000a012:	e7b3      	b.n	10009f7c <_dtoa_r+0x1ac>
1000a014:	900d      	str	r0, [sp, #52]	@ 0x34
1000a016:	e7b2      	b.n	10009f7e <_dtoa_r+0x1ae>
1000a018:	9b08      	ldr	r3, [sp, #32]
1000a01a:	eba3 030b 	sub.w	r3, r3, fp
1000a01e:	9308      	str	r3, [sp, #32]
1000a020:	f1cb 0300 	rsb	r3, fp, #0
1000a024:	930a      	str	r3, [sp, #40]	@ 0x28
1000a026:	2300      	movs	r3, #0
1000a028:	930c      	str	r3, [sp, #48]	@ 0x30
1000a02a:	e7bf      	b.n	10009fac <_dtoa_r+0x1dc>
1000a02c:	2300      	movs	r3, #0
1000a02e:	930b      	str	r3, [sp, #44]	@ 0x2c
1000a030:	9b21      	ldr	r3, [sp, #132]	@ 0x84
1000a032:	2b00      	cmp	r3, #0
1000a034:	dc55      	bgt.n	1000a0e2 <_dtoa_r+0x312>
1000a036:	2301      	movs	r3, #1
1000a038:	e9cd 3304 	strd	r3, r3, [sp, #16]
1000a03c:	461a      	mov	r2, r3
1000a03e:	9221      	str	r2, [sp, #132]	@ 0x84
1000a040:	e00b      	b.n	1000a05a <_dtoa_r+0x28a>
1000a042:	2301      	movs	r3, #1
1000a044:	e7f3      	b.n	1000a02e <_dtoa_r+0x25e>
1000a046:	2300      	movs	r3, #0
1000a048:	930b      	str	r3, [sp, #44]	@ 0x2c
1000a04a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
1000a04c:	445b      	add	r3, fp
1000a04e:	9304      	str	r3, [sp, #16]
1000a050:	3301      	adds	r3, #1
1000a052:	2b01      	cmp	r3, #1
1000a054:	9305      	str	r3, [sp, #20]
1000a056:	bfb8      	it	lt
1000a058:	2301      	movlt	r3, #1
1000a05a:	69e0      	ldr	r0, [r4, #28]
1000a05c:	2100      	movs	r1, #0
1000a05e:	2204      	movs	r2, #4
1000a060:	f102 0614 	add.w	r6, r2, #20
1000a064:	429e      	cmp	r6, r3
1000a066:	d940      	bls.n	1000a0ea <_dtoa_r+0x31a>
1000a068:	6041      	str	r1, [r0, #4]
1000a06a:	4620      	mov	r0, r4
1000a06c:	f000 fcee 	bl	1000aa4c <_Balloc>
1000a070:	9003      	str	r0, [sp, #12]
1000a072:	2800      	cmp	r0, #0
1000a074:	d13c      	bne.n	1000a0f0 <_dtoa_r+0x320>
1000a076:	4b18      	ldr	r3, [pc, #96]	@ (1000a0d8 <_dtoa_r+0x308>)
1000a078:	4602      	mov	r2, r0
1000a07a:	f240 11af 	movw	r1, #431	@ 0x1af
1000a07e:	e6bd      	b.n	10009dfc <_dtoa_r+0x2c>
1000a080:	2301      	movs	r3, #1
1000a082:	e7e1      	b.n	1000a048 <_dtoa_r+0x278>
1000a084:	2501      	movs	r5, #1
1000a086:	2300      	movs	r3, #0
1000a088:	9320      	str	r3, [sp, #128]	@ 0x80
1000a08a:	950b      	str	r5, [sp, #44]	@ 0x2c
1000a08c:	f04f 33ff 	mov.w	r3, #4294967295
1000a090:	e9cd 3304 	strd	r3, r3, [sp, #16]
1000a094:	2200      	movs	r2, #0
1000a096:	2312      	movs	r3, #18
1000a098:	e7d1      	b.n	1000a03e <_dtoa_r+0x26e>
1000a09a:	bf00      	nop
1000a09c:	f3af 8000 	nop.w
1000a0a0:	636f4361 	.word	0x636f4361
1000a0a4:	3fd287a7 	.word	0x3fd287a7
1000a0a8:	8b60c8b3 	.word	0x8b60c8b3
1000a0ac:	3fc68a28 	.word	0x3fc68a28
1000a0b0:	509f79fb 	.word	0x509f79fb
1000a0b4:	3fd34413 	.word	0x3fd34413
1000a0b8:	10016c3d 	.word	0x10016c3d
1000a0bc:	10016c54 	.word	0x10016c54
1000a0c0:	7ff00000 	.word	0x7ff00000
1000a0c4:	10016c39 	.word	0x10016c39
1000a0c8:	10016c30 	.word	0x10016c30
1000a0cc:	10016c0d 	.word	0x10016c0d
1000a0d0:	3ff80000 	.word	0x3ff80000
1000a0d4:	10016d40 	.word	0x10016d40
1000a0d8:	10016cad 	.word	0x10016cad
1000a0dc:	2301      	movs	r3, #1
1000a0de:	930b      	str	r3, [sp, #44]	@ 0x2c
1000a0e0:	e7d4      	b.n	1000a08c <_dtoa_r+0x2bc>
1000a0e2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
1000a0e4:	e9cd 3304 	strd	r3, r3, [sp, #16]
1000a0e8:	e7b7      	b.n	1000a05a <_dtoa_r+0x28a>
1000a0ea:	3101      	adds	r1, #1
1000a0ec:	0052      	lsls	r2, r2, #1
1000a0ee:	e7b7      	b.n	1000a060 <_dtoa_r+0x290>
1000a0f0:	69e3      	ldr	r3, [r4, #28]
1000a0f2:	9a03      	ldr	r2, [sp, #12]
1000a0f4:	601a      	str	r2, [r3, #0]
1000a0f6:	9b05      	ldr	r3, [sp, #20]
1000a0f8:	2b0e      	cmp	r3, #14
1000a0fa:	f200 80a8 	bhi.w	1000a24e <_dtoa_r+0x47e>
1000a0fe:	2d00      	cmp	r5, #0
1000a100:	f000 80a5 	beq.w	1000a24e <_dtoa_r+0x47e>
1000a104:	f1bb 0f00 	cmp.w	fp, #0
1000a108:	dd38      	ble.n	1000a17c <_dtoa_r+0x3ac>
1000a10a:	4bc0      	ldr	r3, [pc, #768]	@ (1000a40c <_dtoa_r+0x63c>)
1000a10c:	f00b 020f 	and.w	r2, fp, #15
1000a110:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1000a114:	f41b 7f80 	tst.w	fp, #256	@ 0x100
1000a118:	e9d3 6700 	ldrd	r6, r7, [r3]
1000a11c:	ea4f 182b 	mov.w	r8, fp, asr #4
1000a120:	d019      	beq.n	1000a156 <_dtoa_r+0x386>
1000a122:	4bbb      	ldr	r3, [pc, #748]	@ (1000a410 <_dtoa_r+0x640>)
1000a124:	ec51 0b18 	vmov	r0, r1, d8
1000a128:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
1000a12c:	f7fe fb20 	bl	10008770 <__aeabi_ddiv>
1000a130:	e9cd 0106 	strd	r0, r1, [sp, #24]
1000a134:	f008 080f 	and.w	r8, r8, #15
1000a138:	2503      	movs	r5, #3
1000a13a:	f8df 92d4 	ldr.w	r9, [pc, #724]	@ 1000a410 <_dtoa_r+0x640>
1000a13e:	f1b8 0f00 	cmp.w	r8, #0
1000a142:	d10a      	bne.n	1000a15a <_dtoa_r+0x38a>
1000a144:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1000a148:	4632      	mov	r2, r6
1000a14a:	463b      	mov	r3, r7
1000a14c:	f7fe fb10 	bl	10008770 <__aeabi_ddiv>
1000a150:	e9cd 0106 	strd	r0, r1, [sp, #24]
1000a154:	e02b      	b.n	1000a1ae <_dtoa_r+0x3de>
1000a156:	2502      	movs	r5, #2
1000a158:	e7ef      	b.n	1000a13a <_dtoa_r+0x36a>
1000a15a:	f018 0f01 	tst.w	r8, #1
1000a15e:	d008      	beq.n	1000a172 <_dtoa_r+0x3a2>
1000a160:	4630      	mov	r0, r6
1000a162:	4639      	mov	r1, r7
1000a164:	e9d9 2300 	ldrd	r2, r3, [r9]
1000a168:	f7fe f9d8 	bl	1000851c <__aeabi_dmul>
1000a16c:	3501      	adds	r5, #1
1000a16e:	4606      	mov	r6, r0
1000a170:	460f      	mov	r7, r1
1000a172:	ea4f 0868 	mov.w	r8, r8, asr #1
1000a176:	f109 0908 	add.w	r9, r9, #8
1000a17a:	e7e0      	b.n	1000a13e <_dtoa_r+0x36e>
1000a17c:	f000 809f 	beq.w	1000a2be <_dtoa_r+0x4ee>
1000a180:	f1cb 0600 	rsb	r6, fp, #0
1000a184:	4ba1      	ldr	r3, [pc, #644]	@ (1000a40c <_dtoa_r+0x63c>)
1000a186:	4fa2      	ldr	r7, [pc, #648]	@ (1000a410 <_dtoa_r+0x640>)
1000a188:	f006 020f 	and.w	r2, r6, #15
1000a18c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1000a190:	e9d3 2300 	ldrd	r2, r3, [r3]
1000a194:	ec51 0b18 	vmov	r0, r1, d8
1000a198:	f7fe f9c0 	bl	1000851c <__aeabi_dmul>
1000a19c:	e9cd 0106 	strd	r0, r1, [sp, #24]
1000a1a0:	1136      	asrs	r6, r6, #4
1000a1a2:	2300      	movs	r3, #0
1000a1a4:	2502      	movs	r5, #2
1000a1a6:	2e00      	cmp	r6, #0
1000a1a8:	d17e      	bne.n	1000a2a8 <_dtoa_r+0x4d8>
1000a1aa:	2b00      	cmp	r3, #0
1000a1ac:	d1d0      	bne.n	1000a150 <_dtoa_r+0x380>
1000a1ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1000a1b0:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
1000a1b4:	2b00      	cmp	r3, #0
1000a1b6:	f000 8084 	beq.w	1000a2c2 <_dtoa_r+0x4f2>
1000a1ba:	4b96      	ldr	r3, [pc, #600]	@ (1000a414 <_dtoa_r+0x644>)
1000a1bc:	2200      	movs	r2, #0
1000a1be:	4640      	mov	r0, r8
1000a1c0:	4649      	mov	r1, r9
1000a1c2:	f7fe fc1d 	bl	10008a00 <__aeabi_dcmplt>
1000a1c6:	2800      	cmp	r0, #0
1000a1c8:	d07b      	beq.n	1000a2c2 <_dtoa_r+0x4f2>
1000a1ca:	9b05      	ldr	r3, [sp, #20]
1000a1cc:	2b00      	cmp	r3, #0
1000a1ce:	d078      	beq.n	1000a2c2 <_dtoa_r+0x4f2>
1000a1d0:	9b04      	ldr	r3, [sp, #16]
1000a1d2:	2b00      	cmp	r3, #0
1000a1d4:	dd39      	ble.n	1000a24a <_dtoa_r+0x47a>
1000a1d6:	4b90      	ldr	r3, [pc, #576]	@ (1000a418 <_dtoa_r+0x648>)
1000a1d8:	2200      	movs	r2, #0
1000a1da:	4640      	mov	r0, r8
1000a1dc:	4649      	mov	r1, r9
1000a1de:	f7fe f99d 	bl	1000851c <__aeabi_dmul>
1000a1e2:	e9cd 0106 	strd	r0, r1, [sp, #24]
1000a1e6:	9e04      	ldr	r6, [sp, #16]
1000a1e8:	f10b 37ff 	add.w	r7, fp, #4294967295
1000a1ec:	3501      	adds	r5, #1
1000a1ee:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
1000a1f2:	4628      	mov	r0, r5
1000a1f4:	f7fe f928 	bl	10008448 <__aeabi_i2d>
1000a1f8:	4642      	mov	r2, r8
1000a1fa:	464b      	mov	r3, r9
1000a1fc:	f7fe f98e 	bl	1000851c <__aeabi_dmul>
1000a200:	4b86      	ldr	r3, [pc, #536]	@ (1000a41c <_dtoa_r+0x64c>)
1000a202:	2200      	movs	r2, #0
1000a204:	f7fd ffd4 	bl	100081b0 <__adddf3>
1000a208:	f1a1 7350 	sub.w	r3, r1, #54525952	@ 0x3400000
1000a20c:	e9cd 0106 	strd	r0, r1, [sp, #24]
1000a210:	9307      	str	r3, [sp, #28]
1000a212:	2e00      	cmp	r6, #0
1000a214:	d158      	bne.n	1000a2c8 <_dtoa_r+0x4f8>
1000a216:	4b82      	ldr	r3, [pc, #520]	@ (1000a420 <_dtoa_r+0x650>)
1000a218:	2200      	movs	r2, #0
1000a21a:	4640      	mov	r0, r8
1000a21c:	4649      	mov	r1, r9
1000a21e:	f7fd ffc5 	bl	100081ac <__aeabi_dsub>
1000a222:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
1000a226:	4680      	mov	r8, r0
1000a228:	4689      	mov	r9, r1
1000a22a:	f7fe fc07 	bl	10008a3c <__aeabi_dcmpgt>
1000a22e:	2800      	cmp	r0, #0
1000a230:	f040 8297 	bne.w	1000a762 <_dtoa_r+0x992>
1000a234:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
1000a238:	4640      	mov	r0, r8
1000a23a:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
1000a23e:	4649      	mov	r1, r9
1000a240:	f7fe fbde 	bl	10008a00 <__aeabi_dcmplt>
1000a244:	2800      	cmp	r0, #0
1000a246:	f040 828a 	bne.w	1000a75e <_dtoa_r+0x98e>
1000a24a:	ed8d 8b06 	vstr	d8, [sp, #24]
1000a24e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
1000a250:	2b00      	cmp	r3, #0
1000a252:	f2c0 814e 	blt.w	1000a4f2 <_dtoa_r+0x722>
1000a256:	f1bb 0f0e 	cmp.w	fp, #14
1000a25a:	f300 814a 	bgt.w	1000a4f2 <_dtoa_r+0x722>
1000a25e:	4b6b      	ldr	r3, [pc, #428]	@ (1000a40c <_dtoa_r+0x63c>)
1000a260:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
1000a264:	e9d3 8900 	ldrd	r8, r9, [r3]
1000a268:	9b21      	ldr	r3, [sp, #132]	@ 0x84
1000a26a:	2b00      	cmp	r3, #0
1000a26c:	f280 80dc 	bge.w	1000a428 <_dtoa_r+0x658>
1000a270:	9b05      	ldr	r3, [sp, #20]
1000a272:	2b00      	cmp	r3, #0
1000a274:	f300 80d8 	bgt.w	1000a428 <_dtoa_r+0x658>
1000a278:	f040 8270 	bne.w	1000a75c <_dtoa_r+0x98c>
1000a27c:	4b68      	ldr	r3, [pc, #416]	@ (1000a420 <_dtoa_r+0x650>)
1000a27e:	2200      	movs	r2, #0
1000a280:	4640      	mov	r0, r8
1000a282:	4649      	mov	r1, r9
1000a284:	f7fe f94a 	bl	1000851c <__aeabi_dmul>
1000a288:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
1000a28c:	f7fe fbcc 	bl	10008a28 <__aeabi_dcmpge>
1000a290:	9e05      	ldr	r6, [sp, #20]
1000a292:	4637      	mov	r7, r6
1000a294:	2800      	cmp	r0, #0
1000a296:	f040 8246 	bne.w	1000a726 <_dtoa_r+0x956>
1000a29a:	9d03      	ldr	r5, [sp, #12]
1000a29c:	2331      	movs	r3, #49	@ 0x31
1000a29e:	f805 3b01 	strb.w	r3, [r5], #1
1000a2a2:	f10b 0b01 	add.w	fp, fp, #1
1000a2a6:	e242      	b.n	1000a72e <_dtoa_r+0x95e>
1000a2a8:	07f2      	lsls	r2, r6, #31
1000a2aa:	d505      	bpl.n	1000a2b8 <_dtoa_r+0x4e8>
1000a2ac:	e9d7 2300 	ldrd	r2, r3, [r7]
1000a2b0:	f7fe f934 	bl	1000851c <__aeabi_dmul>
1000a2b4:	3501      	adds	r5, #1
1000a2b6:	2301      	movs	r3, #1
1000a2b8:	1076      	asrs	r6, r6, #1
1000a2ba:	3708      	adds	r7, #8
1000a2bc:	e773      	b.n	1000a1a6 <_dtoa_r+0x3d6>
1000a2be:	2502      	movs	r5, #2
1000a2c0:	e775      	b.n	1000a1ae <_dtoa_r+0x3de>
1000a2c2:	9e05      	ldr	r6, [sp, #20]
1000a2c4:	465f      	mov	r7, fp
1000a2c6:	e792      	b.n	1000a1ee <_dtoa_r+0x41e>
1000a2c8:	9903      	ldr	r1, [sp, #12]
1000a2ca:	4b50      	ldr	r3, [pc, #320]	@ (1000a40c <_dtoa_r+0x63c>)
1000a2cc:	ed9d 7b06 	vldr	d7, [sp, #24]
1000a2d0:	4431      	add	r1, r6
1000a2d2:	9106      	str	r1, [sp, #24]
1000a2d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1000a2d6:	eeb0 9a47 	vmov.f32	s18, s14
1000a2da:	eef0 9a67 	vmov.f32	s19, s15
1000a2de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
1000a2e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
1000a2e6:	2900      	cmp	r1, #0
1000a2e8:	d044      	beq.n	1000a374 <_dtoa_r+0x5a4>
1000a2ea:	494e      	ldr	r1, [pc, #312]	@ (1000a424 <_dtoa_r+0x654>)
1000a2ec:	2000      	movs	r0, #0
1000a2ee:	f7fe fa3f 	bl	10008770 <__aeabi_ddiv>
1000a2f2:	ec53 2b19 	vmov	r2, r3, d9
1000a2f6:	f7fd ff59 	bl	100081ac <__aeabi_dsub>
1000a2fa:	9d03      	ldr	r5, [sp, #12]
1000a2fc:	ec41 0b19 	vmov	d9, r0, r1
1000a300:	4649      	mov	r1, r9
1000a302:	4640      	mov	r0, r8
1000a304:	f7fe fbba 	bl	10008a7c <__aeabi_d2iz>
1000a308:	4606      	mov	r6, r0
1000a30a:	f7fe f89d 	bl	10008448 <__aeabi_i2d>
1000a30e:	4602      	mov	r2, r0
1000a310:	460b      	mov	r3, r1
1000a312:	4640      	mov	r0, r8
1000a314:	4649      	mov	r1, r9
1000a316:	f7fd ff49 	bl	100081ac <__aeabi_dsub>
1000a31a:	3630      	adds	r6, #48	@ 0x30
1000a31c:	f805 6b01 	strb.w	r6, [r5], #1
1000a320:	ec53 2b19 	vmov	r2, r3, d9
1000a324:	4680      	mov	r8, r0
1000a326:	4689      	mov	r9, r1
1000a328:	f7fe fb6a 	bl	10008a00 <__aeabi_dcmplt>
1000a32c:	2800      	cmp	r0, #0
1000a32e:	d164      	bne.n	1000a3fa <_dtoa_r+0x62a>
1000a330:	4642      	mov	r2, r8
1000a332:	464b      	mov	r3, r9
1000a334:	4937      	ldr	r1, [pc, #220]	@ (1000a414 <_dtoa_r+0x644>)
1000a336:	2000      	movs	r0, #0
1000a338:	f7fd ff38 	bl	100081ac <__aeabi_dsub>
1000a33c:	ec53 2b19 	vmov	r2, r3, d9
1000a340:	f7fe fb5e 	bl	10008a00 <__aeabi_dcmplt>
1000a344:	2800      	cmp	r0, #0
1000a346:	f040 80b6 	bne.w	1000a4b6 <_dtoa_r+0x6e6>
1000a34a:	9b06      	ldr	r3, [sp, #24]
1000a34c:	429d      	cmp	r5, r3
1000a34e:	f43f af7c 	beq.w	1000a24a <_dtoa_r+0x47a>
1000a352:	4b31      	ldr	r3, [pc, #196]	@ (1000a418 <_dtoa_r+0x648>)
1000a354:	ec51 0b19 	vmov	r0, r1, d9
1000a358:	2200      	movs	r2, #0
1000a35a:	f7fe f8df 	bl	1000851c <__aeabi_dmul>
1000a35e:	4b2e      	ldr	r3, [pc, #184]	@ (1000a418 <_dtoa_r+0x648>)
1000a360:	ec41 0b19 	vmov	d9, r0, r1
1000a364:	2200      	movs	r2, #0
1000a366:	4640      	mov	r0, r8
1000a368:	4649      	mov	r1, r9
1000a36a:	f7fe f8d7 	bl	1000851c <__aeabi_dmul>
1000a36e:	4680      	mov	r8, r0
1000a370:	4689      	mov	r9, r1
1000a372:	e7c5      	b.n	1000a300 <_dtoa_r+0x530>
1000a374:	ec51 0b17 	vmov	r0, r1, d7
1000a378:	f7fe f8d0 	bl	1000851c <__aeabi_dmul>
1000a37c:	9b06      	ldr	r3, [sp, #24]
1000a37e:	9d03      	ldr	r5, [sp, #12]
1000a380:	930f      	str	r3, [sp, #60]	@ 0x3c
1000a382:	ec41 0b19 	vmov	d9, r0, r1
1000a386:	4649      	mov	r1, r9
1000a388:	4640      	mov	r0, r8
1000a38a:	f7fe fb77 	bl	10008a7c <__aeabi_d2iz>
1000a38e:	4606      	mov	r6, r0
1000a390:	f7fe f85a 	bl	10008448 <__aeabi_i2d>
1000a394:	3630      	adds	r6, #48	@ 0x30
1000a396:	4602      	mov	r2, r0
1000a398:	460b      	mov	r3, r1
1000a39a:	4640      	mov	r0, r8
1000a39c:	4649      	mov	r1, r9
1000a39e:	f7fd ff05 	bl	100081ac <__aeabi_dsub>
1000a3a2:	f805 6b01 	strb.w	r6, [r5], #1
1000a3a6:	9b06      	ldr	r3, [sp, #24]
1000a3a8:	429d      	cmp	r5, r3
1000a3aa:	4680      	mov	r8, r0
1000a3ac:	4689      	mov	r9, r1
1000a3ae:	f04f 0200 	mov.w	r2, #0
1000a3b2:	d124      	bne.n	1000a3fe <_dtoa_r+0x62e>
1000a3b4:	4b1b      	ldr	r3, [pc, #108]	@ (1000a424 <_dtoa_r+0x654>)
1000a3b6:	ec51 0b19 	vmov	r0, r1, d9
1000a3ba:	f7fd fef9 	bl	100081b0 <__adddf3>
1000a3be:	4602      	mov	r2, r0
1000a3c0:	460b      	mov	r3, r1
1000a3c2:	4640      	mov	r0, r8
1000a3c4:	4649      	mov	r1, r9
1000a3c6:	f7fe fb39 	bl	10008a3c <__aeabi_dcmpgt>
1000a3ca:	2800      	cmp	r0, #0
1000a3cc:	d173      	bne.n	1000a4b6 <_dtoa_r+0x6e6>
1000a3ce:	ec53 2b19 	vmov	r2, r3, d9
1000a3d2:	4914      	ldr	r1, [pc, #80]	@ (1000a424 <_dtoa_r+0x654>)
1000a3d4:	2000      	movs	r0, #0
1000a3d6:	f7fd fee9 	bl	100081ac <__aeabi_dsub>
1000a3da:	4602      	mov	r2, r0
1000a3dc:	460b      	mov	r3, r1
1000a3de:	4640      	mov	r0, r8
1000a3e0:	4649      	mov	r1, r9
1000a3e2:	f7fe fb0d 	bl	10008a00 <__aeabi_dcmplt>
1000a3e6:	2800      	cmp	r0, #0
1000a3e8:	f43f af2f 	beq.w	1000a24a <_dtoa_r+0x47a>
1000a3ec:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
1000a3ee:	1e6b      	subs	r3, r5, #1
1000a3f0:	930f      	str	r3, [sp, #60]	@ 0x3c
1000a3f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
1000a3f6:	2b30      	cmp	r3, #48	@ 0x30
1000a3f8:	d0f8      	beq.n	1000a3ec <_dtoa_r+0x61c>
1000a3fa:	46bb      	mov	fp, r7
1000a3fc:	e04a      	b.n	1000a494 <_dtoa_r+0x6c4>
1000a3fe:	4b06      	ldr	r3, [pc, #24]	@ (1000a418 <_dtoa_r+0x648>)
1000a400:	f7fe f88c 	bl	1000851c <__aeabi_dmul>
1000a404:	4680      	mov	r8, r0
1000a406:	4689      	mov	r9, r1
1000a408:	e7bd      	b.n	1000a386 <_dtoa_r+0x5b6>
1000a40a:	bf00      	nop
1000a40c:	10016d40 	.word	0x10016d40
1000a410:	10016d18 	.word	0x10016d18
1000a414:	3ff00000 	.word	0x3ff00000
1000a418:	40240000 	.word	0x40240000
1000a41c:	401c0000 	.word	0x401c0000
1000a420:	40140000 	.word	0x40140000
1000a424:	3fe00000 	.word	0x3fe00000
1000a428:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
1000a42c:	9d03      	ldr	r5, [sp, #12]
1000a42e:	4642      	mov	r2, r8
1000a430:	464b      	mov	r3, r9
1000a432:	4630      	mov	r0, r6
1000a434:	4639      	mov	r1, r7
1000a436:	f7fe f99b 	bl	10008770 <__aeabi_ddiv>
1000a43a:	f7fe fb1f 	bl	10008a7c <__aeabi_d2iz>
1000a43e:	9004      	str	r0, [sp, #16]
1000a440:	f7fe f802 	bl	10008448 <__aeabi_i2d>
1000a444:	4642      	mov	r2, r8
1000a446:	464b      	mov	r3, r9
1000a448:	f7fe f868 	bl	1000851c <__aeabi_dmul>
1000a44c:	4602      	mov	r2, r0
1000a44e:	460b      	mov	r3, r1
1000a450:	4630      	mov	r0, r6
1000a452:	4639      	mov	r1, r7
1000a454:	f7fd feaa 	bl	100081ac <__aeabi_dsub>
1000a458:	9e04      	ldr	r6, [sp, #16]
1000a45a:	9f05      	ldr	r7, [sp, #20]
1000a45c:	3630      	adds	r6, #48	@ 0x30
1000a45e:	f805 6b01 	strb.w	r6, [r5], #1
1000a462:	9e03      	ldr	r6, [sp, #12]
1000a464:	1bae      	subs	r6, r5, r6
1000a466:	42b7      	cmp	r7, r6
1000a468:	4602      	mov	r2, r0
1000a46a:	460b      	mov	r3, r1
1000a46c:	d134      	bne.n	1000a4d8 <_dtoa_r+0x708>
1000a46e:	f7fd fe9f 	bl	100081b0 <__adddf3>
1000a472:	4642      	mov	r2, r8
1000a474:	464b      	mov	r3, r9
1000a476:	4606      	mov	r6, r0
1000a478:	460f      	mov	r7, r1
1000a47a:	f7fe fadf 	bl	10008a3c <__aeabi_dcmpgt>
1000a47e:	b9c8      	cbnz	r0, 1000a4b4 <_dtoa_r+0x6e4>
1000a480:	4642      	mov	r2, r8
1000a482:	464b      	mov	r3, r9
1000a484:	4630      	mov	r0, r6
1000a486:	4639      	mov	r1, r7
1000a488:	f7fe fab0 	bl	100089ec <__aeabi_dcmpeq>
1000a48c:	b110      	cbz	r0, 1000a494 <_dtoa_r+0x6c4>
1000a48e:	9b04      	ldr	r3, [sp, #16]
1000a490:	07db      	lsls	r3, r3, #31
1000a492:	d40f      	bmi.n	1000a4b4 <_dtoa_r+0x6e4>
1000a494:	4651      	mov	r1, sl
1000a496:	4620      	mov	r0, r4
1000a498:	f000 fb18 	bl	1000aacc <_Bfree>
1000a49c:	2300      	movs	r3, #0
1000a49e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
1000a4a0:	702b      	strb	r3, [r5, #0]
1000a4a2:	f10b 0301 	add.w	r3, fp, #1
1000a4a6:	6013      	str	r3, [r2, #0]
1000a4a8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
1000a4aa:	2b00      	cmp	r3, #0
1000a4ac:	f43f acdf 	beq.w	10009e6e <_dtoa_r+0x9e>
1000a4b0:	601d      	str	r5, [r3, #0]
1000a4b2:	e4dc      	b.n	10009e6e <_dtoa_r+0x9e>
1000a4b4:	465f      	mov	r7, fp
1000a4b6:	462b      	mov	r3, r5
1000a4b8:	461d      	mov	r5, r3
1000a4ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
1000a4be:	2a39      	cmp	r2, #57	@ 0x39
1000a4c0:	d106      	bne.n	1000a4d0 <_dtoa_r+0x700>
1000a4c2:	9a03      	ldr	r2, [sp, #12]
1000a4c4:	429a      	cmp	r2, r3
1000a4c6:	d1f7      	bne.n	1000a4b8 <_dtoa_r+0x6e8>
1000a4c8:	9903      	ldr	r1, [sp, #12]
1000a4ca:	2230      	movs	r2, #48	@ 0x30
1000a4cc:	3701      	adds	r7, #1
1000a4ce:	700a      	strb	r2, [r1, #0]
1000a4d0:	781a      	ldrb	r2, [r3, #0]
1000a4d2:	3201      	adds	r2, #1
1000a4d4:	701a      	strb	r2, [r3, #0]
1000a4d6:	e790      	b.n	1000a3fa <_dtoa_r+0x62a>
1000a4d8:	4ba3      	ldr	r3, [pc, #652]	@ (1000a768 <_dtoa_r+0x998>)
1000a4da:	2200      	movs	r2, #0
1000a4dc:	f7fe f81e 	bl	1000851c <__aeabi_dmul>
1000a4e0:	2200      	movs	r2, #0
1000a4e2:	2300      	movs	r3, #0
1000a4e4:	4606      	mov	r6, r0
1000a4e6:	460f      	mov	r7, r1
1000a4e8:	f7fe fa80 	bl	100089ec <__aeabi_dcmpeq>
1000a4ec:	2800      	cmp	r0, #0
1000a4ee:	d09e      	beq.n	1000a42e <_dtoa_r+0x65e>
1000a4f0:	e7d0      	b.n	1000a494 <_dtoa_r+0x6c4>
1000a4f2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1000a4f4:	2a00      	cmp	r2, #0
1000a4f6:	f000 80cb 	beq.w	1000a690 <_dtoa_r+0x8c0>
1000a4fa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
1000a4fc:	2a01      	cmp	r2, #1
1000a4fe:	f300 80ad 	bgt.w	1000a65c <_dtoa_r+0x88c>
1000a502:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1000a504:	2a00      	cmp	r2, #0
1000a506:	f000 80a5 	beq.w	1000a654 <_dtoa_r+0x884>
1000a50a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
1000a50e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
1000a510:	9d08      	ldr	r5, [sp, #32]
1000a512:	9a08      	ldr	r2, [sp, #32]
1000a514:	441a      	add	r2, r3
1000a516:	9208      	str	r2, [sp, #32]
1000a518:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1000a51a:	2101      	movs	r1, #1
1000a51c:	441a      	add	r2, r3
1000a51e:	4620      	mov	r0, r4
1000a520:	9209      	str	r2, [sp, #36]	@ 0x24
1000a522:	f000 fb89 	bl	1000ac38 <__i2b>
1000a526:	4607      	mov	r7, r0
1000a528:	b165      	cbz	r5, 1000a544 <_dtoa_r+0x774>
1000a52a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1000a52c:	2b00      	cmp	r3, #0
1000a52e:	dd09      	ble.n	1000a544 <_dtoa_r+0x774>
1000a530:	42ab      	cmp	r3, r5
1000a532:	9a08      	ldr	r2, [sp, #32]
1000a534:	bfa8      	it	ge
1000a536:	462b      	movge	r3, r5
1000a538:	1ad2      	subs	r2, r2, r3
1000a53a:	9208      	str	r2, [sp, #32]
1000a53c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1000a53e:	1aed      	subs	r5, r5, r3
1000a540:	1ad3      	subs	r3, r2, r3
1000a542:	9309      	str	r3, [sp, #36]	@ 0x24
1000a544:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1000a546:	b1f3      	cbz	r3, 1000a586 <_dtoa_r+0x7b6>
1000a548:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1000a54a:	2b00      	cmp	r3, #0
1000a54c:	f000 80a4 	beq.w	1000a698 <_dtoa_r+0x8c8>
1000a550:	2e00      	cmp	r6, #0
1000a552:	dd10      	ble.n	1000a576 <_dtoa_r+0x7a6>
1000a554:	4639      	mov	r1, r7
1000a556:	4632      	mov	r2, r6
1000a558:	4620      	mov	r0, r4
1000a55a:	f000 fc2d 	bl	1000adb8 <__pow5mult>
1000a55e:	4652      	mov	r2, sl
1000a560:	4601      	mov	r1, r0
1000a562:	4607      	mov	r7, r0
1000a564:	4620      	mov	r0, r4
1000a566:	f000 fb7d 	bl	1000ac64 <__multiply>
1000a56a:	4651      	mov	r1, sl
1000a56c:	4680      	mov	r8, r0
1000a56e:	4620      	mov	r0, r4
1000a570:	f000 faac 	bl	1000aacc <_Bfree>
1000a574:	46c2      	mov	sl, r8
1000a576:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1000a578:	1b9a      	subs	r2, r3, r6
1000a57a:	d004      	beq.n	1000a586 <_dtoa_r+0x7b6>
1000a57c:	4651      	mov	r1, sl
1000a57e:	4620      	mov	r0, r4
1000a580:	f000 fc1a 	bl	1000adb8 <__pow5mult>
1000a584:	4682      	mov	sl, r0
1000a586:	2101      	movs	r1, #1
1000a588:	4620      	mov	r0, r4
1000a58a:	f000 fb55 	bl	1000ac38 <__i2b>
1000a58e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
1000a590:	2b00      	cmp	r3, #0
1000a592:	4606      	mov	r6, r0
1000a594:	f340 8082 	ble.w	1000a69c <_dtoa_r+0x8cc>
1000a598:	461a      	mov	r2, r3
1000a59a:	4601      	mov	r1, r0
1000a59c:	4620      	mov	r0, r4
1000a59e:	f000 fc0b 	bl	1000adb8 <__pow5mult>
1000a5a2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
1000a5a4:	2b01      	cmp	r3, #1
1000a5a6:	4606      	mov	r6, r0
1000a5a8:	dd7b      	ble.n	1000a6a2 <_dtoa_r+0x8d2>
1000a5aa:	f04f 0800 	mov.w	r8, #0
1000a5ae:	6933      	ldr	r3, [r6, #16]
1000a5b0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
1000a5b4:	6918      	ldr	r0, [r3, #16]
1000a5b6:	f000 faf1 	bl	1000ab9c <__hi0bits>
1000a5ba:	f1c0 0020 	rsb	r0, r0, #32
1000a5be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1000a5c0:	4418      	add	r0, r3
1000a5c2:	f010 001f 	ands.w	r0, r0, #31
1000a5c6:	f000 8095 	beq.w	1000a6f4 <_dtoa_r+0x924>
1000a5ca:	f1c0 0320 	rsb	r3, r0, #32
1000a5ce:	2b04      	cmp	r3, #4
1000a5d0:	f340 8086 	ble.w	1000a6e0 <_dtoa_r+0x910>
1000a5d4:	9b08      	ldr	r3, [sp, #32]
1000a5d6:	f1c0 001c 	rsb	r0, r0, #28
1000a5da:	4403      	add	r3, r0
1000a5dc:	9308      	str	r3, [sp, #32]
1000a5de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1000a5e0:	4403      	add	r3, r0
1000a5e2:	4405      	add	r5, r0
1000a5e4:	9309      	str	r3, [sp, #36]	@ 0x24
1000a5e6:	9b08      	ldr	r3, [sp, #32]
1000a5e8:	2b00      	cmp	r3, #0
1000a5ea:	dd05      	ble.n	1000a5f8 <_dtoa_r+0x828>
1000a5ec:	4651      	mov	r1, sl
1000a5ee:	461a      	mov	r2, r3
1000a5f0:	4620      	mov	r0, r4
1000a5f2:	f000 fc3b 	bl	1000ae6c <__lshift>
1000a5f6:	4682      	mov	sl, r0
1000a5f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1000a5fa:	2b00      	cmp	r3, #0
1000a5fc:	dd05      	ble.n	1000a60a <_dtoa_r+0x83a>
1000a5fe:	4631      	mov	r1, r6
1000a600:	461a      	mov	r2, r3
1000a602:	4620      	mov	r0, r4
1000a604:	f000 fc32 	bl	1000ae6c <__lshift>
1000a608:	4606      	mov	r6, r0
1000a60a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1000a60c:	2b00      	cmp	r3, #0
1000a60e:	d073      	beq.n	1000a6f8 <_dtoa_r+0x928>
1000a610:	4631      	mov	r1, r6
1000a612:	4650      	mov	r0, sl
1000a614:	f000 fc96 	bl	1000af44 <__mcmp>
1000a618:	2800      	cmp	r0, #0
1000a61a:	da6d      	bge.n	1000a6f8 <_dtoa_r+0x928>
1000a61c:	2300      	movs	r3, #0
1000a61e:	4651      	mov	r1, sl
1000a620:	220a      	movs	r2, #10
1000a622:	4620      	mov	r0, r4
1000a624:	f000 fa74 	bl	1000ab10 <__multadd>
1000a628:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1000a62a:	f10b 3bff 	add.w	fp, fp, #4294967295
1000a62e:	4682      	mov	sl, r0
1000a630:	2b00      	cmp	r3, #0
1000a632:	f000 81b0 	beq.w	1000a996 <_dtoa_r+0xbc6>
1000a636:	2300      	movs	r3, #0
1000a638:	4639      	mov	r1, r7
1000a63a:	220a      	movs	r2, #10
1000a63c:	4620      	mov	r0, r4
1000a63e:	f000 fa67 	bl	1000ab10 <__multadd>
1000a642:	9b04      	ldr	r3, [sp, #16]
1000a644:	2b00      	cmp	r3, #0
1000a646:	4607      	mov	r7, r0
1000a648:	f300 8096 	bgt.w	1000a778 <_dtoa_r+0x9a8>
1000a64c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
1000a64e:	2b02      	cmp	r3, #2
1000a650:	dc5a      	bgt.n	1000a708 <_dtoa_r+0x938>
1000a652:	e091      	b.n	1000a778 <_dtoa_r+0x9a8>
1000a654:	9b10      	ldr	r3, [sp, #64]	@ 0x40
1000a656:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
1000a65a:	e758      	b.n	1000a50e <_dtoa_r+0x73e>
1000a65c:	9b05      	ldr	r3, [sp, #20]
1000a65e:	1e5e      	subs	r6, r3, #1
1000a660:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1000a662:	42b3      	cmp	r3, r6
1000a664:	bfbf      	itttt	lt
1000a666:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
1000a668:	9a0c      	ldrlt	r2, [sp, #48]	@ 0x30
1000a66a:	960a      	strlt	r6, [sp, #40]	@ 0x28
1000a66c:	1af3      	sublt	r3, r6, r3
1000a66e:	bfb4      	ite	lt
1000a670:	18d2      	addlt	r2, r2, r3
1000a672:	1b9e      	subge	r6, r3, r6
1000a674:	9b05      	ldr	r3, [sp, #20]
1000a676:	bfbc      	itt	lt
1000a678:	920c      	strlt	r2, [sp, #48]	@ 0x30
1000a67a:	2600      	movlt	r6, #0
1000a67c:	2b00      	cmp	r3, #0
1000a67e:	bfb9      	ittee	lt
1000a680:	9b08      	ldrlt	r3, [sp, #32]
1000a682:	9a05      	ldrlt	r2, [sp, #20]
1000a684:	9d08      	ldrge	r5, [sp, #32]
1000a686:	9b05      	ldrge	r3, [sp, #20]
1000a688:	bfbc      	itt	lt
1000a68a:	1a9d      	sublt	r5, r3, r2
1000a68c:	2300      	movlt	r3, #0
1000a68e:	e740      	b.n	1000a512 <_dtoa_r+0x742>
1000a690:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
1000a692:	9d08      	ldr	r5, [sp, #32]
1000a694:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
1000a696:	e747      	b.n	1000a528 <_dtoa_r+0x758>
1000a698:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1000a69a:	e76f      	b.n	1000a57c <_dtoa_r+0x7ac>
1000a69c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
1000a69e:	2b01      	cmp	r3, #1
1000a6a0:	dc19      	bgt.n	1000a6d6 <_dtoa_r+0x906>
1000a6a2:	9b06      	ldr	r3, [sp, #24]
1000a6a4:	b9bb      	cbnz	r3, 1000a6d6 <_dtoa_r+0x906>
1000a6a6:	9b07      	ldr	r3, [sp, #28]
1000a6a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
1000a6ac:	b99b      	cbnz	r3, 1000a6d6 <_dtoa_r+0x906>
1000a6ae:	9b07      	ldr	r3, [sp, #28]
1000a6b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
1000a6b4:	0d1b      	lsrs	r3, r3, #20
1000a6b6:	051b      	lsls	r3, r3, #20
1000a6b8:	b183      	cbz	r3, 1000a6dc <_dtoa_r+0x90c>
1000a6ba:	9b08      	ldr	r3, [sp, #32]
1000a6bc:	3301      	adds	r3, #1
1000a6be:	9308      	str	r3, [sp, #32]
1000a6c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1000a6c2:	3301      	adds	r3, #1
1000a6c4:	9309      	str	r3, [sp, #36]	@ 0x24
1000a6c6:	f04f 0801 	mov.w	r8, #1
1000a6ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
1000a6cc:	2b00      	cmp	r3, #0
1000a6ce:	f47f af6e 	bne.w	1000a5ae <_dtoa_r+0x7de>
1000a6d2:	2001      	movs	r0, #1
1000a6d4:	e773      	b.n	1000a5be <_dtoa_r+0x7ee>
1000a6d6:	f04f 0800 	mov.w	r8, #0
1000a6da:	e7f6      	b.n	1000a6ca <_dtoa_r+0x8fa>
1000a6dc:	4698      	mov	r8, r3
1000a6de:	e7f4      	b.n	1000a6ca <_dtoa_r+0x8fa>
1000a6e0:	d081      	beq.n	1000a5e6 <_dtoa_r+0x816>
1000a6e2:	9a08      	ldr	r2, [sp, #32]
1000a6e4:	331c      	adds	r3, #28
1000a6e6:	441a      	add	r2, r3
1000a6e8:	9208      	str	r2, [sp, #32]
1000a6ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1000a6ec:	441a      	add	r2, r3
1000a6ee:	441d      	add	r5, r3
1000a6f0:	9209      	str	r2, [sp, #36]	@ 0x24
1000a6f2:	e778      	b.n	1000a5e6 <_dtoa_r+0x816>
1000a6f4:	4603      	mov	r3, r0
1000a6f6:	e7f4      	b.n	1000a6e2 <_dtoa_r+0x912>
1000a6f8:	9b05      	ldr	r3, [sp, #20]
1000a6fa:	2b00      	cmp	r3, #0
1000a6fc:	dc36      	bgt.n	1000a76c <_dtoa_r+0x99c>
1000a6fe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
1000a700:	2b02      	cmp	r3, #2
1000a702:	dd33      	ble.n	1000a76c <_dtoa_r+0x99c>
1000a704:	9b05      	ldr	r3, [sp, #20]
1000a706:	9304      	str	r3, [sp, #16]
1000a708:	9b04      	ldr	r3, [sp, #16]
1000a70a:	b963      	cbnz	r3, 1000a726 <_dtoa_r+0x956>
1000a70c:	4631      	mov	r1, r6
1000a70e:	2205      	movs	r2, #5
1000a710:	4620      	mov	r0, r4
1000a712:	f000 f9fd 	bl	1000ab10 <__multadd>
1000a716:	4601      	mov	r1, r0
1000a718:	4606      	mov	r6, r0
1000a71a:	4650      	mov	r0, sl
1000a71c:	f000 fc12 	bl	1000af44 <__mcmp>
1000a720:	2800      	cmp	r0, #0
1000a722:	f73f adba 	bgt.w	1000a29a <_dtoa_r+0x4ca>
1000a726:	9b21      	ldr	r3, [sp, #132]	@ 0x84
1000a728:	9d03      	ldr	r5, [sp, #12]
1000a72a:	ea6f 0b03 	mvn.w	fp, r3
1000a72e:	f04f 0800 	mov.w	r8, #0
1000a732:	4631      	mov	r1, r6
1000a734:	4620      	mov	r0, r4
1000a736:	f000 f9c9 	bl	1000aacc <_Bfree>
1000a73a:	2f00      	cmp	r7, #0
1000a73c:	f43f aeaa 	beq.w	1000a494 <_dtoa_r+0x6c4>
1000a740:	f1b8 0f00 	cmp.w	r8, #0
1000a744:	d005      	beq.n	1000a752 <_dtoa_r+0x982>
1000a746:	45b8      	cmp	r8, r7
1000a748:	d003      	beq.n	1000a752 <_dtoa_r+0x982>
1000a74a:	4641      	mov	r1, r8
1000a74c:	4620      	mov	r0, r4
1000a74e:	f000 f9bd 	bl	1000aacc <_Bfree>
1000a752:	4639      	mov	r1, r7
1000a754:	4620      	mov	r0, r4
1000a756:	f000 f9b9 	bl	1000aacc <_Bfree>
1000a75a:	e69b      	b.n	1000a494 <_dtoa_r+0x6c4>
1000a75c:	2600      	movs	r6, #0
1000a75e:	4637      	mov	r7, r6
1000a760:	e7e1      	b.n	1000a726 <_dtoa_r+0x956>
1000a762:	46bb      	mov	fp, r7
1000a764:	4637      	mov	r7, r6
1000a766:	e598      	b.n	1000a29a <_dtoa_r+0x4ca>
1000a768:	40240000 	.word	0x40240000
1000a76c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1000a76e:	2b00      	cmp	r3, #0
1000a770:	f000 80c8 	beq.w	1000a904 <_dtoa_r+0xb34>
1000a774:	9b05      	ldr	r3, [sp, #20]
1000a776:	9304      	str	r3, [sp, #16]
1000a778:	2d00      	cmp	r5, #0
1000a77a:	dd05      	ble.n	1000a788 <_dtoa_r+0x9b8>
1000a77c:	4639      	mov	r1, r7
1000a77e:	462a      	mov	r2, r5
1000a780:	4620      	mov	r0, r4
1000a782:	f000 fb73 	bl	1000ae6c <__lshift>
1000a786:	4607      	mov	r7, r0
1000a788:	f1b8 0f00 	cmp.w	r8, #0
1000a78c:	d05b      	beq.n	1000a846 <_dtoa_r+0xa76>
1000a78e:	6879      	ldr	r1, [r7, #4]
1000a790:	4620      	mov	r0, r4
1000a792:	f000 f95b 	bl	1000aa4c <_Balloc>
1000a796:	4605      	mov	r5, r0
1000a798:	b928      	cbnz	r0, 1000a7a6 <_dtoa_r+0x9d6>
1000a79a:	4b83      	ldr	r3, [pc, #524]	@ (1000a9a8 <_dtoa_r+0xbd8>)
1000a79c:	4602      	mov	r2, r0
1000a79e:	f240 21ef 	movw	r1, #751	@ 0x2ef
1000a7a2:	f7ff bb2b 	b.w	10009dfc <_dtoa_r+0x2c>
1000a7a6:	693a      	ldr	r2, [r7, #16]
1000a7a8:	3202      	adds	r2, #2
1000a7aa:	0092      	lsls	r2, r2, #2
1000a7ac:	f107 010c 	add.w	r1, r7, #12
1000a7b0:	300c      	adds	r0, #12
1000a7b2:	f7ff fa6d 	bl	10009c90 <memcpy>
1000a7b6:	2201      	movs	r2, #1
1000a7b8:	4629      	mov	r1, r5
1000a7ba:	4620      	mov	r0, r4
1000a7bc:	f000 fb56 	bl	1000ae6c <__lshift>
1000a7c0:	9b03      	ldr	r3, [sp, #12]
1000a7c2:	3301      	adds	r3, #1
1000a7c4:	9305      	str	r3, [sp, #20]
1000a7c6:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
1000a7ca:	4413      	add	r3, r2
1000a7cc:	930a      	str	r3, [sp, #40]	@ 0x28
1000a7ce:	9b06      	ldr	r3, [sp, #24]
1000a7d0:	f003 0301 	and.w	r3, r3, #1
1000a7d4:	46b8      	mov	r8, r7
1000a7d6:	9309      	str	r3, [sp, #36]	@ 0x24
1000a7d8:	4607      	mov	r7, r0
1000a7da:	9b05      	ldr	r3, [sp, #20]
1000a7dc:	4631      	mov	r1, r6
1000a7de:	3b01      	subs	r3, #1
1000a7e0:	4650      	mov	r0, sl
1000a7e2:	9304      	str	r3, [sp, #16]
1000a7e4:	f7ff fa6a 	bl	10009cbc <quorem>
1000a7e8:	4641      	mov	r1, r8
1000a7ea:	9006      	str	r0, [sp, #24]
1000a7ec:	f100 0930 	add.w	r9, r0, #48	@ 0x30
1000a7f0:	4650      	mov	r0, sl
1000a7f2:	f000 fba7 	bl	1000af44 <__mcmp>
1000a7f6:	463a      	mov	r2, r7
1000a7f8:	9008      	str	r0, [sp, #32]
1000a7fa:	4631      	mov	r1, r6
1000a7fc:	4620      	mov	r0, r4
1000a7fe:	f000 fbbd 	bl	1000af7c <__mdiff>
1000a802:	68c2      	ldr	r2, [r0, #12]
1000a804:	4605      	mov	r5, r0
1000a806:	bb02      	cbnz	r2, 1000a84a <_dtoa_r+0xa7a>
1000a808:	4601      	mov	r1, r0
1000a80a:	4650      	mov	r0, sl
1000a80c:	f000 fb9a 	bl	1000af44 <__mcmp>
1000a810:	4602      	mov	r2, r0
1000a812:	4629      	mov	r1, r5
1000a814:	4620      	mov	r0, r4
1000a816:	920b      	str	r2, [sp, #44]	@ 0x2c
1000a818:	f000 f958 	bl	1000aacc <_Bfree>
1000a81c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
1000a81e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1000a820:	9d05      	ldr	r5, [sp, #20]
1000a822:	ea43 0102 	orr.w	r1, r3, r2
1000a826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1000a828:	4319      	orrs	r1, r3
1000a82a:	d110      	bne.n	1000a84e <_dtoa_r+0xa7e>
1000a82c:	f1b9 0f39 	cmp.w	r9, #57	@ 0x39
1000a830:	d029      	beq.n	1000a886 <_dtoa_r+0xab6>
1000a832:	9b08      	ldr	r3, [sp, #32]
1000a834:	2b00      	cmp	r3, #0
1000a836:	dd02      	ble.n	1000a83e <_dtoa_r+0xa6e>
1000a838:	9b06      	ldr	r3, [sp, #24]
1000a83a:	f103 0931 	add.w	r9, r3, #49	@ 0x31
1000a83e:	9b04      	ldr	r3, [sp, #16]
1000a840:	f883 9000 	strb.w	r9, [r3]
1000a844:	e775      	b.n	1000a732 <_dtoa_r+0x962>
1000a846:	4638      	mov	r0, r7
1000a848:	e7ba      	b.n	1000a7c0 <_dtoa_r+0x9f0>
1000a84a:	2201      	movs	r2, #1
1000a84c:	e7e1      	b.n	1000a812 <_dtoa_r+0xa42>
1000a84e:	9b08      	ldr	r3, [sp, #32]
1000a850:	2b00      	cmp	r3, #0
1000a852:	db04      	blt.n	1000a85e <_dtoa_r+0xa8e>
1000a854:	9920      	ldr	r1, [sp, #128]	@ 0x80
1000a856:	430b      	orrs	r3, r1
1000a858:	9909      	ldr	r1, [sp, #36]	@ 0x24
1000a85a:	430b      	orrs	r3, r1
1000a85c:	d120      	bne.n	1000a8a0 <_dtoa_r+0xad0>
1000a85e:	2a00      	cmp	r2, #0
1000a860:	dded      	ble.n	1000a83e <_dtoa_r+0xa6e>
1000a862:	4651      	mov	r1, sl
1000a864:	2201      	movs	r2, #1
1000a866:	4620      	mov	r0, r4
1000a868:	f000 fb00 	bl	1000ae6c <__lshift>
1000a86c:	4631      	mov	r1, r6
1000a86e:	4682      	mov	sl, r0
1000a870:	f000 fb68 	bl	1000af44 <__mcmp>
1000a874:	2800      	cmp	r0, #0
1000a876:	dc03      	bgt.n	1000a880 <_dtoa_r+0xab0>
1000a878:	d1e1      	bne.n	1000a83e <_dtoa_r+0xa6e>
1000a87a:	f019 0f01 	tst.w	r9, #1
1000a87e:	d0de      	beq.n	1000a83e <_dtoa_r+0xa6e>
1000a880:	f1b9 0f39 	cmp.w	r9, #57	@ 0x39
1000a884:	d1d8      	bne.n	1000a838 <_dtoa_r+0xa68>
1000a886:	9a04      	ldr	r2, [sp, #16]
1000a888:	2339      	movs	r3, #57	@ 0x39
1000a88a:	7013      	strb	r3, [r2, #0]
1000a88c:	462b      	mov	r3, r5
1000a88e:	461d      	mov	r5, r3
1000a890:	3b01      	subs	r3, #1
1000a892:	f815 2c01 	ldrb.w	r2, [r5, #-1]
1000a896:	2a39      	cmp	r2, #57	@ 0x39
1000a898:	d06c      	beq.n	1000a974 <_dtoa_r+0xba4>
1000a89a:	3201      	adds	r2, #1
1000a89c:	701a      	strb	r2, [r3, #0]
1000a89e:	e748      	b.n	1000a732 <_dtoa_r+0x962>
1000a8a0:	2a00      	cmp	r2, #0
1000a8a2:	dd07      	ble.n	1000a8b4 <_dtoa_r+0xae4>
1000a8a4:	f1b9 0f39 	cmp.w	r9, #57	@ 0x39
1000a8a8:	d0ed      	beq.n	1000a886 <_dtoa_r+0xab6>
1000a8aa:	9a04      	ldr	r2, [sp, #16]
1000a8ac:	f109 0301 	add.w	r3, r9, #1
1000a8b0:	7013      	strb	r3, [r2, #0]
1000a8b2:	e73e      	b.n	1000a732 <_dtoa_r+0x962>
1000a8b4:	9b05      	ldr	r3, [sp, #20]
1000a8b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1000a8b8:	f803 9c01 	strb.w	r9, [r3, #-1]
1000a8bc:	4293      	cmp	r3, r2
1000a8be:	d043      	beq.n	1000a948 <_dtoa_r+0xb78>
1000a8c0:	4651      	mov	r1, sl
1000a8c2:	2300      	movs	r3, #0
1000a8c4:	220a      	movs	r2, #10
1000a8c6:	4620      	mov	r0, r4
1000a8c8:	f000 f922 	bl	1000ab10 <__multadd>
1000a8cc:	45b8      	cmp	r8, r7
1000a8ce:	4682      	mov	sl, r0
1000a8d0:	f04f 0300 	mov.w	r3, #0
1000a8d4:	f04f 020a 	mov.w	r2, #10
1000a8d8:	4641      	mov	r1, r8
1000a8da:	4620      	mov	r0, r4
1000a8dc:	d107      	bne.n	1000a8ee <_dtoa_r+0xb1e>
1000a8de:	f000 f917 	bl	1000ab10 <__multadd>
1000a8e2:	4680      	mov	r8, r0
1000a8e4:	4607      	mov	r7, r0
1000a8e6:	9b05      	ldr	r3, [sp, #20]
1000a8e8:	3301      	adds	r3, #1
1000a8ea:	9305      	str	r3, [sp, #20]
1000a8ec:	e775      	b.n	1000a7da <_dtoa_r+0xa0a>
1000a8ee:	f000 f90f 	bl	1000ab10 <__multadd>
1000a8f2:	4639      	mov	r1, r7
1000a8f4:	4680      	mov	r8, r0
1000a8f6:	2300      	movs	r3, #0
1000a8f8:	220a      	movs	r2, #10
1000a8fa:	4620      	mov	r0, r4
1000a8fc:	f000 f908 	bl	1000ab10 <__multadd>
1000a900:	4607      	mov	r7, r0
1000a902:	e7f0      	b.n	1000a8e6 <_dtoa_r+0xb16>
1000a904:	9b05      	ldr	r3, [sp, #20]
1000a906:	9304      	str	r3, [sp, #16]
1000a908:	9d03      	ldr	r5, [sp, #12]
1000a90a:	4631      	mov	r1, r6
1000a90c:	4650      	mov	r0, sl
1000a90e:	f7ff f9d5 	bl	10009cbc <quorem>
1000a912:	f100 0930 	add.w	r9, r0, #48	@ 0x30
1000a916:	9b03      	ldr	r3, [sp, #12]
1000a918:	f805 9b01 	strb.w	r9, [r5], #1
1000a91c:	1aea      	subs	r2, r5, r3
1000a91e:	9b04      	ldr	r3, [sp, #16]
1000a920:	4293      	cmp	r3, r2
1000a922:	dd07      	ble.n	1000a934 <_dtoa_r+0xb64>
1000a924:	4651      	mov	r1, sl
1000a926:	2300      	movs	r3, #0
1000a928:	220a      	movs	r2, #10
1000a92a:	4620      	mov	r0, r4
1000a92c:	f000 f8f0 	bl	1000ab10 <__multadd>
1000a930:	4682      	mov	sl, r0
1000a932:	e7ea      	b.n	1000a90a <_dtoa_r+0xb3a>
1000a934:	9b04      	ldr	r3, [sp, #16]
1000a936:	2b00      	cmp	r3, #0
1000a938:	bfc8      	it	gt
1000a93a:	461d      	movgt	r5, r3
1000a93c:	9b03      	ldr	r3, [sp, #12]
1000a93e:	bfd8      	it	le
1000a940:	2501      	movle	r5, #1
1000a942:	441d      	add	r5, r3
1000a944:	f04f 0800 	mov.w	r8, #0
1000a948:	4651      	mov	r1, sl
1000a94a:	2201      	movs	r2, #1
1000a94c:	4620      	mov	r0, r4
1000a94e:	f000 fa8d 	bl	1000ae6c <__lshift>
1000a952:	4631      	mov	r1, r6
1000a954:	4682      	mov	sl, r0
1000a956:	f000 faf5 	bl	1000af44 <__mcmp>
1000a95a:	2800      	cmp	r0, #0
1000a95c:	dc96      	bgt.n	1000a88c <_dtoa_r+0xabc>
1000a95e:	d102      	bne.n	1000a966 <_dtoa_r+0xb96>
1000a960:	f019 0f01 	tst.w	r9, #1
1000a964:	d192      	bne.n	1000a88c <_dtoa_r+0xabc>
1000a966:	462b      	mov	r3, r5
1000a968:	461d      	mov	r5, r3
1000a96a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
1000a96e:	2a30      	cmp	r2, #48	@ 0x30
1000a970:	d0fa      	beq.n	1000a968 <_dtoa_r+0xb98>
1000a972:	e6de      	b.n	1000a732 <_dtoa_r+0x962>
1000a974:	9a03      	ldr	r2, [sp, #12]
1000a976:	429a      	cmp	r2, r3
1000a978:	d189      	bne.n	1000a88e <_dtoa_r+0xabe>
1000a97a:	f10b 0b01 	add.w	fp, fp, #1
1000a97e:	2331      	movs	r3, #49	@ 0x31
1000a980:	e796      	b.n	1000a8b0 <_dtoa_r+0xae0>
1000a982:	4b0a      	ldr	r3, [pc, #40]	@ (1000a9ac <_dtoa_r+0xbdc>)
1000a984:	f7ff ba96 	b.w	10009eb4 <_dtoa_r+0xe4>
1000a988:	9b24      	ldr	r3, [sp, #144]	@ 0x90
1000a98a:	2b00      	cmp	r3, #0
1000a98c:	f47f aa6a 	bne.w	10009e64 <_dtoa_r+0x94>
1000a990:	4b07      	ldr	r3, [pc, #28]	@ (1000a9b0 <_dtoa_r+0xbe0>)
1000a992:	f7ff ba8f 	b.w	10009eb4 <_dtoa_r+0xe4>
1000a996:	9b04      	ldr	r3, [sp, #16]
1000a998:	2b00      	cmp	r3, #0
1000a99a:	dcb5      	bgt.n	1000a908 <_dtoa_r+0xb38>
1000a99c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
1000a99e:	2b02      	cmp	r3, #2
1000a9a0:	f73f aeb2 	bgt.w	1000a708 <_dtoa_r+0x938>
1000a9a4:	e7b0      	b.n	1000a908 <_dtoa_r+0xb38>
1000a9a6:	bf00      	nop
1000a9a8:	10016cad 	.word	0x10016cad
1000a9ac:	10016c0c 	.word	0x10016c0c
1000a9b0:	10016c30 	.word	0x10016c30

1000a9b4 <_free_r>:
1000a9b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000a9b6:	2900      	cmp	r1, #0
1000a9b8:	d044      	beq.n	1000aa44 <_free_r+0x90>
1000a9ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
1000a9be:	9001      	str	r0, [sp, #4]
1000a9c0:	2b00      	cmp	r3, #0
1000a9c2:	f1a1 0404 	sub.w	r4, r1, #4
1000a9c6:	bfb8      	it	lt
1000a9c8:	18e4      	addlt	r4, r4, r3
1000a9ca:	f7fe faf3 	bl	10008fb4 <__malloc_lock>
1000a9ce:	4a1e      	ldr	r2, [pc, #120]	@ (1000aa48 <_free_r+0x94>)
1000a9d0:	9801      	ldr	r0, [sp, #4]
1000a9d2:	6813      	ldr	r3, [r2, #0]
1000a9d4:	b933      	cbnz	r3, 1000a9e4 <_free_r+0x30>
1000a9d6:	6063      	str	r3, [r4, #4]
1000a9d8:	6014      	str	r4, [r2, #0]
1000a9da:	b003      	add	sp, #12
1000a9dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
1000a9e0:	f7fe baee 	b.w	10008fc0 <__malloc_unlock>
1000a9e4:	42a3      	cmp	r3, r4
1000a9e6:	d908      	bls.n	1000a9fa <_free_r+0x46>
1000a9e8:	6825      	ldr	r5, [r4, #0]
1000a9ea:	1961      	adds	r1, r4, r5
1000a9ec:	428b      	cmp	r3, r1
1000a9ee:	bf01      	itttt	eq
1000a9f0:	6819      	ldreq	r1, [r3, #0]
1000a9f2:	685b      	ldreq	r3, [r3, #4]
1000a9f4:	1949      	addeq	r1, r1, r5
1000a9f6:	6021      	streq	r1, [r4, #0]
1000a9f8:	e7ed      	b.n	1000a9d6 <_free_r+0x22>
1000a9fa:	461a      	mov	r2, r3
1000a9fc:	685b      	ldr	r3, [r3, #4]
1000a9fe:	b10b      	cbz	r3, 1000aa04 <_free_r+0x50>
1000aa00:	42a3      	cmp	r3, r4
1000aa02:	d9fa      	bls.n	1000a9fa <_free_r+0x46>
1000aa04:	6811      	ldr	r1, [r2, #0]
1000aa06:	1855      	adds	r5, r2, r1
1000aa08:	42a5      	cmp	r5, r4
1000aa0a:	d10b      	bne.n	1000aa24 <_free_r+0x70>
1000aa0c:	6824      	ldr	r4, [r4, #0]
1000aa0e:	4421      	add	r1, r4
1000aa10:	1854      	adds	r4, r2, r1
1000aa12:	42a3      	cmp	r3, r4
1000aa14:	6011      	str	r1, [r2, #0]
1000aa16:	d1e0      	bne.n	1000a9da <_free_r+0x26>
1000aa18:	681c      	ldr	r4, [r3, #0]
1000aa1a:	685b      	ldr	r3, [r3, #4]
1000aa1c:	6053      	str	r3, [r2, #4]
1000aa1e:	440c      	add	r4, r1
1000aa20:	6014      	str	r4, [r2, #0]
1000aa22:	e7da      	b.n	1000a9da <_free_r+0x26>
1000aa24:	d902      	bls.n	1000aa2c <_free_r+0x78>
1000aa26:	230c      	movs	r3, #12
1000aa28:	6003      	str	r3, [r0, #0]
1000aa2a:	e7d6      	b.n	1000a9da <_free_r+0x26>
1000aa2c:	6825      	ldr	r5, [r4, #0]
1000aa2e:	1961      	adds	r1, r4, r5
1000aa30:	428b      	cmp	r3, r1
1000aa32:	bf04      	itt	eq
1000aa34:	6819      	ldreq	r1, [r3, #0]
1000aa36:	685b      	ldreq	r3, [r3, #4]
1000aa38:	6063      	str	r3, [r4, #4]
1000aa3a:	bf04      	itt	eq
1000aa3c:	1949      	addeq	r1, r1, r5
1000aa3e:	6021      	streq	r1, [r4, #0]
1000aa40:	6054      	str	r4, [r2, #4]
1000aa42:	e7ca      	b.n	1000a9da <_free_r+0x26>
1000aa44:	b003      	add	sp, #12
1000aa46:	bd30      	pop	{r4, r5, pc}
1000aa48:	08002e44 	.word	0x08002e44

1000aa4c <_Balloc>:
1000aa4c:	b570      	push	{r4, r5, r6, lr}
1000aa4e:	69c6      	ldr	r6, [r0, #28]
1000aa50:	4604      	mov	r4, r0
1000aa52:	460d      	mov	r5, r1
1000aa54:	b976      	cbnz	r6, 1000aa74 <_Balloc+0x28>
1000aa56:	2010      	movs	r0, #16
1000aa58:	f7fe fa06 	bl	10008e68 <malloc>
1000aa5c:	4602      	mov	r2, r0
1000aa5e:	61e0      	str	r0, [r4, #28]
1000aa60:	b920      	cbnz	r0, 1000aa6c <_Balloc+0x20>
1000aa62:	4b18      	ldr	r3, [pc, #96]	@ (1000aac4 <_Balloc+0x78>)
1000aa64:	4818      	ldr	r0, [pc, #96]	@ (1000aac8 <_Balloc+0x7c>)
1000aa66:	216b      	movs	r1, #107	@ 0x6b
1000aa68:	f000 fe28 	bl	1000b6bc <__assert_func>
1000aa6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
1000aa70:	6006      	str	r6, [r0, #0]
1000aa72:	60c6      	str	r6, [r0, #12]
1000aa74:	69e6      	ldr	r6, [r4, #28]
1000aa76:	68f3      	ldr	r3, [r6, #12]
1000aa78:	b183      	cbz	r3, 1000aa9c <_Balloc+0x50>
1000aa7a:	69e3      	ldr	r3, [r4, #28]
1000aa7c:	68db      	ldr	r3, [r3, #12]
1000aa7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
1000aa82:	b9b8      	cbnz	r0, 1000aab4 <_Balloc+0x68>
1000aa84:	2101      	movs	r1, #1
1000aa86:	fa01 f605 	lsl.w	r6, r1, r5
1000aa8a:	1d72      	adds	r2, r6, #5
1000aa8c:	0092      	lsls	r2, r2, #2
1000aa8e:	4620      	mov	r0, r4
1000aa90:	f000 fe32 	bl	1000b6f8 <_calloc_r>
1000aa94:	b160      	cbz	r0, 1000aab0 <_Balloc+0x64>
1000aa96:	e9c0 5601 	strd	r5, r6, [r0, #4]
1000aa9a:	e00e      	b.n	1000aaba <_Balloc+0x6e>
1000aa9c:	2221      	movs	r2, #33	@ 0x21
1000aa9e:	2104      	movs	r1, #4
1000aaa0:	4620      	mov	r0, r4
1000aaa2:	f000 fe29 	bl	1000b6f8 <_calloc_r>
1000aaa6:	69e3      	ldr	r3, [r4, #28]
1000aaa8:	60f0      	str	r0, [r6, #12]
1000aaaa:	68db      	ldr	r3, [r3, #12]
1000aaac:	2b00      	cmp	r3, #0
1000aaae:	d1e4      	bne.n	1000aa7a <_Balloc+0x2e>
1000aab0:	2000      	movs	r0, #0
1000aab2:	bd70      	pop	{r4, r5, r6, pc}
1000aab4:	6802      	ldr	r2, [r0, #0]
1000aab6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
1000aaba:	2300      	movs	r3, #0
1000aabc:	e9c0 3303 	strd	r3, r3, [r0, #12]
1000aac0:	e7f7      	b.n	1000aab2 <_Balloc+0x66>
1000aac2:	bf00      	nop
1000aac4:	10016c3d 	.word	0x10016c3d
1000aac8:	10016cbe 	.word	0x10016cbe

1000aacc <_Bfree>:
1000aacc:	b570      	push	{r4, r5, r6, lr}
1000aace:	69c6      	ldr	r6, [r0, #28]
1000aad0:	4605      	mov	r5, r0
1000aad2:	460c      	mov	r4, r1
1000aad4:	b976      	cbnz	r6, 1000aaf4 <_Bfree+0x28>
1000aad6:	2010      	movs	r0, #16
1000aad8:	f7fe f9c6 	bl	10008e68 <malloc>
1000aadc:	4602      	mov	r2, r0
1000aade:	61e8      	str	r0, [r5, #28]
1000aae0:	b920      	cbnz	r0, 1000aaec <_Bfree+0x20>
1000aae2:	4b09      	ldr	r3, [pc, #36]	@ (1000ab08 <_Bfree+0x3c>)
1000aae4:	4809      	ldr	r0, [pc, #36]	@ (1000ab0c <_Bfree+0x40>)
1000aae6:	218f      	movs	r1, #143	@ 0x8f
1000aae8:	f000 fde8 	bl	1000b6bc <__assert_func>
1000aaec:	e9c0 6601 	strd	r6, r6, [r0, #4]
1000aaf0:	6006      	str	r6, [r0, #0]
1000aaf2:	60c6      	str	r6, [r0, #12]
1000aaf4:	b13c      	cbz	r4, 1000ab06 <_Bfree+0x3a>
1000aaf6:	69eb      	ldr	r3, [r5, #28]
1000aaf8:	6862      	ldr	r2, [r4, #4]
1000aafa:	68db      	ldr	r3, [r3, #12]
1000aafc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1000ab00:	6021      	str	r1, [r4, #0]
1000ab02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
1000ab06:	bd70      	pop	{r4, r5, r6, pc}
1000ab08:	10016c3d 	.word	0x10016c3d
1000ab0c:	10016cbe 	.word	0x10016cbe

1000ab10 <__multadd>:
1000ab10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000ab14:	690d      	ldr	r5, [r1, #16]
1000ab16:	4607      	mov	r7, r0
1000ab18:	460c      	mov	r4, r1
1000ab1a:	461e      	mov	r6, r3
1000ab1c:	f101 0c14 	add.w	ip, r1, #20
1000ab20:	2000      	movs	r0, #0
1000ab22:	f8dc 3000 	ldr.w	r3, [ip]
1000ab26:	b299      	uxth	r1, r3
1000ab28:	fb02 6101 	mla	r1, r2, r1, r6
1000ab2c:	0c1e      	lsrs	r6, r3, #16
1000ab2e:	0c0b      	lsrs	r3, r1, #16
1000ab30:	fb02 3306 	mla	r3, r2, r6, r3
1000ab34:	b289      	uxth	r1, r1
1000ab36:	3001      	adds	r0, #1
1000ab38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
1000ab3c:	4285      	cmp	r5, r0
1000ab3e:	f84c 1b04 	str.w	r1, [ip], #4
1000ab42:	ea4f 4613 	mov.w	r6, r3, lsr #16
1000ab46:	dcec      	bgt.n	1000ab22 <__multadd+0x12>
1000ab48:	b30e      	cbz	r6, 1000ab8e <__multadd+0x7e>
1000ab4a:	68a3      	ldr	r3, [r4, #8]
1000ab4c:	42ab      	cmp	r3, r5
1000ab4e:	dc19      	bgt.n	1000ab84 <__multadd+0x74>
1000ab50:	6861      	ldr	r1, [r4, #4]
1000ab52:	4638      	mov	r0, r7
1000ab54:	3101      	adds	r1, #1
1000ab56:	f7ff ff79 	bl	1000aa4c <_Balloc>
1000ab5a:	4680      	mov	r8, r0
1000ab5c:	b928      	cbnz	r0, 1000ab6a <__multadd+0x5a>
1000ab5e:	4602      	mov	r2, r0
1000ab60:	4b0c      	ldr	r3, [pc, #48]	@ (1000ab94 <__multadd+0x84>)
1000ab62:	480d      	ldr	r0, [pc, #52]	@ (1000ab98 <__multadd+0x88>)
1000ab64:	21ba      	movs	r1, #186	@ 0xba
1000ab66:	f000 fda9 	bl	1000b6bc <__assert_func>
1000ab6a:	6922      	ldr	r2, [r4, #16]
1000ab6c:	3202      	adds	r2, #2
1000ab6e:	f104 010c 	add.w	r1, r4, #12
1000ab72:	0092      	lsls	r2, r2, #2
1000ab74:	300c      	adds	r0, #12
1000ab76:	f7ff f88b 	bl	10009c90 <memcpy>
1000ab7a:	4621      	mov	r1, r4
1000ab7c:	4638      	mov	r0, r7
1000ab7e:	f7ff ffa5 	bl	1000aacc <_Bfree>
1000ab82:	4644      	mov	r4, r8
1000ab84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
1000ab88:	3501      	adds	r5, #1
1000ab8a:	615e      	str	r6, [r3, #20]
1000ab8c:	6125      	str	r5, [r4, #16]
1000ab8e:	4620      	mov	r0, r4
1000ab90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000ab94:	10016cad 	.word	0x10016cad
1000ab98:	10016cbe 	.word	0x10016cbe

1000ab9c <__hi0bits>:
1000ab9c:	0c03      	lsrs	r3, r0, #16
1000ab9e:	041b      	lsls	r3, r3, #16
1000aba0:	b9d3      	cbnz	r3, 1000abd8 <__hi0bits+0x3c>
1000aba2:	0400      	lsls	r0, r0, #16
1000aba4:	2310      	movs	r3, #16
1000aba6:	f010 4f7f 	tst.w	r0, #4278190080	@ 0xff000000
1000abaa:	bf04      	itt	eq
1000abac:	0200      	lsleq	r0, r0, #8
1000abae:	3308      	addeq	r3, #8
1000abb0:	f010 4f70 	tst.w	r0, #4026531840	@ 0xf0000000
1000abb4:	bf04      	itt	eq
1000abb6:	0100      	lsleq	r0, r0, #4
1000abb8:	3304      	addeq	r3, #4
1000abba:	f010 4f40 	tst.w	r0, #3221225472	@ 0xc0000000
1000abbe:	bf04      	itt	eq
1000abc0:	0080      	lsleq	r0, r0, #2
1000abc2:	3302      	addeq	r3, #2
1000abc4:	2800      	cmp	r0, #0
1000abc6:	db05      	blt.n	1000abd4 <__hi0bits+0x38>
1000abc8:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
1000abcc:	f103 0301 	add.w	r3, r3, #1
1000abd0:	bf08      	it	eq
1000abd2:	2320      	moveq	r3, #32
1000abd4:	4618      	mov	r0, r3
1000abd6:	4770      	bx	lr
1000abd8:	2300      	movs	r3, #0
1000abda:	e7e4      	b.n	1000aba6 <__hi0bits+0xa>

1000abdc <__lo0bits>:
1000abdc:	6803      	ldr	r3, [r0, #0]
1000abde:	f013 0207 	ands.w	r2, r3, #7
1000abe2:	d00c      	beq.n	1000abfe <__lo0bits+0x22>
1000abe4:	07d9      	lsls	r1, r3, #31
1000abe6:	d422      	bmi.n	1000ac2e <__lo0bits+0x52>
1000abe8:	079a      	lsls	r2, r3, #30
1000abea:	bf49      	itett	mi
1000abec:	085b      	lsrmi	r3, r3, #1
1000abee:	089b      	lsrpl	r3, r3, #2
1000abf0:	6003      	strmi	r3, [r0, #0]
1000abf2:	2201      	movmi	r2, #1
1000abf4:	bf5c      	itt	pl
1000abf6:	6003      	strpl	r3, [r0, #0]
1000abf8:	2202      	movpl	r2, #2
1000abfa:	4610      	mov	r0, r2
1000abfc:	4770      	bx	lr
1000abfe:	b299      	uxth	r1, r3
1000ac00:	b909      	cbnz	r1, 1000ac06 <__lo0bits+0x2a>
1000ac02:	0c1b      	lsrs	r3, r3, #16
1000ac04:	2210      	movs	r2, #16
1000ac06:	b2d9      	uxtb	r1, r3
1000ac08:	b909      	cbnz	r1, 1000ac0e <__lo0bits+0x32>
1000ac0a:	3208      	adds	r2, #8
1000ac0c:	0a1b      	lsrs	r3, r3, #8
1000ac0e:	0719      	lsls	r1, r3, #28
1000ac10:	bf04      	itt	eq
1000ac12:	091b      	lsreq	r3, r3, #4
1000ac14:	3204      	addeq	r2, #4
1000ac16:	0799      	lsls	r1, r3, #30
1000ac18:	bf04      	itt	eq
1000ac1a:	089b      	lsreq	r3, r3, #2
1000ac1c:	3202      	addeq	r2, #2
1000ac1e:	07d9      	lsls	r1, r3, #31
1000ac20:	d403      	bmi.n	1000ac2a <__lo0bits+0x4e>
1000ac22:	085b      	lsrs	r3, r3, #1
1000ac24:	f102 0201 	add.w	r2, r2, #1
1000ac28:	d003      	beq.n	1000ac32 <__lo0bits+0x56>
1000ac2a:	6003      	str	r3, [r0, #0]
1000ac2c:	e7e5      	b.n	1000abfa <__lo0bits+0x1e>
1000ac2e:	2200      	movs	r2, #0
1000ac30:	e7e3      	b.n	1000abfa <__lo0bits+0x1e>
1000ac32:	2220      	movs	r2, #32
1000ac34:	e7e1      	b.n	1000abfa <__lo0bits+0x1e>
	...

1000ac38 <__i2b>:
1000ac38:	b510      	push	{r4, lr}
1000ac3a:	460c      	mov	r4, r1
1000ac3c:	2101      	movs	r1, #1
1000ac3e:	f7ff ff05 	bl	1000aa4c <_Balloc>
1000ac42:	4602      	mov	r2, r0
1000ac44:	b928      	cbnz	r0, 1000ac52 <__i2b+0x1a>
1000ac46:	4b05      	ldr	r3, [pc, #20]	@ (1000ac5c <__i2b+0x24>)
1000ac48:	4805      	ldr	r0, [pc, #20]	@ (1000ac60 <__i2b+0x28>)
1000ac4a:	f240 1145 	movw	r1, #325	@ 0x145
1000ac4e:	f000 fd35 	bl	1000b6bc <__assert_func>
1000ac52:	2301      	movs	r3, #1
1000ac54:	6144      	str	r4, [r0, #20]
1000ac56:	6103      	str	r3, [r0, #16]
1000ac58:	bd10      	pop	{r4, pc}
1000ac5a:	bf00      	nop
1000ac5c:	10016cad 	.word	0x10016cad
1000ac60:	10016cbe 	.word	0x10016cbe

1000ac64 <__multiply>:
1000ac64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000ac68:	4691      	mov	r9, r2
1000ac6a:	690a      	ldr	r2, [r1, #16]
1000ac6c:	f8d9 3010 	ldr.w	r3, [r9, #16]
1000ac70:	429a      	cmp	r2, r3
1000ac72:	bfb8      	it	lt
1000ac74:	460b      	movlt	r3, r1
1000ac76:	460c      	mov	r4, r1
1000ac78:	bfbc      	itt	lt
1000ac7a:	464c      	movlt	r4, r9
1000ac7c:	4699      	movlt	r9, r3
1000ac7e:	6927      	ldr	r7, [r4, #16]
1000ac80:	f8d9 a010 	ldr.w	sl, [r9, #16]
1000ac84:	68a3      	ldr	r3, [r4, #8]
1000ac86:	6861      	ldr	r1, [r4, #4]
1000ac88:	eb07 060a 	add.w	r6, r7, sl
1000ac8c:	42b3      	cmp	r3, r6
1000ac8e:	b085      	sub	sp, #20
1000ac90:	bfb8      	it	lt
1000ac92:	3101      	addlt	r1, #1
1000ac94:	f7ff feda 	bl	1000aa4c <_Balloc>
1000ac98:	b930      	cbnz	r0, 1000aca8 <__multiply+0x44>
1000ac9a:	4602      	mov	r2, r0
1000ac9c:	4b44      	ldr	r3, [pc, #272]	@ (1000adb0 <__multiply+0x14c>)
1000ac9e:	4845      	ldr	r0, [pc, #276]	@ (1000adb4 <__multiply+0x150>)
1000aca0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
1000aca4:	f000 fd0a 	bl	1000b6bc <__assert_func>
1000aca8:	f100 0514 	add.w	r5, r0, #20
1000acac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
1000acb0:	462b      	mov	r3, r5
1000acb2:	2200      	movs	r2, #0
1000acb4:	4543      	cmp	r3, r8
1000acb6:	d321      	bcc.n	1000acfc <__multiply+0x98>
1000acb8:	f104 0314 	add.w	r3, r4, #20
1000acbc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
1000acc0:	f109 0314 	add.w	r3, r9, #20
1000acc4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
1000acc8:	9202      	str	r2, [sp, #8]
1000acca:	1b3a      	subs	r2, r7, r4
1000accc:	3a15      	subs	r2, #21
1000acce:	f022 0203 	bic.w	r2, r2, #3
1000acd2:	3204      	adds	r2, #4
1000acd4:	f104 0115 	add.w	r1, r4, #21
1000acd8:	428f      	cmp	r7, r1
1000acda:	bf38      	it	cc
1000acdc:	2204      	movcc	r2, #4
1000acde:	9201      	str	r2, [sp, #4]
1000ace0:	9a02      	ldr	r2, [sp, #8]
1000ace2:	9303      	str	r3, [sp, #12]
1000ace4:	429a      	cmp	r2, r3
1000ace6:	d80c      	bhi.n	1000ad02 <__multiply+0x9e>
1000ace8:	2e00      	cmp	r6, #0
1000acea:	dd03      	ble.n	1000acf4 <__multiply+0x90>
1000acec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
1000acf0:	2b00      	cmp	r3, #0
1000acf2:	d05b      	beq.n	1000adac <__multiply+0x148>
1000acf4:	6106      	str	r6, [r0, #16]
1000acf6:	b005      	add	sp, #20
1000acf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000acfc:	f843 2b04 	str.w	r2, [r3], #4
1000ad00:	e7d8      	b.n	1000acb4 <__multiply+0x50>
1000ad02:	f8b3 a000 	ldrh.w	sl, [r3]
1000ad06:	f1ba 0f00 	cmp.w	sl, #0
1000ad0a:	d024      	beq.n	1000ad56 <__multiply+0xf2>
1000ad0c:	f104 0e14 	add.w	lr, r4, #20
1000ad10:	46a9      	mov	r9, r5
1000ad12:	f04f 0c00 	mov.w	ip, #0
1000ad16:	f85e 2b04 	ldr.w	r2, [lr], #4
1000ad1a:	f8d9 1000 	ldr.w	r1, [r9]
1000ad1e:	fa1f fb82 	uxth.w	fp, r2
1000ad22:	b289      	uxth	r1, r1
1000ad24:	fb0a 110b 	mla	r1, sl, fp, r1
1000ad28:	ea4f 4b12 	mov.w	fp, r2, lsr #16
1000ad2c:	f8d9 2000 	ldr.w	r2, [r9]
1000ad30:	4461      	add	r1, ip
1000ad32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
1000ad36:	fb0a c20b 	mla	r2, sl, fp, ip
1000ad3a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
1000ad3e:	b289      	uxth	r1, r1
1000ad40:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
1000ad44:	4577      	cmp	r7, lr
1000ad46:	f849 1b04 	str.w	r1, [r9], #4
1000ad4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
1000ad4e:	d8e2      	bhi.n	1000ad16 <__multiply+0xb2>
1000ad50:	9a01      	ldr	r2, [sp, #4]
1000ad52:	f845 c002 	str.w	ip, [r5, r2]
1000ad56:	9a03      	ldr	r2, [sp, #12]
1000ad58:	f8b2 9002 	ldrh.w	r9, [r2, #2]
1000ad5c:	3304      	adds	r3, #4
1000ad5e:	f1b9 0f00 	cmp.w	r9, #0
1000ad62:	d021      	beq.n	1000ada8 <__multiply+0x144>
1000ad64:	6829      	ldr	r1, [r5, #0]
1000ad66:	f104 0c14 	add.w	ip, r4, #20
1000ad6a:	46ae      	mov	lr, r5
1000ad6c:	f04f 0a00 	mov.w	sl, #0
1000ad70:	f8bc b000 	ldrh.w	fp, [ip]
1000ad74:	f8be 2002 	ldrh.w	r2, [lr, #2]
1000ad78:	fb09 220b 	mla	r2, r9, fp, r2
1000ad7c:	4452      	add	r2, sl
1000ad7e:	b289      	uxth	r1, r1
1000ad80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
1000ad84:	f84e 1b04 	str.w	r1, [lr], #4
1000ad88:	f85c 1b04 	ldr.w	r1, [ip], #4
1000ad8c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
1000ad90:	f8be 1000 	ldrh.w	r1, [lr]
1000ad94:	fb09 110a 	mla	r1, r9, sl, r1
1000ad98:	eb01 4112 	add.w	r1, r1, r2, lsr #16
1000ad9c:	4567      	cmp	r7, ip
1000ad9e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
1000ada2:	d8e5      	bhi.n	1000ad70 <__multiply+0x10c>
1000ada4:	9a01      	ldr	r2, [sp, #4]
1000ada6:	50a9      	str	r1, [r5, r2]
1000ada8:	3504      	adds	r5, #4
1000adaa:	e799      	b.n	1000ace0 <__multiply+0x7c>
1000adac:	3e01      	subs	r6, #1
1000adae:	e79b      	b.n	1000ace8 <__multiply+0x84>
1000adb0:	10016cad 	.word	0x10016cad
1000adb4:	10016cbe 	.word	0x10016cbe

1000adb8 <__pow5mult>:
1000adb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1000adbc:	4615      	mov	r5, r2
1000adbe:	f012 0203 	ands.w	r2, r2, #3
1000adc2:	4606      	mov	r6, r0
1000adc4:	460f      	mov	r7, r1
1000adc6:	d007      	beq.n	1000add8 <__pow5mult+0x20>
1000adc8:	4c25      	ldr	r4, [pc, #148]	@ (1000ae60 <__pow5mult+0xa8>)
1000adca:	3a01      	subs	r2, #1
1000adcc:	2300      	movs	r3, #0
1000adce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
1000add2:	f7ff fe9d 	bl	1000ab10 <__multadd>
1000add6:	4607      	mov	r7, r0
1000add8:	10ad      	asrs	r5, r5, #2
1000adda:	d03d      	beq.n	1000ae58 <__pow5mult+0xa0>
1000addc:	69f4      	ldr	r4, [r6, #28]
1000adde:	b97c      	cbnz	r4, 1000ae00 <__pow5mult+0x48>
1000ade0:	2010      	movs	r0, #16
1000ade2:	f7fe f841 	bl	10008e68 <malloc>
1000ade6:	4602      	mov	r2, r0
1000ade8:	61f0      	str	r0, [r6, #28]
1000adea:	b928      	cbnz	r0, 1000adf8 <__pow5mult+0x40>
1000adec:	4b1d      	ldr	r3, [pc, #116]	@ (1000ae64 <__pow5mult+0xac>)
1000adee:	481e      	ldr	r0, [pc, #120]	@ (1000ae68 <__pow5mult+0xb0>)
1000adf0:	f240 11b3 	movw	r1, #435	@ 0x1b3
1000adf4:	f000 fc62 	bl	1000b6bc <__assert_func>
1000adf8:	e9c0 4401 	strd	r4, r4, [r0, #4]
1000adfc:	6004      	str	r4, [r0, #0]
1000adfe:	60c4      	str	r4, [r0, #12]
1000ae00:	f8d6 801c 	ldr.w	r8, [r6, #28]
1000ae04:	f8d8 4008 	ldr.w	r4, [r8, #8]
1000ae08:	b94c      	cbnz	r4, 1000ae1e <__pow5mult+0x66>
1000ae0a:	f240 2171 	movw	r1, #625	@ 0x271
1000ae0e:	4630      	mov	r0, r6
1000ae10:	f7ff ff12 	bl	1000ac38 <__i2b>
1000ae14:	2300      	movs	r3, #0
1000ae16:	f8c8 0008 	str.w	r0, [r8, #8]
1000ae1a:	4604      	mov	r4, r0
1000ae1c:	6003      	str	r3, [r0, #0]
1000ae1e:	f04f 0900 	mov.w	r9, #0
1000ae22:	07eb      	lsls	r3, r5, #31
1000ae24:	d50a      	bpl.n	1000ae3c <__pow5mult+0x84>
1000ae26:	4639      	mov	r1, r7
1000ae28:	4622      	mov	r2, r4
1000ae2a:	4630      	mov	r0, r6
1000ae2c:	f7ff ff1a 	bl	1000ac64 <__multiply>
1000ae30:	4639      	mov	r1, r7
1000ae32:	4680      	mov	r8, r0
1000ae34:	4630      	mov	r0, r6
1000ae36:	f7ff fe49 	bl	1000aacc <_Bfree>
1000ae3a:	4647      	mov	r7, r8
1000ae3c:	106d      	asrs	r5, r5, #1
1000ae3e:	d00b      	beq.n	1000ae58 <__pow5mult+0xa0>
1000ae40:	6820      	ldr	r0, [r4, #0]
1000ae42:	b938      	cbnz	r0, 1000ae54 <__pow5mult+0x9c>
1000ae44:	4622      	mov	r2, r4
1000ae46:	4621      	mov	r1, r4
1000ae48:	4630      	mov	r0, r6
1000ae4a:	f7ff ff0b 	bl	1000ac64 <__multiply>
1000ae4e:	6020      	str	r0, [r4, #0]
1000ae50:	f8c0 9000 	str.w	r9, [r0]
1000ae54:	4604      	mov	r4, r0
1000ae56:	e7e4      	b.n	1000ae22 <__pow5mult+0x6a>
1000ae58:	4638      	mov	r0, r7
1000ae5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1000ae5e:	bf00      	nop
1000ae60:	10016e08 	.word	0x10016e08
1000ae64:	10016c3d 	.word	0x10016c3d
1000ae68:	10016cbe 	.word	0x10016cbe

1000ae6c <__lshift>:
1000ae6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1000ae70:	460c      	mov	r4, r1
1000ae72:	6849      	ldr	r1, [r1, #4]
1000ae74:	6923      	ldr	r3, [r4, #16]
1000ae76:	eb03 1862 	add.w	r8, r3, r2, asr #5
1000ae7a:	68a3      	ldr	r3, [r4, #8]
1000ae7c:	4607      	mov	r7, r0
1000ae7e:	4691      	mov	r9, r2
1000ae80:	ea4f 1a62 	mov.w	sl, r2, asr #5
1000ae84:	f108 0601 	add.w	r6, r8, #1
1000ae88:	42b3      	cmp	r3, r6
1000ae8a:	db0b      	blt.n	1000aea4 <__lshift+0x38>
1000ae8c:	4638      	mov	r0, r7
1000ae8e:	f7ff fddd 	bl	1000aa4c <_Balloc>
1000ae92:	4605      	mov	r5, r0
1000ae94:	b948      	cbnz	r0, 1000aeaa <__lshift+0x3e>
1000ae96:	4602      	mov	r2, r0
1000ae98:	4b28      	ldr	r3, [pc, #160]	@ (1000af3c <__lshift+0xd0>)
1000ae9a:	4829      	ldr	r0, [pc, #164]	@ (1000af40 <__lshift+0xd4>)
1000ae9c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
1000aea0:	f000 fc0c 	bl	1000b6bc <__assert_func>
1000aea4:	3101      	adds	r1, #1
1000aea6:	005b      	lsls	r3, r3, #1
1000aea8:	e7ee      	b.n	1000ae88 <__lshift+0x1c>
1000aeaa:	2300      	movs	r3, #0
1000aeac:	f100 0114 	add.w	r1, r0, #20
1000aeb0:	f100 0210 	add.w	r2, r0, #16
1000aeb4:	4618      	mov	r0, r3
1000aeb6:	4553      	cmp	r3, sl
1000aeb8:	db33      	blt.n	1000af22 <__lshift+0xb6>
1000aeba:	6920      	ldr	r0, [r4, #16]
1000aebc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
1000aec0:	f104 0314 	add.w	r3, r4, #20
1000aec4:	f019 091f 	ands.w	r9, r9, #31
1000aec8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
1000aecc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
1000aed0:	d02b      	beq.n	1000af2a <__lshift+0xbe>
1000aed2:	f1c9 0e20 	rsb	lr, r9, #32
1000aed6:	468a      	mov	sl, r1
1000aed8:	2200      	movs	r2, #0
1000aeda:	6818      	ldr	r0, [r3, #0]
1000aedc:	fa00 f009 	lsl.w	r0, r0, r9
1000aee0:	4310      	orrs	r0, r2
1000aee2:	f84a 0b04 	str.w	r0, [sl], #4
1000aee6:	f853 2b04 	ldr.w	r2, [r3], #4
1000aeea:	459c      	cmp	ip, r3
1000aeec:	fa22 f20e 	lsr.w	r2, r2, lr
1000aef0:	d8f3      	bhi.n	1000aeda <__lshift+0x6e>
1000aef2:	ebac 0304 	sub.w	r3, ip, r4
1000aef6:	3b15      	subs	r3, #21
1000aef8:	f023 0303 	bic.w	r3, r3, #3
1000aefc:	3304      	adds	r3, #4
1000aefe:	f104 0015 	add.w	r0, r4, #21
1000af02:	4584      	cmp	ip, r0
1000af04:	bf38      	it	cc
1000af06:	2304      	movcc	r3, #4
1000af08:	50ca      	str	r2, [r1, r3]
1000af0a:	b10a      	cbz	r2, 1000af10 <__lshift+0xa4>
1000af0c:	f108 0602 	add.w	r6, r8, #2
1000af10:	3e01      	subs	r6, #1
1000af12:	4638      	mov	r0, r7
1000af14:	612e      	str	r6, [r5, #16]
1000af16:	4621      	mov	r1, r4
1000af18:	f7ff fdd8 	bl	1000aacc <_Bfree>
1000af1c:	4628      	mov	r0, r5
1000af1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1000af22:	f842 0f04 	str.w	r0, [r2, #4]!
1000af26:	3301      	adds	r3, #1
1000af28:	e7c5      	b.n	1000aeb6 <__lshift+0x4a>
1000af2a:	3904      	subs	r1, #4
1000af2c:	f853 2b04 	ldr.w	r2, [r3], #4
1000af30:	f841 2f04 	str.w	r2, [r1, #4]!
1000af34:	459c      	cmp	ip, r3
1000af36:	d8f9      	bhi.n	1000af2c <__lshift+0xc0>
1000af38:	e7ea      	b.n	1000af10 <__lshift+0xa4>
1000af3a:	bf00      	nop
1000af3c:	10016cad 	.word	0x10016cad
1000af40:	10016cbe 	.word	0x10016cbe

1000af44 <__mcmp>:
1000af44:	b530      	push	{r4, r5, lr}
1000af46:	6902      	ldr	r2, [r0, #16]
1000af48:	690c      	ldr	r4, [r1, #16]
1000af4a:	1b12      	subs	r2, r2, r4
1000af4c:	d10e      	bne.n	1000af6c <__mcmp+0x28>
1000af4e:	f100 0314 	add.w	r3, r0, #20
1000af52:	3114      	adds	r1, #20
1000af54:	eb03 0084 	add.w	r0, r3, r4, lsl #2
1000af58:	eb01 0184 	add.w	r1, r1, r4, lsl #2
1000af5c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
1000af60:	f851 4d04 	ldr.w	r4, [r1, #-4]!
1000af64:	42a5      	cmp	r5, r4
1000af66:	d003      	beq.n	1000af70 <__mcmp+0x2c>
1000af68:	d305      	bcc.n	1000af76 <__mcmp+0x32>
1000af6a:	2201      	movs	r2, #1
1000af6c:	4610      	mov	r0, r2
1000af6e:	bd30      	pop	{r4, r5, pc}
1000af70:	4283      	cmp	r3, r0
1000af72:	d3f3      	bcc.n	1000af5c <__mcmp+0x18>
1000af74:	e7fa      	b.n	1000af6c <__mcmp+0x28>
1000af76:	f04f 32ff 	mov.w	r2, #4294967295
1000af7a:	e7f7      	b.n	1000af6c <__mcmp+0x28>

1000af7c <__mdiff>:
1000af7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000af80:	460c      	mov	r4, r1
1000af82:	4606      	mov	r6, r0
1000af84:	4611      	mov	r1, r2
1000af86:	4620      	mov	r0, r4
1000af88:	4690      	mov	r8, r2
1000af8a:	f7ff ffdb 	bl	1000af44 <__mcmp>
1000af8e:	1e05      	subs	r5, r0, #0
1000af90:	d110      	bne.n	1000afb4 <__mdiff+0x38>
1000af92:	4629      	mov	r1, r5
1000af94:	4630      	mov	r0, r6
1000af96:	f7ff fd59 	bl	1000aa4c <_Balloc>
1000af9a:	b930      	cbnz	r0, 1000afaa <__mdiff+0x2e>
1000af9c:	4b3a      	ldr	r3, [pc, #232]	@ (1000b088 <__mdiff+0x10c>)
1000af9e:	4602      	mov	r2, r0
1000afa0:	f240 2137 	movw	r1, #567	@ 0x237
1000afa4:	4839      	ldr	r0, [pc, #228]	@ (1000b08c <__mdiff+0x110>)
1000afa6:	f000 fb89 	bl	1000b6bc <__assert_func>
1000afaa:	2301      	movs	r3, #1
1000afac:	e9c0 3504 	strd	r3, r5, [r0, #16]
1000afb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000afb4:	bfa4      	itt	ge
1000afb6:	4643      	movge	r3, r8
1000afb8:	46a0      	movge	r8, r4
1000afba:	4630      	mov	r0, r6
1000afbc:	f8d8 1004 	ldr.w	r1, [r8, #4]
1000afc0:	bfa6      	itte	ge
1000afc2:	461c      	movge	r4, r3
1000afc4:	2500      	movge	r5, #0
1000afc6:	2501      	movlt	r5, #1
1000afc8:	f7ff fd40 	bl	1000aa4c <_Balloc>
1000afcc:	b920      	cbnz	r0, 1000afd8 <__mdiff+0x5c>
1000afce:	4b2e      	ldr	r3, [pc, #184]	@ (1000b088 <__mdiff+0x10c>)
1000afd0:	4602      	mov	r2, r0
1000afd2:	f240 2145 	movw	r1, #581	@ 0x245
1000afd6:	e7e5      	b.n	1000afa4 <__mdiff+0x28>
1000afd8:	f8d8 7010 	ldr.w	r7, [r8, #16]
1000afdc:	6926      	ldr	r6, [r4, #16]
1000afde:	60c5      	str	r5, [r0, #12]
1000afe0:	f104 0914 	add.w	r9, r4, #20
1000afe4:	f108 0514 	add.w	r5, r8, #20
1000afe8:	f100 0e14 	add.w	lr, r0, #20
1000afec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
1000aff0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
1000aff4:	f108 0210 	add.w	r2, r8, #16
1000aff8:	46f2      	mov	sl, lr
1000affa:	2100      	movs	r1, #0
1000affc:	f859 3b04 	ldr.w	r3, [r9], #4
1000b000:	f852 bf04 	ldr.w	fp, [r2, #4]!
1000b004:	fa11 f88b 	uxtah	r8, r1, fp
1000b008:	b299      	uxth	r1, r3
1000b00a:	0c1b      	lsrs	r3, r3, #16
1000b00c:	eba8 0801 	sub.w	r8, r8, r1
1000b010:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
1000b014:	eb03 4328 	add.w	r3, r3, r8, asr #16
1000b018:	fa1f f888 	uxth.w	r8, r8
1000b01c:	1419      	asrs	r1, r3, #16
1000b01e:	454e      	cmp	r6, r9
1000b020:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
1000b024:	f84a 3b04 	str.w	r3, [sl], #4
1000b028:	d8e8      	bhi.n	1000affc <__mdiff+0x80>
1000b02a:	1b33      	subs	r3, r6, r4
1000b02c:	3b15      	subs	r3, #21
1000b02e:	f023 0303 	bic.w	r3, r3, #3
1000b032:	3304      	adds	r3, #4
1000b034:	3415      	adds	r4, #21
1000b036:	42a6      	cmp	r6, r4
1000b038:	bf38      	it	cc
1000b03a:	2304      	movcc	r3, #4
1000b03c:	441d      	add	r5, r3
1000b03e:	4473      	add	r3, lr
1000b040:	469e      	mov	lr, r3
1000b042:	462e      	mov	r6, r5
1000b044:	4566      	cmp	r6, ip
1000b046:	d30e      	bcc.n	1000b066 <__mdiff+0xea>
1000b048:	f10c 0203 	add.w	r2, ip, #3
1000b04c:	1b52      	subs	r2, r2, r5
1000b04e:	f022 0203 	bic.w	r2, r2, #3
1000b052:	3d03      	subs	r5, #3
1000b054:	45ac      	cmp	ip, r5
1000b056:	bf38      	it	cc
1000b058:	2200      	movcc	r2, #0
1000b05a:	4413      	add	r3, r2
1000b05c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
1000b060:	b17a      	cbz	r2, 1000b082 <__mdiff+0x106>
1000b062:	6107      	str	r7, [r0, #16]
1000b064:	e7a4      	b.n	1000afb0 <__mdiff+0x34>
1000b066:	f856 8b04 	ldr.w	r8, [r6], #4
1000b06a:	fa11 f288 	uxtah	r2, r1, r8
1000b06e:	1414      	asrs	r4, r2, #16
1000b070:	eb04 4418 	add.w	r4, r4, r8, lsr #16
1000b074:	b292      	uxth	r2, r2
1000b076:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
1000b07a:	f84e 2b04 	str.w	r2, [lr], #4
1000b07e:	1421      	asrs	r1, r4, #16
1000b080:	e7e0      	b.n	1000b044 <__mdiff+0xc8>
1000b082:	3f01      	subs	r7, #1
1000b084:	e7ea      	b.n	1000b05c <__mdiff+0xe0>
1000b086:	bf00      	nop
1000b088:	10016cad 	.word	0x10016cad
1000b08c:	10016cbe 	.word	0x10016cbe

1000b090 <__d2b>:
1000b090:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
1000b094:	2101      	movs	r1, #1
1000b096:	9e08      	ldr	r6, [sp, #32]
1000b098:	4690      	mov	r8, r2
1000b09a:	4699      	mov	r9, r3
1000b09c:	f7ff fcd6 	bl	1000aa4c <_Balloc>
1000b0a0:	4604      	mov	r4, r0
1000b0a2:	b930      	cbnz	r0, 1000b0b2 <__d2b+0x22>
1000b0a4:	4602      	mov	r2, r0
1000b0a6:	4b25      	ldr	r3, [pc, #148]	@ (1000b13c <__d2b+0xac>)
1000b0a8:	4825      	ldr	r0, [pc, #148]	@ (1000b140 <__d2b+0xb0>)
1000b0aa:	f240 310f 	movw	r1, #783	@ 0x30f
1000b0ae:	f000 fb05 	bl	1000b6bc <__assert_func>
1000b0b2:	f3c9 550a 	ubfx	r5, r9, #20, #11
1000b0b6:	f3c9 0313 	ubfx	r3, r9, #0, #20
1000b0ba:	bb35      	cbnz	r5, 1000b10a <__d2b+0x7a>
1000b0bc:	9301      	str	r3, [sp, #4]
1000b0be:	f1b8 0300 	subs.w	r3, r8, #0
1000b0c2:	d027      	beq.n	1000b114 <__d2b+0x84>
1000b0c4:	4668      	mov	r0, sp
1000b0c6:	9300      	str	r3, [sp, #0]
1000b0c8:	f7ff fd88 	bl	1000abdc <__lo0bits>
1000b0cc:	e9dd 1200 	ldrd	r1, r2, [sp]
1000b0d0:	b1f0      	cbz	r0, 1000b110 <__d2b+0x80>
1000b0d2:	f1c0 0320 	rsb	r3, r0, #32
1000b0d6:	fa02 f303 	lsl.w	r3, r2, r3
1000b0da:	430b      	orrs	r3, r1
1000b0dc:	40c2      	lsrs	r2, r0
1000b0de:	6163      	str	r3, [r4, #20]
1000b0e0:	9201      	str	r2, [sp, #4]
1000b0e2:	9b01      	ldr	r3, [sp, #4]
1000b0e4:	61a3      	str	r3, [r4, #24]
1000b0e6:	2b00      	cmp	r3, #0
1000b0e8:	bf14      	ite	ne
1000b0ea:	2202      	movne	r2, #2
1000b0ec:	2201      	moveq	r2, #1
1000b0ee:	6122      	str	r2, [r4, #16]
1000b0f0:	b1c5      	cbz	r5, 1000b124 <__d2b+0x94>
1000b0f2:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
1000b0f6:	4405      	add	r5, r0
1000b0f8:	6035      	str	r5, [r6, #0]
1000b0fa:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
1000b0fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1000b100:	6010      	str	r0, [r2, #0]
1000b102:	4620      	mov	r0, r4
1000b104:	b002      	add	sp, #8
1000b106:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
1000b10a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
1000b10e:	e7d5      	b.n	1000b0bc <__d2b+0x2c>
1000b110:	6161      	str	r1, [r4, #20]
1000b112:	e7e6      	b.n	1000b0e2 <__d2b+0x52>
1000b114:	a801      	add	r0, sp, #4
1000b116:	f7ff fd61 	bl	1000abdc <__lo0bits>
1000b11a:	9b01      	ldr	r3, [sp, #4]
1000b11c:	6163      	str	r3, [r4, #20]
1000b11e:	3020      	adds	r0, #32
1000b120:	2201      	movs	r2, #1
1000b122:	e7e4      	b.n	1000b0ee <__d2b+0x5e>
1000b124:	eb04 0382 	add.w	r3, r4, r2, lsl #2
1000b128:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
1000b12c:	6030      	str	r0, [r6, #0]
1000b12e:	6918      	ldr	r0, [r3, #16]
1000b130:	f7ff fd34 	bl	1000ab9c <__hi0bits>
1000b134:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
1000b138:	e7e1      	b.n	1000b0fe <__d2b+0x6e>
1000b13a:	bf00      	nop
1000b13c:	10016cad 	.word	0x10016cad
1000b140:	10016cbe 	.word	0x10016cbe

1000b144 <__sfputc_r>:
1000b144:	6893      	ldr	r3, [r2, #8]
1000b146:	3b01      	subs	r3, #1
1000b148:	2b00      	cmp	r3, #0
1000b14a:	b410      	push	{r4}
1000b14c:	6093      	str	r3, [r2, #8]
1000b14e:	da08      	bge.n	1000b162 <__sfputc_r+0x1e>
1000b150:	6994      	ldr	r4, [r2, #24]
1000b152:	42a3      	cmp	r3, r4
1000b154:	db01      	blt.n	1000b15a <__sfputc_r+0x16>
1000b156:	290a      	cmp	r1, #10
1000b158:	d103      	bne.n	1000b162 <__sfputc_r+0x1e>
1000b15a:	f85d 4b04 	ldr.w	r4, [sp], #4
1000b15e:	f000 ba17 	b.w	1000b590 <__swbuf_r>
1000b162:	6813      	ldr	r3, [r2, #0]
1000b164:	1c58      	adds	r0, r3, #1
1000b166:	6010      	str	r0, [r2, #0]
1000b168:	7019      	strb	r1, [r3, #0]
1000b16a:	4608      	mov	r0, r1
1000b16c:	f85d 4b04 	ldr.w	r4, [sp], #4
1000b170:	4770      	bx	lr

1000b172 <__sfputs_r>:
1000b172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000b174:	4606      	mov	r6, r0
1000b176:	460f      	mov	r7, r1
1000b178:	4614      	mov	r4, r2
1000b17a:	18d5      	adds	r5, r2, r3
1000b17c:	42ac      	cmp	r4, r5
1000b17e:	d101      	bne.n	1000b184 <__sfputs_r+0x12>
1000b180:	2000      	movs	r0, #0
1000b182:	e007      	b.n	1000b194 <__sfputs_r+0x22>
1000b184:	f814 1b01 	ldrb.w	r1, [r4], #1
1000b188:	463a      	mov	r2, r7
1000b18a:	4630      	mov	r0, r6
1000b18c:	f7ff ffda 	bl	1000b144 <__sfputc_r>
1000b190:	1c43      	adds	r3, r0, #1
1000b192:	d1f3      	bne.n	1000b17c <__sfputs_r+0xa>
1000b194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

1000b198 <_vfiprintf_r>:
1000b198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000b19c:	460d      	mov	r5, r1
1000b19e:	b09d      	sub	sp, #116	@ 0x74
1000b1a0:	4614      	mov	r4, r2
1000b1a2:	4698      	mov	r8, r3
1000b1a4:	4606      	mov	r6, r0
1000b1a6:	b118      	cbz	r0, 1000b1b0 <_vfiprintf_r+0x18>
1000b1a8:	6a03      	ldr	r3, [r0, #32]
1000b1aa:	b90b      	cbnz	r3, 1000b1b0 <_vfiprintf_r+0x18>
1000b1ac:	f7fe fbf0 	bl	10009990 <__sinit>
1000b1b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
1000b1b2:	07d9      	lsls	r1, r3, #31
1000b1b4:	d405      	bmi.n	1000b1c2 <_vfiprintf_r+0x2a>
1000b1b6:	89ab      	ldrh	r3, [r5, #12]
1000b1b8:	059a      	lsls	r2, r3, #22
1000b1ba:	d402      	bmi.n	1000b1c2 <_vfiprintf_r+0x2a>
1000b1bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
1000b1be:	f7fe fd15 	bl	10009bec <__retarget_lock_acquire_recursive>
1000b1c2:	89ab      	ldrh	r3, [r5, #12]
1000b1c4:	071b      	lsls	r3, r3, #28
1000b1c6:	d501      	bpl.n	1000b1cc <_vfiprintf_r+0x34>
1000b1c8:	692b      	ldr	r3, [r5, #16]
1000b1ca:	b99b      	cbnz	r3, 1000b1f4 <_vfiprintf_r+0x5c>
1000b1cc:	4629      	mov	r1, r5
1000b1ce:	4630      	mov	r0, r6
1000b1d0:	f000 fa1c 	bl	1000b60c <__swsetup_r>
1000b1d4:	b170      	cbz	r0, 1000b1f4 <_vfiprintf_r+0x5c>
1000b1d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
1000b1d8:	07dc      	lsls	r4, r3, #31
1000b1da:	d504      	bpl.n	1000b1e6 <_vfiprintf_r+0x4e>
1000b1dc:	f04f 30ff 	mov.w	r0, #4294967295
1000b1e0:	b01d      	add	sp, #116	@ 0x74
1000b1e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000b1e6:	89ab      	ldrh	r3, [r5, #12]
1000b1e8:	0598      	lsls	r0, r3, #22
1000b1ea:	d4f7      	bmi.n	1000b1dc <_vfiprintf_r+0x44>
1000b1ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
1000b1ee:	f7fe fcfe 	bl	10009bee <__retarget_lock_release_recursive>
1000b1f2:	e7f3      	b.n	1000b1dc <_vfiprintf_r+0x44>
1000b1f4:	2300      	movs	r3, #0
1000b1f6:	9309      	str	r3, [sp, #36]	@ 0x24
1000b1f8:	2320      	movs	r3, #32
1000b1fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
1000b1fe:	f8cd 800c 	str.w	r8, [sp, #12]
1000b202:	2330      	movs	r3, #48	@ 0x30
1000b204:	f8df 81b0 	ldr.w	r8, [pc, #432]	@ 1000b3b8 <_vfiprintf_r+0x220>
1000b208:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
1000b20c:	f04f 0901 	mov.w	r9, #1
1000b210:	4623      	mov	r3, r4
1000b212:	469a      	mov	sl, r3
1000b214:	f813 2b01 	ldrb.w	r2, [r3], #1
1000b218:	b10a      	cbz	r2, 1000b21e <_vfiprintf_r+0x86>
1000b21a:	2a25      	cmp	r2, #37	@ 0x25
1000b21c:	d1f9      	bne.n	1000b212 <_vfiprintf_r+0x7a>
1000b21e:	ebba 0b04 	subs.w	fp, sl, r4
1000b222:	d00b      	beq.n	1000b23c <_vfiprintf_r+0xa4>
1000b224:	465b      	mov	r3, fp
1000b226:	4622      	mov	r2, r4
1000b228:	4629      	mov	r1, r5
1000b22a:	4630      	mov	r0, r6
1000b22c:	f7ff ffa1 	bl	1000b172 <__sfputs_r>
1000b230:	3001      	adds	r0, #1
1000b232:	f000 80a9 	beq.w	1000b388 <_vfiprintf_r+0x1f0>
1000b236:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1000b238:	445a      	add	r2, fp
1000b23a:	9209      	str	r2, [sp, #36]	@ 0x24
1000b23c:	f89a 3000 	ldrb.w	r3, [sl]
1000b240:	2b00      	cmp	r3, #0
1000b242:	f000 80a1 	beq.w	1000b388 <_vfiprintf_r+0x1f0>
1000b246:	2300      	movs	r3, #0
1000b248:	f04f 32ff 	mov.w	r2, #4294967295
1000b24c:	e9cd 2305 	strd	r2, r3, [sp, #20]
1000b250:	f10a 0a01 	add.w	sl, sl, #1
1000b254:	9304      	str	r3, [sp, #16]
1000b256:	9307      	str	r3, [sp, #28]
1000b258:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
1000b25c:	931a      	str	r3, [sp, #104]	@ 0x68
1000b25e:	4654      	mov	r4, sl
1000b260:	2205      	movs	r2, #5
1000b262:	f814 1b01 	ldrb.w	r1, [r4], #1
1000b266:	4854      	ldr	r0, [pc, #336]	@ (1000b3b8 <_vfiprintf_r+0x220>)
1000b268:	f7fe fcc2 	bl	10009bf0 <memchr>
1000b26c:	9a04      	ldr	r2, [sp, #16]
1000b26e:	b9d8      	cbnz	r0, 1000b2a8 <_vfiprintf_r+0x110>
1000b270:	06d1      	lsls	r1, r2, #27
1000b272:	bf44      	itt	mi
1000b274:	2320      	movmi	r3, #32
1000b276:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
1000b27a:	0713      	lsls	r3, r2, #28
1000b27c:	bf44      	itt	mi
1000b27e:	232b      	movmi	r3, #43	@ 0x2b
1000b280:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
1000b284:	f89a 3000 	ldrb.w	r3, [sl]
1000b288:	2b2a      	cmp	r3, #42	@ 0x2a
1000b28a:	d015      	beq.n	1000b2b8 <_vfiprintf_r+0x120>
1000b28c:	9a07      	ldr	r2, [sp, #28]
1000b28e:	4654      	mov	r4, sl
1000b290:	2000      	movs	r0, #0
1000b292:	f04f 0c0a 	mov.w	ip, #10
1000b296:	4621      	mov	r1, r4
1000b298:	f811 3b01 	ldrb.w	r3, [r1], #1
1000b29c:	3b30      	subs	r3, #48	@ 0x30
1000b29e:	2b09      	cmp	r3, #9
1000b2a0:	d94d      	bls.n	1000b33e <_vfiprintf_r+0x1a6>
1000b2a2:	b1b0      	cbz	r0, 1000b2d2 <_vfiprintf_r+0x13a>
1000b2a4:	9207      	str	r2, [sp, #28]
1000b2a6:	e014      	b.n	1000b2d2 <_vfiprintf_r+0x13a>
1000b2a8:	eba0 0308 	sub.w	r3, r0, r8
1000b2ac:	fa09 f303 	lsl.w	r3, r9, r3
1000b2b0:	4313      	orrs	r3, r2
1000b2b2:	9304      	str	r3, [sp, #16]
1000b2b4:	46a2      	mov	sl, r4
1000b2b6:	e7d2      	b.n	1000b25e <_vfiprintf_r+0xc6>
1000b2b8:	9b03      	ldr	r3, [sp, #12]
1000b2ba:	1d19      	adds	r1, r3, #4
1000b2bc:	681b      	ldr	r3, [r3, #0]
1000b2be:	9103      	str	r1, [sp, #12]
1000b2c0:	2b00      	cmp	r3, #0
1000b2c2:	bfbb      	ittet	lt
1000b2c4:	425b      	neglt	r3, r3
1000b2c6:	f042 0202 	orrlt.w	r2, r2, #2
1000b2ca:	9307      	strge	r3, [sp, #28]
1000b2cc:	9307      	strlt	r3, [sp, #28]
1000b2ce:	bfb8      	it	lt
1000b2d0:	9204      	strlt	r2, [sp, #16]
1000b2d2:	7823      	ldrb	r3, [r4, #0]
1000b2d4:	2b2e      	cmp	r3, #46	@ 0x2e
1000b2d6:	d10c      	bne.n	1000b2f2 <_vfiprintf_r+0x15a>
1000b2d8:	7863      	ldrb	r3, [r4, #1]
1000b2da:	2b2a      	cmp	r3, #42	@ 0x2a
1000b2dc:	d134      	bne.n	1000b348 <_vfiprintf_r+0x1b0>
1000b2de:	9b03      	ldr	r3, [sp, #12]
1000b2e0:	1d1a      	adds	r2, r3, #4
1000b2e2:	681b      	ldr	r3, [r3, #0]
1000b2e4:	9203      	str	r2, [sp, #12]
1000b2e6:	2b00      	cmp	r3, #0
1000b2e8:	bfb8      	it	lt
1000b2ea:	f04f 33ff 	movlt.w	r3, #4294967295
1000b2ee:	3402      	adds	r4, #2
1000b2f0:	9305      	str	r3, [sp, #20]
1000b2f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 1000b3c8 <_vfiprintf_r+0x230>
1000b2f6:	7821      	ldrb	r1, [r4, #0]
1000b2f8:	2203      	movs	r2, #3
1000b2fa:	4650      	mov	r0, sl
1000b2fc:	f7fe fc78 	bl	10009bf0 <memchr>
1000b300:	b138      	cbz	r0, 1000b312 <_vfiprintf_r+0x17a>
1000b302:	9b04      	ldr	r3, [sp, #16]
1000b304:	eba0 000a 	sub.w	r0, r0, sl
1000b308:	2240      	movs	r2, #64	@ 0x40
1000b30a:	4082      	lsls	r2, r0
1000b30c:	4313      	orrs	r3, r2
1000b30e:	3401      	adds	r4, #1
1000b310:	9304      	str	r3, [sp, #16]
1000b312:	f814 1b01 	ldrb.w	r1, [r4], #1
1000b316:	4829      	ldr	r0, [pc, #164]	@ (1000b3bc <_vfiprintf_r+0x224>)
1000b318:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
1000b31c:	2206      	movs	r2, #6
1000b31e:	f7fe fc67 	bl	10009bf0 <memchr>
1000b322:	2800      	cmp	r0, #0
1000b324:	d03f      	beq.n	1000b3a6 <_vfiprintf_r+0x20e>
1000b326:	4b26      	ldr	r3, [pc, #152]	@ (1000b3c0 <_vfiprintf_r+0x228>)
1000b328:	bb1b      	cbnz	r3, 1000b372 <_vfiprintf_r+0x1da>
1000b32a:	9b03      	ldr	r3, [sp, #12]
1000b32c:	3307      	adds	r3, #7
1000b32e:	f023 0307 	bic.w	r3, r3, #7
1000b332:	3308      	adds	r3, #8
1000b334:	9303      	str	r3, [sp, #12]
1000b336:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1000b338:	443b      	add	r3, r7
1000b33a:	9309      	str	r3, [sp, #36]	@ 0x24
1000b33c:	e768      	b.n	1000b210 <_vfiprintf_r+0x78>
1000b33e:	fb0c 3202 	mla	r2, ip, r2, r3
1000b342:	460c      	mov	r4, r1
1000b344:	2001      	movs	r0, #1
1000b346:	e7a6      	b.n	1000b296 <_vfiprintf_r+0xfe>
1000b348:	2300      	movs	r3, #0
1000b34a:	3401      	adds	r4, #1
1000b34c:	9305      	str	r3, [sp, #20]
1000b34e:	4619      	mov	r1, r3
1000b350:	f04f 0c0a 	mov.w	ip, #10
1000b354:	4620      	mov	r0, r4
1000b356:	f810 2b01 	ldrb.w	r2, [r0], #1
1000b35a:	3a30      	subs	r2, #48	@ 0x30
1000b35c:	2a09      	cmp	r2, #9
1000b35e:	d903      	bls.n	1000b368 <_vfiprintf_r+0x1d0>
1000b360:	2b00      	cmp	r3, #0
1000b362:	d0c6      	beq.n	1000b2f2 <_vfiprintf_r+0x15a>
1000b364:	9105      	str	r1, [sp, #20]
1000b366:	e7c4      	b.n	1000b2f2 <_vfiprintf_r+0x15a>
1000b368:	fb0c 2101 	mla	r1, ip, r1, r2
1000b36c:	4604      	mov	r4, r0
1000b36e:	2301      	movs	r3, #1
1000b370:	e7f0      	b.n	1000b354 <_vfiprintf_r+0x1bc>
1000b372:	ab03      	add	r3, sp, #12
1000b374:	9300      	str	r3, [sp, #0]
1000b376:	462a      	mov	r2, r5
1000b378:	4b12      	ldr	r3, [pc, #72]	@ (1000b3c4 <_vfiprintf_r+0x22c>)
1000b37a:	a904      	add	r1, sp, #16
1000b37c:	4630      	mov	r0, r6
1000b37e:	f7fd fec5 	bl	1000910c <_printf_float>
1000b382:	4607      	mov	r7, r0
1000b384:	1c78      	adds	r0, r7, #1
1000b386:	d1d6      	bne.n	1000b336 <_vfiprintf_r+0x19e>
1000b388:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
1000b38a:	07d9      	lsls	r1, r3, #31
1000b38c:	d405      	bmi.n	1000b39a <_vfiprintf_r+0x202>
1000b38e:	89ab      	ldrh	r3, [r5, #12]
1000b390:	059a      	lsls	r2, r3, #22
1000b392:	d402      	bmi.n	1000b39a <_vfiprintf_r+0x202>
1000b394:	6da8      	ldr	r0, [r5, #88]	@ 0x58
1000b396:	f7fe fc2a 	bl	10009bee <__retarget_lock_release_recursive>
1000b39a:	89ab      	ldrh	r3, [r5, #12]
1000b39c:	065b      	lsls	r3, r3, #25
1000b39e:	f53f af1d 	bmi.w	1000b1dc <_vfiprintf_r+0x44>
1000b3a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
1000b3a4:	e71c      	b.n	1000b1e0 <_vfiprintf_r+0x48>
1000b3a6:	ab03      	add	r3, sp, #12
1000b3a8:	9300      	str	r3, [sp, #0]
1000b3aa:	462a      	mov	r2, r5
1000b3ac:	4b05      	ldr	r3, [pc, #20]	@ (1000b3c4 <_vfiprintf_r+0x22c>)
1000b3ae:	a904      	add	r1, sp, #16
1000b3b0:	4630      	mov	r0, r6
1000b3b2:	f7fe f951 	bl	10009658 <_printf_i>
1000b3b6:	e7e4      	b.n	1000b382 <_vfiprintf_r+0x1ea>
1000b3b8:	10016f15 	.word	0x10016f15
1000b3bc:	10016f1f 	.word	0x10016f1f
1000b3c0:	1000910d 	.word	0x1000910d
1000b3c4:	1000b173 	.word	0x1000b173
1000b3c8:	10016f1b 	.word	0x10016f1b

1000b3cc <__sflush_r>:
1000b3cc:	898a      	ldrh	r2, [r1, #12]
1000b3ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000b3d2:	4605      	mov	r5, r0
1000b3d4:	0710      	lsls	r0, r2, #28
1000b3d6:	460c      	mov	r4, r1
1000b3d8:	d458      	bmi.n	1000b48c <__sflush_r+0xc0>
1000b3da:	684b      	ldr	r3, [r1, #4]
1000b3dc:	2b00      	cmp	r3, #0
1000b3de:	dc05      	bgt.n	1000b3ec <__sflush_r+0x20>
1000b3e0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
1000b3e2:	2b00      	cmp	r3, #0
1000b3e4:	dc02      	bgt.n	1000b3ec <__sflush_r+0x20>
1000b3e6:	2000      	movs	r0, #0
1000b3e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000b3ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
1000b3ee:	2e00      	cmp	r6, #0
1000b3f0:	d0f9      	beq.n	1000b3e6 <__sflush_r+0x1a>
1000b3f2:	2300      	movs	r3, #0
1000b3f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
1000b3f8:	682f      	ldr	r7, [r5, #0]
1000b3fa:	6a21      	ldr	r1, [r4, #32]
1000b3fc:	602b      	str	r3, [r5, #0]
1000b3fe:	d032      	beq.n	1000b466 <__sflush_r+0x9a>
1000b400:	6d60      	ldr	r0, [r4, #84]	@ 0x54
1000b402:	89a3      	ldrh	r3, [r4, #12]
1000b404:	075a      	lsls	r2, r3, #29
1000b406:	d505      	bpl.n	1000b414 <__sflush_r+0x48>
1000b408:	6863      	ldr	r3, [r4, #4]
1000b40a:	1ac0      	subs	r0, r0, r3
1000b40c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
1000b40e:	b10b      	cbz	r3, 1000b414 <__sflush_r+0x48>
1000b410:	6c23      	ldr	r3, [r4, #64]	@ 0x40
1000b412:	1ac0      	subs	r0, r0, r3
1000b414:	2300      	movs	r3, #0
1000b416:	4602      	mov	r2, r0
1000b418:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
1000b41a:	6a21      	ldr	r1, [r4, #32]
1000b41c:	4628      	mov	r0, r5
1000b41e:	47b0      	blx	r6
1000b420:	1c43      	adds	r3, r0, #1
1000b422:	89a3      	ldrh	r3, [r4, #12]
1000b424:	d106      	bne.n	1000b434 <__sflush_r+0x68>
1000b426:	6829      	ldr	r1, [r5, #0]
1000b428:	291d      	cmp	r1, #29
1000b42a:	d82b      	bhi.n	1000b484 <__sflush_r+0xb8>
1000b42c:	4a29      	ldr	r2, [pc, #164]	@ (1000b4d4 <__sflush_r+0x108>)
1000b42e:	410a      	asrs	r2, r1
1000b430:	07d6      	lsls	r6, r2, #31
1000b432:	d427      	bmi.n	1000b484 <__sflush_r+0xb8>
1000b434:	2200      	movs	r2, #0
1000b436:	6062      	str	r2, [r4, #4]
1000b438:	04d9      	lsls	r1, r3, #19
1000b43a:	6922      	ldr	r2, [r4, #16]
1000b43c:	6022      	str	r2, [r4, #0]
1000b43e:	d504      	bpl.n	1000b44a <__sflush_r+0x7e>
1000b440:	1c42      	adds	r2, r0, #1
1000b442:	d101      	bne.n	1000b448 <__sflush_r+0x7c>
1000b444:	682b      	ldr	r3, [r5, #0]
1000b446:	b903      	cbnz	r3, 1000b44a <__sflush_r+0x7e>
1000b448:	6560      	str	r0, [r4, #84]	@ 0x54
1000b44a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
1000b44c:	602f      	str	r7, [r5, #0]
1000b44e:	2900      	cmp	r1, #0
1000b450:	d0c9      	beq.n	1000b3e6 <__sflush_r+0x1a>
1000b452:	f104 0344 	add.w	r3, r4, #68	@ 0x44
1000b456:	4299      	cmp	r1, r3
1000b458:	d002      	beq.n	1000b460 <__sflush_r+0x94>
1000b45a:	4628      	mov	r0, r5
1000b45c:	f7ff faaa 	bl	1000a9b4 <_free_r>
1000b460:	2000      	movs	r0, #0
1000b462:	6360      	str	r0, [r4, #52]	@ 0x34
1000b464:	e7c0      	b.n	1000b3e8 <__sflush_r+0x1c>
1000b466:	2301      	movs	r3, #1
1000b468:	4628      	mov	r0, r5
1000b46a:	47b0      	blx	r6
1000b46c:	1c41      	adds	r1, r0, #1
1000b46e:	d1c8      	bne.n	1000b402 <__sflush_r+0x36>
1000b470:	682b      	ldr	r3, [r5, #0]
1000b472:	2b00      	cmp	r3, #0
1000b474:	d0c5      	beq.n	1000b402 <__sflush_r+0x36>
1000b476:	2b1d      	cmp	r3, #29
1000b478:	d001      	beq.n	1000b47e <__sflush_r+0xb2>
1000b47a:	2b16      	cmp	r3, #22
1000b47c:	d101      	bne.n	1000b482 <__sflush_r+0xb6>
1000b47e:	602f      	str	r7, [r5, #0]
1000b480:	e7b1      	b.n	1000b3e6 <__sflush_r+0x1a>
1000b482:	89a3      	ldrh	r3, [r4, #12]
1000b484:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1000b488:	81a3      	strh	r3, [r4, #12]
1000b48a:	e7ad      	b.n	1000b3e8 <__sflush_r+0x1c>
1000b48c:	690f      	ldr	r7, [r1, #16]
1000b48e:	2f00      	cmp	r7, #0
1000b490:	d0a9      	beq.n	1000b3e6 <__sflush_r+0x1a>
1000b492:	0793      	lsls	r3, r2, #30
1000b494:	680e      	ldr	r6, [r1, #0]
1000b496:	bf08      	it	eq
1000b498:	694b      	ldreq	r3, [r1, #20]
1000b49a:	600f      	str	r7, [r1, #0]
1000b49c:	bf18      	it	ne
1000b49e:	2300      	movne	r3, #0
1000b4a0:	eba6 0807 	sub.w	r8, r6, r7
1000b4a4:	608b      	str	r3, [r1, #8]
1000b4a6:	f1b8 0f00 	cmp.w	r8, #0
1000b4aa:	dd9c      	ble.n	1000b3e6 <__sflush_r+0x1a>
1000b4ac:	6a21      	ldr	r1, [r4, #32]
1000b4ae:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
1000b4b0:	4643      	mov	r3, r8
1000b4b2:	463a      	mov	r2, r7
1000b4b4:	4628      	mov	r0, r5
1000b4b6:	47b0      	blx	r6
1000b4b8:	2800      	cmp	r0, #0
1000b4ba:	dc06      	bgt.n	1000b4ca <__sflush_r+0xfe>
1000b4bc:	89a3      	ldrh	r3, [r4, #12]
1000b4be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1000b4c2:	81a3      	strh	r3, [r4, #12]
1000b4c4:	f04f 30ff 	mov.w	r0, #4294967295
1000b4c8:	e78e      	b.n	1000b3e8 <__sflush_r+0x1c>
1000b4ca:	4407      	add	r7, r0
1000b4cc:	eba8 0800 	sub.w	r8, r8, r0
1000b4d0:	e7e9      	b.n	1000b4a6 <__sflush_r+0xda>
1000b4d2:	bf00      	nop
1000b4d4:	dfbffffe 	.word	0xdfbffffe

1000b4d8 <_fflush_r>:
1000b4d8:	b538      	push	{r3, r4, r5, lr}
1000b4da:	690b      	ldr	r3, [r1, #16]
1000b4dc:	4605      	mov	r5, r0
1000b4de:	460c      	mov	r4, r1
1000b4e0:	b913      	cbnz	r3, 1000b4e8 <_fflush_r+0x10>
1000b4e2:	2500      	movs	r5, #0
1000b4e4:	4628      	mov	r0, r5
1000b4e6:	bd38      	pop	{r3, r4, r5, pc}
1000b4e8:	b118      	cbz	r0, 1000b4f2 <_fflush_r+0x1a>
1000b4ea:	6a03      	ldr	r3, [r0, #32]
1000b4ec:	b90b      	cbnz	r3, 1000b4f2 <_fflush_r+0x1a>
1000b4ee:	f7fe fa4f 	bl	10009990 <__sinit>
1000b4f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1000b4f6:	2b00      	cmp	r3, #0
1000b4f8:	d0f3      	beq.n	1000b4e2 <_fflush_r+0xa>
1000b4fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
1000b4fc:	07d0      	lsls	r0, r2, #31
1000b4fe:	d404      	bmi.n	1000b50a <_fflush_r+0x32>
1000b500:	0599      	lsls	r1, r3, #22
1000b502:	d402      	bmi.n	1000b50a <_fflush_r+0x32>
1000b504:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1000b506:	f7fe fb71 	bl	10009bec <__retarget_lock_acquire_recursive>
1000b50a:	4628      	mov	r0, r5
1000b50c:	4621      	mov	r1, r4
1000b50e:	f7ff ff5d 	bl	1000b3cc <__sflush_r>
1000b512:	6e63      	ldr	r3, [r4, #100]	@ 0x64
1000b514:	07da      	lsls	r2, r3, #31
1000b516:	4605      	mov	r5, r0
1000b518:	d4e4      	bmi.n	1000b4e4 <_fflush_r+0xc>
1000b51a:	89a3      	ldrh	r3, [r4, #12]
1000b51c:	059b      	lsls	r3, r3, #22
1000b51e:	d4e1      	bmi.n	1000b4e4 <_fflush_r+0xc>
1000b520:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1000b522:	f7fe fb64 	bl	10009bee <__retarget_lock_release_recursive>
1000b526:	e7dd      	b.n	1000b4e4 <_fflush_r+0xc>

1000b528 <_putc_r>:
1000b528:	b570      	push	{r4, r5, r6, lr}
1000b52a:	460d      	mov	r5, r1
1000b52c:	4614      	mov	r4, r2
1000b52e:	4606      	mov	r6, r0
1000b530:	b118      	cbz	r0, 1000b53a <_putc_r+0x12>
1000b532:	6a03      	ldr	r3, [r0, #32]
1000b534:	b90b      	cbnz	r3, 1000b53a <_putc_r+0x12>
1000b536:	f7fe fa2b 	bl	10009990 <__sinit>
1000b53a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
1000b53c:	07d8      	lsls	r0, r3, #31
1000b53e:	d405      	bmi.n	1000b54c <_putc_r+0x24>
1000b540:	89a3      	ldrh	r3, [r4, #12]
1000b542:	0599      	lsls	r1, r3, #22
1000b544:	d402      	bmi.n	1000b54c <_putc_r+0x24>
1000b546:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1000b548:	f7fe fb50 	bl	10009bec <__retarget_lock_acquire_recursive>
1000b54c:	68a3      	ldr	r3, [r4, #8]
1000b54e:	3b01      	subs	r3, #1
1000b550:	2b00      	cmp	r3, #0
1000b552:	60a3      	str	r3, [r4, #8]
1000b554:	da05      	bge.n	1000b562 <_putc_r+0x3a>
1000b556:	69a2      	ldr	r2, [r4, #24]
1000b558:	4293      	cmp	r3, r2
1000b55a:	db12      	blt.n	1000b582 <_putc_r+0x5a>
1000b55c:	b2eb      	uxtb	r3, r5
1000b55e:	2b0a      	cmp	r3, #10
1000b560:	d00f      	beq.n	1000b582 <_putc_r+0x5a>
1000b562:	6823      	ldr	r3, [r4, #0]
1000b564:	1c5a      	adds	r2, r3, #1
1000b566:	6022      	str	r2, [r4, #0]
1000b568:	701d      	strb	r5, [r3, #0]
1000b56a:	b2ed      	uxtb	r5, r5
1000b56c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
1000b56e:	07da      	lsls	r2, r3, #31
1000b570:	d405      	bmi.n	1000b57e <_putc_r+0x56>
1000b572:	89a3      	ldrh	r3, [r4, #12]
1000b574:	059b      	lsls	r3, r3, #22
1000b576:	d402      	bmi.n	1000b57e <_putc_r+0x56>
1000b578:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1000b57a:	f7fe fb38 	bl	10009bee <__retarget_lock_release_recursive>
1000b57e:	4628      	mov	r0, r5
1000b580:	bd70      	pop	{r4, r5, r6, pc}
1000b582:	4629      	mov	r1, r5
1000b584:	4622      	mov	r2, r4
1000b586:	4630      	mov	r0, r6
1000b588:	f000 f802 	bl	1000b590 <__swbuf_r>
1000b58c:	4605      	mov	r5, r0
1000b58e:	e7ed      	b.n	1000b56c <_putc_r+0x44>

1000b590 <__swbuf_r>:
1000b590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000b592:	460e      	mov	r6, r1
1000b594:	4614      	mov	r4, r2
1000b596:	4605      	mov	r5, r0
1000b598:	b118      	cbz	r0, 1000b5a2 <__swbuf_r+0x12>
1000b59a:	6a03      	ldr	r3, [r0, #32]
1000b59c:	b90b      	cbnz	r3, 1000b5a2 <__swbuf_r+0x12>
1000b59e:	f7fe f9f7 	bl	10009990 <__sinit>
1000b5a2:	69a3      	ldr	r3, [r4, #24]
1000b5a4:	60a3      	str	r3, [r4, #8]
1000b5a6:	89a3      	ldrh	r3, [r4, #12]
1000b5a8:	071a      	lsls	r2, r3, #28
1000b5aa:	d525      	bpl.n	1000b5f8 <__swbuf_r+0x68>
1000b5ac:	6923      	ldr	r3, [r4, #16]
1000b5ae:	b31b      	cbz	r3, 1000b5f8 <__swbuf_r+0x68>
1000b5b0:	6823      	ldr	r3, [r4, #0]
1000b5b2:	6922      	ldr	r2, [r4, #16]
1000b5b4:	1a98      	subs	r0, r3, r2
1000b5b6:	6963      	ldr	r3, [r4, #20]
1000b5b8:	b2f6      	uxtb	r6, r6
1000b5ba:	4283      	cmp	r3, r0
1000b5bc:	4637      	mov	r7, r6
1000b5be:	dc04      	bgt.n	1000b5ca <__swbuf_r+0x3a>
1000b5c0:	4621      	mov	r1, r4
1000b5c2:	4628      	mov	r0, r5
1000b5c4:	f7ff ff88 	bl	1000b4d8 <_fflush_r>
1000b5c8:	b9e0      	cbnz	r0, 1000b604 <__swbuf_r+0x74>
1000b5ca:	68a3      	ldr	r3, [r4, #8]
1000b5cc:	3b01      	subs	r3, #1
1000b5ce:	60a3      	str	r3, [r4, #8]
1000b5d0:	6823      	ldr	r3, [r4, #0]
1000b5d2:	1c5a      	adds	r2, r3, #1
1000b5d4:	6022      	str	r2, [r4, #0]
1000b5d6:	701e      	strb	r6, [r3, #0]
1000b5d8:	6962      	ldr	r2, [r4, #20]
1000b5da:	1c43      	adds	r3, r0, #1
1000b5dc:	429a      	cmp	r2, r3
1000b5de:	d004      	beq.n	1000b5ea <__swbuf_r+0x5a>
1000b5e0:	89a3      	ldrh	r3, [r4, #12]
1000b5e2:	07db      	lsls	r3, r3, #31
1000b5e4:	d506      	bpl.n	1000b5f4 <__swbuf_r+0x64>
1000b5e6:	2e0a      	cmp	r6, #10
1000b5e8:	d104      	bne.n	1000b5f4 <__swbuf_r+0x64>
1000b5ea:	4621      	mov	r1, r4
1000b5ec:	4628      	mov	r0, r5
1000b5ee:	f7ff ff73 	bl	1000b4d8 <_fflush_r>
1000b5f2:	b938      	cbnz	r0, 1000b604 <__swbuf_r+0x74>
1000b5f4:	4638      	mov	r0, r7
1000b5f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000b5f8:	4621      	mov	r1, r4
1000b5fa:	4628      	mov	r0, r5
1000b5fc:	f000 f806 	bl	1000b60c <__swsetup_r>
1000b600:	2800      	cmp	r0, #0
1000b602:	d0d5      	beq.n	1000b5b0 <__swbuf_r+0x20>
1000b604:	f04f 37ff 	mov.w	r7, #4294967295
1000b608:	e7f4      	b.n	1000b5f4 <__swbuf_r+0x64>
	...

1000b60c <__swsetup_r>:
1000b60c:	b538      	push	{r3, r4, r5, lr}
1000b60e:	4b2a      	ldr	r3, [pc, #168]	@ (1000b6b8 <__swsetup_r+0xac>)
1000b610:	4605      	mov	r5, r0
1000b612:	6818      	ldr	r0, [r3, #0]
1000b614:	460c      	mov	r4, r1
1000b616:	b118      	cbz	r0, 1000b620 <__swsetup_r+0x14>
1000b618:	6a03      	ldr	r3, [r0, #32]
1000b61a:	b90b      	cbnz	r3, 1000b620 <__swsetup_r+0x14>
1000b61c:	f7fe f9b8 	bl	10009990 <__sinit>
1000b620:	89a3      	ldrh	r3, [r4, #12]
1000b622:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1000b626:	0718      	lsls	r0, r3, #28
1000b628:	d422      	bmi.n	1000b670 <__swsetup_r+0x64>
1000b62a:	06d9      	lsls	r1, r3, #27
1000b62c:	d407      	bmi.n	1000b63e <__swsetup_r+0x32>
1000b62e:	2309      	movs	r3, #9
1000b630:	602b      	str	r3, [r5, #0]
1000b632:	f042 0340 	orr.w	r3, r2, #64	@ 0x40
1000b636:	81a3      	strh	r3, [r4, #12]
1000b638:	f04f 30ff 	mov.w	r0, #4294967295
1000b63c:	e034      	b.n	1000b6a8 <__swsetup_r+0x9c>
1000b63e:	0758      	lsls	r0, r3, #29
1000b640:	d512      	bpl.n	1000b668 <__swsetup_r+0x5c>
1000b642:	6b61      	ldr	r1, [r4, #52]	@ 0x34
1000b644:	b141      	cbz	r1, 1000b658 <__swsetup_r+0x4c>
1000b646:	f104 0344 	add.w	r3, r4, #68	@ 0x44
1000b64a:	4299      	cmp	r1, r3
1000b64c:	d002      	beq.n	1000b654 <__swsetup_r+0x48>
1000b64e:	4628      	mov	r0, r5
1000b650:	f7ff f9b0 	bl	1000a9b4 <_free_r>
1000b654:	2300      	movs	r3, #0
1000b656:	6363      	str	r3, [r4, #52]	@ 0x34
1000b658:	89a3      	ldrh	r3, [r4, #12]
1000b65a:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
1000b65e:	81a3      	strh	r3, [r4, #12]
1000b660:	2300      	movs	r3, #0
1000b662:	6063      	str	r3, [r4, #4]
1000b664:	6923      	ldr	r3, [r4, #16]
1000b666:	6023      	str	r3, [r4, #0]
1000b668:	89a3      	ldrh	r3, [r4, #12]
1000b66a:	f043 0308 	orr.w	r3, r3, #8
1000b66e:	81a3      	strh	r3, [r4, #12]
1000b670:	6923      	ldr	r3, [r4, #16]
1000b672:	b94b      	cbnz	r3, 1000b688 <__swsetup_r+0x7c>
1000b674:	89a3      	ldrh	r3, [r4, #12]
1000b676:	f403 7320 	and.w	r3, r3, #640	@ 0x280
1000b67a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
1000b67e:	d003      	beq.n	1000b688 <__swsetup_r+0x7c>
1000b680:	4621      	mov	r1, r4
1000b682:	4628      	mov	r0, r5
1000b684:	f000 f8a6 	bl	1000b7d4 <__smakebuf_r>
1000b688:	89a0      	ldrh	r0, [r4, #12]
1000b68a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1000b68e:	f010 0301 	ands.w	r3, r0, #1
1000b692:	d00a      	beq.n	1000b6aa <__swsetup_r+0x9e>
1000b694:	2300      	movs	r3, #0
1000b696:	60a3      	str	r3, [r4, #8]
1000b698:	6963      	ldr	r3, [r4, #20]
1000b69a:	425b      	negs	r3, r3
1000b69c:	61a3      	str	r3, [r4, #24]
1000b69e:	6923      	ldr	r3, [r4, #16]
1000b6a0:	b943      	cbnz	r3, 1000b6b4 <__swsetup_r+0xa8>
1000b6a2:	f010 0080 	ands.w	r0, r0, #128	@ 0x80
1000b6a6:	d1c4      	bne.n	1000b632 <__swsetup_r+0x26>
1000b6a8:	bd38      	pop	{r3, r4, r5, pc}
1000b6aa:	0781      	lsls	r1, r0, #30
1000b6ac:	bf58      	it	pl
1000b6ae:	6963      	ldrpl	r3, [r4, #20]
1000b6b0:	60a3      	str	r3, [r4, #8]
1000b6b2:	e7f4      	b.n	1000b69e <__swsetup_r+0x92>
1000b6b4:	2000      	movs	r0, #0
1000b6b6:	e7f7      	b.n	1000b6a8 <__swsetup_r+0x9c>
1000b6b8:	08002398 	.word	0x08002398

1000b6bc <__assert_func>:
1000b6bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000b6be:	4614      	mov	r4, r2
1000b6c0:	461a      	mov	r2, r3
1000b6c2:	4b09      	ldr	r3, [pc, #36]	@ (1000b6e8 <__assert_func+0x2c>)
1000b6c4:	681b      	ldr	r3, [r3, #0]
1000b6c6:	4605      	mov	r5, r0
1000b6c8:	68d8      	ldr	r0, [r3, #12]
1000b6ca:	b14c      	cbz	r4, 1000b6e0 <__assert_func+0x24>
1000b6cc:	4b07      	ldr	r3, [pc, #28]	@ (1000b6ec <__assert_func+0x30>)
1000b6ce:	9100      	str	r1, [sp, #0]
1000b6d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
1000b6d4:	4906      	ldr	r1, [pc, #24]	@ (1000b6f0 <__assert_func+0x34>)
1000b6d6:	462b      	mov	r3, r5
1000b6d8:	f000 f844 	bl	1000b764 <fiprintf>
1000b6dc:	f000 f8d8 	bl	1000b890 <abort>
1000b6e0:	4b04      	ldr	r3, [pc, #16]	@ (1000b6f4 <__assert_func+0x38>)
1000b6e2:	461c      	mov	r4, r3
1000b6e4:	e7f3      	b.n	1000b6ce <__assert_func+0x12>
1000b6e6:	bf00      	nop
1000b6e8:	08002398 	.word	0x08002398
1000b6ec:	10016f30 	.word	0x10016f30
1000b6f0:	10016f3d 	.word	0x10016f3d
1000b6f4:	10016f6b 	.word	0x10016f6b

1000b6f8 <_calloc_r>:
1000b6f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000b6fa:	fba1 2402 	umull	r2, r4, r1, r2
1000b6fe:	b94c      	cbnz	r4, 1000b714 <_calloc_r+0x1c>
1000b700:	4611      	mov	r1, r2
1000b702:	9201      	str	r2, [sp, #4]
1000b704:	f7fd fbe0 	bl	10008ec8 <_malloc_r>
1000b708:	9a01      	ldr	r2, [sp, #4]
1000b70a:	4605      	mov	r5, r0
1000b70c:	b930      	cbnz	r0, 1000b71c <_calloc_r+0x24>
1000b70e:	4628      	mov	r0, r5
1000b710:	b003      	add	sp, #12
1000b712:	bd30      	pop	{r4, r5, pc}
1000b714:	220c      	movs	r2, #12
1000b716:	6002      	str	r2, [r0, #0]
1000b718:	2500      	movs	r5, #0
1000b71a:	e7f8      	b.n	1000b70e <_calloc_r+0x16>
1000b71c:	4621      	mov	r1, r4
1000b71e:	f7fe f9ca 	bl	10009ab6 <memset>
1000b722:	e7f4      	b.n	1000b70e <_calloc_r+0x16>

1000b724 <__ascii_mbtowc>:
1000b724:	b082      	sub	sp, #8
1000b726:	b901      	cbnz	r1, 1000b72a <__ascii_mbtowc+0x6>
1000b728:	a901      	add	r1, sp, #4
1000b72a:	b142      	cbz	r2, 1000b73e <__ascii_mbtowc+0x1a>
1000b72c:	b14b      	cbz	r3, 1000b742 <__ascii_mbtowc+0x1e>
1000b72e:	7813      	ldrb	r3, [r2, #0]
1000b730:	600b      	str	r3, [r1, #0]
1000b732:	7812      	ldrb	r2, [r2, #0]
1000b734:	1e10      	subs	r0, r2, #0
1000b736:	bf18      	it	ne
1000b738:	2001      	movne	r0, #1
1000b73a:	b002      	add	sp, #8
1000b73c:	4770      	bx	lr
1000b73e:	4610      	mov	r0, r2
1000b740:	e7fb      	b.n	1000b73a <__ascii_mbtowc+0x16>
1000b742:	f06f 0001 	mvn.w	r0, #1
1000b746:	e7f8      	b.n	1000b73a <__ascii_mbtowc+0x16>

1000b748 <__ascii_wctomb>:
1000b748:	b149      	cbz	r1, 1000b75e <__ascii_wctomb+0x16>
1000b74a:	2aff      	cmp	r2, #255	@ 0xff
1000b74c:	bf85      	ittet	hi
1000b74e:	238a      	movhi	r3, #138	@ 0x8a
1000b750:	6003      	strhi	r3, [r0, #0]
1000b752:	700a      	strbls	r2, [r1, #0]
1000b754:	f04f 30ff 	movhi.w	r0, #4294967295
1000b758:	bf98      	it	ls
1000b75a:	2001      	movls	r0, #1
1000b75c:	4770      	bx	lr
1000b75e:	4608      	mov	r0, r1
1000b760:	4770      	bx	lr
	...

1000b764 <fiprintf>:
1000b764:	b40e      	push	{r1, r2, r3}
1000b766:	b503      	push	{r0, r1, lr}
1000b768:	4601      	mov	r1, r0
1000b76a:	ab03      	add	r3, sp, #12
1000b76c:	4805      	ldr	r0, [pc, #20]	@ (1000b784 <fiprintf+0x20>)
1000b76e:	f853 2b04 	ldr.w	r2, [r3], #4
1000b772:	6800      	ldr	r0, [r0, #0]
1000b774:	9301      	str	r3, [sp, #4]
1000b776:	f7ff fd0f 	bl	1000b198 <_vfiprintf_r>
1000b77a:	b002      	add	sp, #8
1000b77c:	f85d eb04 	ldr.w	lr, [sp], #4
1000b780:	b003      	add	sp, #12
1000b782:	4770      	bx	lr
1000b784:	08002398 	.word	0x08002398

1000b788 <__swhatbuf_r>:
1000b788:	b570      	push	{r4, r5, r6, lr}
1000b78a:	460c      	mov	r4, r1
1000b78c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1000b790:	2900      	cmp	r1, #0
1000b792:	b096      	sub	sp, #88	@ 0x58
1000b794:	4615      	mov	r5, r2
1000b796:	461e      	mov	r6, r3
1000b798:	da0d      	bge.n	1000b7b6 <__swhatbuf_r+0x2e>
1000b79a:	89a3      	ldrh	r3, [r4, #12]
1000b79c:	f013 0f80 	tst.w	r3, #128	@ 0x80
1000b7a0:	f04f 0100 	mov.w	r1, #0
1000b7a4:	bf0c      	ite	eq
1000b7a6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
1000b7aa:	2340      	movne	r3, #64	@ 0x40
1000b7ac:	2000      	movs	r0, #0
1000b7ae:	6031      	str	r1, [r6, #0]
1000b7b0:	602b      	str	r3, [r5, #0]
1000b7b2:	b016      	add	sp, #88	@ 0x58
1000b7b4:	bd70      	pop	{r4, r5, r6, pc}
1000b7b6:	466a      	mov	r2, sp
1000b7b8:	f000 f848 	bl	1000b84c <_fstat_r>
1000b7bc:	2800      	cmp	r0, #0
1000b7be:	dbec      	blt.n	1000b79a <__swhatbuf_r+0x12>
1000b7c0:	9901      	ldr	r1, [sp, #4]
1000b7c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
1000b7c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
1000b7ca:	4259      	negs	r1, r3
1000b7cc:	4159      	adcs	r1, r3
1000b7ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
1000b7d2:	e7eb      	b.n	1000b7ac <__swhatbuf_r+0x24>

1000b7d4 <__smakebuf_r>:
1000b7d4:	898b      	ldrh	r3, [r1, #12]
1000b7d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000b7d8:	079d      	lsls	r5, r3, #30
1000b7da:	4606      	mov	r6, r0
1000b7dc:	460c      	mov	r4, r1
1000b7de:	d507      	bpl.n	1000b7f0 <__smakebuf_r+0x1c>
1000b7e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
1000b7e4:	6023      	str	r3, [r4, #0]
1000b7e6:	6123      	str	r3, [r4, #16]
1000b7e8:	2301      	movs	r3, #1
1000b7ea:	6163      	str	r3, [r4, #20]
1000b7ec:	b002      	add	sp, #8
1000b7ee:	bd70      	pop	{r4, r5, r6, pc}
1000b7f0:	ab01      	add	r3, sp, #4
1000b7f2:	466a      	mov	r2, sp
1000b7f4:	f7ff ffc8 	bl	1000b788 <__swhatbuf_r>
1000b7f8:	9900      	ldr	r1, [sp, #0]
1000b7fa:	4605      	mov	r5, r0
1000b7fc:	4630      	mov	r0, r6
1000b7fe:	f7fd fb63 	bl	10008ec8 <_malloc_r>
1000b802:	b948      	cbnz	r0, 1000b818 <__smakebuf_r+0x44>
1000b804:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1000b808:	059a      	lsls	r2, r3, #22
1000b80a:	d4ef      	bmi.n	1000b7ec <__smakebuf_r+0x18>
1000b80c:	f023 0303 	bic.w	r3, r3, #3
1000b810:	f043 0302 	orr.w	r3, r3, #2
1000b814:	81a3      	strh	r3, [r4, #12]
1000b816:	e7e3      	b.n	1000b7e0 <__smakebuf_r+0xc>
1000b818:	89a3      	ldrh	r3, [r4, #12]
1000b81a:	6020      	str	r0, [r4, #0]
1000b81c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
1000b820:	81a3      	strh	r3, [r4, #12]
1000b822:	9b00      	ldr	r3, [sp, #0]
1000b824:	6163      	str	r3, [r4, #20]
1000b826:	9b01      	ldr	r3, [sp, #4]
1000b828:	6120      	str	r0, [r4, #16]
1000b82a:	b15b      	cbz	r3, 1000b844 <__smakebuf_r+0x70>
1000b82c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1000b830:	4630      	mov	r0, r6
1000b832:	f000 f81d 	bl	1000b870 <_isatty_r>
1000b836:	b128      	cbz	r0, 1000b844 <__smakebuf_r+0x70>
1000b838:	89a3      	ldrh	r3, [r4, #12]
1000b83a:	f023 0303 	bic.w	r3, r3, #3
1000b83e:	f043 0301 	orr.w	r3, r3, #1
1000b842:	81a3      	strh	r3, [r4, #12]
1000b844:	89a3      	ldrh	r3, [r4, #12]
1000b846:	431d      	orrs	r5, r3
1000b848:	81a5      	strh	r5, [r4, #12]
1000b84a:	e7cf      	b.n	1000b7ec <__smakebuf_r+0x18>

1000b84c <_fstat_r>:
1000b84c:	b538      	push	{r3, r4, r5, lr}
1000b84e:	4d07      	ldr	r5, [pc, #28]	@ (1000b86c <_fstat_r+0x20>)
1000b850:	2300      	movs	r3, #0
1000b852:	4604      	mov	r4, r0
1000b854:	4608      	mov	r0, r1
1000b856:	4611      	mov	r1, r2
1000b858:	602b      	str	r3, [r5, #0]
1000b85a:	f000 f86d 	bl	1000b938 <_fstat>
1000b85e:	1c43      	adds	r3, r0, #1
1000b860:	d102      	bne.n	1000b868 <_fstat_r+0x1c>
1000b862:	682b      	ldr	r3, [r5, #0]
1000b864:	b103      	cbz	r3, 1000b868 <_fstat_r+0x1c>
1000b866:	6023      	str	r3, [r4, #0]
1000b868:	bd38      	pop	{r3, r4, r5, pc}
1000b86a:	bf00      	nop
1000b86c:	08002f88 	.word	0x08002f88

1000b870 <_isatty_r>:
1000b870:	b538      	push	{r3, r4, r5, lr}
1000b872:	4d06      	ldr	r5, [pc, #24]	@ (1000b88c <_isatty_r+0x1c>)
1000b874:	2300      	movs	r3, #0
1000b876:	4604      	mov	r4, r0
1000b878:	4608      	mov	r0, r1
1000b87a:	602b      	str	r3, [r5, #0]
1000b87c:	f000 f86c 	bl	1000b958 <_isatty>
1000b880:	1c43      	adds	r3, r0, #1
1000b882:	d102      	bne.n	1000b88a <_isatty_r+0x1a>
1000b884:	682b      	ldr	r3, [r5, #0]
1000b886:	b103      	cbz	r3, 1000b88a <_isatty_r+0x1a>
1000b888:	6023      	str	r3, [r4, #0]
1000b88a:	bd38      	pop	{r3, r4, r5, pc}
1000b88c:	08002f88 	.word	0x08002f88

1000b890 <abort>:
1000b890:	b508      	push	{r3, lr}
1000b892:	2006      	movs	r0, #6
1000b894:	f000 f82c 	bl	1000b8f0 <raise>
1000b898:	2001      	movs	r0, #1
1000b89a:	f000 f883 	bl	1000b9a4 <_exit>

1000b89e <_raise_r>:
1000b89e:	291f      	cmp	r1, #31
1000b8a0:	b538      	push	{r3, r4, r5, lr}
1000b8a2:	4604      	mov	r4, r0
1000b8a4:	460d      	mov	r5, r1
1000b8a6:	d904      	bls.n	1000b8b2 <_raise_r+0x14>
1000b8a8:	2316      	movs	r3, #22
1000b8aa:	6003      	str	r3, [r0, #0]
1000b8ac:	f04f 30ff 	mov.w	r0, #4294967295
1000b8b0:	bd38      	pop	{r3, r4, r5, pc}
1000b8b2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
1000b8b4:	b112      	cbz	r2, 1000b8bc <_raise_r+0x1e>
1000b8b6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
1000b8ba:	b94b      	cbnz	r3, 1000b8d0 <_raise_r+0x32>
1000b8bc:	4620      	mov	r0, r4
1000b8be:	f000 f831 	bl	1000b924 <_getpid_r>
1000b8c2:	462a      	mov	r2, r5
1000b8c4:	4601      	mov	r1, r0
1000b8c6:	4620      	mov	r0, r4
1000b8c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1000b8cc:	f000 b818 	b.w	1000b900 <_kill_r>
1000b8d0:	2b01      	cmp	r3, #1
1000b8d2:	d00a      	beq.n	1000b8ea <_raise_r+0x4c>
1000b8d4:	1c59      	adds	r1, r3, #1
1000b8d6:	d103      	bne.n	1000b8e0 <_raise_r+0x42>
1000b8d8:	2316      	movs	r3, #22
1000b8da:	6003      	str	r3, [r0, #0]
1000b8dc:	2001      	movs	r0, #1
1000b8de:	e7e7      	b.n	1000b8b0 <_raise_r+0x12>
1000b8e0:	2400      	movs	r4, #0
1000b8e2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
1000b8e6:	4628      	mov	r0, r5
1000b8e8:	4798      	blx	r3
1000b8ea:	2000      	movs	r0, #0
1000b8ec:	e7e0      	b.n	1000b8b0 <_raise_r+0x12>
	...

1000b8f0 <raise>:
1000b8f0:	4b02      	ldr	r3, [pc, #8]	@ (1000b8fc <raise+0xc>)
1000b8f2:	4601      	mov	r1, r0
1000b8f4:	6818      	ldr	r0, [r3, #0]
1000b8f6:	f7ff bfd2 	b.w	1000b89e <_raise_r>
1000b8fa:	bf00      	nop
1000b8fc:	08002398 	.word	0x08002398

1000b900 <_kill_r>:
1000b900:	b538      	push	{r3, r4, r5, lr}
1000b902:	4d07      	ldr	r5, [pc, #28]	@ (1000b920 <_kill_r+0x20>)
1000b904:	2300      	movs	r3, #0
1000b906:	4604      	mov	r4, r0
1000b908:	4608      	mov	r0, r1
1000b90a:	4611      	mov	r1, r2
1000b90c:	602b      	str	r3, [r5, #0]
1000b90e:	f000 f82b 	bl	1000b968 <_kill>
1000b912:	1c43      	adds	r3, r0, #1
1000b914:	d102      	bne.n	1000b91c <_kill_r+0x1c>
1000b916:	682b      	ldr	r3, [r5, #0]
1000b918:	b103      	cbz	r3, 1000b91c <_kill_r+0x1c>
1000b91a:	6023      	str	r3, [r4, #0]
1000b91c:	bd38      	pop	{r3, r4, r5, pc}
1000b91e:	bf00      	nop
1000b920:	08002f88 	.word	0x08002f88

1000b924 <_getpid_r>:
1000b924:	f000 b810 	b.w	1000b948 <_getpid>

1000b928 <_close>:
1000b928:	4b02      	ldr	r3, [pc, #8]	@ (1000b934 <_close+0xc>)
1000b92a:	2258      	movs	r2, #88	@ 0x58
1000b92c:	601a      	str	r2, [r3, #0]
1000b92e:	f04f 30ff 	mov.w	r0, #4294967295
1000b932:	4770      	bx	lr
1000b934:	08002f88 	.word	0x08002f88

1000b938 <_fstat>:
1000b938:	4b02      	ldr	r3, [pc, #8]	@ (1000b944 <_fstat+0xc>)
1000b93a:	2258      	movs	r2, #88	@ 0x58
1000b93c:	601a      	str	r2, [r3, #0]
1000b93e:	f04f 30ff 	mov.w	r0, #4294967295
1000b942:	4770      	bx	lr
1000b944:	08002f88 	.word	0x08002f88

1000b948 <_getpid>:
1000b948:	4b02      	ldr	r3, [pc, #8]	@ (1000b954 <_getpid+0xc>)
1000b94a:	2258      	movs	r2, #88	@ 0x58
1000b94c:	601a      	str	r2, [r3, #0]
1000b94e:	f04f 30ff 	mov.w	r0, #4294967295
1000b952:	4770      	bx	lr
1000b954:	08002f88 	.word	0x08002f88

1000b958 <_isatty>:
1000b958:	4b02      	ldr	r3, [pc, #8]	@ (1000b964 <_isatty+0xc>)
1000b95a:	2258      	movs	r2, #88	@ 0x58
1000b95c:	601a      	str	r2, [r3, #0]
1000b95e:	2000      	movs	r0, #0
1000b960:	4770      	bx	lr
1000b962:	bf00      	nop
1000b964:	08002f88 	.word	0x08002f88

1000b968 <_kill>:
1000b968:	4b02      	ldr	r3, [pc, #8]	@ (1000b974 <_kill+0xc>)
1000b96a:	2258      	movs	r2, #88	@ 0x58
1000b96c:	601a      	str	r2, [r3, #0]
1000b96e:	f04f 30ff 	mov.w	r0, #4294967295
1000b972:	4770      	bx	lr
1000b974:	08002f88 	.word	0x08002f88

1000b978 <_lseek>:
1000b978:	4b02      	ldr	r3, [pc, #8]	@ (1000b984 <_lseek+0xc>)
1000b97a:	2258      	movs	r2, #88	@ 0x58
1000b97c:	601a      	str	r2, [r3, #0]
1000b97e:	f04f 30ff 	mov.w	r0, #4294967295
1000b982:	4770      	bx	lr
1000b984:	08002f88 	.word	0x08002f88

1000b988 <_sbrk>:
1000b988:	4a04      	ldr	r2, [pc, #16]	@ (1000b99c <_sbrk+0x14>)
1000b98a:	4905      	ldr	r1, [pc, #20]	@ (1000b9a0 <_sbrk+0x18>)
1000b98c:	6813      	ldr	r3, [r2, #0]
1000b98e:	2b00      	cmp	r3, #0
1000b990:	bf08      	it	eq
1000b992:	460b      	moveq	r3, r1
1000b994:	4418      	add	r0, r3
1000b996:	6010      	str	r0, [r2, #0]
1000b998:	4618      	mov	r0, r3
1000b99a:	4770      	bx	lr
1000b99c:	08002f90 	.word	0x08002f90
1000b9a0:	08002f98 	.word	0x08002f98

1000b9a4 <_exit>:
1000b9a4:	e7fe      	b.n	1000b9a4 <_exit>
1000b9a6:	bf00      	nop

1000b9a8 <_init>:
1000b9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000b9aa:	bf00      	nop
1000b9ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
1000b9ae:	bc08      	pop	{r3}
1000b9b0:	469e      	mov	lr, r3
1000b9b2:	4770      	bx	lr

1000b9b4 <_fini>:
1000b9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000b9b6:	bf00      	nop
1000b9b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
1000b9ba:	bc08      	pop	{r3}
1000b9bc:	469e      	mov	lr, r3
1000b9be:	4770      	bx	lr

1000b9c0 <systemIpcPipeConfigCm4.1>:
1000b9c0:	0003 0000 0001 0000 0001 0000 0000 0000     ................
1000b9d0:	0305 0060 0004 0000 0001 0000 0000 0000     ..`.............
1000b9e0:	0001 0000 0406 0060 0008 0000 2a88 0800     ......`......*..
1000b9f0:	23ad 1000                                   .#..

1000b9f4 <CYBSP_CSD_CLK_DIV_obj>:
1000b9f4:	0005                                         ...

1000b9f7 <CYBSP_TRACE_CLK_DIV_obj>:
1000b9f7:	0005                                         ...

1000b9fa <peri_0_div_16_15_obj>:
1000b9fa:	0105                                         ...

1000b9fd <CYBSP_CINA_obj>:
1000b9fd:	070b                                         ...

1000ba00 <CYBSP_CINB_obj>:
1000ba00:	070b                                         ...

1000ba03 <CYBSP_CMOD_obj>:
1000ba03:	070b                                         ...

1000ba06 <CYBSP_CSD_BTN0_obj>:
1000ba06:	080b                                         ...

1000ba09 <CYBSP_CSD_BTN1_obj>:
1000ba09:	080b                                         ...

1000ba0c <CYBSP_CSD_SLD0_obj>:
1000ba0c:	080b                                         ...

1000ba0f <CYBSP_CSD_SLD1_obj>:
1000ba0f:	080b                                         ...

1000ba12 <CYBSP_CSD_SLD2_obj>:
1000ba12:	080b                                         ...

1000ba15 <CYBSP_CSD_SLD3_obj>:
1000ba15:	080b                                         ...

1000ba18 <CYBSP_CSD_SLD4_obj>:
1000ba18:	080b                                         ...

1000ba1b <CYBSP_CSD_TX_obj>:
1000ba1b:	010b 0000                                    .....

1000ba20 <CYBSP_SWDCK_config>:
1000ba20:	0001 0000 000b 0000 001d 0000 0000 0000     ................
	...
1000ba3c:	0001 0000 0000 0000 0000 0000 0000 0000     ................
	...

1000ba54 <CYBSP_SWDCK_obj>:
1000ba54:	060b 0007                                   ....

1000ba58 <CYBSP_SWDIO_config>:
1000ba58:	0001 0000 000a 0000 001d 0000 0000 0000     ................
	...
1000ba74:	0001 0000 0000 0000 0000 0000 0000 0000     ................
	...

1000ba8c <CYBSP_SWDIO_obj>:
1000ba8c:	060b 0006                                   ....

1000ba90 <CYBSP_SWO_config>:
1000ba90:	0001 0000 0006 0000 001d 0000 0000 0000     ................
	...
1000baac:	0001 0000 0000 0000 0000 0000 0000 0000     ................
	...

1000bac4 <CYBSP_SWO_obj>:
1000bac4:	060b                                         ...

1000bac7 <CYBSP_WCO_IN_obj>:
1000bac7:	000b                                         ...

1000baca <CYBSP_WCO_OUT_obj>:
1000baca:	000b 0001 0000                              ......

1000bad0 <srss_0_clock_0_fll_0_fllConfig>:
1000bad0:	01f4 0000 0014 0104 000a 0509 0008 0003     ................
1000bae0:	0163 0000                                   c...

1000bae4 <srss_0_clock_0_pathmux_0_obj>:
1000bae4:	0004                                         ...

1000bae7 <srss_0_clock_0_pathmux_1_obj>:
1000bae7:	0104                                         ...

1000baea <srss_0_clock_0_pathmux_2_obj>:
1000baea:	0204                                         ...

1000baed <srss_0_clock_0_pathmux_3_obj>:
1000baed:	0304                                         ...

1000baf0 <srss_0_clock_0_pathmux_4_obj>:
1000baf0:	0404                                         ...

1000baf3 <srss_0_clock_0_pll_0_pllConfig>:
1000baf3:	011e 0005 2a00 2a2a 2a2a 2a2a 2a2a 2a2a     .....***********
1000bb03:	2a2a 2a2a 2a2a 202a 0d0a 5300 6174 7472     ******* ...Start
1000bb13:	6e69 2067 4646 2054 7453 6361 206b 7355     ing FFT Stack Us
1000bb23:	6761 2065 6542 636e 6d68 7261 206b 7250     age Benchmark Pr
1000bb33:	676f 6172 206d 5128 3531 0a29 000d 654d     ogram (Q15)...Me
1000bb43:	6f6d 7972 6120 6c6c 636f 7461 6f69 206e     mory allocation 
1000bb53:	6166 6c69 6465 6620 726f 4620 5446 7320     failed for FFT s
1000bb63:	7a69 2065 204e 203d 6425 0d0a 4600 5446     ize N = %d...FFT
1000bb73:	6920 696e 6974 6c61 7a69 7461 6f69 206e      initialization 
1000bb83:	6166 6c69 6465 6620 726f 4e20 3d20 2520     failed for N = %
1000bb93:	0a64 000d 4646 2054 6953 657a 203a 6425     d...FFT Size: %d
1000bba3:	0d0a 2000 5320 6174 6b63 5520 6573 3a64     ...  Stack Used:
1000bbb3:	2520 756c 6220 7479 7365 0d0a 2000 4320      %lu bytes...  C
1000bbc3:	6379 656c 4320 756f 746e 203a 6c25 0a75     ycle Count: %lu.
1000bbd3:	000d 0000                                    .....

1000bbd8 <FFT_SIZES>:
1000bbd8:	0020 0000 0040 0000 0080 0000 0100 0000      ...@...........
1000bbe8:	0200 0000 0400 0000                         ........

1000bbf0 <cyhal_pin_map_scb_uart_cts>:
1000bbf0:	0000 1205 0007 120b 0001 1213 0002 121b     ................
1000bc00:	0005 122b 0003 1233 0006 1237 0004 123b     ..+...3...7...;.
1000bc10:	0004 1243 0002 124b 0001 1253 0005 125b     ..C...K...S...[.
1000bc20:	0006 1263 0006 126b                         ..c...k.

1000bc28 <cyhal_pin_map_scb_uart_rts>:
1000bc28:	0000 1204 0007 120a 0001 1212 0002 121a     ................
1000bc38:	0005 122a 0003 1232 0006 1236 0004 123a     ..*...2...6...:.
1000bc48:	0004 1242 0002 124a 0001 1252 0005 125a     ..B...J...R...Z.
1000bc58:	0006 1262 0006 126a                         ..b...j.

1000bc60 <cyhal_pin_map_scb_uart_rx>:
1000bc60:	0000 1202 0007 1208 0001 1210 0002 1218     ................
1000bc70:	0007 1220 0005 1228 0003 1230 0006 1234     .. ...(...0...4.
1000bc80:	0004 1238 0004 1240 0002 1248 0001 1250     ..8...@...H...P.
1000bc90:	0005 1258 0006 1260 0006 1268               ..X...`...h.

1000bc9c <cyhal_pin_map_scb_uart_tx>:
1000bc9c:	0000 1203 0007 1209 0001 1211 0002 1219     ................
1000bcac:	0007 1221 0005 1229 0003 1231 0006 1235     ..!...)...1...5.
1000bcbc:	0004 1239 0004 1241 0002 1249 0001 1251     ..9...A...I...Q.
1000bccc:	0005 1259 0006 1261 0006 1269               ..Y...a...i.

1000bcd8 <cyhal_dest_to_mux>:
1000bcd8:	0505 0000 0000 0000 0000 0000 0000 0000     ................
1000bce8:	0000 0101 0101 0101 0101 0101 0101 0101     ................
1000bcf8:	0101 0806 0408 0204 0202 0202 0202 0202     ................
1000bd08:	0202 0202 0302 0303 0303 0303 0303 0303     ................
1000bd18:	0303 0a03 0a0a 0a0a 0a0a 0b0a 0b0b 0b0b     ................
1000bd28:	0b0b 0b0b 0b0b 0b0b 0b0b 0c0b 0d0c 0d0d     ................
1000bd38:	0d0d 0d0d 0d0d 0d0d 0d0d 0d0d 0e0d 0e0e     ................
1000bd48:	0e0e 0e0e 0a0e 0a0a 0a0a 0a0a 0b0a 0b0b     ................
1000bd58:	0b0b 0b0b 0b0b 0b0b 0b0b 0b0b 0c0b 0d0c     ................
1000bd68:	0d0d 0d0d 0d0d 0d0d 0d0d 0d0d 0d0d 0e0d     ................
1000bd78:	0e0e 0e0e 0e0e 0a0e 0a0a 0a0a 0a0a 0b0a     ................
1000bd88:	0b0b 0b0b 0b0b 0b0b 0b0b 0b0b 0b0b 0c0b     ................
1000bd98:	0c0c 0c0c 0c0c 0d0c 0e0d 0e0e 0e0e 0e0e     ................
1000bda8:	0a0e 0a0a 0a0a 0a0a 0b0a 0b0b 0b0b 0b0b     ................
1000bdb8:	0b0b 0b0b 0b0b 0b0b 0c0b 0c0c 0c0c 0c0c     ................
1000bdc8:	0d0c 0e0d 0e0e 0e0e 0e0e 0a0e 0a0a 0a0a     ................
1000bdd8:	0a0a 0b0a 0b0b 0b0b 0b0b 0b0b 0b0b 0b0b     ................
1000bde8:	0b0b 0c0b 0c0c 0c0c 0c0c 0d0c 0e0d 0e0e     ................
1000bdf8:	0e0e 0e0e 0a0e 0a0a 0a0a 0a0a 0b0a 0b0b     ................
1000be08:	0b0b 0b0b 0b0b 0b0b 0b0b 0b0b 0c0b 0c0c     ................
1000be18:	0c0c 0c0c 0d0c 0e0d 0e0e 0e0e 0e0e 0a0e     ................
1000be28:	0a0a 0a0a 0a0a 0b0a 0b0b 0b0b 0b0b 0b0b     ................
1000be38:	0b0b 0b0b 0b0b 0c0b 0c0c 0c0c 0c0c 0d0c     ................
1000be48:	0e0d 0e0e 0e0e 0e0e 0a0e 0a0a 0a0a 0a0a     ................
1000be58:	0b0a 0b0b 0b0b 0b0b 0b0b 0b0b 0b0b 0b0b     ................
1000be68:	0c0b 0c0c 0c0c 0c0c 0d0c 0e0d 0e0e 0e0e     ................
1000be78:	0e0e 0a0e 0a0a 0a0a 0a0a 0b0a 0b0b 0b0b     ................
1000be88:	0b0b 0b0b 0b0b 0b0b 0b0b 0c0b 0c0c 0c0c     ................
1000be98:	0c0c 0d0c 0e0d 0e0e 0e0e 0e0e 0a0e 0a0a     ................
1000bea8:	0a0a 0a0a 070a 0907 0909 0909 0909 0009     ................

1000beb8 <cyhal_mux0_sources>:
1000beb8:	0000 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
1000bec8:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d7     ................
1000bed8:	00d8 00d9 00da 00db 00dc 00dd 00de 00df     ................
1000bee8:	00e0 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
1000bef8:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f7     ................
1000bf08:	00f8 00f9 00fa 00fd 00fe 00ff 0100 0101     ................
1000bf18:	0102 0103 0104                              ......

1000bf1e <cyhal_mux10_sources>:
1000bf1e:	0000 0006 0007 0008 0009 000a 000b 000c     ................
1000bf2e:	000d 000e 000f 0010 0011 0012 0013 0014     ................
1000bf3e:	0015 0016 0017 0018 0019 001a 001b 001c     ................
1000bf4e:	001d 001e 001f 0020 0021 0022 0023 0024     ...... .!.".#.$.
1000bf5e:	0025                                        %.

1000bf60 <cyhal_mux11_sources>:
1000bf60:	0000 0089 008a 008b 008c 008d 008e 008f     ................
1000bf70:	0090 0069 006a 006b 006c 006d 006e 006f     ..i.j.k.l.m.n.o.
1000bf80:	0070 00a9 00aa 00ab 00ac 00ad 00ae 00af     p...............
1000bf90:	00b0 0091 0092 0093 0094 0095 0096 0097     ................
1000bfa0:	0098 0099 009a 009b 009c 009d 009e 009f     ................
1000bfb0:	00a0 00a1 00a2 00a3 00a4 00a5 00a6 00a7     ................
1000bfc0:	00a8 0071 0072 0073 0074 0075 0076 0077     ..q.r.s.t.u.v.w.
1000bfd0:	0078 0079 007a 007b 007c 007d 007e 007f     x.y.z.{.|.}.~...
1000bfe0:	0080 0081 0082 0083 0084 0085 0086 0087     ................
1000bff0:	0088 00b1 00b2 00b3 00b4 00b5 00b6 00b7     ................
1000c000:	00b8 00b9 00ba 00bb 00bc 00bd 00be 00bf     ................
1000c010:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
1000c020:	00c8                                        ..

1000c022 <cyhal_mux12_sources>:
1000c022:	0000 0030 0031 0032 0033 0034 0035 0036     ..0.1.2.3.4.5.6.
1000c032:	0037 0038 0039 003a 003b 003c 003d 003e     7.8.9.:.;.<.=.>.
1000c042:	003f 0040 0041 0042 0043 0044 0045 0046     ?.@.A.B.C.D.E.F.
1000c052:	0047 0048 0049 004a 004b                    G.H.I.J.K.

1000c05c <cyhal_mux13_sources>:
1000c05c:	0000 005e 0055 005f 0056 0060 0057 0061     ..^.U._.V.`.W.a.
1000c06c:	0058 0062 0059 0063 005a 0064 005b 0065     X.b.Y.c.Z.d.[.e.
1000c07c:	005c 0066 005d 0003 0002 0001 0068 0067     \.f.].......h.g.
1000c08c:	011f 0120 0121 0122 0123 0124 0125 0126     .. .!.".#.$.%.&.
1000c09c:	0029 0028                                   ).(.

1000c0a0 <cyhal_mux14_sources>:
1000c0a0:	0000 010f 0110 0111 0112 0113 0114 0115     ................
1000c0b0:	0116 0117 0118 0119 011a 011b 011c 011d     ................
1000c0c0:	011e 010d 010e 0004 0005 002f 002e 002c     ........../...,.
1000c0d0:	002d 002a 002b 004c 004d 004e 004f 0050     -.*.+.L.M.N.O.P.
1000c0e0:	0051 0052 0053 0054 0026 0027               Q.R.S.T.&.'.

1000c0ec <cyhal_mux1_sources>:
1000c0ec:	0000 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
1000c0fc:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d7     ................
1000c10c:	00d8 00d9 00da 00db 00dc 00dd 00de 00df     ................
1000c11c:	00e0 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
1000c12c:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f7     ................
1000c13c:	00f8 00f9 00fa 00fd 00fe 00ff 0100 0101     ................
1000c14c:	0102 0103 0104                              ......

1000c152 <cyhal_mux2_sources>:
1000c152:	0000 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
1000c162:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d7     ................
1000c172:	00d8 00d9 00da 00db 00dc 00dd 00de 00df     ................
1000c182:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
1000c192:	00e8 00fb 00fc 0105 0106 0107 0108 0109     ................
1000c1a2:	010a 010b 010c                              ......

1000c1a8 <cyhal_mux3_sources>:
1000c1a8:	0000 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
1000c1b8:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d7     ................
1000c1c8:	00d8 00d9 00da 00db 00dc 00dd 00de 00df     ................
1000c1d8:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
1000c1e8:	00e8 00fb 00fc 0105 0106 0107 0108 0109     ................
1000c1f8:	010a 010b 010c                              ......

1000c1fe <cyhal_mux4_sources>:
1000c1fe:	0000 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
1000c20e:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d7     ................
1000c21e:	00d8 00d9 00da 00db 00dc 00dd 00de 00df     ................
1000c22e:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
1000c23e:	00e8 00fb 00fc 0105 0106 0107 0108 0109     ................
1000c24e:	010a 010b 010c                              ......

1000c254 <cyhal_mux5_sources>:
1000c254:	0000 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
1000c264:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d7     ................
1000c274:	00d8 00d9 00da 00db 00dc 00dd 00de 00df     ................
1000c284:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
1000c294:	00e8 00fb 00fc 0105 0106 0107 0108 0109     ................
1000c2a4:	010a 010b 010c                              ......

1000c2aa <cyhal_mux6_sources>:
1000c2aa:	0000 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
1000c2ba:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d7     ................
1000c2ca:	00d8 00d9 00da 00db 00dc 00dd 00de 00df     ................
1000c2da:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
1000c2ea:	00e8 00fb 00fc 0105 0106 0107 0108 0109     ................
1000c2fa:	010a 010b 010c                              ......

1000c300 <cyhal_mux7_sources>:
1000c300:	0000 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
1000c310:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d7     ................
1000c320:	00d8 00d9 00da 00db 00dc 00dd 00de 00df     ................
1000c330:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
1000c340:	00e8 00fb 00fc 0105 0106 0107 0108 0109     ................
1000c350:	010a 010b 010c                              ......

1000c356 <cyhal_mux8_sources>:
1000c356:	0000 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
1000c366:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d7     ................
1000c376:	00d8 00d9 00da 00db 00dc 00dd 00de 00df     ................
1000c386:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
1000c396:	00e8 00fb 00fc 0105 0106 0107 0108 0109     ................
1000c3a6:	010a 010b 010c                              ......

1000c3ac <cyhal_mux9_sources>:
1000c3ac:	0000 0006 0007 0008 0009 000a 000b 000c     ................
1000c3bc:	000d 000e 000f 0010 0011 0012 0013 0014     ................
1000c3cc:	0015 0016 0017 0018 0019 001a 001b 001c     ................
1000c3dc:	001d 001e 001f 0020 0021 0022 0023 0024     ...... .!.".#.$.
1000c3ec:	0025                                        %.

1000c3ee <cyhal_mux_dest_index>:
1000c3ee:	0100 0100 0302 0504 0706 0908 0b0a 0d0c     ................
1000c3fe:	0f0e 0100 0302 0504 0706 0908 0b0a 0d0c     ................
1000c40e:	0f0e 0000 0001 0001 0201 0403 0605 0807     ................
1000c41e:	0a09 0c0b 000d 0201 0403 0605 0807 0a09     ................
1000c42e:	0c0b 000d 0201 0403 0605 0007 0201 0403     ................
1000c43e:	0605 0807 0a09 0c0b 0e0d 080f 0009 0201     ................
1000c44e:	0403 0605 0807 0a09 0c0b 0e0d 000f 0201     ................
1000c45e:	0403 0605 0007 0201 0403 0605 0007 0201     ................
1000c46e:	0403 0605 0807 0a09 0c0b 0e0d 080f 0009     ................
1000c47e:	0201 0403 0605 0807 0a09 0c0b 0e0d 000f     ................
1000c48e:	0201 0403 0605 0007 0201 0403 0605 0007     ................
1000c49e:	0201 0403 0605 0807 0a09 0c0b 0e0d 000f     ................
1000c4ae:	0201 0403 0605 1007 0811 0a09 0c0b 0e0d     ................
1000c4be:	000f 0201 0403 0605 0007 0201 0403 0605     ................
1000c4ce:	0807 0a09 0c0b 0e0d 000f 0201 0403 0605     ................
1000c4de:	1007 0811 0a09 0c0b 0e0d 000f 0201 0403     ................
1000c4ee:	0605 0007 0201 0403 0605 0807 0a09 0c0b     ................
1000c4fe:	0e0d 000f 0201 0403 0605 1007 0811 0a09     ................
1000c50e:	0c0b 0e0d 000f 0201 0403 0605 0007 0201     ................
1000c51e:	0403 0605 0807 0a09 0c0b 0e0d 000f 0201     ................
1000c52e:	0403 0605 1007 0811 0a09 0c0b 0e0d 000f     ................
1000c53e:	0201 0403 0605 0007 0201 0403 0605 0807     ................
1000c54e:	0a09 0c0b 0e0d 000f 0201 0403 0605 1007     ................
1000c55e:	0811 0a09 0c0b 0e0d 000f 0201 0403 0605     ................
1000c56e:	0007 0201 0403 0605 0807 0a09 0c0b 0e0d     ................
1000c57e:	000f 0201 0403 0605 1007 0811 0a09 0c0b     ................
1000c58e:	0e0d 000f 0201 0403 0605 0007 0201 0403     ................
1000c59e:	0605 0807 0a09 0c0b 0e0d 000f 0201 0403     ................
1000c5ae:	0605 1007 0811 0a09 0c0b 0e0d 000f 0201     ................
1000c5be:	0403 0605 0007 0001 0201 0403 0605 0007     ................

1000c5ce <cyhal_sources_per_mux>:
1000c5ce:	0033 0033 002b 002b 002b 002b 002b 002b     3.3.+.+.+.+.+.+.
1000c5de:	002b 0021 0021 0061 001d 0022 0026          +.!.!.a...".&.

1000c5ec <CYHAL_CLOCK_HF>:
1000c5ec:	0012 0000 c64c 1000 0112 0000 c64c 1000     ....L.......L...
1000c5fc:	0212 0000 c64c 1000 0312 0000 c64c 1000     ....L.......L...
1000c60c:	0412 0000 c64c 1000                         ....L...

1000c614 <CYHAL_CLOCK_RSC_FLL>:
1000c614:	0e05                                         ...

1000c617 <CYHAL_CLOCK_RSC_PATHMUX>:
1000c617:	0d05 0500 010d 0d05 0502 030d 0d05           ...............

1000c626 <CYHAL_CLOCK_RSC_PLL>:
1000c626:	0f05 0000 0000                              ......

1000c62c <FUNCS_EMPTY>:
	...

1000c64c <FUNCS_HF>:
1000c64c:	2c21 1000 2c47 1000 2ae9 1000 2ad1 1000     !,..G,...*...*..
1000c65c:	2ba9 1000 2ad9 1000 2b35 1000 0015 0000     .+...*..5+......

1000c66c <CSWTCH.19>:
1000c66c:	c6ea 1000 0000 0000 c6ec 1000 0000 0000     ................
1000c67c:	0000 0000 c720 1000 c722 1000 0000 0000     .... ...".......
1000c68c:	c726 1000 0000 0000 0000 0000 0000 0000     &...............
	...
1000c6a4:	c746 1000 0000 0000 c748 1000 0000 0000     F.......H.......
	...
1000c6c8:	c74a 1000 c74e 1000                         J...N...

1000c6d0 <CSWTCH.21>:
1000c6d0:	0001 001a 0100 0002 0010 0000 0000 0001     ................
1000c6e0:	0001 0000 0000 0200 0001                    ..........

1000c6ea <cyhal_block_offsets_can>:
	...

1000c6ec <cyhal_block_offsets_clock>:
1000c6ec:	0000 0008 0018 001c 001d 001e 001f 0020     .............. .
1000c6fc:	0021 0022 0023 0024 0025 0026 002b 002c     !.".#.$.%.&.+.,.
1000c70c:	002d 002e 002f 0034 0035 0036 0037 0038     -.../.4.5.6.7.8.
1000c71c:	0039 003a                                   9.:.

1000c720 <cyhal_block_offsets_dma>:
	...

1000c722 <cyhal_block_offsets_dw>:
1000c722:	0000 0010                                   ....

1000c726 <cyhal_block_offsets_gpio>:
1000c726:	0000 0008 0010 0018 0020 0028 0030 0038     ........ .(.0.8.
1000c736:	0040 0048 0050 0058 0060 0068 0070 0078     @.H.P.X.`.h.p.x.

1000c746 <cyhal_block_offsets_lpcomp>:
	...

1000c748 <cyhal_block_offsets_opamp>:
	...

1000c74a <cyhal_block_offsets_tcpwm>:
1000c74a:	0000 0008                                   ....

1000c74e <cyhal_block_offsets_tdm>:
	...

1000c750 <cyhal_resource_offsets>:
1000c750:	0000 0001 0001 0001 0001 0001 003c 003d     ............<.=.
1000c760:	003e 003e 005e 005e 00d6 00d7 00d7 00d7     >.>.^.^.........
1000c770:	00d8 00d8 00da 00dc 00de 00df 00e0 00e1     ................
1000c780:	00ea 00ea 00ea 010a 010a 010b               ............

1000c78c <CSWTCH.31>:
1000c78c:	d1c9 ebe1 00fd                              ......

1000c792 <CSWTCH.32>:
1000c792:	00d0 00e0 00ea 00fc 010c                    ..........

1000c79c <CSWTCH.34>:
1000c79c:	ff08 ffff ffff ffff ffff ffff ffff ffff     ................
1000c7ac:	ffff ffff ffff 00ff 0201 0403 0605 0007     ................

1000c7bc <_CYHAL_SCB_AVAILABLE_BLOCKS_MASK>:
1000c7bc:	01ff 0000                                   ....

1000c7c0 <_CYHAL_SCB_BASE_ADDRESSES>:
1000c7c0:	0000 4061 0000 4062 0000 4063 0000 4064     ..a@..b@..c@..d@
1000c7d0:	0000 4065 0000 4066 0000 4067 0000 4068     ..e@..f@..g@..h@
1000c7e0:	0000 4069                                   ..i@

1000c7e4 <_CYHAL_SCB_BASE_ADDRESS_INDEX>:
1000c7e4:	0100 0302 0504 0706 0008                    ..........

1000c7ee <_CYHAL_SCB_IRQ_N>:
1000c7ee:	0029 002a 002b 002c 002d 002e 002f 0030     ).*.+.,.-.../.0.
1000c7fe:	0012                                        ..

1000c800 <_cyhal_syspm_cb_default>:
	...
1000c80c:	2ba0 0800 0000 0000 0000 0000 000a 0000     .+..............

1000c81c <_cyhal_uart_default_config>:
1000c81c:	0000 0000 000c 0000 0008 0000 0200 0000     ................
	...
1000c840:	0014 0000 0000 0000 000b 0000 0000 0000     ................
1000c850:	0000 0000 003f 0000 0000 0000               ....?.......

1000c85c <CSWTCH.20>:
1000c85c:	0102 0104 0101                               .......

1000c863 <CSWTCH.26>:
1000c863:	1008 0104 0101 0101 0101 0101 0501 0101     ................
1000c873:	0101                                         ...

1000c876 <PERI_DIVIDERS.0>:
1000c876:	0100 0302 0000                              ......

1000c87c <cy_deviceIpBlockCfgPSoC6_01>:
1000c87c:	0000 4021 0000 4025 0000 4001 0000 4034     ..!@..%@...@..4@
1000c88c:	0000 4024 0000 4031 0000 4032 0000 411f     ..$@..1@..2@...A
1000c89c:	0000 4023 0000 4011 0000 411d 1010 1010     ..#@...@...A....
1000c8ac:	1010 1010 1010 1010 1010 8010 0019 0055     ..............U.
1000c8bc:	00f0 0105 0105 043b 1c10 0101 c00f 0000     ......;.........
1000c8cc:	0400 0000 0101 0101 1d01 573a 9678 0000     ..........:Wx...
1000c8dc:	0000 0800 0020 1210 0008 0000 1f00 0000     .... ...........
1000c8ec:	1000 0f00 2000 0200 063f 0e08 0800 0900     ..... ..?.......
1000c8fc:	0a00 0b00 2824 302c 0034 0000 0010 0000     ....$(,04.......
1000c90c:	0090 0000 0088 0000 0008 0000 0080 0000     ................
1000c91c:	f004 0000 f000 0000 0240 0000 0520 00a0     ........@... ...
1000c92c:	01d0 0100 0180 01a0 0140 0190 01b0 0020     ........@..... .
1000c93c:	0010 0000 0008 0000 0001 0000 0000 0000     ................
	...

1000c954 <armBitRevIndexTable_fixed_1024>:
1000c954:	0008 1000 0010 0800 0018 1800 0020 0400     ............ ...
1000c964:	0028 1400 0030 0c00 0038 1c00 0040 0200     (...0...8...@...
1000c974:	0048 1200 0050 0a00 0058 1a00 0060 0600     H...P...X...`...
1000c984:	0068 1600 0070 0e00 0078 1e00 0080 0100     h...p...x.......
1000c994:	0088 1100 0090 0900 0098 1900 00a0 0500     ................
1000c9a4:	00a8 1500 00b0 0d00 00b8 1d00 00c0 0300     ................
1000c9b4:	00c8 1300 00d0 0b00 00d8 1b00 00e0 0700     ................
1000c9c4:	00e8 1700 00f0 0f00 00f8 1f00 0108 1080     ................
1000c9d4:	0110 0880 0118 1880 0120 0480 0128 1480     ........ ...(...
1000c9e4:	0130 0c80 0138 1c80 0140 0280 0148 1280     0...8...@...H...
1000c9f4:	0150 0a80 0158 1a80 0160 0680 0168 1680     P...X...`...h...
1000ca04:	0170 0e80 0178 1e80 0188 1180 0190 0980     p...x...........
1000ca14:	0198 1980 01a0 0580 01a8 1580 01b0 0d80     ................
1000ca24:	01b8 1d80 01c0 0380 01c8 1380 01d0 0b80     ................
1000ca34:	01d8 1b80 01e0 0780 01e8 1780 01f0 0f80     ................
1000ca44:	01f8 1f80 0208 1040 0210 0840 0218 1840     ......@...@...@.
1000ca54:	0220 0440 0228 1440 0230 0c40 0238 1c40      .@.(.@.0.@.8.@.
1000ca64:	0248 1240 0250 0a40 0258 1a40 0260 0640     H.@.P.@.X.@.`.@.
1000ca74:	0268 1640 0270 0e40 0278 1e40 0288 1140     h.@.p.@.x.@...@.
1000ca84:	0290 0940 0298 1940 02a0 0540 02a8 1540     ..@...@...@...@.
1000ca94:	02b0 0d40 02b8 1d40 02c0 0340 02c8 1340     ..@...@...@...@.
1000caa4:	02d0 0b40 02d8 1b40 02e0 0740 02e8 1740     ..@...@...@...@.
1000cab4:	02f0 0f40 02f8 1f40 0308 10c0 0310 08c0     ..@...@.........
1000cac4:	0318 18c0 0320 04c0 0328 14c0 0330 0cc0     .... ...(...0...
1000cad4:	0338 1cc0 0348 12c0 0350 0ac0 0358 1ac0     8...H...P...X...
1000cae4:	0360 06c0 0368 16c0 0370 0ec0 0378 1ec0     `...h...p...x...
1000caf4:	0388 11c0 0390 09c0 0398 19c0 03a0 05c0     ................
1000cb04:	03a8 15c0 03b0 0dc0 03b8 1dc0 03c8 13c0     ................
1000cb14:	03d0 0bc0 03d8 1bc0 03e0 07c0 03e8 17c0     ................
1000cb24:	03f0 0fc0 03f8 1fc0 0408 1020 0410 0820     .......... ... .
1000cb34:	0418 1820 0428 1420 0430 0c20 0438 1c20     .. .(. .0. .8. .
1000cb44:	0448 1220 0450 0a20 0458 1a20 0460 0620     H. .P. .X. .`. .
1000cb54:	0468 1620 0470 0e20 0478 1e20 0488 1120     h. .p. .x. ... .
1000cb64:	0490 0920 0498 1920 04a0 0520 04a8 1520     .. ... ... ... .
1000cb74:	04b0 0d20 04b8 1d20 04c8 1320 04d0 0b20     .. ... ... ... .
1000cb84:	04d8 1b20 04e0 0720 04e8 1720 04f0 0f20     .. ... ... ... .
1000cb94:	04f8 1f20 0508 10a0 0510 08a0 0518 18a0     .. .............
1000cba4:	0528 14a0 0530 0ca0 0538 1ca0 0548 12a0     (...0...8...H...
1000cbb4:	0550 0aa0 0558 1aa0 0560 06a0 0568 16a0     P...X...`...h...
1000cbc4:	0570 0ea0 0578 1ea0 0588 11a0 0590 09a0     p...x...........
1000cbd4:	0598 19a0 05a8 15a0 05b0 0da0 05b8 1da0     ................
1000cbe4:	05c8 13a0 05d0 0ba0 05d8 1ba0 05e0 07a0     ................
1000cbf4:	05e8 17a0 05f0 0fa0 05f8 1fa0 0608 1060     ..............`.
1000cc04:	0610 0860 0618 1860 0628 1460 0630 0c60     ..`...`.(.`.0.`.
1000cc14:	0638 1c60 0648 1260 0650 0a60 0658 1a60     8.`.H.`.P.`.X.`.
1000cc24:	0668 1660 0670 0e60 0678 1e60 0688 1160     h.`.p.`.x.`...`.
1000cc34:	0690 0960 0698 1960 06a8 1560 06b0 0d60     ..`...`...`...`.
1000cc44:	06b8 1d60 06c8 1360 06d0 0b60 06d8 1b60     ..`...`...`...`.
1000cc54:	06e0 0760 06e8 1760 06f0 0f60 06f8 1f60     ..`...`...`...`.
1000cc64:	0708 10e0 0710 08e0 0718 18e0 0728 14e0     ............(...
1000cc74:	0730 0ce0 0738 1ce0 0748 12e0 0750 0ae0     0...8...H...P...
1000cc84:	0758 1ae0 0768 16e0 0770 0ee0 0778 1ee0     X...h...p...x...
1000cc94:	0788 11e0 0790 09e0 0798 19e0 07a8 15e0     ................
1000cca4:	07b0 0de0 07b8 1de0 07c8 13e0 07d0 0be0     ................
1000ccb4:	07d8 1be0 07e8 17e0 07f0 0fe0 07f8 1fe0     ................
1000ccc4:	0808 1010 0818 1810 0828 1410 0830 0c10     ........(...0...
1000ccd4:	0838 1c10 0848 1210 0850 0a10 0858 1a10     8...H...P...X...
1000cce4:	0868 1610 0870 0e10 0878 1e10 0888 1110     h...p...x.......
1000ccf4:	0890 0910 0898 1910 08a8 1510 08b0 0d10     ................
1000cd04:	08b8 1d10 08c8 1310 08d0 0b10 08d8 1b10     ................
1000cd14:	08e8 1710 08f0 0f10 08f8 1f10 0908 1090     ................
1000cd24:	0918 1890 0928 1490 0930 0c90 0938 1c90     ....(...0...8...
1000cd34:	0948 1290 0950 0a90 0958 1a90 0968 1690     H...P...X...h...
1000cd44:	0970 0e90 0978 1e90 0988 1190 0998 1990     p...x...........
1000cd54:	09a8 1590 09b0 0d90 09b8 1d90 09c8 1390     ................
1000cd64:	09d0 0b90 09d8 1b90 09e8 1790 09f0 0f90     ................
1000cd74:	09f8 1f90 0a08 1050 0a18 1850 0a28 1450     ......P...P.(.P.
1000cd84:	0a30 0c50 0a38 1c50 0a48 1250 0a58 1a50     0.P.8.P.H.P.X.P.
1000cd94:	0a68 1650 0a70 0e50 0a78 1e50 0a88 1150     h.P.p.P.x.P...P.
1000cda4:	0a98 1950 0aa8 1550 0ab0 0d50 0ab8 1d50     ..P...P...P...P.
1000cdb4:	0ac8 1350 0ad0 0b50 0ad8 1b50 0ae8 1750     ..P...P...P...P.
1000cdc4:	0af0 0f50 0af8 1f50 0b08 10d0 0b18 18d0     ..P...P.........
1000cdd4:	0b28 14d0 0b30 0cd0 0b38 1cd0 0b48 12d0     (...0...8...H...
1000cde4:	0b58 1ad0 0b68 16d0 0b70 0ed0 0b78 1ed0     X...h...p...x...
1000cdf4:	0b88 11d0 0b98 19d0 0ba8 15d0 0bb0 0dd0     ................
1000ce04:	0bb8 1dd0 0bc8 13d0 0bd8 1bd0 0be8 17d0     ................
1000ce14:	0bf0 0fd0 0bf8 1fd0 0c08 1030 0c18 1830     ..........0...0.
1000ce24:	0c28 1430 0c38 1c30 0c48 1230 0c58 1a30     (.0.8.0.H.0.X.0.
1000ce34:	0c68 1630 0c70 0e30 0c78 1e30 0c88 1130     h.0.p.0.x.0...0.
1000ce44:	0c98 1930 0ca8 1530 0cb0 0d30 0cb8 1d30     ..0...0...0...0.
1000ce54:	0cc8 1330 0cd8 1b30 0ce8 1730 0cf0 0f30     ..0...0...0...0.
1000ce64:	0cf8 1f30 0d08 10b0 0d18 18b0 0d28 14b0     ..0.........(...
1000ce74:	0d38 1cb0 0d48 12b0 0d58 1ab0 0d68 16b0     8...H...X...h...
1000ce84:	0d70 0eb0 0d78 1eb0 0d88 11b0 0d98 19b0     p...x...........
1000ce94:	0da8 15b0 0db8 1db0 0dc8 13b0 0dd8 1bb0     ................
1000cea4:	0de8 17b0 0df0 0fb0 0df8 1fb0 0e08 1070     ..............p.
1000ceb4:	0e18 1870 0e28 1470 0e38 1c70 0e48 1270     ..p.(.p.8.p.H.p.
1000cec4:	0e58 1a70 0e68 1670 0e78 1e70 0e88 1170     X.p.h.p.x.p...p.
1000ced4:	0e98 1970 0ea8 1570 0eb8 1d70 0ec8 1370     ..p...p...p...p.
1000cee4:	0ed8 1b70 0ee8 1770 0ef0 0f70 0ef8 1f70     ..p...p...p...p.
1000cef4:	0f08 10f0 0f18 18f0 0f28 14f0 0f38 1cf0     ........(...8...
1000cf04:	0f48 12f0 0f58 1af0 0f68 16f0 0f78 1ef0     H...X...h...x...
1000cf14:	0f88 11f0 0f98 19f0 0fa8 15f0 0fb8 1df0     ................
1000cf24:	0fc8 13f0 0fd8 1bf0 0fe8 17f0 0ff8 1ff0     ................
1000cf34:	1018 1808 1028 1408 1038 1c08 1048 1208     ....(...8...H...
1000cf44:	1058 1a08 1068 1608 1078 1e08 1088 1108     X...h...x.......
1000cf54:	1098 1908 10a8 1508 10b8 1d08 10c8 1308     ................
1000cf64:	10d8 1b08 10e8 1708 10f8 1f08 1118 1888     ................
1000cf74:	1128 1488 1138 1c88 1148 1288 1158 1a88     (...8...H...X...
1000cf84:	1168 1688 1178 1e88 1198 1988 11a8 1588     h...x...........
1000cf94:	11b8 1d88 11c8 1388 11d8 1b88 11e8 1788     ................
1000cfa4:	11f8 1f88 1218 1848 1228 1448 1238 1c48     ......H.(.H.8.H.
1000cfb4:	1258 1a48 1268 1648 1278 1e48 1298 1948     X.H.h.H.x.H...H.
1000cfc4:	12a8 1548 12b8 1d48 12c8 1348 12d8 1b48     ..H...H...H...H.
1000cfd4:	12e8 1748 12f8 1f48 1318 18c8 1328 14c8     ..H...H.....(...
1000cfe4:	1338 1cc8 1358 1ac8 1368 16c8 1378 1ec8     8...X...h...x...
1000cff4:	1398 19c8 13a8 15c8 13b8 1dc8 13d8 1bc8     ................
1000d004:	13e8 17c8 13f8 1fc8 1418 1828 1438 1c28     ..........(.8.(.
1000d014:	1458 1a28 1468 1628 1478 1e28 1498 1928     X.(.h.(.x.(...(.
1000d024:	14a8 1528 14b8 1d28 14d8 1b28 14e8 1728     ..(...(...(...(.
1000d034:	14f8 1f28 1518 18a8 1538 1ca8 1558 1aa8     ..(.....8...X...
1000d044:	1568 16a8 1578 1ea8 1598 19a8 15b8 1da8     h...x...........
1000d054:	15d8 1ba8 15e8 17a8 15f8 1fa8 1618 1868     ..............h.
1000d064:	1638 1c68 1658 1a68 1678 1e68 1698 1968     8.h.X.h.x.h...h.
1000d074:	16b8 1d68 16d8 1b68 16e8 1768 16f8 1f68     ..h...h...h...h.
1000d084:	1718 18e8 1738 1ce8 1758 1ae8 1778 1ee8     ....8...X...x...
1000d094:	1798 19e8 17b8 1de8 17d8 1be8 17f8 1fe8     ................
1000d0a4:	1838 1c18 1858 1a18 1878 1e18 1898 1918     8...X...x.......
1000d0b4:	18b8 1d18 18d8 1b18 18f8 1f18 1938 1c98     ............8...
1000d0c4:	1958 1a98 1978 1e98 19b8 1d98 19d8 1b98     X...x...........
1000d0d4:	19f8 1f98 1a38 1c58 1a78 1e58 1ab8 1d58     ....8.X.x.X...X.
1000d0e4:	1ad8 1b58 1af8 1f58 1b38 1cd8 1b78 1ed8     ..X...X.8...x...
1000d0f4:	1bb8 1dd8 1bf8 1fd8 1c78 1e38 1cb8 1d38     ........x.8...8.
1000d104:	1cf8 1f38 1d78 1eb8 1df8 1fb8 1ef8 1f78     ..8.x.........x.

1000d114 <armBitRevIndexTable_fixed_128>:
1000d114:	0008 0200 0010 0100 0018 0300 0020 0080     ............ ...
1000d124:	0028 0280 0030 0180 0038 0380 0048 0240     (...0...8...H.@.
1000d134:	0050 0140 0058 0340 0060 00c0 0068 02c0     P.@.X.@.`...h...
1000d144:	0070 01c0 0078 03c0 0088 0220 0090 0120     p...x..... ... .
1000d154:	0098 0320 00a8 02a0 00b0 01a0 00b8 03a0     .. .............
1000d164:	00c8 0260 00d0 0160 00d8 0360 00e8 02e0     ..`...`...`.....
1000d174:	00f0 01e0 00f8 03e0 0108 0210 0118 0310     ................
1000d184:	0128 0290 0130 0190 0138 0390 0148 0250     (...0...8...H.P.
1000d194:	0158 0350 0168 02d0 0170 01d0 0178 03d0     X.P.h...p...x...
1000d1a4:	0188 0230 0198 0330 01a8 02b0 01b8 03b0     ..0...0.........
1000d1b4:	01c8 0270 01d8 0370 01e8 02f0 01f8 03f0     ..p...p.........
1000d1c4:	0218 0308 0228 0288 0238 0388 0258 0348     ....(...8...X.H.
1000d1d4:	0268 02c8 0278 03c8 0298 0328 02b8 03a8     h...x.....(.....
1000d1e4:	02d8 0368 02f8 03e8 0338 0398 0378 03d8     ..h.....8...x...

1000d1f4 <armBitRevIndexTable_fixed_16>:
1000d1f4:	0008 0040 0010 0020 0018 0060 0028 0050     ..@... ...`.(.P.
1000d204:	0038 0070 0058 0068                         8.p.X.h.

1000d20c <armBitRevIndexTable_fixed_2048>:
1000d20c:	0008 2000 0010 1000 0018 3000 0020 0800     ... .......0 ...
1000d21c:	0028 2800 0030 1800 0038 3800 0040 0400     (..(0...8..8@...
1000d22c:	0048 2400 0050 1400 0058 3400 0060 0c00     H..$P...X..4`...
1000d23c:	0068 2c00 0070 1c00 0078 3c00 0080 0200     h..,p...x..<....
1000d24c:	0088 2200 0090 1200 0098 3200 00a0 0a00     ...".......2....
1000d25c:	00a8 2a00 00b0 1a00 00b8 3a00 00c0 0600     ...*.......:....
1000d26c:	00c8 2600 00d0 1600 00d8 3600 00e0 0e00     ...&.......6....
1000d27c:	00e8 2e00 00f0 1e00 00f8 3e00 0108 2100     ...........>...!
1000d28c:	0110 1100 0118 3100 0120 0900 0128 2900     .......1 ...(..)
1000d29c:	0130 1900 0138 3900 0140 0500 0148 2500     0...8..9@...H..%
1000d2ac:	0150 1500 0158 3500 0160 0d00 0168 2d00     P...X..5`...h..-
1000d2bc:	0170 1d00 0178 3d00 0180 0300 0188 2300     p...x..=.......#
1000d2cc:	0190 1300 0198 3300 01a0 0b00 01a8 2b00     .......3.......+
1000d2dc:	01b0 1b00 01b8 3b00 01c0 0700 01c8 2700     .......;.......'
1000d2ec:	01d0 1700 01d8 3700 01e0 0f00 01e8 2f00     .......7......./
1000d2fc:	01f0 1f00 01f8 3f00 0208 2080 0210 1080     .......?... ....
1000d30c:	0218 3080 0220 0880 0228 2880 0230 1880     ...0 ...(..(0...
1000d31c:	0238 3880 0240 0480 0248 2480 0250 1480     8..8@...H..$P...
1000d32c:	0258 3480 0260 0c80 0268 2c80 0270 1c80     X..4`...h..,p...
1000d33c:	0278 3c80 0288 2280 0290 1280 0298 3280     x..<...".......2
1000d34c:	02a0 0a80 02a8 2a80 02b0 1a80 02b8 3a80     .......*.......:
1000d35c:	02c0 0680 02c8 2680 02d0 1680 02d8 3680     .......&.......6
1000d36c:	02e0 0e80 02e8 2e80 02f0 1e80 02f8 3e80     ...............>
1000d37c:	0308 2180 0310 1180 0318 3180 0320 0980     ...!.......1 ...
1000d38c:	0328 2980 0330 1980 0338 3980 0340 0580     (..)0...8..9@...
1000d39c:	0348 2580 0350 1580 0358 3580 0360 0d80     H..%P...X..5`...
1000d3ac:	0368 2d80 0370 1d80 0378 3d80 0388 2380     h..-p...x..=...#
1000d3bc:	0390 1380 0398 3380 03a0 0b80 03a8 2b80     .......3.......+
1000d3cc:	03b0 1b80 03b8 3b80 03c0 0780 03c8 2780     .......;.......'
1000d3dc:	03d0 1780 03d8 3780 03e0 0f80 03e8 2f80     .......7......./
1000d3ec:	03f0 1f80 03f8 3f80 0408 2040 0410 1040     .......?..@ ..@.
1000d3fc:	0418 3040 0420 0840 0428 2840 0430 1840     ..@0 .@.(.@(0.@.
1000d40c:	0438 3840 0448 2440 0450 1440 0458 3440     8.@8H.@$P.@.X.@4
1000d41c:	0460 0c40 0468 2c40 0470 1c40 0478 3c40     `.@.h.@,p.@.x.@<
1000d42c:	0488 2240 0490 1240 0498 3240 04a0 0a40     ..@"..@...@2..@.
1000d43c:	04a8 2a40 04b0 1a40 04b8 3a40 04c0 0640     ..@*..@...@:..@.
1000d44c:	04c8 2640 04d0 1640 04d8 3640 04e0 0e40     ..@&..@...@6..@.
1000d45c:	04e8 2e40 04f0 1e40 04f8 3e40 0508 2140     ..@...@...@>..@!
1000d46c:	0510 1140 0518 3140 0520 0940 0528 2940     ..@...@1 .@.(.@)
1000d47c:	0530 1940 0538 3940 0548 2540 0550 1540     0.@.8.@9H.@%P.@.
1000d48c:	0558 3540 0560 0d40 0568 2d40 0570 1d40     X.@5`.@.h.@-p.@.
1000d49c:	0578 3d40 0588 2340 0590 1340 0598 3340     x.@=..@#..@...@3
1000d4ac:	05a0 0b40 05a8 2b40 05b0 1b40 05b8 3b40     ..@...@+..@...@;
1000d4bc:	05c0 0740 05c8 2740 05d0 1740 05d8 3740     ..@...@'..@...@7
1000d4cc:	05e0 0f40 05e8 2f40 05f0 1f40 05f8 3f40     ..@...@/..@...@?
1000d4dc:	0608 20c0 0610 10c0 0618 30c0 0620 08c0     ... .......0 ...
1000d4ec:	0628 28c0 0630 18c0 0638 38c0 0648 24c0     (..(0...8..8H..$
1000d4fc:	0650 14c0 0658 34c0 0660 0cc0 0668 2cc0     P...X..4`...h..,
1000d50c:	0670 1cc0 0678 3cc0 0688 22c0 0690 12c0     p...x..<..."....
1000d51c:	0698 32c0 06a0 0ac0 06a8 2ac0 06b0 1ac0     ...2.......*....
1000d52c:	06b8 3ac0 06c8 26c0 06d0 16c0 06d8 36c0     ...:...&.......6
1000d53c:	06e0 0ec0 06e8 2ec0 06f0 1ec0 06f8 3ec0     ...............>
1000d54c:	0708 21c0 0710 11c0 0718 31c0 0720 09c0     ...!.......1 ...
1000d55c:	0728 29c0 0730 19c0 0738 39c0 0748 25c0     (..)0...8..9H..%
1000d56c:	0750 15c0 0758 35c0 0760 0dc0 0768 2dc0     P...X..5`...h..-
1000d57c:	0770 1dc0 0778 3dc0 0788 23c0 0790 13c0     p...x..=...#....
1000d58c:	0798 33c0 07a0 0bc0 07a8 2bc0 07b0 1bc0     ...3.......+....
1000d59c:	07b8 3bc0 07c8 27c0 07d0 17c0 07d8 37c0     ...;...'.......7
1000d5ac:	07e0 0fc0 07e8 2fc0 07f0 1fc0 07f8 3fc0     ......./.......?
1000d5bc:	0808 2020 0810 1020 0818 3020 0828 2820     ..  .. ... 0(. (
1000d5cc:	0830 1820 0838 3820 0848 2420 0850 1420     0. .8. 8H. $P. .
1000d5dc:	0858 3420 0860 0c20 0868 2c20 0870 1c20     X. 4`. .h. ,p. .
1000d5ec:	0878 3c20 0888 2220 0890 1220 0898 3220     x. <.. ".. ... 2
1000d5fc:	08a0 0a20 08a8 2a20 08b0 1a20 08b8 3a20     .. ... *.. ... :
1000d60c:	08c8 2620 08d0 1620 08d8 3620 08e0 0e20     .. &.. ... 6.. .
1000d61c:	08e8 2e20 08f0 1e20 08f8 3e20 0908 2120     .. ... ... >.. !
1000d62c:	0910 1120 0918 3120 0928 2920 0930 1920     .. ... 1(. )0. .
1000d63c:	0938 3920 0948 2520 0950 1520 0958 3520     8. 9H. %P. .X. 5
1000d64c:	0960 0d20 0968 2d20 0970 1d20 0978 3d20     `. .h. -p. .x. =
1000d65c:	0988 2320 0990 1320 0998 3320 09a0 0b20     .. #.. ... 3.. .
1000d66c:	09a8 2b20 09b0 1b20 09b8 3b20 09c8 2720     .. +.. ... ;.. '
1000d67c:	09d0 1720 09d8 3720 09e0 0f20 09e8 2f20     .. ... 7.. ... /
1000d68c:	09f0 1f20 09f8 3f20 0a08 20a0 0a10 10a0     .. ... ?... ....
1000d69c:	0a18 30a0 0a28 28a0 0a30 18a0 0a38 38a0     ...0(..(0...8..8
1000d6ac:	0a48 24a0 0a50 14a0 0a58 34a0 0a60 0ca0     H..$P...X..4`...
1000d6bc:	0a68 2ca0 0a70 1ca0 0a78 3ca0 0a88 22a0     h..,p...x..<..."
1000d6cc:	0a90 12a0 0a98 32a0 0aa8 2aa0 0ab0 1aa0     .......2...*....
1000d6dc:	0ab8 3aa0 0ac8 26a0 0ad0 16a0 0ad8 36a0     ...:...&.......6
1000d6ec:	0ae0 0ea0 0ae8 2ea0 0af0 1ea0 0af8 3ea0     ...............>
1000d6fc:	0b08 21a0 0b10 11a0 0b18 31a0 0b28 29a0     ...!.......1(..)
1000d70c:	0b30 19a0 0b38 39a0 0b48 25a0 0b50 15a0     0...8..9H..%P...
1000d71c:	0b58 35a0 0b60 0da0 0b68 2da0 0b70 1da0     X..5`...h..-p...
1000d72c:	0b78 3da0 0b88 23a0 0b90 13a0 0b98 33a0     x..=...#.......3
1000d73c:	0ba8 2ba0 0bb0 1ba0 0bb8 3ba0 0bc8 27a0     ...+.......;...'
1000d74c:	0bd0 17a0 0bd8 37a0 0be0 0fa0 0be8 2fa0     .......7......./
1000d75c:	0bf0 1fa0 0bf8 3fa0 0c08 2060 0c10 1060     .......?..` ..`.
1000d76c:	0c18 3060 0c28 2860 0c30 1860 0c38 3860     ..`0(.`(0.`.8.`8
1000d77c:	0c48 2460 0c50 1460 0c58 3460 0c68 2c60     H.`$P.`.X.`4h.`,
1000d78c:	0c70 1c60 0c78 3c60 0c88 2260 0c90 1260     p.`.x.`<..`"..`.
1000d79c:	0c98 3260 0ca8 2a60 0cb0 1a60 0cb8 3a60     ..`2..`*..`...`:
1000d7ac:	0cc8 2660 0cd0 1660 0cd8 3660 0ce0 0e60     ..`&..`...`6..`.
1000d7bc:	0ce8 2e60 0cf0 1e60 0cf8 3e60 0d08 2160     ..`...`...`>..`!
1000d7cc:	0d10 1160 0d18 3160 0d28 2960 0d30 1960     ..`...`1(.`)0.`.
1000d7dc:	0d38 3960 0d48 2560 0d50 1560 0d58 3560     8.`9H.`%P.`.X.`5
1000d7ec:	0d68 2d60 0d70 1d60 0d78 3d60 0d88 2360     h.`-p.`.x.`=..`#
1000d7fc:	0d90 1360 0d98 3360 0da8 2b60 0db0 1b60     ..`...`3..`+..`.
1000d80c:	0db8 3b60 0dc8 2760 0dd0 1760 0dd8 3760     ..`;..`'..`...`7
1000d81c:	0de0 0f60 0de8 2f60 0df0 1f60 0df8 3f60     ..`...`/..`...`?
1000d82c:	0e08 20e0 0e10 10e0 0e18 30e0 0e28 28e0     ... .......0(..(
1000d83c:	0e30 18e0 0e38 38e0 0e48 24e0 0e50 14e0     0...8..8H..$P...
1000d84c:	0e58 34e0 0e68 2ce0 0e70 1ce0 0e78 3ce0     X..4h..,p...x..<
1000d85c:	0e88 22e0 0e90 12e0 0e98 32e0 0ea8 2ae0     ...".......2...*
1000d86c:	0eb0 1ae0 0eb8 3ae0 0ec8 26e0 0ed0 16e0     .......:...&....
1000d87c:	0ed8 36e0 0ee8 2ee0 0ef0 1ee0 0ef8 3ee0     ...6...........>
1000d88c:	0f08 21e0 0f10 11e0 0f18 31e0 0f28 29e0     ...!.......1(..)
1000d89c:	0f30 19e0 0f38 39e0 0f48 25e0 0f50 15e0     0...8..9H..%P...
1000d8ac:	0f58 35e0 0f68 2de0 0f70 1de0 0f78 3de0     X..5h..-p...x..=
1000d8bc:	0f88 23e0 0f90 13e0 0f98 33e0 0fa8 2be0     ...#.......3...+
1000d8cc:	0fb0 1be0 0fb8 3be0 0fc8 27e0 0fd0 17e0     .......;...'....
1000d8dc:	0fd8 37e0 0fe8 2fe0 0ff0 1fe0 0ff8 3fe0     ...7.../.......?
1000d8ec:	1008 2010 1018 3010 1028 2810 1030 1810     ... ...0(..(0...
1000d8fc:	1038 3810 1048 2410 1050 1410 1058 3410     8..8H..$P...X..4
1000d90c:	1068 2c10 1070 1c10 1078 3c10 1088 2210     h..,p...x..<..."
1000d91c:	1090 1210 1098 3210 10a8 2a10 10b0 1a10     .......2...*....
1000d92c:	10b8 3a10 10c8 2610 10d0 1610 10d8 3610     ...:...&.......6
1000d93c:	10e8 2e10 10f0 1e10 10f8 3e10 1108 2110     ...........>...!
1000d94c:	1118 3110 1128 2910 1130 1910 1138 3910     ...1(..)0...8..9
1000d95c:	1148 2510 1150 1510 1158 3510 1168 2d10     H..%P...X..5h..-
1000d96c:	1170 1d10 1178 3d10 1188 2310 1190 1310     p...x..=...#....
1000d97c:	1198 3310 11a8 2b10 11b0 1b10 11b8 3b10     ...3...+.......;
1000d98c:	11c8 2710 11d0 1710 11d8 3710 11e8 2f10     ...'.......7.../
1000d99c:	11f0 1f10 11f8 3f10 1208 2090 1218 3090     .......?... ...0
1000d9ac:	1228 2890 1230 1890 1238 3890 1248 2490     (..(0...8..8H..$
1000d9bc:	1250 1490 1258 3490 1268 2c90 1270 1c90     P...X..4h..,p...
1000d9cc:	1278 3c90 1288 2290 1298 3290 12a8 2a90     x..<..."...2...*
1000d9dc:	12b0 1a90 12b8 3a90 12c8 2690 12d0 1690     .......:...&....
1000d9ec:	12d8 3690 12e8 2e90 12f0 1e90 12f8 3e90     ...6...........>
1000d9fc:	1308 2190 1318 3190 1328 2990 1330 1990     ...!...1(..)0...
1000da0c:	1338 3990 1348 2590 1350 1590 1358 3590     8..9H..%P...X..5
1000da1c:	1368 2d90 1370 1d90 1378 3d90 1388 2390     h..-p...x..=...#
1000da2c:	1398 3390 13a8 2b90 13b0 1b90 13b8 3b90     ...3...+.......;
1000da3c:	13c8 2790 13d0 1790 13d8 3790 13e8 2f90     ...'.......7.../
1000da4c:	13f0 1f90 13f8 3f90 1408 2050 1418 3050     .......?..P ..P0
1000da5c:	1428 2850 1430 1850 1438 3850 1448 2450     (.P(0.P.8.P8H.P$
1000da6c:	1458 3450 1468 2c50 1470 1c50 1478 3c50     X.P4h.P,p.P.x.P<
1000da7c:	1488 2250 1498 3250 14a8 2a50 14b0 1a50     ..P"..P2..P*..P.
1000da8c:	14b8 3a50 14c8 2650 14d0 1650 14d8 3650     ..P:..P&..P...P6
1000da9c:	14e8 2e50 14f0 1e50 14f8 3e50 1508 2150     ..P...P...P>..P!
1000daac:	1518 3150 1528 2950 1530 1950 1538 3950     ..P1(.P)0.P.8.P9
1000dabc:	1548 2550 1558 3550 1568 2d50 1570 1d50     H.P%X.P5h.P-p.P.
1000dacc:	1578 3d50 1588 2350 1598 3350 15a8 2b50     x.P=..P#..P3..P+
1000dadc:	15b0 1b50 15b8 3b50 15c8 2750 15d0 1750     ..P...P;..P'..P.
1000daec:	15d8 3750 15e8 2f50 15f0 1f50 15f8 3f50     ..P7..P/..P...P?
1000dafc:	1608 20d0 1618 30d0 1628 28d0 1630 18d0     ... ...0(..(0...
1000db0c:	1638 38d0 1648 24d0 1658 34d0 1668 2cd0     8..8H..$X..4h..,
1000db1c:	1670 1cd0 1678 3cd0 1688 22d0 1698 32d0     p...x..<..."...2
1000db2c:	16a8 2ad0 16b0 1ad0 16b8 3ad0 16c8 26d0     ...*.......:...&
1000db3c:	16d8 36d0 16e8 2ed0 16f0 1ed0 16f8 3ed0     ...6...........>
1000db4c:	1708 21d0 1718 31d0 1728 29d0 1730 19d0     ...!...1(..)0...
1000db5c:	1738 39d0 1748 25d0 1758 35d0 1768 2dd0     8..9H..%X..5h..-
1000db6c:	1770 1dd0 1778 3dd0 1788 23d0 1798 33d0     p...x..=...#...3
1000db7c:	17a8 2bd0 17b0 1bd0 17b8 3bd0 17c8 27d0     ...+.......;...'
1000db8c:	17d8 37d0 17e8 2fd0 17f0 1fd0 17f8 3fd0     ...7.../.......?
1000db9c:	1808 2030 1818 3030 1828 2830 1838 3830     ..0 ..00(.0(8.08
1000dbac:	1848 2430 1858 3430 1868 2c30 1870 1c30     H.0$X.04h.0,p.0.
1000dbbc:	1878 3c30 1888 2230 1898 3230 18a8 2a30     x.0<..0"..02..0*
1000dbcc:	18b0 1a30 18b8 3a30 18c8 2630 18d8 3630     ..0...0:..0&..06
1000dbdc:	18e8 2e30 18f0 1e30 18f8 3e30 1908 2130     ..0...0...0>..0!
1000dbec:	1918 3130 1928 2930 1938 3930 1948 2530     ..01(.0)8.09H.0%
1000dbfc:	1958 3530 1968 2d30 1970 1d30 1978 3d30     X.05h.0-p.0.x.0=
1000dc0c:	1988 2330 1998 3330 19a8 2b30 19b0 1b30     ..0#..03..0+..0.
1000dc1c:	19b8 3b30 19c8 2730 19d8 3730 19e8 2f30     ..0;..0'..07..0/
1000dc2c:	19f0 1f30 19f8 3f30 1a08 20b0 1a18 30b0     ..0...0?... ...0
1000dc3c:	1a28 28b0 1a38 38b0 1a48 24b0 1a58 34b0     (..(8..8H..$X..4
1000dc4c:	1a68 2cb0 1a70 1cb0 1a78 3cb0 1a88 22b0     h..,p...x..<..."
1000dc5c:	1a98 32b0 1aa8 2ab0 1ab8 3ab0 1ac8 26b0     ...2...*...:...&
1000dc6c:	1ad8 36b0 1ae8 2eb0 1af0 1eb0 1af8 3eb0     ...6...........>
1000dc7c:	1b08 21b0 1b18 31b0 1b28 29b0 1b38 39b0     ...!...1(..)8..9
1000dc8c:	1b48 25b0 1b58 35b0 1b68 2db0 1b70 1db0     H..%X..5h..-p...
1000dc9c:	1b78 3db0 1b88 23b0 1b98 33b0 1ba8 2bb0     x..=...#...3...+
1000dcac:	1bb8 3bb0 1bc8 27b0 1bd8 37b0 1be8 2fb0     ...;...'...7.../
1000dcbc:	1bf0 1fb0 1bf8 3fb0 1c08 2070 1c18 3070     .......?..p ..p0
1000dccc:	1c28 2870 1c38 3870 1c48 2470 1c58 3470     (.p(8.p8H.p$X.p4
1000dcdc:	1c68 2c70 1c78 3c70 1c88 2270 1c98 3270     h.p,x.p<..p"..p2
1000dcec:	1ca8 2a70 1cb8 3a70 1cc8 2670 1cd8 3670     ..p*..p:..p&..p6
1000dcfc:	1ce8 2e70 1cf0 1e70 1cf8 3e70 1d08 2170     ..p...p...p>..p!
1000dd0c:	1d18 3170 1d28 2970 1d38 3970 1d48 2570     ..p1(.p)8.p9H.p%
1000dd1c:	1d58 3570 1d68 2d70 1d78 3d70 1d88 2370     X.p5h.p-x.p=..p#
1000dd2c:	1d98 3370 1da8 2b70 1db8 3b70 1dc8 2770     ..p3..p+..p;..p'
1000dd3c:	1dd8 3770 1de8 2f70 1df0 1f70 1df8 3f70     ..p7..p/..p...p?
1000dd4c:	1e08 20f0 1e18 30f0 1e28 28f0 1e38 38f0     ... ...0(..(8..8
1000dd5c:	1e48 24f0 1e58 34f0 1e68 2cf0 1e78 3cf0     H..$X..4h..,x..<
1000dd6c:	1e88 22f0 1e98 32f0 1ea8 2af0 1eb8 3af0     ..."...2...*...:
1000dd7c:	1ec8 26f0 1ed8 36f0 1ee8 2ef0 1ef8 3ef0     ...&...6.......>
1000dd8c:	1f08 21f0 1f18 31f0 1f28 29f0 1f38 39f0     ...!...1(..)8..9
1000dd9c:	1f48 25f0 1f58 35f0 1f68 2df0 1f78 3df0     H..%X..5h..-x..=
1000ddac:	1f88 23f0 1f98 33f0 1fa8 2bf0 1fb8 3bf0     ...#...3...+...;
1000ddbc:	1fc8 27f0 1fd8 37f0 1fe8 2ff0 1ff8 3ff0     ...'...7.../...?
1000ddcc:	2018 3008 2028 2808 2038 3808 2048 2408     . .0( .(8 .8H .$
1000dddc:	2058 3408 2068 2c08 2078 3c08 2088 2208     X .4h .,x .<. ."
1000ddec:	2098 3208 20a8 2a08 20b8 3a08 20c8 2608     . .2. .*. .:. .&
1000ddfc:	20d8 3608 20e8 2e08 20f8 3e08 2118 3108     . .6. ... .>.!.1
1000de0c:	2128 2908 2138 3908 2148 2508 2158 3508     (!.)8!.9H!.%X!.5
1000de1c:	2168 2d08 2178 3d08 2188 2308 2198 3308     h!.-x!.=.!.#.!.3
1000de2c:	21a8 2b08 21b8 3b08 21c8 2708 21d8 3708     .!.+.!.;.!.'.!.7
1000de3c:	21e8 2f08 21f8 3f08 2218 3088 2228 2888     .!./.!.?.".0(".(
1000de4c:	2238 3888 2248 2488 2258 3488 2268 2c88     8".8H".$X".4h".,
1000de5c:	2278 3c88 2298 3288 22a8 2a88 22b8 3a88     x".<.".2.".*.".:
1000de6c:	22c8 2688 22d8 3688 22e8 2e88 22f8 3e88     .".&.".6."...".>
1000de7c:	2318 3188 2328 2988 2338 3988 2348 2588     .#.1(#.)8#.9H#.%
1000de8c:	2358 3588 2368 2d88 2378 3d88 2398 3388     X#.5h#.-x#.=.#.3
1000de9c:	23a8 2b88 23b8 3b88 23c8 2788 23d8 3788     .#.+.#.;.#.'.#.7
1000deac:	23e8 2f88 23f8 3f88 2418 3048 2428 2848     .#./.#.?.$H0($H(
1000debc:	2438 3848 2458 3448 2468 2c48 2478 3c48     8$H8X$H4h$H,x$H<
1000decc:	2498 3248 24a8 2a48 24b8 3a48 24c8 2648     .$H2.$H*.$H:.$H&
1000dedc:	24d8 3648 24e8 2e48 24f8 3e48 2518 3148     .$H6.$H..$H>.%H1
1000deec:	2528 2948 2538 3948 2558 3548 2568 2d48     (%H)8%H9X%H5h%H-
1000defc:	2578 3d48 2598 3348 25a8 2b48 25b8 3b48     x%H=.%H3.%H+.%H;
1000df0c:	25c8 2748 25d8 3748 25e8 2f48 25f8 3f48     .%H'.%H7.%H/.%H?
1000df1c:	2618 30c8 2628 28c8 2638 38c8 2658 34c8     .&.0(&.(8&.8X&.4
1000df2c:	2668 2cc8 2678 3cc8 2698 32c8 26a8 2ac8     h&.,x&.<.&.2.&.*
1000df3c:	26b8 3ac8 26d8 36c8 26e8 2ec8 26f8 3ec8     .&.:.&.6.&...&.>
1000df4c:	2718 31c8 2728 29c8 2738 39c8 2758 35c8     .'.1('.)8'.9X'.5
1000df5c:	2768 2dc8 2778 3dc8 2798 33c8 27a8 2bc8     h'.-x'.=.'.3.'.+
1000df6c:	27b8 3bc8 27d8 37c8 27e8 2fc8 27f8 3fc8     .'.;.'.7.'./.'.?
1000df7c:	2818 3028 2838 3828 2858 3428 2868 2c28     .((08((8X((4h((,
1000df8c:	2878 3c28 2898 3228 28a8 2a28 28b8 3a28     x((<.((2.((*.((:
1000df9c:	28d8 3628 28e8 2e28 28f8 3e28 2918 3128     .((6.((..((>.)(1
1000dfac:	2938 3928 2958 3528 2968 2d28 2978 3d28     8)(9X)(5h)(-x)(=
1000dfbc:	2998 3328 29a8 2b28 29b8 3b28 29d8 3728     .)(3.)(+.)(;.)(7
1000dfcc:	29e8 2f28 29f8 3f28 2a18 30a8 2a38 38a8     .)(/.)(?.*.08*.8
1000dfdc:	2a58 34a8 2a68 2ca8 2a78 3ca8 2a98 32a8     X*.4h*.,x*.<.*.2
1000dfec:	2ab8 3aa8 2ad8 36a8 2ae8 2ea8 2af8 3ea8     .*.:.*.6.*...*.>
1000dffc:	2b18 31a8 2b38 39a8 2b58 35a8 2b68 2da8     .+.18+.9X+.5h+.-
1000e00c:	2b78 3da8 2b98 33a8 2bb8 3ba8 2bd8 37a8     x+.=.+.3.+.;.+.7
1000e01c:	2be8 2fa8 2bf8 3fa8 2c18 3068 2c38 3868     .+./.+.?.,h08,h8
1000e02c:	2c58 3468 2c78 3c68 2c98 3268 2cb8 3a68     X,h4x,h<.,h2.,h:
1000e03c:	2cd8 3668 2ce8 2e68 2cf8 3e68 2d18 3168     .,h6.,h..,h>.-h1
1000e04c:	2d38 3968 2d58 3568 2d78 3d68 2d98 3368     8-h9X-h5x-h=.-h3
1000e05c:	2db8 3b68 2dd8 3768 2de8 2f68 2df8 3f68     .-h;.-h7.-h/.-h?
1000e06c:	2e18 30e8 2e38 38e8 2e58 34e8 2e78 3ce8     ...08..8X..4x..<
1000e07c:	2e98 32e8 2eb8 3ae8 2ed8 36e8 2ef8 3ee8     ...2...:...6...>
1000e08c:	2f18 31e8 2f38 39e8 2f58 35e8 2f78 3de8     ./.18/.9X/.5x/.=
1000e09c:	2f98 33e8 2fb8 3be8 2fd8 37e8 2ff8 3fe8     ./.3./.;./.7./.?
1000e0ac:	3038 3818 3058 3418 3078 3c18 3098 3218     80.8X0.4x0.<.0.2
1000e0bc:	30b8 3a18 30d8 3618 30f8 3e18 3138 3918     .0.:.0.6.0.>81.9
1000e0cc:	3158 3518 3178 3d18 3198 3318 31b8 3b18     X1.5x1.=.1.3.1.;
1000e0dc:	31d8 3718 31f8 3f18 3238 3898 3258 3498     .1.7.1.?82.8X2.4
1000e0ec:	3278 3c98 32b8 3a98 32d8 3698 32f8 3e98     x2.<.2.:.2.6.2.>
1000e0fc:	3338 3998 3358 3598 3378 3d98 33b8 3b98     83.9X3.5x3.=.3.;
1000e10c:	33d8 3798 33f8 3f98 3438 3858 3478 3c58     .3.7.3.?84X8x4X<
1000e11c:	34b8 3a58 34d8 3658 34f8 3e58 3538 3958     .4X:.4X6.4X>85X9
1000e12c:	3578 3d58 35b8 3b58 35d8 3758 35f8 3f58     x5X=.5X;.5X7.5X?
1000e13c:	3638 38d8 3678 3cd8 36b8 3ad8 36f8 3ed8     86.8x6.<.6.:.6.>
1000e14c:	3738 39d8 3778 3dd8 37b8 3bd8 37f8 3fd8     87.9x7.=.7.;.7.?
1000e15c:	3878 3c38 38b8 3a38 38f8 3e38 3978 3d38     x88<.88:.88>x98=
1000e16c:	39b8 3b38 39f8 3f38 3a78 3cb8 3af8 3eb8     .98;.98?x:.<.:.>
1000e17c:	3b78 3db8 3bf8 3fb8 3cf8 3e78 3df8 3f78     x;.=.;.?.<x>.=x?

1000e18c <armBitRevIndexTable_fixed_256>:
1000e18c:	0008 0400 0010 0200 0018 0600 0020 0100     ............ ...
1000e19c:	0028 0500 0030 0300 0038 0700 0040 0080     (...0...8...@...
1000e1ac:	0048 0480 0050 0280 0058 0680 0060 0180     H...P...X...`...
1000e1bc:	0068 0580 0070 0380 0078 0780 0088 0440     h...p...x.....@.
1000e1cc:	0090 0240 0098 0640 00a0 0140 00a8 0540     ..@...@...@...@.
1000e1dc:	00b0 0340 00b8 0740 00c8 04c0 00d0 02c0     ..@...@.........
1000e1ec:	00d8 06c0 00e0 01c0 00e8 05c0 00f0 03c0     ................
1000e1fc:	00f8 07c0 0108 0420 0110 0220 0118 0620     ...... ... ... .
1000e20c:	0128 0520 0130 0320 0138 0720 0148 04a0     (. .0. .8. .H...
1000e21c:	0150 02a0 0158 06a0 0160 01a0 0168 05a0     P...X...`...h...
1000e22c:	0170 03a0 0178 07a0 0188 0460 0190 0260     p...x.....`...`.
1000e23c:	0198 0660 01a8 0560 01b0 0360 01b8 0760     ..`...`...`...`.
1000e24c:	01c8 04e0 01d0 02e0 01d8 06e0 01e8 05e0     ................
1000e25c:	01f0 03e0 01f8 07e0 0208 0410 0218 0610     ................
1000e26c:	0228 0510 0230 0310 0238 0710 0248 0490     (...0...8...H...
1000e27c:	0250 0290 0258 0690 0268 0590 0270 0390     P...X...h...p...
1000e28c:	0278 0790 0288 0450 0298 0650 02a8 0550     x.....P...P...P.
1000e29c:	02b0 0350 02b8 0750 02c8 04d0 02d8 06d0     ..P...P.........
1000e2ac:	02e8 05d0 02f0 03d0 02f8 07d0 0308 0430     ..............0.
1000e2bc:	0318 0630 0328 0530 0338 0730 0348 04b0     ..0.(.0.8.0.H...
1000e2cc:	0358 06b0 0368 05b0 0370 03b0 0378 07b0     X...h...p...x...
1000e2dc:	0388 0470 0398 0670 03a8 0570 03b8 0770     ..p...p...p...p.
1000e2ec:	03c8 04f0 03d8 06f0 03e8 05f0 03f8 07f0     ................
1000e2fc:	0418 0608 0428 0508 0438 0708 0448 0488     ....(...8...H...
1000e30c:	0458 0688 0468 0588 0478 0788 0498 0648     X...h...x.....H.
1000e31c:	04a8 0548 04b8 0748 04d8 06c8 04e8 05c8     ..H...H.........
1000e32c:	04f8 07c8 0518 0628 0538 0728 0558 06a8     ......(.8.(.X...
1000e33c:	0568 05a8 0578 07a8 0598 0668 05b8 0768     h...x.....h...h.
1000e34c:	05d8 06e8 05f8 07e8 0638 0718 0658 0698     ........8...X...
1000e35c:	0678 0798 06b8 0758 06f8 07d8 0778 07b8     x.....X.....x...

1000e36c <armBitRevIndexTable_fixed_32>:
1000e36c:	0008 0080 0010 0040 0018 00c0 0028 00a0     ......@.....(...
1000e37c:	0030 0060 0038 00e0 0048 0090 0058 00d0     0.`.8...H...X...
1000e38c:	0068 00b0 0078 00f0 0098 00c8 00b8 00e8     h...x...........

1000e39c <armBitRevIndexTable_fixed_4096>:
1000e39c:	0008 4000 0010 2000 0018 6000 0020 1000     ...@... ...` ...
1000e3ac:	0028 5000 0030 3000 0038 7000 0040 0800     (..P0..08..p@...
1000e3bc:	0048 4800 0050 2800 0058 6800 0060 1800     H..HP..(X..h`...
1000e3cc:	0068 5800 0070 3800 0078 7800 0080 0400     h..Xp..8x..x....
1000e3dc:	0088 4400 0090 2400 0098 6400 00a0 1400     ...D...$...d....
1000e3ec:	00a8 5400 00b0 3400 00b8 7400 00c0 0c00     ...T...4...t....
1000e3fc:	00c8 4c00 00d0 2c00 00d8 6c00 00e0 1c00     ...L...,...l....
1000e40c:	00e8 5c00 00f0 3c00 00f8 7c00 0100 0200     ...\...<...|....
1000e41c:	0108 4200 0110 2200 0118 6200 0120 1200     ...B..."...b ...
1000e42c:	0128 5200 0130 3200 0138 7200 0140 0a00     (..R0..28..r@...
1000e43c:	0148 4a00 0150 2a00 0158 6a00 0160 1a00     H..JP..*X..j`...
1000e44c:	0168 5a00 0170 3a00 0178 7a00 0180 0600     h..Zp..:x..z....
1000e45c:	0188 4600 0190 2600 0198 6600 01a0 1600     ...F...&...f....
1000e46c:	01a8 5600 01b0 3600 01b8 7600 01c0 0e00     ...V...6...v....
1000e47c:	01c8 4e00 01d0 2e00 01d8 6e00 01e0 1e00     ...N.......n....
1000e48c:	01e8 5e00 01f0 3e00 01f8 7e00 0208 4100     ...^...>...~...A
1000e49c:	0210 2100 0218 6100 0220 1100 0228 5100     ...!...a ...(..Q
1000e4ac:	0230 3100 0238 7100 0240 0900 0248 4900     0..18..q@...H..I
1000e4bc:	0250 2900 0258 6900 0260 1900 0268 5900     P..)X..i`...h..Y
1000e4cc:	0270 3900 0278 7900 0280 0500 0288 4500     p..9x..y.......E
1000e4dc:	0290 2500 0298 6500 02a0 1500 02a8 5500     ...%...e.......U
1000e4ec:	02b0 3500 02b8 7500 02c0 0d00 02c8 4d00     ...5...u.......M
1000e4fc:	02d0 2d00 02d8 6d00 02e0 1d00 02e8 5d00     ...-...m.......]
1000e50c:	02f0 3d00 02f8 7d00 0308 4300 0310 2300     ...=...}...C...#
1000e51c:	0318 6300 0320 1300 0328 5300 0330 3300     ...c ...(..S0..3
1000e52c:	0338 7300 0340 0b00 0348 4b00 0350 2b00     8..s@...H..KP..+
1000e53c:	0358 6b00 0360 1b00 0368 5b00 0370 3b00     X..k`...h..[p..;
1000e54c:	0378 7b00 0380 0700 0388 4700 0390 2700     x..{.......G...'
1000e55c:	0398 6700 03a0 1700 03a8 5700 03b0 3700     ...g.......W...7
1000e56c:	03b8 7700 03c0 0f00 03c8 4f00 03d0 2f00     ...w.......O.../
1000e57c:	03d8 6f00 03e0 1f00 03e8 5f00 03f0 3f00     ...o......._...?
1000e58c:	03f8 7f00 0408 4080 0410 2080 0418 6080     .......@... ...`
1000e59c:	0420 1080 0428 5080 0430 3080 0438 7080      ...(..P0..08..p
1000e5ac:	0440 0880 0448 4880 0450 2880 0458 6880     @...H..HP..(X..h
1000e5bc:	0460 1880 0468 5880 0470 3880 0478 7880     `...h..Xp..8x..x
1000e5cc:	0488 4480 0490 2480 0498 6480 04a0 1480     ...D...$...d....
1000e5dc:	04a8 5480 04b0 3480 04b8 7480 04c0 0c80     ...T...4...t....
1000e5ec:	04c8 4c80 04d0 2c80 04d8 6c80 04e0 1c80     ...L...,...l....
1000e5fc:	04e8 5c80 04f0 3c80 04f8 7c80 0508 4280     ...\...<...|...B
1000e60c:	0510 2280 0518 6280 0520 1280 0528 5280     ..."...b ...(..R
1000e61c:	0530 3280 0538 7280 0540 0a80 0548 4a80     0..28..r@...H..J
1000e62c:	0550 2a80 0558 6a80 0560 1a80 0568 5a80     P..*X..j`...h..Z
1000e63c:	0570 3a80 0578 7a80 0580 0680 0588 4680     p..:x..z.......F
1000e64c:	0590 2680 0598 6680 05a0 1680 05a8 5680     ...&...f.......V
1000e65c:	05b0 3680 05b8 7680 05c0 0e80 05c8 4e80     ...6...v.......N
1000e66c:	05d0 2e80 05d8 6e80 05e0 1e80 05e8 5e80     .......n.......^
1000e67c:	05f0 3e80 05f8 7e80 0608 4180 0610 2180     ...>...~...A...!
1000e68c:	0618 6180 0620 1180 0628 5180 0630 3180     ...a ...(..Q0..1
1000e69c:	0638 7180 0640 0980 0648 4980 0650 2980     8..q@...H..IP..)
1000e6ac:	0658 6980 0660 1980 0668 5980 0670 3980     X..i`...h..Yp..9
1000e6bc:	0678 7980 0688 4580 0690 2580 0698 6580     x..y...E...%...e
1000e6cc:	06a0 1580 06a8 5580 06b0 3580 06b8 7580     .......U...5...u
1000e6dc:	06c0 0d80 06c8 4d80 06d0 2d80 06d8 6d80     .......M...-...m
1000e6ec:	06e0 1d80 06e8 5d80 06f0 3d80 06f8 7d80     .......]...=...}
1000e6fc:	0708 4380 0710 2380 0718 6380 0720 1380     ...C...#...c ...
1000e70c:	0728 5380 0730 3380 0738 7380 0740 0b80     (..S0..38..s@...
1000e71c:	0748 4b80 0750 2b80 0758 6b80 0760 1b80     H..KP..+X..k`...
1000e72c:	0768 5b80 0770 3b80 0778 7b80 0788 4780     h..[p..;x..{...G
1000e73c:	0790 2780 0798 6780 07a0 1780 07a8 5780     ...'...g.......W
1000e74c:	07b0 3780 07b8 7780 07c0 0f80 07c8 4f80     ...7...w.......O
1000e75c:	07d0 2f80 07d8 6f80 07e0 1f80 07e8 5f80     .../...o......._
1000e76c:	07f0 3f80 07f8 7f80 0808 4040 0810 2040     ...?......@@..@ 
1000e77c:	0818 6040 0820 1040 0828 5040 0830 3040     ..@` .@.(.@P0.@0
1000e78c:	0838 7040 0848 4840 0850 2840 0858 6840     8.@pH.@HP.@(X.@h
1000e79c:	0860 1840 0868 5840 0870 3840 0878 7840     `.@.h.@Xp.@8x.@x
1000e7ac:	0888 4440 0890 2440 0898 6440 08a0 1440     ..@D..@$..@d..@.
1000e7bc:	08a8 5440 08b0 3440 08b8 7440 08c0 0c40     ..@T..@4..@t..@.
1000e7cc:	08c8 4c40 08d0 2c40 08d8 6c40 08e0 1c40     ..@L..@,..@l..@.
1000e7dc:	08e8 5c40 08f0 3c40 08f8 7c40 0908 4240     ..@\..@<..@|..@B
1000e7ec:	0910 2240 0918 6240 0920 1240 0928 5240     ..@"..@b .@.(.@R
1000e7fc:	0930 3240 0938 7240 0940 0a40 0948 4a40     0.@28.@r@.@.H.@J
1000e80c:	0950 2a40 0958 6a40 0960 1a40 0968 5a40     P.@*X.@j`.@.h.@Z
1000e81c:	0970 3a40 0978 7a40 0988 4640 0990 2640     p.@:x.@z..@F..@&
1000e82c:	0998 6640 09a0 1640 09a8 5640 09b0 3640     ..@f..@...@V..@6
1000e83c:	09b8 7640 09c0 0e40 09c8 4e40 09d0 2e40     ..@v..@...@N..@.
1000e84c:	09d8 6e40 09e0 1e40 09e8 5e40 09f0 3e40     ..@n..@...@^..@>
1000e85c:	09f8 7e40 0a08 4140 0a10 2140 0a18 6140     ..@~..@A..@!..@a
1000e86c:	0a20 1140 0a28 5140 0a30 3140 0a38 7140      .@.(.@Q0.@18.@q
1000e87c:	0a48 4940 0a50 2940 0a58 6940 0a60 1940     H.@IP.@)X.@i`.@.
1000e88c:	0a68 5940 0a70 3940 0a78 7940 0a88 4540     h.@Yp.@9x.@y..@E
1000e89c:	0a90 2540 0a98 6540 0aa0 1540 0aa8 5540     ..@%..@e..@...@U
1000e8ac:	0ab0 3540 0ab8 7540 0ac0 0d40 0ac8 4d40     ..@5..@u..@...@M
1000e8bc:	0ad0 2d40 0ad8 6d40 0ae0 1d40 0ae8 5d40     ..@-..@m..@...@]
1000e8cc:	0af0 3d40 0af8 7d40 0b08 4340 0b10 2340     ..@=..@}..@C..@#
1000e8dc:	0b18 6340 0b20 1340 0b28 5340 0b30 3340     ..@c .@.(.@S0.@3
1000e8ec:	0b38 7340 0b48 4b40 0b50 2b40 0b58 6b40     8.@sH.@KP.@+X.@k
1000e8fc:	0b60 1b40 0b68 5b40 0b70 3b40 0b78 7b40     `.@.h.@[p.@;x.@{
1000e90c:	0b88 4740 0b90 2740 0b98 6740 0ba0 1740     ..@G..@'..@g..@.
1000e91c:	0ba8 5740 0bb0 3740 0bb8 7740 0bc0 0f40     ..@W..@7..@w..@.
1000e92c:	0bc8 4f40 0bd0 2f40 0bd8 6f40 0be0 1f40     ..@O..@/..@o..@.
1000e93c:	0be8 5f40 0bf0 3f40 0bf8 7f40 0c08 40c0     ..@_..@?..@....@
1000e94c:	0c10 20c0 0c18 60c0 0c20 10c0 0c28 50c0     ... ...` ...(..P
1000e95c:	0c30 30c0 0c38 70c0 0c48 48c0 0c50 28c0     0..08..pH..HP..(
1000e96c:	0c58 68c0 0c60 18c0 0c68 58c0 0c70 38c0     X..h`...h..Xp..8
1000e97c:	0c78 78c0 0c88 44c0 0c90 24c0 0c98 64c0     x..x...D...$...d
1000e98c:	0ca0 14c0 0ca8 54c0 0cb0 34c0 0cb8 74c0     .......T...4...t
1000e99c:	0cc8 4cc0 0cd0 2cc0 0cd8 6cc0 0ce0 1cc0     ...L...,...l....
1000e9ac:	0ce8 5cc0 0cf0 3cc0 0cf8 7cc0 0d08 42c0     ...\...<...|...B
1000e9bc:	0d10 22c0 0d18 62c0 0d20 12c0 0d28 52c0     ..."...b ...(..R
1000e9cc:	0d30 32c0 0d38 72c0 0d48 4ac0 0d50 2ac0     0..28..rH..JP..*
1000e9dc:	0d58 6ac0 0d60 1ac0 0d68 5ac0 0d70 3ac0     X..j`...h..Zp..:
1000e9ec:	0d78 7ac0 0d88 46c0 0d90 26c0 0d98 66c0     x..z...F...&...f
1000e9fc:	0da0 16c0 0da8 56c0 0db0 36c0 0db8 76c0     .......V...6...v
1000ea0c:	0dc0 0ec0 0dc8 4ec0 0dd0 2ec0 0dd8 6ec0     .......N.......n
1000ea1c:	0de0 1ec0 0de8 5ec0 0df0 3ec0 0df8 7ec0     .......^...>...~
1000ea2c:	0e08 41c0 0e10 21c0 0e18 61c0 0e20 11c0     ...A...!...a ...
1000ea3c:	0e28 51c0 0e30 31c0 0e38 71c0 0e48 49c0     (..Q0..18..qH..I
1000ea4c:	0e50 29c0 0e58 69c0 0e60 19c0 0e68 59c0     P..)X..i`...h..Y
1000ea5c:	0e70 39c0 0e78 79c0 0e88 45c0 0e90 25c0     p..9x..y...E...%
1000ea6c:	0e98 65c0 0ea0 15c0 0ea8 55c0 0eb0 35c0     ...e.......U...5
1000ea7c:	0eb8 75c0 0ec8 4dc0 0ed0 2dc0 0ed8 6dc0     ...u...M...-...m
1000ea8c:	0ee0 1dc0 0ee8 5dc0 0ef0 3dc0 0ef8 7dc0     .......]...=...}
1000ea9c:	0f08 43c0 0f10 23c0 0f18 63c0 0f20 13c0     ...C...#...c ...
1000eaac:	0f28 53c0 0f30 33c0 0f38 73c0 0f48 4bc0     (..S0..38..sH..K
1000eabc:	0f50 2bc0 0f58 6bc0 0f60 1bc0 0f68 5bc0     P..+X..k`...h..[
1000eacc:	0f70 3bc0 0f78 7bc0 0f88 47c0 0f90 27c0     p..;x..{...G...'
1000eadc:	0f98 67c0 0fa0 17c0 0fa8 57c0 0fb0 37c0     ...g.......W...7
1000eaec:	0fb8 77c0 0fc8 4fc0 0fd0 2fc0 0fd8 6fc0     ...w...O.../...o
1000eafc:	0fe0 1fc0 0fe8 5fc0 0ff0 3fc0 0ff8 7fc0     ......._...?....
1000eb0c:	1008 4020 1010 2020 1018 6020 1028 5020     .. @..  .. `(. P
1000eb1c:	1030 3020 1038 7020 1048 4820 1050 2820     0. 08. pH. HP. (
1000eb2c:	1058 6820 1060 1820 1068 5820 1070 3820     X. h`. .h. Xp. 8
1000eb3c:	1078 7820 1088 4420 1090 2420 1098 6420     x. x.. D.. $.. d
1000eb4c:	10a0 1420 10a8 5420 10b0 3420 10b8 7420     .. ... T.. 4.. t
1000eb5c:	10c8 4c20 10d0 2c20 10d8 6c20 10e0 1c20     .. L.. ,.. l.. .
1000eb6c:	10e8 5c20 10f0 3c20 10f8 7c20 1108 4220     .. \.. <.. |.. B
1000eb7c:	1110 2220 1118 6220 1120 1220 1128 5220     .. ".. b . .(. R
1000eb8c:	1130 3220 1138 7220 1148 4a20 1150 2a20     0. 28. rH. JP. *
1000eb9c:	1158 6a20 1160 1a20 1168 5a20 1170 3a20     X. j`. .h. Zp. :
1000ebac:	1178 7a20 1188 4620 1190 2620 1198 6620     x. z.. F.. &.. f
1000ebbc:	11a0 1620 11a8 5620 11b0 3620 11b8 7620     .. ... V.. 6.. v
1000ebcc:	11c8 4e20 11d0 2e20 11d8 6e20 11e0 1e20     .. N.. ... n.. .
1000ebdc:	11e8 5e20 11f0 3e20 11f8 7e20 1208 4120     .. ^.. >.. ~.. A
1000ebec:	1210 2120 1218 6120 1228 5120 1230 3120     .. !.. a(. Q0. 1
1000ebfc:	1238 7120 1248 4920 1250 2920 1258 6920     8. qH. IP. )X. i
1000ec0c:	1260 1920 1268 5920 1270 3920 1278 7920     `. .h. Yp. 9x. y
1000ec1c:	1288 4520 1290 2520 1298 6520 12a0 1520     .. E.. %.. e.. .
1000ec2c:	12a8 5520 12b0 3520 12b8 7520 12c8 4d20     .. U.. 5.. u.. M
1000ec3c:	12d0 2d20 12d8 6d20 12e0 1d20 12e8 5d20     .. -.. m.. ... ]
1000ec4c:	12f0 3d20 12f8 7d20 1308 4320 1310 2320     .. =.. }.. C.. #
1000ec5c:	1318 6320 1328 5320 1330 3320 1338 7320     .. c(. S0. 38. s
1000ec6c:	1348 4b20 1350 2b20 1358 6b20 1360 1b20     H. KP. +X. k`. .
1000ec7c:	1368 5b20 1370 3b20 1378 7b20 1388 4720     h. [p. ;x. {.. G
1000ec8c:	1390 2720 1398 6720 13a0 1720 13a8 5720     .. '.. g.. ... W
1000ec9c:	13b0 3720 13b8 7720 13c8 4f20 13d0 2f20     .. 7.. w.. O.. /
1000ecac:	13d8 6f20 13e0 1f20 13e8 5f20 13f0 3f20     .. o.. ... _.. ?
1000ecbc:	13f8 7f20 1408 40a0 1410 20a0 1418 60a0     .. ....@... ...`
1000eccc:	1428 50a0 1430 30a0 1438 70a0 1448 48a0     (..P0..08..pH..H
1000ecdc:	1450 28a0 1458 68a0 1460 18a0 1468 58a0     P..(X..h`...h..X
1000ecec:	1470 38a0 1478 78a0 1488 44a0 1490 24a0     p..8x..x...D...$
1000ecfc:	1498 64a0 14a8 54a0 14b0 34a0 14b8 74a0     ...d...T...4...t
1000ed0c:	14c8 4ca0 14d0 2ca0 14d8 6ca0 14e0 1ca0     ...L...,...l....
1000ed1c:	14e8 5ca0 14f0 3ca0 14f8 7ca0 1508 42a0     ...\...<...|...B
1000ed2c:	1510 22a0 1518 62a0 1528 52a0 1530 32a0     ..."...b(..R0..2
1000ed3c:	1538 72a0 1548 4aa0 1550 2aa0 1558 6aa0     8..rH..JP..*X..j
1000ed4c:	1560 1aa0 1568 5aa0 1570 3aa0 1578 7aa0     `...h..Zp..:x..z
1000ed5c:	1588 46a0 1590 26a0 1598 66a0 15a0 16a0     ...F...&...f....
1000ed6c:	15a8 56a0 15b0 36a0 15b8 76a0 15c8 4ea0     ...V...6...v...N
1000ed7c:	15d0 2ea0 15d8 6ea0 15e0 1ea0 15e8 5ea0     .......n.......^
1000ed8c:	15f0 3ea0 15f8 7ea0 1608 41a0 1610 21a0     ...>...~...A...!
1000ed9c:	1618 61a0 1628 51a0 1630 31a0 1638 71a0     ...a(..Q0..18..q
1000edac:	1648 49a0 1650 29a0 1658 69a0 1660 19a0     H..IP..)X..i`...
1000edbc:	1668 59a0 1670 39a0 1678 79a0 1688 45a0     h..Yp..9x..y...E
1000edcc:	1690 25a0 1698 65a0 16a8 55a0 16b0 35a0     ...%...e...U...5
1000eddc:	16b8 75a0 16c8 4da0 16d0 2da0 16d8 6da0     ...u...M...-...m
1000edec:	16e0 1da0 16e8 5da0 16f0 3da0 16f8 7da0     .......]...=...}
1000edfc:	1708 43a0 1710 23a0 1718 63a0 1728 53a0     ...C...#...c(..S
1000ee0c:	1730 33a0 1738 73a0 1748 4ba0 1750 2ba0     0..38..sH..KP..+
1000ee1c:	1758 6ba0 1760 1ba0 1768 5ba0 1770 3ba0     X..k`...h..[p..;
1000ee2c:	1778 7ba0 1788 47a0 1790 27a0 1798 67a0     x..{...G...'...g
1000ee3c:	17a8 57a0 17b0 37a0 17b8 77a0 17c8 4fa0     ...W...7...w...O
1000ee4c:	17d0 2fa0 17d8 6fa0 17e0 1fa0 17e8 5fa0     .../...o......._
1000ee5c:	17f0 3fa0 17f8 7fa0 1808 4060 1810 2060     ...?......`@..` 
1000ee6c:	1818 6060 1828 5060 1830 3060 1838 7060     ..``(.`P0.`08.`p
1000ee7c:	1848 4860 1850 2860 1858 6860 1868 5860     H.`HP.`(X.`hh.`X
1000ee8c:	1870 3860 1878 7860 1888 4460 1890 2460     p.`8x.`x..`D..`$
1000ee9c:	1898 6460 18a8 5460 18b0 3460 18b8 7460     ..`d..`T..`4..`t
1000eeac:	18c8 4c60 18d0 2c60 18d8 6c60 18e0 1c60     ..`L..`,..`l..`.
1000eebc:	18e8 5c60 18f0 3c60 18f8 7c60 1908 4260     ..`\..`<..`|..`B
1000eecc:	1910 2260 1918 6260 1928 5260 1930 3260     ..`"..`b(.`R0.`2
1000eedc:	1938 7260 1948 4a60 1950 2a60 1958 6a60     8.`rH.`JP.`*X.`j
1000eeec:	1960 1a60 1968 5a60 1970 3a60 1978 7a60     `.`.h.`Zp.`:x.`z
1000eefc:	1988 4660 1990 2660 1998 6660 19a8 5660     ..`F..`&..`f..`V
1000ef0c:	19b0 3660 19b8 7660 19c8 4e60 19d0 2e60     ..`6..`v..`N..`.
1000ef1c:	19d8 6e60 19e0 1e60 19e8 5e60 19f0 3e60     ..`n..`...`^..`>
1000ef2c:	19f8 7e60 1a08 4160 1a10 2160 1a18 6160     ..`~..`A..`!..`a
1000ef3c:	1a28 5160 1a30 3160 1a38 7160 1a48 4960     (.`Q0.`18.`qH.`I
1000ef4c:	1a50 2960 1a58 6960 1a68 5960 1a70 3960     P.`)X.`ih.`Yp.`9
1000ef5c:	1a78 7960 1a88 4560 1a90 2560 1a98 6560     x.`y..`E..`%..`e
1000ef6c:	1aa8 5560 1ab0 3560 1ab8 7560 1ac8 4d60     ..`U..`5..`u..`M
1000ef7c:	1ad0 2d60 1ad8 6d60 1ae0 1d60 1ae8 5d60     ..`-..`m..`...`]
1000ef8c:	1af0 3d60 1af8 7d60 1b08 4360 1b10 2360     ..`=..`}..`C..`#
1000ef9c:	1b18 6360 1b28 5360 1b30 3360 1b38 7360     ..`c(.`S0.`38.`s
1000efac:	1b48 4b60 1b50 2b60 1b58 6b60 1b68 5b60     H.`KP.`+X.`kh.`[
1000efbc:	1b70 3b60 1b78 7b60 1b88 4760 1b90 2760     p.`;x.`{..`G..`'
1000efcc:	1b98 6760 1ba8 5760 1bb0 3760 1bb8 7760     ..`g..`W..`7..`w
1000efdc:	1bc8 4f60 1bd0 2f60 1bd8 6f60 1be0 1f60     ..`O..`/..`o..`.
1000efec:	1be8 5f60 1bf0 3f60 1bf8 7f60 1c08 40e0     ..`_..`?..`....@
1000effc:	1c10 20e0 1c18 60e0 1c28 50e0 1c30 30e0     ... ...`(..P0..0
1000f00c:	1c38 70e0 1c48 48e0 1c50 28e0 1c58 68e0     8..pH..HP..(X..h
1000f01c:	1c68 58e0 1c70 38e0 1c78 78e0 1c88 44e0     h..Xp..8x..x...D
1000f02c:	1c90 24e0 1c98 64e0 1ca8 54e0 1cb0 34e0     ...$...d...T...4
1000f03c:	1cb8 74e0 1cc8 4ce0 1cd0 2ce0 1cd8 6ce0     ...t...L...,...l
1000f04c:	1ce8 5ce0 1cf0 3ce0 1cf8 7ce0 1d08 42e0     ...\...<...|...B
1000f05c:	1d10 22e0 1d18 62e0 1d28 52e0 1d30 32e0     ..."...b(..R0..2
1000f06c:	1d38 72e0 1d48 4ae0 1d50 2ae0 1d58 6ae0     8..rH..JP..*X..j
1000f07c:	1d68 5ae0 1d70 3ae0 1d78 7ae0 1d88 46e0     h..Zp..:x..z...F
1000f08c:	1d90 26e0 1d98 66e0 1da8 56e0 1db0 36e0     ...&...f...V...6
1000f09c:	1db8 76e0 1dc8 4ee0 1dd0 2ee0 1dd8 6ee0     ...v...N.......n
1000f0ac:	1de0 1ee0 1de8 5ee0 1df0 3ee0 1df8 7ee0     .......^...>...~
1000f0bc:	1e08 41e0 1e10 21e0 1e18 61e0 1e28 51e0     ...A...!...a(..Q
1000f0cc:	1e30 31e0 1e38 71e0 1e48 49e0 1e50 29e0     0..18..qH..IP..)
1000f0dc:	1e58 69e0 1e68 59e0 1e70 39e0 1e78 79e0     X..ih..Yp..9x..y
1000f0ec:	1e88 45e0 1e90 25e0 1e98 65e0 1ea8 55e0     ...E...%...e...U
1000f0fc:	1eb0 35e0 1eb8 75e0 1ec8 4de0 1ed0 2de0     ...5...u...M...-
1000f10c:	1ed8 6de0 1ee8 5de0 1ef0 3de0 1ef8 7de0     ...m...]...=...}
1000f11c:	1f08 43e0 1f10 23e0 1f18 63e0 1f28 53e0     ...C...#...c(..S
1000f12c:	1f30 33e0 1f38 73e0 1f48 4be0 1f50 2be0     0..38..sH..KP..+
1000f13c:	1f58 6be0 1f68 5be0 1f70 3be0 1f78 7be0     X..kh..[p..;x..{
1000f14c:	1f88 47e0 1f90 27e0 1f98 67e0 1fa8 57e0     ...G...'...g...W
1000f15c:	1fb0 37e0 1fb8 77e0 1fc8 4fe0 1fd0 2fe0     ...7...w...O.../
1000f16c:	1fd8 6fe0 1fe8 5fe0 1ff0 3fe0 1ff8 7fe0     ...o..._...?....
1000f17c:	2008 4010 2018 6010 2028 5010 2030 3010     . .@. .`( .P0 .0
1000f18c:	2038 7010 2048 4810 2050 2810 2058 6810     8 .pH .HP .(X .h
1000f19c:	2068 5810 2070 3810 2078 7810 2088 4410     h .Xp .8x .x. .D
1000f1ac:	2090 2410 2098 6410 20a8 5410 20b0 3410     . .$. .d. .T. .4
1000f1bc:	20b8 7410 20c8 4c10 20d0 2c10 20d8 6c10     . .t. .L. .,. .l
1000f1cc:	20e8 5c10 20f0 3c10 20f8 7c10 2108 4210     . .\. .<. .|.!.B
1000f1dc:	2110 2210 2118 6210 2128 5210 2130 3210     .!.".!.b(!.R0!.2
1000f1ec:	2138 7210 2148 4a10 2150 2a10 2158 6a10     8!.rH!.JP!.*X!.j
1000f1fc:	2168 5a10 2170 3a10 2178 7a10 2188 4610     h!.Zp!.:x!.z.!.F
1000f20c:	2190 2610 2198 6610 21a8 5610 21b0 3610     .!.&.!.f.!.V.!.6
1000f21c:	21b8 7610 21c8 4e10 21d0 2e10 21d8 6e10     .!.v.!.N.!...!.n
1000f22c:	21e8 5e10 21f0 3e10 21f8 7e10 2208 4110     .!.^.!.>.!.~.".A
1000f23c:	2218 6110 2228 5110 2230 3110 2238 7110     .".a(".Q0".18".q
1000f24c:	2248 4910 2250 2910 2258 6910 2268 5910     H".IP".)X".ih".Y
1000f25c:	2270 3910 2278 7910 2288 4510 2290 2510     p".9x".y.".E.".%
1000f26c:	2298 6510 22a8 5510 22b0 3510 22b8 7510     .".e.".U.".5.".u
1000f27c:	22c8 4d10 22d0 2d10 22d8 6d10 22e8 5d10     .".M.".-.".m.".]
1000f28c:	22f0 3d10 22f8 7d10 2308 4310 2318 6310     .".=.".}.#.C.#.c
1000f29c:	2328 5310 2330 3310 2338 7310 2348 4b10     (#.S0#.38#.sH#.K
1000f2ac:	2350 2b10 2358 6b10 2368 5b10 2370 3b10     P#.+X#.kh#.[p#.;
1000f2bc:	2378 7b10 2388 4710 2390 2710 2398 6710     x#.{.#.G.#.'.#.g
1000f2cc:	23a8 5710 23b0 3710 23b8 7710 23c8 4f10     .#.W.#.7.#.w.#.O
1000f2dc:	23d0 2f10 23d8 6f10 23e8 5f10 23f0 3f10     .#./.#.o.#._.#.?
1000f2ec:	23f8 7f10 2408 4090 2418 6090 2428 5090     .#...$.@.$.`($.P
1000f2fc:	2430 3090 2438 7090 2448 4890 2450 2890     0$.08$.pH$.HP$.(
1000f30c:	2458 6890 2468 5890 2470 3890 2478 7890     X$.hh$.Xp$.8x$.x
1000f31c:	2488 4490 2498 6490 24a8 5490 24b0 3490     .$.D.$.d.$.T.$.4
1000f32c:	24b8 7490 24c8 4c90 24d0 2c90 24d8 6c90     .$.t.$.L.$.,.$.l
1000f33c:	24e8 5c90 24f0 3c90 24f8 7c90 2508 4290     .$.\.$.<.$.|.%.B
1000f34c:	2518 6290 2528 5290 2530 3290 2538 7290     .%.b(%.R0%.28%.r
1000f35c:	2548 4a90 2550 2a90 2558 6a90 2568 5a90     H%.JP%.*X%.jh%.Z
1000f36c:	2570 3a90 2578 7a90 2588 4690 2590 2690     p%.:x%.z.%.F.%.&
1000f37c:	2598 6690 25a8 5690 25b0 3690 25b8 7690     .%.f.%.V.%.6.%.v
1000f38c:	25c8 4e90 25d0 2e90 25d8 6e90 25e8 5e90     .%.N.%...%.n.%.^
1000f39c:	25f0 3e90 25f8 7e90 2608 4190 2618 6190     .%.>.%.~.&.A.&.a
1000f3ac:	2628 5190 2630 3190 2638 7190 2648 4990     (&.Q0&.18&.qH&.I
1000f3bc:	2650 2990 2658 6990 2668 5990 2670 3990     P&.)X&.ih&.Yp&.9
1000f3cc:	2678 7990 2688 4590 2698 6590 26a8 5590     x&.y.&.E.&.e.&.U
1000f3dc:	26b0 3590 26b8 7590 26c8 4d90 26d0 2d90     .&.5.&.u.&.M.&.-
1000f3ec:	26d8 6d90 26e8 5d90 26f0 3d90 26f8 7d90     .&.m.&.].&.=.&.}
1000f3fc:	2708 4390 2718 6390 2728 5390 2730 3390     .'.C.'.c('.S0'.3
1000f40c:	2738 7390 2748 4b90 2750 2b90 2758 6b90     8'.sH'.KP'.+X'.k
1000f41c:	2768 5b90 2770 3b90 2778 7b90 2788 4790     h'.[p'.;x'.{.'.G
1000f42c:	2798 6790 27a8 5790 27b0 3790 27b8 7790     .'.g.'.W.'.7.'.w
1000f43c:	27c8 4f90 27d0 2f90 27d8 6f90 27e8 5f90     .'.O.'./.'.o.'._
1000f44c:	27f0 3f90 27f8 7f90 2808 4050 2818 6050     .'.?.'...(P@.(P`
1000f45c:	2828 5050 2830 3050 2838 7050 2848 4850     ((PP0(P08(PpH(PH
1000f46c:	2858 6850 2868 5850 2870 3850 2878 7850     X(Phh(PXp(P8x(Px
1000f47c:	2888 4450 2898 6450 28a8 5450 28b0 3450     .(PD.(Pd.(PT.(P4
1000f48c:	28b8 7450 28c8 4c50 28d0 2c50 28d8 6c50     .(Pt.(PL.(P,.(Pl
1000f49c:	28e8 5c50 28f0 3c50 28f8 7c50 2908 4250     .(P\.(P<.(P|.)PB
1000f4ac:	2918 6250 2928 5250 2930 3250 2938 7250     .)Pb()PR0)P28)Pr
1000f4bc:	2948 4a50 2950 2a50 2958 6a50 2968 5a50     H)PJP)P*X)Pjh)PZ
1000f4cc:	2970 3a50 2978 7a50 2988 4650 2998 6650     p)P:x)Pz.)PF.)Pf
1000f4dc:	29a8 5650 29b0 3650 29b8 7650 29c8 4e50     .)PV.)P6.)Pv.)PN
1000f4ec:	29d0 2e50 29d8 6e50 29e8 5e50 29f0 3e50     .)P..)Pn.)P^.)P>
1000f4fc:	29f8 7e50 2a08 4150 2a18 6150 2a28 5150     .)P~.*PA.*Pa(*PQ
1000f50c:	2a30 3150 2a38 7150 2a48 4950 2a58 6950     0*P18*PqH*PIX*Pi
1000f51c:	2a68 5950 2a70 3950 2a78 7950 2a88 4550     h*PYp*P9x*Py.*PE
1000f52c:	2a98 6550 2aa8 5550 2ab0 3550 2ab8 7550     .*Pe.*PU.*P5.*Pu
1000f53c:	2ac8 4d50 2ad0 2d50 2ad8 6d50 2ae8 5d50     .*PM.*P-.*Pm.*P]
1000f54c:	2af0 3d50 2af8 7d50 2b08 4350 2b18 6350     .*P=.*P}.+PC.+Pc
1000f55c:	2b28 5350 2b30 3350 2b38 7350 2b48 4b50     (+PS0+P38+PsH+PK
1000f56c:	2b58 6b50 2b68 5b50 2b70 3b50 2b78 7b50     X+Pkh+P[p+P;x+P{
1000f57c:	2b88 4750 2b98 6750 2ba8 5750 2bb0 3750     .+PG.+Pg.+PW.+P7
1000f58c:	2bb8 7750 2bc8 4f50 2bd0 2f50 2bd8 6f50     .+Pw.+PO.+P/.+Po
1000f59c:	2be8 5f50 2bf0 3f50 2bf8 7f50 2c08 40d0     .+P_.+P?.+P..,.@
1000f5ac:	2c18 60d0 2c28 50d0 2c30 30d0 2c38 70d0     .,.`(,.P0,.08,.p
1000f5bc:	2c48 48d0 2c58 68d0 2c68 58d0 2c70 38d0     H,.HX,.hh,.Xp,.8
1000f5cc:	2c78 78d0 2c88 44d0 2c98 64d0 2ca8 54d0     x,.x.,.D.,.d.,.T
1000f5dc:	2cb0 34d0 2cb8 74d0 2cc8 4cd0 2cd8 6cd0     .,.4.,.t.,.L.,.l
1000f5ec:	2ce8 5cd0 2cf0 3cd0 2cf8 7cd0 2d08 42d0     .,.\.,.<.,.|.-.B
1000f5fc:	2d18 62d0 2d28 52d0 2d30 32d0 2d38 72d0     .-.b(-.R0-.28-.r
1000f60c:	2d48 4ad0 2d58 6ad0 2d68 5ad0 2d70 3ad0     H-.JX-.jh-.Zp-.:
1000f61c:	2d78 7ad0 2d88 46d0 2d98 66d0 2da8 56d0     x-.z.-.F.-.f.-.V
1000f62c:	2db0 36d0 2db8 76d0 2dc8 4ed0 2dd0 2ed0     .-.6.-.v.-.N.-..
1000f63c:	2dd8 6ed0 2de8 5ed0 2df0 3ed0 2df8 7ed0     .-.n.-.^.-.>.-.~
1000f64c:	2e08 41d0 2e18 61d0 2e28 51d0 2e30 31d0     ...A...a(..Q0..1
1000f65c:	2e38 71d0 2e48 49d0 2e58 69d0 2e68 59d0     8..qH..IX..ih..Y
1000f66c:	2e70 39d0 2e78 79d0 2e88 45d0 2e98 65d0     p..9x..y...E...e
1000f67c:	2ea8 55d0 2eb0 35d0 2eb8 75d0 2ec8 4dd0     ...U...5...u...M
1000f68c:	2ed8 6dd0 2ee8 5dd0 2ef0 3dd0 2ef8 7dd0     ...m...]...=...}
1000f69c:	2f08 43d0 2f18 63d0 2f28 53d0 2f30 33d0     ./.C./.c(/.S0/.3
1000f6ac:	2f38 73d0 2f48 4bd0 2f58 6bd0 2f68 5bd0     8/.sH/.KX/.kh/.[
1000f6bc:	2f70 3bd0 2f78 7bd0 2f88 47d0 2f98 67d0     p/.;x/.{./.G./.g
1000f6cc:	2fa8 57d0 2fb0 37d0 2fb8 77d0 2fc8 4fd0     ./.W./.7./.w./.O
1000f6dc:	2fd8 6fd0 2fe8 5fd0 2ff0 3fd0 2ff8 7fd0     ./.o./._./.?./..
1000f6ec:	3008 4030 3018 6030 3028 5030 3038 7030     .00@.00`(00P800p
1000f6fc:	3048 4830 3058 6830 3068 5830 3070 3830     H00HX00hh00Xp008
1000f70c:	3078 7830 3088 4430 3098 6430 30a8 5430     x00x.00D.00d.00T
1000f71c:	30b0 3430 30b8 7430 30c8 4c30 30d8 6c30     .004.00t.00L.00l
1000f72c:	30e8 5c30 30f0 3c30 30f8 7c30 3108 4230     .00\.00<.00|.10B
1000f73c:	3118 6230 3128 5230 3130 3230 3138 7230     .10b(10R0102810r
1000f74c:	3148 4a30 3158 6a30 3168 5a30 3170 3a30     H10JX10jh10Zp10:
1000f75c:	3178 7a30 3188 4630 3198 6630 31a8 5630     x10z.10F.10f.10V
1000f76c:	31b0 3630 31b8 7630 31c8 4e30 31d8 6e30     .106.10v.10N.10n
1000f77c:	31e8 5e30 31f0 3e30 31f8 7e30 3208 4130     .10^.10>.10~.20A
1000f78c:	3218 6130 3228 5130 3238 7130 3248 4930     .20a(20Q820qH20I
1000f79c:	3258 6930 3268 5930 3270 3930 3278 7930     X20ih20Yp209x20y
1000f7ac:	3288 4530 3298 6530 32a8 5530 32b0 3530     .20E.20e.20U.205
1000f7bc:	32b8 7530 32c8 4d30 32d8 6d30 32e8 5d30     .20u.20M.20m.20]
1000f7cc:	32f0 3d30 32f8 7d30 3308 4330 3318 6330     .20=.20}.30C.30c
1000f7dc:	3328 5330 3338 7330 3348 4b30 3358 6b30     (30S830sH30KX30k
1000f7ec:	3368 5b30 3370 3b30 3378 7b30 3388 4730     h30[p30;x30{.30G
1000f7fc:	3398 6730 33a8 5730 33b0 3730 33b8 7730     .30g.30W.307.30w
1000f80c:	33c8 4f30 33d8 6f30 33e8 5f30 33f0 3f30     .30O.30o.30_.30?
1000f81c:	33f8 7f30 3408 40b0 3418 60b0 3428 50b0     .30..4.@.4.`(4.P
1000f82c:	3438 70b0 3448 48b0 3458 68b0 3468 58b0     84.pH4.HX4.hh4.X
1000f83c:	3470 38b0 3478 78b0 3488 44b0 3498 64b0     p4.8x4.x.4.D.4.d
1000f84c:	34a8 54b0 34b8 74b0 34c8 4cb0 34d8 6cb0     .4.T.4.t.4.L.4.l
1000f85c:	34e8 5cb0 34f0 3cb0 34f8 7cb0 3508 42b0     .4.\.4.<.4.|.5.B
1000f86c:	3518 62b0 3528 52b0 3538 72b0 3548 4ab0     .5.b(5.R85.rH5.J
1000f87c:	3558 6ab0 3568 5ab0 3570 3ab0 3578 7ab0     X5.jh5.Zp5.:x5.z
1000f88c:	3588 46b0 3598 66b0 35a8 56b0 35b0 36b0     .5.F.5.f.5.V.5.6
1000f89c:	35b8 76b0 35c8 4eb0 35d8 6eb0 35e8 5eb0     .5.v.5.N.5.n.5.^
1000f8ac:	35f0 3eb0 35f8 7eb0 3608 41b0 3618 61b0     .5.>.5.~.6.A.6.a
1000f8bc:	3628 51b0 3638 71b0 3648 49b0 3658 69b0     (6.Q86.qH6.IX6.i
1000f8cc:	3668 59b0 3670 39b0 3678 79b0 3688 45b0     h6.Yp6.9x6.y.6.E
1000f8dc:	3698 65b0 36a8 55b0 36b8 75b0 36c8 4db0     .6.e.6.U.6.u.6.M
1000f8ec:	36d8 6db0 36e8 5db0 36f0 3db0 36f8 7db0     .6.m.6.].6.=.6.}
1000f8fc:	3708 43b0 3718 63b0 3728 53b0 3738 73b0     .7.C.7.c(7.S87.s
1000f90c:	3748 4bb0 3758 6bb0 3768 5bb0 3770 3bb0     H7.KX7.kh7.[p7.;
1000f91c:	3778 7bb0 3788 47b0 3798 67b0 37a8 57b0     x7.{.7.G.7.g.7.W
1000f92c:	37b8 77b0 37c8 4fb0 37d8 6fb0 37e8 5fb0     .7.w.7.O.7.o.7._
1000f93c:	37f0 3fb0 37f8 7fb0 3808 4070 3818 6070     .7.?.7...8p@.8p`
1000f94c:	3828 5070 3838 7070 3848 4870 3858 6870     (8pP88ppH8pHX8ph
1000f95c:	3868 5870 3878 7870 3888 4470 3898 6470     h8pXx8px.8pD.8pd
1000f96c:	38a8 5470 38b8 7470 38c8 4c70 38d8 6c70     .8pT.8pt.8pL.8pl
1000f97c:	38e8 5c70 38f0 3c70 38f8 7c70 3908 4270     .8p\.8p<.8p|.9pB
1000f98c:	3918 6270 3928 5270 3938 7270 3948 4a70     .9pb(9pR89prH9pJ
1000f99c:	3958 6a70 3968 5a70 3970 3a70 3978 7a70     X9pjh9pZp9p:x9pz
1000f9ac:	3988 4670 3998 6670 39a8 5670 39b8 7670     .9pF.9pf.9pV.9pv
1000f9bc:	39c8 4e70 39d8 6e70 39e8 5e70 39f0 3e70     .9pN.9pn.9p^.9p>
1000f9cc:	39f8 7e70 3a08 4170 3a18 6170 3a28 5170     .9p~.:pA.:pa(:pQ
1000f9dc:	3a38 7170 3a48 4970 3a58 6970 3a68 5970     8:pqH:pIX:pih:pY
1000f9ec:	3a78 7970 3a88 4570 3a98 6570 3aa8 5570     x:py.:pE.:pe.:pU
1000f9fc:	3ab8 7570 3ac8 4d70 3ad8 6d70 3ae8 5d70     .:pu.:pM.:pm.:p]
1000fa0c:	3af0 3d70 3af8 7d70 3b08 4370 3b18 6370     .:p=.:p}.;pC.;pc
1000fa1c:	3b28 5370 3b38 7370 3b48 4b70 3b58 6b70     (;pS8;psH;pKX;pk
1000fa2c:	3b68 5b70 3b78 7b70 3b88 4770 3b98 6770     h;p[x;p{.;pG.;pg
1000fa3c:	3ba8 5770 3bb8 7770 3bc8 4f70 3bd8 6f70     .;pW.;pw.;pO.;po
1000fa4c:	3be8 5f70 3bf0 3f70 3bf8 7f70 3c08 40f0     .;p_.;p?.;p..<.@
1000fa5c:	3c18 60f0 3c28 50f0 3c38 70f0 3c48 48f0     .<.`(<.P8<.pH<.H
1000fa6c:	3c58 68f0 3c68 58f0 3c78 78f0 3c88 44f0     X<.hh<.Xx<.x.<.D
1000fa7c:	3c98 64f0 3ca8 54f0 3cb8 74f0 3cc8 4cf0     .<.d.<.T.<.t.<.L
1000fa8c:	3cd8 6cf0 3ce8 5cf0 3cf8 7cf0 3d08 42f0     .<.l.<.\.<.|.=.B
1000fa9c:	3d18 62f0 3d28 52f0 3d38 72f0 3d48 4af0     .=.b(=.R8=.rH=.J
1000faac:	3d58 6af0 3d68 5af0 3d78 7af0 3d88 46f0     X=.jh=.Zx=.z.=.F
1000fabc:	3d98 66f0 3da8 56f0 3db8 76f0 3dc8 4ef0     .=.f.=.V.=.v.=.N
1000facc:	3dd8 6ef0 3de8 5ef0 3df0 3ef0 3df8 7ef0     .=.n.=.^.=.>.=.~
1000fadc:	3e08 41f0 3e18 61f0 3e28 51f0 3e38 71f0     .>.A.>.a(>.Q8>.q
1000faec:	3e48 49f0 3e58 69f0 3e68 59f0 3e78 79f0     H>.IX>.ih>.Yx>.y
1000fafc:	3e88 45f0 3e98 65f0 3ea8 55f0 3eb8 75f0     .>.E.>.e.>.U.>.u
1000fb0c:	3ec8 4df0 3ed8 6df0 3ee8 5df0 3ef8 7df0     .>.M.>.m.>.].>.}
1000fb1c:	3f08 43f0 3f18 63f0 3f28 53f0 3f38 73f0     .?.C.?.c(?.S8?.s
1000fb2c:	3f48 4bf0 3f58 6bf0 3f68 5bf0 3f78 7bf0     H?.KX?.kh?.[x?.{
1000fb3c:	3f88 47f0 3f98 67f0 3fa8 57f0 3fb8 77f0     .?.G.?.g.?.W.?.w
1000fb4c:	3fc8 4ff0 3fd8 6ff0 3fe8 5ff0 3ff8 7ff0     .?.O.?.o.?._.?..
1000fb5c:	4018 6008 4028 5008 4038 7008 4048 4808     .@.`(@.P8@.pH@.H
1000fb6c:	4058 6808 4068 5808 4078 7808 4088 4408     X@.hh@.Xx@.x.@.D
1000fb7c:	4098 6408 40a8 5408 40b8 7408 40c8 4c08     .@.d.@.T.@.t.@.L
1000fb8c:	40d8 6c08 40e8 5c08 40f8 7c08 4108 4208     .@.l.@.\.@.|.A.B
1000fb9c:	4118 6208 4128 5208 4138 7208 4148 4a08     .A.b(A.R8A.rHA.J
1000fbac:	4158 6a08 4168 5a08 4178 7a08 4188 4608     XA.jhA.ZxA.z.A.F
1000fbbc:	4198 6608 41a8 5608 41b8 7608 41c8 4e08     .A.f.A.V.A.v.A.N
1000fbcc:	41d8 6e08 41e8 5e08 41f8 7e08 4218 6108     .A.n.A.^.A.~.B.a
1000fbdc:	4228 5108 4238 7108 4248 4908 4258 6908     (B.Q8B.qHB.IXB.i
1000fbec:	4268 5908 4278 7908 4288 4508 4298 6508     hB.YxB.y.B.E.B.e
1000fbfc:	42a8 5508 42b8 7508 42c8 4d08 42d8 6d08     .B.U.B.u.B.M.B.m
1000fc0c:	42e8 5d08 42f8 7d08 4318 6308 4328 5308     .B.].B.}.C.c(C.S
1000fc1c:	4338 7308 4348 4b08 4358 6b08 4368 5b08     8C.sHC.KXC.khC.[
1000fc2c:	4378 7b08 4388 4708 4398 6708 43a8 5708     xC.{.C.G.C.g.C.W
1000fc3c:	43b8 7708 43c8 4f08 43d8 6f08 43e8 5f08     .C.w.C.O.C.o.C._
1000fc4c:	43f8 7f08 4418 6088 4428 5088 4438 7088     .C...D.`(D.P8D.p
1000fc5c:	4448 4888 4458 6888 4468 5888 4478 7888     HD.HXD.hhD.XxD.x
1000fc6c:	4498 6488 44a8 5488 44b8 7488 44c8 4c88     .D.d.D.T.D.t.D.L
1000fc7c:	44d8 6c88 44e8 5c88 44f8 7c88 4518 6288     .D.l.D.\.D.|.E.b
1000fc8c:	4528 5288 4538 7288 4548 4a88 4558 6a88     (E.R8E.rHE.JXE.j
1000fc9c:	4568 5a88 4578 7a88 4588 4688 4598 6688     hE.ZxE.z.E.F.E.f
1000fcac:	45a8 5688 45b8 7688 45c8 4e88 45d8 6e88     .E.V.E.v.E.N.E.n
1000fcbc:	45e8 5e88 45f8 7e88 4618 6188 4628 5188     .E.^.E.~.F.a(F.Q
1000fccc:	4638 7188 4648 4988 4658 6988 4668 5988     8F.qHF.IXF.ihF.Y
1000fcdc:	4678 7988 4698 6588 46a8 5588 46b8 7588     xF.y.F.e.F.U.F.u
1000fcec:	46c8 4d88 46d8 6d88 46e8 5d88 46f8 7d88     .F.M.F.m.F.].F.}
1000fcfc:	4718 6388 4728 5388 4738 7388 4748 4b88     .G.c(G.S8G.sHG.K
1000fd0c:	4758 6b88 4768 5b88 4778 7b88 4798 6788     XG.khG.[xG.{.G.g
1000fd1c:	47a8 5788 47b8 7788 47c8 4f88 47d8 6f88     .G.W.G.w.G.O.G.o
1000fd2c:	47e8 5f88 47f8 7f88 4818 6048 4828 5048     .G._.G...HH`(HHP
1000fd3c:	4838 7048 4858 6848 4868 5848 4878 7848     8HHpXHHhhHHXxHHx
1000fd4c:	4898 6448 48a8 5448 48b8 7448 48c8 4c48     .HHd.HHT.HHt.HHL
1000fd5c:	48d8 6c48 48e8 5c48 48f8 7c48 4918 6248     .HHl.HH\.HH|.IHb
1000fd6c:	4928 5248 4938 7248 4948 4a48 4958 6a48     (IHR8IHrHIHJXIHj
1000fd7c:	4968 5a48 4978 7a48 4998 6648 49a8 5648     hIHZxIHz.IHf.IHV
1000fd8c:	49b8 7648 49c8 4e48 49d8 6e48 49e8 5e48     .IHv.IHN.IHn.IH^
1000fd9c:	49f8 7e48 4a18 6148 4a28 5148 4a38 7148     .IH~.JHa(JHQ8JHq
1000fdac:	4a58 6948 4a68 5948 4a78 7948 4a98 6548     XJHihJHYxJHy.JHe
1000fdbc:	4aa8 5548 4ab8 7548 4ac8 4d48 4ad8 6d48     .JHU.JHu.JHM.JHm
1000fdcc:	4ae8 5d48 4af8 7d48 4b18 6348 4b28 5348     .JH].JH}.KHc(KHS
1000fddc:	4b38 7348 4b58 6b48 4b68 5b48 4b78 7b48     8KHsXKHkhKH[xKH{
1000fdec:	4b98 6748 4ba8 5748 4bb8 7748 4bc8 4f48     .KHg.KHW.KHw.KHO
1000fdfc:	4bd8 6f48 4be8 5f48 4bf8 7f48 4c18 60c8     .KHo.KH_.KH..L.`
1000fe0c:	4c28 50c8 4c38 70c8 4c58 68c8 4c68 58c8     (L.P8L.pXL.hhL.X
1000fe1c:	4c78 78c8 4c98 64c8 4ca8 54c8 4cb8 74c8     xL.x.L.d.L.T.L.t
1000fe2c:	4cd8 6cc8 4ce8 5cc8 4cf8 7cc8 4d18 62c8     .L.l.L.\.L.|.M.b
1000fe3c:	4d28 52c8 4d38 72c8 4d58 6ac8 4d68 5ac8     (M.R8M.rXM.jhM.Z
1000fe4c:	4d78 7ac8 4d98 66c8 4da8 56c8 4db8 76c8     xM.z.M.f.M.V.M.v
1000fe5c:	4dc8 4ec8 4dd8 6ec8 4de8 5ec8 4df8 7ec8     .M.N.M.n.M.^.M.~
1000fe6c:	4e18 61c8 4e28 51c8 4e38 71c8 4e58 69c8     .N.a(N.Q8N.qXN.i
1000fe7c:	4e68 59c8 4e78 79c8 4e98 65c8 4ea8 55c8     hN.YxN.y.N.e.N.U
1000fe8c:	4eb8 75c8 4ed8 6dc8 4ee8 5dc8 4ef8 7dc8     .N.u.N.m.N.].N.}
1000fe9c:	4f18 63c8 4f28 53c8 4f38 73c8 4f58 6bc8     .O.c(O.S8O.sXO.k
1000feac:	4f68 5bc8 4f78 7bc8 4f98 67c8 4fa8 57c8     hO.[xO.{.O.g.O.W
1000febc:	4fb8 77c8 4fd8 6fc8 4fe8 5fc8 4ff8 7fc8     .O.w.O.o.O._.O..
1000fecc:	5018 6028 5038 7028 5058 6828 5068 5828     .P(`8P(pXP(hhP(X
1000fedc:	5078 7828 5098 6428 50a8 5428 50b8 7428     xP(x.P(d.P(T.P(t
1000feec:	50d8 6c28 50e8 5c28 50f8 7c28 5118 6228     .P(l.P(\.P(|.Q(b
1000fefc:	5128 5228 5138 7228 5158 6a28 5168 5a28     (Q(R8Q(rXQ(jhQ(Z
1000ff0c:	5178 7a28 5198 6628 51a8 5628 51b8 7628     xQ(z.Q(f.Q(V.Q(v
1000ff1c:	51d8 6e28 51e8 5e28 51f8 7e28 5218 6128     .Q(n.Q(^.Q(~.R(a
1000ff2c:	5238 7128 5258 6928 5268 5928 5278 7928     8R(qXR(ihR(YxR(y
1000ff3c:	5298 6528 52a8 5528 52b8 7528 52d8 6d28     .R(e.R(U.R(u.R(m
1000ff4c:	52e8 5d28 52f8 7d28 5318 6328 5338 7328     .R(].R(}.S(c8S(s
1000ff5c:	5358 6b28 5368 5b28 5378 7b28 5398 6728     XS(khS([xS({.S(g
1000ff6c:	53a8 5728 53b8 7728 53d8 6f28 53e8 5f28     .S(W.S(w.S(o.S(_
1000ff7c:	53f8 7f28 5418 60a8 5438 70a8 5458 68a8     .S(..T.`8T.pXT.h
1000ff8c:	5468 58a8 5478 78a8 5498 64a8 54b8 74a8     hT.XxT.x.T.d.T.t
1000ff9c:	54d8 6ca8 54e8 5ca8 54f8 7ca8 5518 62a8     .T.l.T.\.T.|.U.b
1000ffac:	5538 72a8 5558 6aa8 5568 5aa8 5578 7aa8     8U.rXU.jhU.ZxU.z
1000ffbc:	5598 66a8 55a8 56a8 55b8 76a8 55d8 6ea8     .U.f.U.V.U.v.U.n
1000ffcc:	55e8 5ea8 55f8 7ea8 5618 61a8 5638 71a8     .U.^.U.~.V.a8V.q
1000ffdc:	5658 69a8 5668 59a8 5678 79a8 5698 65a8     XV.ihV.YxV.y.V.e
1000ffec:	56b8 75a8 56d8 6da8 56e8 5da8 56f8 7da8     .V.u.V.m.V.].V.}
1000fffc:	5718 63a8 5738 73a8 5758 6ba8 5768 5ba8     .W.c8W.sXW.khW.[
1001000c:	5778 7ba8 5798 67a8 57b8 77a8 57d8 6fa8     xW.{.W.g.W.w.W.o
1001001c:	57e8 5fa8 57f8 7fa8 5818 6068 5838 7068     .W._.W...Xh`8Xhp
1001002c:	5858 6868 5878 7868 5898 6468 58b8 7468     XXhhxXhx.Xhd.Xht
1001003c:	58d8 6c68 58e8 5c68 58f8 7c68 5918 6268     .Xhl.Xh\.Xh|.Yhb
1001004c:	5938 7268 5958 6a68 5968 5a68 5978 7a68     8YhrXYhjhYhZxYhz
1001005c:	5998 6668 59b8 7668 59d8 6e68 59e8 5e68     .Yhf.Yhv.Yhn.Yh^
1001006c:	59f8 7e68 5a18 6168 5a38 7168 5a58 6968     .Yh~.Zha8ZhqXZhi
1001007c:	5a78 7968 5a98 6568 5ab8 7568 5ad8 6d68     xZhy.Zhe.Zhu.Zhm
1001008c:	5ae8 5d68 5af8 7d68 5b18 6368 5b38 7368     .Zh].Zh}.[hc8[hs
1001009c:	5b58 6b68 5b78 7b68 5b98 6768 5bb8 7768     X[hkx[h{.[hg.[hw
100100ac:	5bd8 6f68 5be8 5f68 5bf8 7f68 5c18 60e8     .[ho.[h_.[h..\.`
100100bc:	5c38 70e8 5c58 68e8 5c78 78e8 5c98 64e8     8\.pX\.hx\.x.\.d
100100cc:	5cb8 74e8 5cd8 6ce8 5cf8 7ce8 5d18 62e8     .\.t.\.l.\.|.].b
100100dc:	5d38 72e8 5d58 6ae8 5d78 7ae8 5d98 66e8     8].rX].jx].z.].f
100100ec:	5db8 76e8 5dd8 6ee8 5de8 5ee8 5df8 7ee8     .].v.].n.].^.].~
100100fc:	5e18 61e8 5e38 71e8 5e58 69e8 5e78 79e8     .^.a8^.qX^.ix^.y
1001010c:	5e98 65e8 5eb8 75e8 5ed8 6de8 5ef8 7de8     .^.e.^.u.^.m.^.}
1001011c:	5f18 63e8 5f38 73e8 5f58 6be8 5f78 7be8     ._.c8_.sX_.kx_.{
1001012c:	5f98 67e8 5fb8 77e8 5fd8 6fe8 5ff8 7fe8     ._.g._.w._.o._..
1001013c:	6038 7018 6058 6818 6078 7818 6098 6418     8`.pX`.hx`.x.`.d
1001014c:	60b8 7418 60d8 6c18 60f8 7c18 6118 6218     .`.t.`.l.`.|.a.b
1001015c:	6138 7218 6158 6a18 6178 7a18 6198 6618     8a.rXa.jxa.z.a.f
1001016c:	61b8 7618 61d8 6e18 61f8 7e18 6238 7118     .a.v.a.n.a.~8b.q
1001017c:	6258 6918 6278 7918 6298 6518 62b8 7518     Xb.ixb.y.b.e.b.u
1001018c:	62d8 6d18 62f8 7d18 6338 7318 6358 6b18     .b.m.b.}8c.sXc.k
1001019c:	6378 7b18 6398 6718 63b8 7718 63d8 6f18     xc.{.c.g.c.w.c.o
100101ac:	63f8 7f18 6438 7098 6458 6898 6478 7898     .c..8d.pXd.hxd.x
100101bc:	64b8 7498 64d8 6c98 64f8 7c98 6538 7298     .d.t.d.l.d.|8e.r
100101cc:	6558 6a98 6578 7a98 6598 6698 65b8 7698     Xe.jxe.z.e.f.e.v
100101dc:	65d8 6e98 65f8 7e98 6638 7198 6658 6998     .e.n.e.~8f.qXf.i
100101ec:	6678 7998 66b8 7598 66d8 6d98 66f8 7d98     xf.y.f.u.f.m.f.}
100101fc:	6738 7398 6758 6b98 6778 7b98 67b8 7798     8g.sXg.kxg.{.g.w
1001020c:	67d8 6f98 67f8 7f98 6838 7058 6878 7858     .g.o.g..8hXpxhXx
1001021c:	68b8 7458 68d8 6c58 68f8 7c58 6938 7258     .hXt.hXl.hX|8iXr
1001022c:	6958 6a58 6978 7a58 69b8 7658 69d8 6e58     XiXjxiXz.iXv.iXn
1001023c:	69f8 7e58 6a38 7158 6a78 7958 6ab8 7558     .iX~8jXqxjXy.jXu
1001024c:	6ad8 6d58 6af8 7d58 6b38 7358 6b78 7b58     .jXm.jX}8kXsxkX{
1001025c:	6bb8 7758 6bd8 6f58 6bf8 7f58 6c38 70d8     .kXw.kXo.kX.8l.p
1001026c:	6c78 78d8 6cb8 74d8 6cf8 7cd8 6d38 72d8     xl.x.l.t.l.|8m.r
1001027c:	6d78 7ad8 6db8 76d8 6dd8 6ed8 6df8 7ed8     xm.z.m.v.m.n.m.~
1001028c:	6e38 71d8 6e78 79d8 6eb8 75d8 6ef8 7dd8     8n.qxn.y.n.u.n.}
1001029c:	6f38 73d8 6f78 7bd8 6fb8 77d8 6ff8 7fd8     8o.sxo.{.o.w.o..
100102ac:	7078 7838 70b8 7438 70f8 7c38 7138 7238     xp8x.p8t.p8|8q8r
100102bc:	7178 7a38 71b8 7638 71f8 7e38 7278 7938     xq8z.q8v.q8~xr8y
100102cc:	72b8 7538 72f8 7d38 7378 7b38 73b8 7738     .r8u.r8}xs8{.s8w
100102dc:	73f8 7f38 7478 78b8 74f8 7cb8 7578 7ab8     .s8.xt.x.t.|xu.z
100102ec:	75b8 76b8 75f8 7eb8 7678 79b8 76f8 7db8     .u.v.u.~xv.y.v.}
100102fc:	7778 7bb8 77f8 7fb8 78f8 7c78 7978 7a78     xw.{.w...xx|xyxz
1001030c:	79f8 7e78 7af8 7d78 7bf8 7f78 7df8 7ef8     .yx~.zx}.{x..}.~

1001031c <armBitRevIndexTable_fixed_512>:
1001031c:	0008 0800 0010 0400 0018 0c00 0020 0200     ............ ...
1001032c:	0028 0a00 0030 0600 0038 0e00 0040 0100     (...0...8...@...
1001033c:	0048 0900 0050 0500 0058 0d00 0060 0300     H...P...X...`...
1001034c:	0068 0b00 0070 0700 0078 0f00 0088 0880     h...p...x.......
1001035c:	0090 0480 0098 0c80 00a0 0280 00a8 0a80     ................
1001036c:	00b0 0680 00b8 0e80 00c0 0180 00c8 0980     ................
1001037c:	00d0 0580 00d8 0d80 00e0 0380 00e8 0b80     ................
1001038c:	00f0 0780 00f8 0f80 0108 0840 0110 0440     ..........@...@.
1001039c:	0118 0c40 0120 0240 0128 0a40 0130 0640     ..@. .@.(.@.0.@.
100103ac:	0138 0e40 0148 0940 0150 0540 0158 0d40     8.@.H.@.P.@.X.@.
100103bc:	0160 0340 0168 0b40 0170 0740 0178 0f40     `.@.h.@.p.@.x.@.
100103cc:	0188 08c0 0190 04c0 0198 0cc0 01a0 02c0     ................
100103dc:	01a8 0ac0 01b0 06c0 01b8 0ec0 01c8 09c0     ................
100103ec:	01d0 05c0 01d8 0dc0 01e0 03c0 01e8 0bc0     ................
100103fc:	01f0 07c0 01f8 0fc0 0208 0820 0210 0420     .......... ... .
1001040c:	0218 0c20 0228 0a20 0230 0620 0238 0e20     .. .(. .0. .8. .
1001041c:	0248 0920 0250 0520 0258 0d20 0260 0320     H. .P. .X. .`. .
1001042c:	0268 0b20 0270 0720 0278 0f20 0288 08a0     h. .p. .x. .....
1001043c:	0290 04a0 0298 0ca0 02a8 0aa0 02b0 06a0     ................
1001044c:	02b8 0ea0 02c8 09a0 02d0 05a0 02d8 0da0     ................
1001045c:	02e0 03a0 02e8 0ba0 02f0 07a0 02f8 0fa0     ................
1001046c:	0308 0860 0310 0460 0318 0c60 0328 0a60     ..`...`...`.(.`.
1001047c:	0330 0660 0338 0e60 0348 0960 0350 0560     0.`.8.`.H.`.P.`.
1001048c:	0358 0d60 0368 0b60 0370 0760 0378 0f60     X.`.h.`.p.`.x.`.
1001049c:	0388 08e0 0390 04e0 0398 0ce0 03a8 0ae0     ................
100104ac:	03b0 06e0 03b8 0ee0 03c8 09e0 03d0 05e0     ................
100104bc:	03d8 0de0 03e8 0be0 03f0 07e0 03f8 0fe0     ................
100104cc:	0408 0810 0418 0c10 0428 0a10 0430 0610     ........(...0...
100104dc:	0438 0e10 0448 0910 0450 0510 0458 0d10     8...H...P...X...
100104ec:	0468 0b10 0470 0710 0478 0f10 0488 0890     h...p...x.......
100104fc:	0498 0c90 04a8 0a90 04b0 0690 04b8 0e90     ................
1001050c:	04c8 0990 04d0 0590 04d8 0d90 04e8 0b90     ................
1001051c:	04f0 0790 04f8 0f90 0508 0850 0518 0c50     ..........P...P.
1001052c:	0528 0a50 0530 0650 0538 0e50 0548 0950     (.P.0.P.8.P.H.P.
1001053c:	0558 0d50 0568 0b50 0570 0750 0578 0f50     X.P.h.P.p.P.x.P.
1001054c:	0588 08d0 0598 0cd0 05a8 0ad0 05b0 06d0     ................
1001055c:	05b8 0ed0 05c8 09d0 05d8 0dd0 05e8 0bd0     ................
1001056c:	05f0 07d0 05f8 0fd0 0608 0830 0618 0c30     ..........0...0.
1001057c:	0628 0a30 0638 0e30 0648 0930 0658 0d30     (.0.8.0.H.0.X.0.
1001058c:	0668 0b30 0670 0730 0678 0f30 0688 08b0     h.0.p.0.x.0.....
1001059c:	0698 0cb0 06a8 0ab0 06b8 0eb0 06c8 09b0     ................
100105ac:	06d8 0db0 06e8 0bb0 06f0 07b0 06f8 0fb0     ................
100105bc:	0708 0870 0718 0c70 0728 0a70 0738 0e70     ..p...p.(.p.8.p.
100105cc:	0748 0970 0758 0d70 0768 0b70 0778 0f70     H.p.X.p.h.p.x.p.
100105dc:	0788 08f0 0798 0cf0 07a8 0af0 07b8 0ef0     ................
100105ec:	07c8 09f0 07d8 0df0 07e8 0bf0 07f8 0ff0     ................
100105fc:	0818 0c08 0828 0a08 0838 0e08 0848 0908     ....(...8...H...
1001060c:	0858 0d08 0868 0b08 0878 0f08 0898 0c88     X...h...x.......
1001061c:	08a8 0a88 08b8 0e88 08c8 0988 08d8 0d88     ................
1001062c:	08e8 0b88 08f8 0f88 0918 0c48 0928 0a48     ..........H.(.H.
1001063c:	0938 0e48 0958 0d48 0968 0b48 0978 0f48     8.H.X.H.h.H.x.H.
1001064c:	0998 0cc8 09a8 0ac8 09b8 0ec8 09d8 0dc8     ................
1001065c:	09e8 0bc8 09f8 0fc8 0a18 0c28 0a38 0e28     ..........(.8.(.
1001066c:	0a58 0d28 0a68 0b28 0a78 0f28 0a98 0ca8     X.(.h.(.x.(.....
1001067c:	0ab8 0ea8 0ad8 0da8 0ae8 0ba8 0af8 0fa8     ................
1001068c:	0b18 0c68 0b38 0e68 0b58 0d68 0b78 0f68     ..h.8.h.X.h.x.h.
1001069c:	0b98 0ce8 0bb8 0ee8 0bd8 0de8 0bf8 0fe8     ................
100106ac:	0c38 0e18 0c58 0d18 0c78 0f18 0cb8 0e98     8...X...x.......
100106bc:	0cd8 0d98 0cf8 0f98 0d38 0e58 0d78 0f58     ........8.X.x.X.
100106cc:	0db8 0ed8 0df8 0fd8 0e78 0f38 0ef8 0fb8     ........x.8.....

100106dc <armBitRevIndexTable_fixed_64>:
100106dc:	0008 0100 0010 0080 0018 0180 0020 0040     ............ .@.
100106ec:	0028 0140 0030 00c0 0038 01c0 0048 0120     (.@.0...8...H. .
100106fc:	0050 00a0 0058 01a0 0068 0160 0070 00e0     P...X...h.`.p...
1001070c:	0078 01e0 0088 0110 0098 0190 00a8 0150     x.............P.
1001071c:	00b0 00d0 00b8 01d0 00c8 0130 00d8 01b0     ..........0.....
1001072c:	00e8 0170 00f8 01f0 0118 0188 0128 0148     ..p.........(.H.
1001073c:	0138 01c8 0158 01a8 0178 01e8 01b8 01d8     8...X...x.......

1001074c <sqrt_initial_lut_q31>:
1001074c:	0000 2000 7dde 1e2b 25c6 1c9f 293c 1b4a     ... .}+..%..<)J.
1001075c:	bd70 1a20 5561 191a 91e7 1830 9747 175e     p. .aU....0.G.^.
1001076c:	9e66 16a0 aa67 15f3 5555 1555 abe9 14c3     f...g...UUU.....
1001077c:	1362 143d 3651 13c0 f63d 134b 60c6 12df     b.=.Q6..=.K..`..
1001078c:	a746 1279 1852 121a 1aa0 11c0 28f5 116b     F.y.R........(k.
1001079c:	cee5 111a a631 10ce 54a3 1086 8a48 1041     ....1....T..H.A.
100107ac:	0000 1000 7644 0fc1 b424 0f85 866d 0f4c     ....Dv..$...m.L.
100107bc:	beef 0f15 33df 0ee1 bf55 0eae 3ed2 0e7e     .....3..U....>~.

100107cc <twiddleCoef_1024_q15>:
100107cc:	7fff 0000 7fff 00c9 7ffd 0192 7ffa 025b     ..............[.
100107dc:	7ff6 0324 7ff0 03ed 7fe9 04b6 7fe1 057f     ..$.............
100107ec:	7fd8 0647 7fce 0710 7fc2 07d9 7fb5 08a2     ..G.............
100107fc:	7fa7 096a 7f97 0a33 7f87 0afb 7f75 0bc3     ..j...3.....u...
1001080c:	7f62 0c8b 7f4d 0d53 7f38 0e1b 7f21 0ee3     b...M.S.8...!...
1001081c:	7f09 0fab 7ef0 1072 7ed5 1139 7eba 1201     .....~r..~9..~..
1001082c:	7e9d 12c8 7e7f 138e 7e5f 1455 7e3f 151b     .~...~.._~U.?~..
1001083c:	7e1d 15e2 7dfa 16a8 7dd6 176d 7db0 1833     .~...}...}m..}3.
1001084c:	7d8a 18f8 7d62 19bd 7d39 1a82 7d0f 1b47     .}..b}..9}...}G.
1001085c:	7ce3 1c0b 7cb7 1ccf 7c89 1d93 7c5a 1e56     .|...|...|..Z|V.
1001086c:	7c29 1f19 7bf8 1fdc 7bc5 209f 7b92 2161     )|...{...{. .{a!
1001087c:	7b5d 2223 7b26 22e5 7aef 23a6 7ab6 2467     ]{#"&{.".z.#.zg$
1001088c:	7a7d 2528 7a42 25e8 7a05 26a8 79c8 2767     }z(%Bz.%.z.&.yg'
1001089c:	798a 2826 794a 28e5 7909 29a3 78c7 2a61     .y&(Jy.(.y.).xa*
100108ac:	7884 2b1f 7840 2bdc 77fa 2c98 77b4 2d55     .x.+@x.+.w.,.wU-
100108bc:	776c 2e11 7723 2ecc 76d9 2f87 768e 3041     lw..#w...v./.vA0
100108cc:	7641 30fb 75f4 31b5 75a5 326e 7555 3326     Av.0.u.1.un2Uu&3
100108dc:	7504 33de 74b2 3496 745f 354d 740b 3604     .u.3.t.4_tM5.t.6
100108ec:	73b5 36ba 735f 376f 7307 3824 72af 38d8     .s.6_so7.s$8.r.8
100108fc:	7255 398c 71fa 3a40 719e 3af2 7141 3ba5     Ur.9.q@:.q.:Aq.;
1001090c:	70e2 3c56 7083 3d07 7023 3db8 6fc1 3e68     .pV<.p.=#p.=.oh>
1001091c:	6f5f 3f17 6efb 3fc5 6e96 4073 6e30 4121     _o.?.n.?.ns@0n!A
1001092c:	6dca 41ce 6d62 427a 6cf9 4325 6c8f 43d0     .m.AbmzB.l%C.l.C
1001093c:	6c24 447a 6bb8 4524 6b4a 45cd 6adc 4675     $lzD.k$EJk.E.juF
1001094c:	6a6d 471c 69fd 47c3 698c 4869 6919 490f     mj.G.i.G.iiH.i.I
1001095c:	68a6 49b4 6832 4a58 67bd 4afb 6746 4b9e     .h.I2hXJ.g.JFg.K
1001096c:	66cf 4c3f 6657 4ce1 65dd 4d81 6563 4e21     .f?LWf.L.e.Mce!N
1001097c:	64e8 4ebf 646c 4f5e 63ef 4ffb 6371 5097     .d.Nld^O.c.Oqc.P
1001098c:	62f2 5133 6271 51ce 61f1 5269 616f 5302     .b3Qqb.Q.aiRoa.S
1001099c:	60ec 539b 6068 5433 5fe3 54ca 5f5e 5560     .`.Sh`3T._.T^_`U
100109ac:	5ed7 55f5 5e50 568a 5dc7 571d 5d3e 57b0     .^.UP^.V.].W>].W
100109bc:	5cb4 5842 5c29 58d4 5b9d 5964 5b10 59f3     .\BX)\.X.[dY.[.Y
100109cc:	5a82 5a82 59f3 5b10 5964 5b9d 58d4 5c29     .Z.Z.Y.[dY.[.X)\
100109dc:	5842 5cb4 57b0 5d3e 571d 5dc7 568a 5e50     BX.\.W>].W.].VP^
100109ec:	55f5 5ed7 5560 5f5e 54ca 5fe3 5433 6068     .U.^`U^_.T._3Th`
100109fc:	539b 60ec 5302 616f 5269 61f1 51ce 6271     .S.`.SoaiR.a.Qqb
10010a0c:	5133 62f2 5097 6371 4ffb 63ef 4f5e 646c     3Q.b.Pqc.O.c^Old
10010a1c:	4ebf 64e8 4e21 6563 4d81 65dd 4ce1 6657     .N.d!Nce.M.e.LWf
10010a2c:	4c3f 66cf 4b9e 6746 4afb 67bd 4a58 6832     ?L.f.KFg.J.gXJ2h
10010a3c:	49b4 68a6 490f 6919 4869 698c 47c3 69fd     .I.h.I.iiH.i.G.i
10010a4c:	471c 6a6d 4675 6adc 45cd 6b4a 4524 6bb8     .GmjuF.j.EJk$E.k
10010a5c:	447a 6c24 43d0 6c8f 4325 6cf9 427a 6d62     zD$l.C.l%C.lzBbm
10010a6c:	41ce 6dca 4121 6e30 4073 6e96 3fc5 6efb     .A.m!A0ns@.n.?.n
10010a7c:	3f17 6f5f 3e68 6fc1 3db8 7023 3d07 7083     .?_oh>.o.=#p.=.p
10010a8c:	3c56 70e2 3ba5 7141 3af2 719e 3a40 71fa     V<.p.;Aq.:.q@:.q
10010a9c:	398c 7255 38d8 72af 3824 7307 376f 735f     .9Ur.8.r$8.so7_s
10010aac:	36ba 73b5 3604 740b 354d 745f 3496 74b2     .6.s.6.tM5_t.4.t
10010abc:	33de 7504 3326 7555 326e 75a5 31b5 75f4     .3.u&3Uun2.u.1.u
10010acc:	30fb 7641 3041 768e 2f87 76d9 2ecc 7723     .0AvA0.v./.v..#w
10010adc:	2e11 776c 2d55 77b4 2c98 77fa 2bdc 7840     ..lwU-.w.,.w.+@x
10010aec:	2b1f 7884 2a61 78c7 29a3 7909 28e5 794a     .+.xa*.x.).y.(Jy
10010afc:	2826 798a 2767 79c8 26a8 7a05 25e8 7a42     &(.yg'.y.&.z.%Bz
10010b0c:	2528 7a7d 2467 7ab6 23a6 7aef 22e5 7b26     (%}zg$.z.#.z."&{
10010b1c:	2223 7b5d 2161 7b92 209f 7bc5 1fdc 7bf8     #"]{a!.{. .{...{
10010b2c:	1f19 7c29 1e56 7c5a 1d93 7c89 1ccf 7cb7     ..)|V.Z|...|...|
10010b3c:	1c0b 7ce3 1b47 7d0f 1a82 7d39 19bd 7d62     ...|G..}..9}..b}
10010b4c:	18f8 7d8a 1833 7db0 176d 7dd6 16a8 7dfa     ...}3..}m..}...}
10010b5c:	15e2 7e1d 151b 7e3f 1455 7e5f 138e 7e7f     ...~..?~U._~...~
10010b6c:	12c8 7e9d 1201 7eba 1139 7ed5 1072 7ef0     ...~...~9..~r..~
10010b7c:	0fab 7f09 0ee3 7f21 0e1b 7f38 0d53 7f4d     ......!...8.S.M.
10010b8c:	0c8b 7f62 0bc3 7f75 0afb 7f87 0a33 7f97     ..b...u.....3...
10010b9c:	096a 7fa7 08a2 7fb5 07d9 7fc2 0710 7fce     j...............
10010bac:	0647 7fd8 057f 7fe1 04b6 7fe9 03ed 7ff0     G...............
10010bbc:	0324 7ff6 025b 7ffa 0192 7ffd 00c9 7fff     $...[...........
10010bcc:	0000 7fff ff36 7fff fe6d 7ffd fda4 7ffa     ....6...m.......
10010bdc:	fcdb 7ff6 fc12 7ff0 fb49 7fe9 fa80 7fe1     ........I.......
10010bec:	f9b8 7fd8 f8ef 7fce f826 7fc2 f75d 7fb5     ........&...]...
10010bfc:	f695 7fa7 f5cc 7f97 f504 7f87 f43c 7f75     ............<.u.
10010c0c:	f374 7f62 f2ac 7f4d f1e4 7f38 f11c 7f21     t.b...M...8...!.
10010c1c:	f054 7f09 ef8d 7ef0 eec6 7ed5 edfe 7eba     T......~...~...~
10010c2c:	ed37 7e9d ec71 7e7f ebaa 7e5f eae4 7e3f     7..~q..~.._~..?~
10010c3c:	ea1d 7e1d e957 7dfa e892 7dd6 e7cc 7db0     ...~W..}...}...}
10010c4c:	e707 7d8a e642 7d62 e57d 7d39 e4b8 7d0f     ...}B.b}}.9}...}
10010c5c:	e3f4 7ce3 e330 7cb7 e26c 7c89 e1a9 7c5a     ...|0..|l..|..Z|
10010c6c:	e0e6 7c29 e023 7bf8 df60 7bc5 de9e 7b92     ..)|#..{`..{...{
10010c7c:	dddc 7b5d dd1a 7b26 dc59 7aef db98 7ab6     ..]{..&{Y..z...z
10010c8c:	dad7 7a7d da17 7a42 d957 7a05 d898 79c8     ..}z..BzW..z...y
10010c9c:	d7d9 798a d71a 794a d65c 7909 d59e 78c7     ...y..Jy\..y...x
10010cac:	d4e0 7884 d423 7840 d367 77fa d2aa 77b4     ...x#.@xg..w...w
10010cbc:	d1ee 776c d133 7723 d078 76d9 cfbe 768e     ..lw3.#wx..v...v
10010ccc:	cf04 7641 ce4a 75f4 cd91 75a5 ccd9 7555     ..AvJ..u...u..Uu
10010cdc:	cc21 7504 cb69 74b2 cab2 745f c9fb 740b     !..ui..t.._t...t
10010cec:	c945 73b5 c890 735f c7db 7307 c727 72af     E..s.._s...s'..r
10010cfc:	c673 7255 c5bf 71fa c50d 719e c45a 7141     s.Ur...q...qZ.Aq
10010d0c:	c3a9 70e2 c2f8 7083 c247 7023 c197 6fc1     ...p...pG.#p...o
10010d1c:	c0e8 6f5f c03a 6efb bf8c 6e96 bede 6e30     .._o:..n...n..0n
10010d2c:	be31 6dca bd85 6d62 bcda 6cf9 bc2f 6c8f     1..m..bm...l/..l
10010d3c:	bb85 6c24 badb 6bb8 ba32 6b4a b98a 6adc     ..$l...k2.Jk...j
10010d4c:	b8e3 6a6d b83c 69fd b796 698c b6f0 6919     ..mj<..i...i...i
10010d5c:	b64b 68a6 b5a7 6832 b504 67bd b461 6746     K..h..2h...ga.Fg
10010d6c:	b3c0 66cf b31e 6657 b27e 65dd b1de 6563     ...f..Wf~..e..ce
10010d7c:	b140 64e8 b0a1 646c b004 63ef af68 6371     @..d..ld...ch.qc
10010d8c:	aecc 62f2 ae31 6271 ad96 61f1 acfd 616f     ...b1.qb...a..oa
10010d9c:	ac64 60ec abcc 6068 ab35 5fe3 aa9f 5f5e     d..`..h`5.._..^_
10010dac:	aa0a 5ed7 a975 5e50 a8e2 5dc7 a84f 5d3e     ...^u.P^...]O.>]
10010dbc:	a7bd 5cb4 a72b 5c29 a69b 5b9d a60c 5b10     ...\+.)\...[...[
10010dcc:	a57d 5a82 a4ef 59f3 a462 5964 a3d6 58d4     }..Z...Yb.dY...X
10010ddc:	a34b 5842 a2c1 57b0 a238 571d a1af 568a     K.BX...W8..W...V
10010dec:	a128 55f5 a0a1 5560 a01c 54ca 9f97 5433     (..U..`U...T..3T
10010dfc:	9f13 539b 9e90 5302 9e0e 5269 9d8e 51ce     ...S...S..iR...Q
10010e0c:	9d0d 5133 9c8e 5097 9c10 4ffb 9b93 4f5e     ..3Q...P...O..^O
10010e1c:	9b17 4ebf 9a9c 4e21 9a22 4d81 99a8 4ce1     ...N..!N"..M...L
10010e2c:	9930 4c3f 98b9 4b9e 9842 4afb 97cd 4a58     0.?L...KB..J..XJ
10010e3c:	9759 49b4 96e6 490f 9673 4869 9602 47c3     Y..I...Is.iH...G
10010e4c:	9592 471c 9523 4675 94b5 45cd 9447 4524     ...G#.uF...EG.$E
10010e5c:	93db 447a 9370 43d0 9306 4325 929d 427a     ..zDp..C..%C..zB
10010e6c:	9235 41ce 91cf 4121 9169 4073 9104 3fc5     5..A..!Ai.s@...?
10010e7c:	90a0 3f17 903e 3e68 8fdc 3db8 8f7c 3d07     ...?>.h>...=|..=
10010e8c:	8f1d 3c56 8ebe 3ba5 8e61 3af2 8e05 3a40     ..V<...;a..:..@:
10010e9c:	8daa 398c 8d50 38d8 8cf8 3824 8ca0 376f     ...9P..8..$8..o7
10010eac:	8c4a 36ba 8bf4 3604 8ba0 354d 8b4d 3496     J..6...6..M5M..4
10010ebc:	8afb 33de 8aaa 3326 8a5a 326e 8a0b 31b5     ...3..&3Z.n2...1
10010ecc:	89be 30fb 8971 3041 8926 2f87 88dc 2ecc     ...0q.A0&../....
10010edc:	8893 2e11 884b 2d55 8805 2c98 87bf 2bdc     ....K.U-...,...+
10010eec:	877b 2b1f 8738 2a61 86f6 29a3 86b5 28e5     {..+8.a*...)...(
10010efc:	8675 2826 8637 2767 85fa 26a8 85bd 25e8     u.&(7.g'...&...%
10010f0c:	8582 2528 8549 2467 8510 23a6 84d9 22e5     ..(%I.g$...#..."
10010f1c:	84a2 2223 846d 2161 843a 209f 8407 1fdc     ..#"m.a!:.. ....
10010f2c:	83d6 1f19 83a5 1e56 8376 1d93 8348 1ccf     ......V.v...H...
10010f3c:	831c 1c0b 82f0 1b47 82c6 1a82 829d 19bd     ......G.........
10010f4c:	8275 18f8 824f 1833 8229 176d 8205 16a8     u...O.3.).m.....
10010f5c:	81e2 15e2 81c0 151b 81a0 1455 8180 138e     ..........U.....
10010f6c:	8162 12c8 8145 1201 812a 1139 810f 1072     b...E...*.9...r.
10010f7c:	80f6 0fab 80de 0ee3 80c7 0e1b 80b2 0d53     ..............S.
10010f8c:	809d 0c8b 808a 0bc3 8078 0afb 8068 0a33     ........x...h.3.
10010f9c:	8058 096a 804a 08a2 803d 07d9 8031 0710     X.j.J...=...1...
10010fac:	8027 0647 801e 057f 8016 04b6 800f 03ed     '.G.............
10010fbc:	8009 0324 8005 025b 8002 0192 8000 00c9     ..$...[.........
10010fcc:	8000 0000 8000 ff36 8002 fe6d 8005 fda4     ......6...m.....
10010fdc:	8009 fcdb 800f fc12 8016 fb49 801e fa80     ..........I.....
10010fec:	8027 f9b8 8031 f8ef 803d f826 804a f75d     '...1...=.&.J.].
10010ffc:	8058 f695 8068 f5cc 8078 f504 808a f43c     X...h...x.....<.
1001100c:	809d f374 80b2 f2ac 80c7 f1e4 80de f11c     ..t.............
1001101c:	80f6 f054 810f ef8d 812a eec6 8145 edfe     ..T.....*...E...
1001102c:	8162 ed37 8180 ec71 81a0 ebaa 81c0 eae4     b.7...q.........
1001103c:	81e2 ea1d 8205 e957 8229 e892 824f e7cc     ......W.)...O...
1001104c:	8275 e707 829d e642 82c6 e57d 82f0 e4b8     u.....B...}.....
1001105c:	831c e3f4 8348 e330 8376 e26c 83a5 e1a9     ....H.0.v.l.....
1001106c:	83d6 e0e6 8407 e023 843a df60 846d de9e     ......#.:.`.m...
1001107c:	84a2 dddc 84d9 dd1a 8510 dc59 8549 db98     ..........Y.I...
1001108c:	8582 dad7 85bd da17 85fa d957 8637 d898     ..........W.7...
1001109c:	8675 d7d9 86b5 d71a 86f6 d65c 8738 d59e     u.........\.8...
100110ac:	877b d4e0 87bf d423 8805 d367 884b d2aa     {.....#...g.K...
100110bc:	8893 d1ee 88dc d133 8926 d078 8971 cfbe     ......3.&.x.q...
100110cc:	89be cf04 8a0b ce4a 8a5a cd91 8aaa ccd9     ......J.Z.......
100110dc:	8afb cc21 8b4d cb69 8ba0 cab2 8bf4 c9fb     ..!.M.i.........
100110ec:	8c4a c945 8ca0 c890 8cf8 c7db 8d50 c727     J.E.........P.'.
100110fc:	8daa c673 8e05 c5bf 8e61 c50d 8ebe c45a     ..s.....a.....Z.
1001110c:	8f1d c3a9 8f7c c2f8 8fdc c247 903e c197     ....|.....G.>...
1001111c:	90a0 c0e8 9104 c03a 9169 bf8c 91cf bede     ......:.i.......
1001112c:	9235 be31 929d bd85 9306 bcda 9370 bc2f     5.1.........p./.
1001113c:	93db bb85 9447 badb 94b5 ba32 9523 b98a     ....G.....2.#...
1001114c:	9592 b8e3 9602 b83c 9673 b796 96e6 b6f0     ......<.s.......
1001115c:	9759 b64b 97cd b5a7 9842 b504 98b9 b461     Y.K.....B.....a.
1001116c:	9930 b3c0 99a8 b31e 9a22 b27e 9a9c b1de     0.......".~.....
1001117c:	9b17 b140 9b93 b0a1 9c10 b004 9c8e af68     ..@...........h.
1001118c:	9d0d aecc 9d8e ae31 9e0e ad96 9e90 acfd     ......1.........
1001119c:	9f13 ac64 9f97 abcc a01c ab35 a0a1 aa9f     ..d.......5.....
100111ac:	a128 aa0a a1af a975 a238 a8e2 a2c1 a84f     (.....u.8.....O.
100111bc:	a34b a7bd a3d6 a72b a462 a69b a4ef a60c     K.....+.b.......
100111cc:	a57d a57d a60c a4ef a69b a462 a72b a3d6     }.}.......b.+...
100111dc:	a7bd a34b a84f a2c1 a8e2 a238 a975 a1af     ..K.O.....8.u...
100111ec:	aa0a a128 aa9f a0a1 ab35 a01c abcc 9f97     ..(.....5.......
100111fc:	ac64 9f13 acfd 9e90 ad96 9e0e ae31 9d8e     d...........1...
1001120c:	aecc 9d0d af68 9c8e b004 9c10 b0a1 9b93     ....h...........
1001121c:	b140 9b17 b1de 9a9c b27e 9a22 b31e 99a8     @.......~.".....
1001122c:	b3c0 9930 b461 98b9 b504 9842 b5a7 97cd     ..0.a.....B.....
1001123c:	b64b 9759 b6f0 96e6 b796 9673 b83c 9602     K.Y.......s.<...
1001124c:	b8e3 9592 b98a 9523 ba32 94b5 badb 9447     ......#.2.....G.
1001125c:	bb85 93db bc2f 9370 bcda 9306 bd85 929d     ..../.p.........
1001126c:	be31 9235 bede 91cf bf8c 9169 c03a 9104     1.5.......i.:...
1001127c:	c0e8 90a0 c197 903e c247 8fdc c2f8 8f7c     ......>.G.....|.
1001128c:	c3a9 8f1d c45a 8ebe c50d 8e61 c5bf 8e05     ....Z.....a.....
1001129c:	c673 8daa c727 8d50 c7db 8cf8 c890 8ca0     s...'.P.........
100112ac:	c945 8c4a c9fb 8bf4 cab2 8ba0 cb69 8b4d     E.J.........i.M.
100112bc:	cc21 8afb ccd9 8aaa cd91 8a5a ce4a 8a0b     !.........Z.J...
100112cc:	cf04 89be cfbe 8971 d078 8926 d133 88dc     ......q.x.&.3...
100112dc:	d1ee 8893 d2aa 884b d367 8805 d423 87bf     ......K.g...#...
100112ec:	d4e0 877b d59e 8738 d65c 86f6 d71a 86b5     ..{...8.\.......
100112fc:	d7d9 8675 d898 8637 d957 85fa da17 85bd     ..u...7.W.......
1001130c:	dad7 8582 db98 8549 dc59 8510 dd1a 84d9     ......I.Y.......
1001131c:	dddc 84a2 de9e 846d df60 843a e023 8407     ......m.`.:.#...
1001132c:	e0e6 83d6 e1a9 83a5 e26c 8376 e330 8348     ........l.v.0.H.
1001133c:	e3f4 831c e4b8 82f0 e57d 82c6 e642 829d     ........}...B...
1001134c:	e707 8275 e7cc 824f e892 8229 e957 8205     ..u...O...).W...
1001135c:	ea1d 81e2 eae4 81c0 ebaa 81a0 ec71 8180     ............q...
1001136c:	ed37 8162 edfe 8145 eec6 812a ef8d 810f     7.b...E...*.....
1001137c:	f054 80f6 f11c 80de f1e4 80c7 f2ac 80b2     T...............
1001138c:	f374 809d f43c 808a f504 8078 f5cc 8068     t...<.....x...h.
1001139c:	f695 8058 f75d 804a f826 803d f8ef 8031     ..X.].J.&.=...1.
100113ac:	f9b8 8027 fa80 801e fb49 8016 fc12 800f     ..'.....I.......
100113bc:	fcdb 8009 fda4 8005 fe6d 8002 ff36 8000     ........m...6...

100113cc <twiddleCoef_128_q15>:
100113cc:	7fff 0000 7fd8 0647 7f62 0c8b 7e9d 12c8     ......G.b....~..
100113dc:	7d8a 18f8 7c29 1f19 7a7d 2528 7884 2b1f     .}..)|..}z(%.x.+
100113ec:	7641 30fb 73b5 36ba 70e2 3c56 6dca 41ce     Av.0.s.6.pV<.m.A
100113fc:	6a6d 471c 66cf 4c3f 62f2 5133 5ed7 55f5     mj.G.f?L.b3Q.^.U
1001140c:	5a82 5a82 55f5 5ed7 5133 62f2 4c3f 66cf     .Z.Z.U.^3Q.b?L.f
1001141c:	471c 6a6d 41ce 6dca 3c56 70e2 36ba 73b5     .Gmj.A.mV<.p.6.s
1001142c:	30fb 7641 2b1f 7884 2528 7a7d 1f19 7c29     .0Av.+.x(%}z..)|
1001143c:	18f8 7d8a 12c8 7e9d 0c8b 7f62 0647 7fd8     ...}...~..b.G...
1001144c:	0000 7fff f9b8 7fd8 f374 7f62 ed37 7e9d     ........t.b.7..~
1001145c:	e707 7d8a e0e6 7c29 dad7 7a7d d4e0 7884     ...}..)|..}z...x
1001146c:	cf04 7641 c945 73b5 c3a9 70e2 be31 6dca     ..AvE..s...p1..m
1001147c:	b8e3 6a6d b3c0 66cf aecc 62f2 aa0a 5ed7     ..mj...f...b...^
1001148c:	a57d 5a82 a128 55f5 9d0d 5133 9930 4c3f     }..Z(..U..3Q0.?L
1001149c:	9592 471c 9235 41ce 8f1d 3c56 8c4a 36ba     ...G5..A..V<J..6
100114ac:	89be 30fb 877b 2b1f 8582 2528 83d6 1f19     ...0{..+..(%....
100114bc:	8275 18f8 8162 12c8 809d 0c8b 8027 0647     u...b.......'.G.
100114cc:	8000 0000 8027 f9b8 809d f374 8162 ed37     ....'.....t.b.7.
100114dc:	8275 e707 83d6 e0e6 8582 dad7 877b d4e0     u...........{...
100114ec:	89be cf04 8c4a c945 8f1d c3a9 9235 be31     ....J.E.....5.1.
100114fc:	9592 b8e3 9930 b3c0 9d0d aecc a128 aa0a     ....0.......(...
1001150c:	a57d a57d aa0a a128 aecc 9d0d b3c0 9930     }.}...(.......0.
1001151c:	b8e3 9592 be31 9235 c3a9 8f1d c945 8c4a     ....1.5.....E.J.
1001152c:	cf04 89be d4e0 877b dad7 8582 e0e6 83d6     ......{.........
1001153c:	e707 8275 ed37 8162 f374 809d f9b8 8027     ..u.7.b.t.....'.

1001154c <twiddleCoef_16_q15>:
1001154c:	7fff 0000 7641 30fb 5a82 5a82 30fb 7641     ....Av.0.Z.Z.0Av
1001155c:	0000 7fff cf04 7641 a57d 5a82 89be 30fb     ......Av}..Z...0
1001156c:	8000 0000 89be cf04 a57d a57d cf04 89be     ........}.}.....

1001157c <twiddleCoef_2048_q15>:
1001157c:	7fff 0000 7fff 0064 7fff 00c9 7ffe 012d     ......d.......-.
1001158c:	7ffd 0192 7ffc 01f6 7ffa 025b 7ff8 02bf     ..........[.....
1001159c:	7ff6 0324 7ff3 0388 7ff0 03ed 7fed 0451     ..$...........Q.
100115ac:	7fe9 04b6 7fe5 051a 7fe1 057f 7fdd 05e3     ................
100115bc:	7fd8 0647 7fd3 06ac 7fce 0710 7fc8 0775     ..G...........u.
100115cc:	7fc2 07d9 7fbc 083d 7fb5 08a2 7fae 0906     ......=.........
100115dc:	7fa7 096a 7f9f 09ce 7f97 0a33 7f8f 0a97     ..j.......3.....
100115ec:	7f87 0afb 7f7e 0b5f 7f75 0bc3 7f6b 0c27     ....~._.u...k.'.
100115fc:	7f62 0c8b 7f58 0cef 7f4d 0d53 7f43 0db7     b...X...M.S.C...
1001160c:	7f38 0e1b 7f2d 0e7f 7f21 0ee3 7f15 0f47     8...-...!.....G.
1001161c:	7f09 0fab 7efd 100e 7ef0 1072 7ee3 10d6     .....~...~r..~..
1001162c:	7ed5 1139 7ec8 119d 7eba 1201 7eab 1264     .~9..~...~...~d.
1001163c:	7e9d 12c8 7e8e 132b 7e7f 138e 7e6f 13f2     .~...~+..~..o~..
1001164c:	7e5f 1455 7e4f 14b8 7e3f 151b 7e2e 157f     _~U.O~..?~...~..
1001165c:	7e1d 15e2 7e0c 1645 7dfa 16a8 7de8 170a     .~...~E..}...}..
1001166c:	7dd6 176d 7dc3 17d0 7db0 1833 7d9d 1896     .}m..}...}3..}..
1001167c:	7d8a 18f8 7d76 195b 7d62 19bd 7d4e 1a20     .}..v}[.b}..N} .
1001168c:	7d39 1a82 7d24 1ae4 7d0f 1b47 7cf9 1ba9     9}..$}...}G..|..
1001169c:	7ce3 1c0b 7ccd 1c6d 7cb7 1ccf 7ca0 1d31     .|...|m..|...|1.
100116ac:	7c89 1d93 7c71 1df5 7c5a 1e56 7c42 1eb8     .|..q|..Z|V.B|..
100116bc:	7c29 1f19 7c11 1f7b 7bf8 1fdc 7bdf 203e     )|...|{..{...{> 
100116cc:	7bc5 209f 7bac 2100 7b92 2161 7b77 21c2     .{. .{.!.{a!w{.!
100116dc:	7b5d 2223 7b42 2284 7b26 22e5 7b0b 2345     ]{#"B{."&{.".{E#
100116ec:	7aef 23a6 7ad3 2407 7ab6 2467 7a9a 24c7     .z.#.z.$.zg$.z.$
100116fc:	7a7d 2528 7a5f 2588 7a42 25e8 7a24 2648     }z(%_z.%Bz.%$zH&
1001170c:	7a05 26a8 79e7 2707 79c8 2767 79a9 27c7     .z.&.y.'.yg'.y.'
1001171c:	798a 2826 796a 2886 794a 28e5 792a 2944     .y&(jy.(Jy.(*yD)
1001172c:	7909 29a3 78e8 2a02 78c7 2a61 78a6 2ac0     .y.).x.*.xa*.x.*
1001173c:	7884 2b1f 7862 2b7d 7840 2bdc 781d 2c3a     .x.+bx}+@x.+.x:,
1001174c:	77fa 2c98 77d7 2cf7 77b4 2d55 7790 2db3     .w.,.w.,.wU-.w.-
1001175c:	776c 2e11 7747 2e6e 7723 2ecc 76fe 2f29     lw..Gwn.#w...v)/
1001176c:	76d9 2f87 76b3 2fe4 768e 3041 7668 309e     .v./.v./.vA0hv.0
1001177c:	7641 30fb 761b 3158 75f4 31b5 75cc 3211     Av.0.vX1.u.1.u.2
1001178c:	75a5 326e 757d 32ca 7555 3326 752d 3382     .un2}u.2Uu&3-u.3
1001179c:	7504 33de 74db 343a 74b2 3496 7489 34f2     .u.3.t:4.t.4.t.4
100117ac:	745f 354d 7435 35a8 740b 3604 73e0 365f     _tM55t.5.t.6.s_6
100117bc:	73b5 36ba 738a 3714 735f 376f 7333 37ca     .s.6.s.7_so73s.7
100117cc:	7307 3824 72db 387e 72af 38d8 7282 3932     .s$8.r~8.r.8.r29
100117dc:	7255 398c 7227 39e6 71fa 3a40 71cc 3a99     Ur.9'r.9.q@:.q.:
100117ec:	719e 3af2 716f 3b4c 7141 3ba5 7112 3bfd     .q.:oqL;Aq.;.q.;
100117fc:	70e2 3c56 70b3 3caf 7083 3d07 7053 3d60     .pV<.p.<.p.=Sp`=
1001180c:	7023 3db8 6ff2 3e10 6fc1 3e68 6f90 3ebf     #p.=.o.>.oh>.o.>
1001181c:	6f5f 3f17 6f2d 3f6e 6efb 3fc5 6ec9 401d     _o.?-on?.n.?.n.@
1001182c:	6e96 4073 6e63 40ca 6e30 4121 6dfd 4177     .ns@cn.@0n!A.mwA
1001183c:	6dca 41ce 6d96 4224 6d62 427a 6d2d 42d0     .m.A.m$BbmzB-m.B
1001184c:	6cf9 4325 6cc4 437b 6c8f 43d0 6c59 4425     .l%C.l{C.l.CYl%D
1001185c:	6c24 447a 6bee 44cf 6bb8 4524 6b81 4578     $lzD.k.D.k$E.kxE
1001186c:	6b4a 45cd 6b13 4621 6adc 4675 6aa5 46c9     Jk.E.k!F.juF.j.F
1001187c:	6a6d 471c 6a35 4770 69fd 47c3 69c4 4816     mj.G5jpG.i.G.i.H
1001188c:	698c 4869 6953 48bc 6919 490f 68e0 4961     .iiHSi.H.i.I.haI
1001189c:	68a6 49b4 686c 4a06 6832 4a58 67f7 4aa9     .h.Ilh.J2hXJ.g.J
100118ac:	67bd 4afb 6782 4b4c 6746 4b9e 670b 4bef     .g.J.gLKFg.K.g.K
100118bc:	66cf 4c3f 6693 4c90 6657 4ce1 661a 4d31     .f?L.f.LWf.L.f1M
100118cc:	65dd 4d81 65a0 4dd1 6563 4e21 6526 4e70     .e.M.e.Mce!N&epN
100118dc:	64e8 4ebf 64aa 4f0f 646c 4f5e 642d 4fac     .d.N.d.Old^O-d.O
100118ec:	63ef 4ffb 63b0 5049 6371 5097 6331 50e5     .c.O.cIPqc.P1c.P
100118fc:	62f2 5133 62b2 5181 6271 51ce 6231 521c     .b3Q.b.Qqb.Q1b.R
1001190c:	61f1 5269 61b0 52b5 616f 5302 612d 534e     .aiR.a.Roa.S-aNS
1001191c:	60ec 539b 60aa 53e7 6068 5433 6026 547e     .`.S.`.Sh`3T&`~T
1001192c:	5fe3 54ca 5fa0 5515 5f5e 5560 5f1a 55ab     ._.T._.U^_`U._.U
1001193c:	5ed7 55f5 5e93 5640 5e50 568a 5e0b 56d4     .^.U.^@VP^.V.^.V
1001194c:	5dc7 571d 5d83 5767 5d3e 57b0 5cf9 57f9     .].W.]gW>].W.\.W
1001195c:	5cb4 5842 5c6e 588b 5c29 58d4 5be3 591c     .\BXn\.X)\.X.[.Y
1001196c:	5b9d 5964 5b56 59ac 5b10 59f3 5ac9 5a3b     .[dYV[.Y.[.Y.Z;Z
1001197c:	5a82 5a82 5a3b 5ac9 59f3 5b10 59ac 5b56     .Z.Z;Z.Z.Y.[.YV[
1001198c:	5964 5b9d 591c 5be3 58d4 5c29 588b 5c6e     dY.[.Y.[.X)\.Xn\
1001199c:	5842 5cb4 57f9 5cf9 57b0 5d3e 5767 5d83     BX.\.W.\.W>]gW.]
100119ac:	571d 5dc7 56d4 5e0b 568a 5e50 5640 5e93     .W.].V.^.VP^@V.^
100119bc:	55f5 5ed7 55ab 5f1a 5560 5f5e 5515 5fa0     .U.^.U._`U^_.U._
100119cc:	54ca 5fe3 547e 6026 5433 6068 53e7 60aa     .T._~T&`3Th`.S.`
100119dc:	539b 60ec 534e 612d 5302 616f 52b5 61b0     .S.`NS-a.Soa.R.a
100119ec:	5269 61f1 521c 6231 51ce 6271 5181 62b2     iR.a.R1b.Qqb.Q.b
100119fc:	5133 62f2 50e5 6331 5097 6371 5049 63b0     3Q.b.P1c.PqcIP.c
10011a0c:	4ffb 63ef 4fac 642d 4f5e 646c 4f0f 64aa     .O.c.O-d^Old.O.d
10011a1c:	4ebf 64e8 4e70 6526 4e21 6563 4dd1 65a0     .N.dpN&e!Nce.M.e
10011a2c:	4d81 65dd 4d31 661a 4ce1 6657 4c90 6693     .M.e1M.f.LWf.L.f
10011a3c:	4c3f 66cf 4bef 670b 4b9e 6746 4b4c 6782     ?L.f.K.g.KFgLK.g
10011a4c:	4afb 67bd 4aa9 67f7 4a58 6832 4a06 686c     .J.g.J.gXJ2h.Jlh
10011a5c:	49b4 68a6 4961 68e0 490f 6919 48bc 6953     .I.haI.h.I.i.HSi
10011a6c:	4869 698c 4816 69c4 47c3 69fd 4770 6a35     iH.i.H.i.G.ipG5j
10011a7c:	471c 6a6d 46c9 6aa5 4675 6adc 4621 6b13     .Gmj.F.juF.j!F.k
10011a8c:	45cd 6b4a 4578 6b81 4524 6bb8 44cf 6bee     .EJkxE.k$E.k.D.k
10011a9c:	447a 6c24 4425 6c59 43d0 6c8f 437b 6cc4     zD$l%DYl.C.l{C.l
10011aac:	4325 6cf9 42d0 6d2d 427a 6d62 4224 6d96     %C.l.B-mzBbm$B.m
10011abc:	41ce 6dca 4177 6dfd 4121 6e30 40ca 6e63     .A.mwA.m!A0n.@cn
10011acc:	4073 6e96 401d 6ec9 3fc5 6efb 3f6e 6f2d     s@.n.@.n.?.nn?-o
10011adc:	3f17 6f5f 3ebf 6f90 3e68 6fc1 3e10 6ff2     .?_o.>.oh>.o.>.o
10011aec:	3db8 7023 3d60 7053 3d07 7083 3caf 70b3     .=#p`=Sp.=.p.<.p
10011afc:	3c56 70e2 3bfd 7112 3ba5 7141 3b4c 716f     V<.p.;.q.;AqL;oq
10011b0c:	3af2 719e 3a99 71cc 3a40 71fa 39e6 7227     .:.q.:.q@:.q.9'r
10011b1c:	398c 7255 3932 7282 38d8 72af 387e 72db     .9Ur29.r.8.r~8.r
10011b2c:	3824 7307 37ca 7333 376f 735f 3714 738a     $8.s.73so7_s.7.s
10011b3c:	36ba 73b5 365f 73e0 3604 740b 35a8 7435     .6.s_6.s.6.t.55t
10011b4c:	354d 745f 34f2 7489 3496 74b2 343a 74db     M5_t.4.t.4.t:4.t
10011b5c:	33de 7504 3382 752d 3326 7555 32ca 757d     .3.u.3-u&3Uu.2}u
10011b6c:	326e 75a5 3211 75cc 31b5 75f4 3158 761b     n2.u.2.u.1.uX1.v
10011b7c:	30fb 7641 309e 7668 3041 768e 2fe4 76b3     .0Av.0hvA0.v./.v
10011b8c:	2f87 76d9 2f29 76fe 2ecc 7723 2e6e 7747     ./.v)/.v..#wn.Gw
10011b9c:	2e11 776c 2db3 7790 2d55 77b4 2cf7 77d7     ..lw.-.wU-.w.,.w
10011bac:	2c98 77fa 2c3a 781d 2bdc 7840 2b7d 7862     .,.w:,.x.+@x}+bx
10011bbc:	2b1f 7884 2ac0 78a6 2a61 78c7 2a02 78e8     .+.x.*.xa*.x.*.x
10011bcc:	29a3 7909 2944 792a 28e5 794a 2886 796a     .).yD)*y.(Jy.(jy
10011bdc:	2826 798a 27c7 79a9 2767 79c8 2707 79e7     &(.y.'.yg'.y.'.y
10011bec:	26a8 7a05 2648 7a24 25e8 7a42 2588 7a5f     .&.zH&$z.%Bz.%_z
10011bfc:	2528 7a7d 24c7 7a9a 2467 7ab6 2407 7ad3     (%}z.$.zg$.z.$.z
10011c0c:	23a6 7aef 2345 7b0b 22e5 7b26 2284 7b42     .#.zE#.{."&{."B{
10011c1c:	2223 7b5d 21c2 7b77 2161 7b92 2100 7bac     #"]{.!w{a!.{.!.{
10011c2c:	209f 7bc5 203e 7bdf 1fdc 7bf8 1f7b 7c11     . .{> .{...{{..|
10011c3c:	1f19 7c29 1eb8 7c42 1e56 7c5a 1df5 7c71     ..)|..B|V.Z|..q|
10011c4c:	1d93 7c89 1d31 7ca0 1ccf 7cb7 1c6d 7ccd     ...|1..|...|m..|
10011c5c:	1c0b 7ce3 1ba9 7cf9 1b47 7d0f 1ae4 7d24     ...|...|G..}..$}
10011c6c:	1a82 7d39 1a20 7d4e 19bd 7d62 195b 7d76     ..9} .N}..b}[.v}
10011c7c:	18f8 7d8a 1896 7d9d 1833 7db0 17d0 7dc3     ...}...}3..}...}
10011c8c:	176d 7dd6 170a 7de8 16a8 7dfa 1645 7e0c     m..}...}...}E..~
10011c9c:	15e2 7e1d 157f 7e2e 151b 7e3f 14b8 7e4f     ...~...~..?~..O~
10011cac:	1455 7e5f 13f2 7e6f 138e 7e7f 132b 7e8e     U._~..o~...~+..~
10011cbc:	12c8 7e9d 1264 7eab 1201 7eba 119d 7ec8     ...~d..~...~...~
10011ccc:	1139 7ed5 10d6 7ee3 1072 7ef0 100e 7efd     9..~...~r..~...~
10011cdc:	0fab 7f09 0f47 7f15 0ee3 7f21 0e7f 7f2d     ....G.....!...-.
10011cec:	0e1b 7f38 0db7 7f43 0d53 7f4d 0cef 7f58     ..8...C.S.M...X.
10011cfc:	0c8b 7f62 0c27 7f6b 0bc3 7f75 0b5f 7f7e     ..b.'.k...u._.~.
10011d0c:	0afb 7f87 0a97 7f8f 0a33 7f97 09ce 7f9f     ........3.......
10011d1c:	096a 7fa7 0906 7fae 08a2 7fb5 083d 7fbc     j...........=...
10011d2c:	07d9 7fc2 0775 7fc8 0710 7fce 06ac 7fd3     ....u...........
10011d3c:	0647 7fd8 05e3 7fdd 057f 7fe1 051a 7fe5     G...............
10011d4c:	04b6 7fe9 0451 7fed 03ed 7ff0 0388 7ff3     ....Q...........
10011d5c:	0324 7ff6 02bf 7ff8 025b 7ffa 01f6 7ffc     $.......[.......
10011d6c:	0192 7ffd 012d 7ffe 00c9 7fff 0064 7fff     ....-.......d...
10011d7c:	0000 7fff ff9b 7fff ff36 7fff fed2 7ffe     ........6.......
10011d8c:	fe6d 7ffd fe09 7ffc fda4 7ffa fd40 7ff8     m...........@...
10011d9c:	fcdb 7ff6 fc77 7ff3 fc12 7ff0 fbae 7fed     ....w...........
10011dac:	fb49 7fe9 fae5 7fe5 fa80 7fe1 fa1c 7fdd     I...............
10011dbc:	f9b8 7fd8 f953 7fd3 f8ef 7fce f88a 7fc8     ....S...........
10011dcc:	f826 7fc2 f7c2 7fbc f75d 7fb5 f6f9 7fae     &.......].......
10011ddc:	f695 7fa7 f631 7f9f f5cc 7f97 f568 7f8f     ....1.......h...
10011dec:	f504 7f87 f4a0 7f7e f43c 7f75 f3d8 7f6b     ......~.<.u...k.
10011dfc:	f374 7f62 f310 7f58 f2ac 7f4d f248 7f43     t.b...X...M.H.C.
10011e0c:	f1e4 7f38 f180 7f2d f11c 7f21 f0b8 7f15     ..8...-...!.....
10011e1c:	f054 7f09 eff1 7efd ef8d 7ef0 ef29 7ee3     T......~...~)..~
10011e2c:	eec6 7ed5 ee62 7ec8 edfe 7eba ed9b 7eab     ...~b..~...~...~
10011e3c:	ed37 7e9d ecd4 7e8e ec71 7e7f ec0d 7e6f     7..~...~q..~..o~
10011e4c:	ebaa 7e5f eb47 7e4f eae4 7e3f ea80 7e2e     .._~G.O~..?~...~
10011e5c:	ea1d 7e1d e9ba 7e0c e957 7dfa e8f5 7de8     ...~...~W..}...}
10011e6c:	e892 7dd6 e82f 7dc3 e7cc 7db0 e769 7d9d     ...}/..}...}i..}
10011e7c:	e707 7d8a e6a4 7d76 e642 7d62 e5df 7d4e     ...}..v}B.b}..N}
10011e8c:	e57d 7d39 e51b 7d24 e4b8 7d0f e456 7cf9     }.9}..$}...}V..|
10011e9c:	e3f4 7ce3 e392 7ccd e330 7cb7 e2ce 7ca0     ...|...|0..|...|
10011eac:	e26c 7c89 e20a 7c71 e1a9 7c5a e147 7c42     l..|..q|..Z|G.B|
10011ebc:	e0e6 7c29 e084 7c11 e023 7bf8 dfc1 7bdf     ..)|...|#..{...{
10011ecc:	df60 7bc5 deff 7bac de9e 7b92 de3d 7b77     `..{...{...{=.w{
10011edc:	dddc 7b5d dd7b 7b42 dd1a 7b26 dcba 7b0b     ..]{{.B{..&{...{
10011eec:	dc59 7aef dbf8 7ad3 db98 7ab6 db38 7a9a     Y..z...z...z8..z
10011efc:	dad7 7a7d da77 7a5f da17 7a42 d9b7 7a24     ..}zw._z..Bz..$z
10011f0c:	d957 7a05 d8f8 79e7 d898 79c8 d838 79a9     W..z...y...y8..y
10011f1c:	d7d9 798a d779 796a d71a 794a d6bb 792a     ...yy.jy..Jy..*y
10011f2c:	d65c 7909 d5fd 78e8 d59e 78c7 d53f 78a6     \..y...x...x?..x
10011f3c:	d4e0 7884 d482 7862 d423 7840 d3c5 781d     ...x..bx#.@x...x
10011f4c:	d367 77fa d308 77d7 d2aa 77b4 d24c 7790     g..w...w...wL..w
10011f5c:	d1ee 776c d191 7747 d133 7723 d0d6 76fe     ..lw..Gw3.#w...v
10011f6c:	d078 76d9 d01b 76b3 cfbe 768e cf61 7668     x..v...v...va.hv
10011f7c:	cf04 7641 cea7 761b ce4a 75f4 cdee 75cc     ..Av...vJ..u...u
10011f8c:	cd91 75a5 cd35 757d ccd9 7555 cc7d 752d     ...u5.}u..Uu}.-u
10011f9c:	cc21 7504 cbc5 74db cb69 74b2 cb0d 7489     !..u...ti..t...t
10011fac:	cab2 745f ca57 7435 c9fb 740b c9a0 73e0     .._tW.5t...t...s
10011fbc:	c945 73b5 c8eb 738a c890 735f c835 7333     E..s...s.._s5.3s
10011fcc:	c7db 7307 c781 72db c727 72af c6cd 7282     ...s...r'..r...r
10011fdc:	c673 7255 c619 7227 c5bf 71fa c566 71cc     s.Ur..'r...qf..q
10011fec:	c50d 719e c4b3 716f c45a 7141 c402 7112     ...q..oqZ.Aq...q
10011ffc:	c3a9 70e2 c350 70b3 c2f8 7083 c29f 7053     ...pP..p...p..Sp
1001200c:	c247 7023 c1ef 6ff2 c197 6fc1 c140 6f90     G.#p...o...o@..o
1001201c:	c0e8 6f5f c091 6f2d c03a 6efb bfe2 6ec9     .._o..-o:..n...n
1001202c:	bf8c 6e96 bf35 6e63 bede 6e30 be88 6dfd     ...n5.cn..0n...m
1001203c:	be31 6dca bddb 6d96 bd85 6d62 bd2f 6d2d     1..m...m..bm/.-m
1001204c:	bcda 6cf9 bc84 6cc4 bc2f 6c8f bbda 6c59     ...l...l/..l..Yl
1001205c:	bb85 6c24 bb30 6bee badb 6bb8 ba87 6b81     ..$l0..k...k...k
1001206c:	ba32 6b4a b9de 6b13 b98a 6adc b936 6aa5     2.Jk...k...j6..j
1001207c:	b8e3 6a6d b88f 6a35 b83c 69fd b7e9 69c4     ..mj..5j<..i...i
1001208c:	b796 698c b743 6953 b6f0 6919 b69e 68e0     ...iC.Si...i...h
1001209c:	b64b 68a6 b5f9 686c b5a7 6832 b556 67f7     K..h..lh..2hV..g
100120ac:	b504 67bd b4b3 6782 b461 6746 b410 670b     ...g...ga.Fg...g
100120bc:	b3c0 66cf b36f 6693 b31e 6657 b2ce 661a     ...fo..f..Wf...f
100120cc:	b27e 65dd b22e 65a0 b1de 6563 b18f 6526     ~..e...e..ce..&e
100120dc:	b140 64e8 b0f0 64aa b0a1 646c b053 642d     @..d...d..ldS.-d
100120ec:	b004 63ef afb6 63b0 af68 6371 af1a 6331     ...c...ch.qc..1c
100120fc:	aecc 62f2 ae7e 62b2 ae31 6271 ade3 6231     ...b~..b1.qb..1b
1001210c:	ad96 61f1 ad4a 61b0 acfd 616f acb1 612d     ...aJ..a..oa..-a
1001211c:	ac64 60ec ac18 60aa abcc 6068 ab81 6026     d..`...`..h`..&`
1001212c:	ab35 5fe3 aaea 5fa0 aa9f 5f5e aa54 5f1a     5.._..._..^_T.._
1001213c:	aa0a 5ed7 a9bf 5e93 a975 5e50 a92b 5e0b     ...^...^u.P^+..^
1001214c:	a8e2 5dc7 a898 5d83 a84f 5d3e a806 5cf9     ...]...]O.>]...\
1001215c:	a7bd 5cb4 a774 5c6e a72b 5c29 a6e3 5be3     ...\t.n\+.)\...[
1001216c:	a69b 5b9d a653 5b56 a60c 5b10 a5c4 5ac9     ...[S.V[...[...Z
1001217c:	a57d 5a82 a536 5a3b a4ef 59f3 a4a9 59ac     }..Z6.;Z...Y...Y
1001218c:	a462 5964 a41c 591c a3d6 58d4 a391 588b     b.dY...Y...X...X
1001219c:	a34b 5842 a306 57f9 a2c1 57b0 a27c 5767     K.BX...W...W|.gW
100121ac:	a238 571d a1f4 56d4 a1af 568a a16c 5640     8..W...V...Vl.@V
100121bc:	a128 55f5 a0e5 55ab a0a1 5560 a05f 5515     (..U...U..`U_..U
100121cc:	a01c 54ca 9fd9 547e 9f97 5433 9f55 53e7     ...T..~T..3TU..S
100121dc:	9f13 539b 9ed2 534e 9e90 5302 9e4f 52b5     ...S..NS...SO..R
100121ec:	9e0e 5269 9dce 521c 9d8e 51ce 9d4d 5181     ..iR...R...QM..Q
100121fc:	9d0d 5133 9cce 50e5 9c8e 5097 9c4f 5049     ..3Q...P...PO.IP
1001220c:	9c10 4ffb 9bd2 4fac 9b93 4f5e 9b55 4f0f     ...O...O..^OU..O
1001221c:	9b17 4ebf 9ad9 4e70 9a9c 4e21 9a5f 4dd1     ...N..pN..!N_..M
1001222c:	9a22 4d81 99e5 4d31 99a8 4ce1 996c 4c90     "..M..1M...Ll..L
1001223c:	9930 4c3f 98f4 4bef 98b9 4b9e 987d 4b4c     0.?L...K...K}.LK
1001224c:	9842 4afb 9808 4aa9 97cd 4a58 9793 4a06     B..J...J..XJ...J
1001225c:	9759 49b4 971f 4961 96e6 490f 96ac 48bc     Y..I..aI...I...H
1001226c:	9673 4869 963b 4816 9602 47c3 95ca 4770     s.iH;..H...G..pG
1001227c:	9592 471c 955a 46c9 9523 4675 94ec 4621     ...GZ..F#.uF..!F
1001228c:	94b5 45cd 947e 4578 9447 4524 9411 44cf     ...E~.xEG.$E...D
1001229c:	93db 447a 93a6 4425 9370 43d0 933b 437b     ..zD..%Dp..C;.{C
100122ac:	9306 4325 92d2 42d0 929d 427a 9269 4224     ..%C...B..zBi.$B
100122bc:	9235 41ce 9202 4177 91cf 4121 919c 40ca     5..A..wA..!A...@
100122cc:	9169 4073 9136 401d 9104 3fc5 90d2 3f6e     i.s@6..@...?..n?
100122dc:	90a0 3f17 906f 3ebf 903e 3e68 900d 3e10     ...?o..>>.h>...>
100122ec:	8fdc 3db8 8fac 3d60 8f7c 3d07 8f4c 3caf     ...=..`=|..=L..<
100122fc:	8f1d 3c56 8eed 3bfd 8ebe 3ba5 8e90 3b4c     ..V<...;...;..L;
1001230c:	8e61 3af2 8e33 3a99 8e05 3a40 8dd8 39e6     a..:3..:..@:...9
1001231c:	8daa 398c 8d7d 3932 8d50 38d8 8d24 387e     ...9}.29P..8$.~8
1001232c:	8cf8 3824 8ccc 37ca 8ca0 376f 8c75 3714     ..$8...7..o7u..7
1001233c:	8c4a 36ba 8c1f 365f 8bf4 3604 8bca 35a8     J..6.._6...6...5
1001234c:	8ba0 354d 8b76 34f2 8b4d 3496 8b24 343a     ..M5v..4M..4$.:4
1001235c:	8afb 33de 8ad2 3382 8aaa 3326 8a82 32ca     ...3...3..&3...2
1001236c:	8a5a 326e 8a33 3211 8a0b 31b5 89e4 3158     Z.n23..2...1..X1
1001237c:	89be 30fb 8997 309e 8971 3041 894c 2fe4     ...0...0q.A0L../
1001238c:	8926 2f87 8901 2f29 88dc 2ecc 88b8 2e6e     &../..)/......n.
1001239c:	8893 2e11 886f 2db3 884b 2d55 8828 2cf7     ....o..-K.U-(..,
100123ac:	8805 2c98 87e2 2c3a 87bf 2bdc 879d 2b7d     ...,..:,...+..}+
100123bc:	877b 2b1f 8759 2ac0 8738 2a61 8717 2a02     {..+Y..*8.a*...*
100123cc:	86f6 29a3 86d5 2944 86b5 28e5 8695 2886     ...)..D)...(...(
100123dc:	8675 2826 8656 27c7 8637 2767 8618 2707     u.&(V..'7.g'...'
100123ec:	85fa 26a8 85db 2648 85bd 25e8 85a0 2588     ...&..H&...%...%
100123fc:	8582 2528 8565 24c7 8549 2467 852c 2407     ..(%e..$I.g$,..$
1001240c:	8510 23a6 84f4 2345 84d9 22e5 84bd 2284     ...#..E#..."..."
1001241c:	84a2 2223 8488 21c2 846d 2161 8453 2100     ..#"...!m.a!S..!
1001242c:	843a 209f 8420 203e 8407 1fdc 83ee 1f7b     :..  .> ......{.
1001243c:	83d6 1f19 83bd 1eb8 83a5 1e56 838e 1df5     ..........V.....
1001244c:	8376 1d93 835f 1d31 8348 1ccf 8332 1c6d     v..._.1.H...2.m.
1001245c:	831c 1c0b 8306 1ba9 82f0 1b47 82db 1ae4     ..........G.....
1001246c:	82c6 1a82 82b1 1a20 829d 19bd 8289 195b     ...... .......[.
1001247c:	8275 18f8 8262 1896 824f 1833 823c 17d0     u...b...O.3.<...
1001248c:	8229 176d 8217 170a 8205 16a8 81f3 1645     ).m...........E.
1001249c:	81e2 15e2 81d1 157f 81c0 151b 81b0 14b8     ................
100124ac:	81a0 1455 8190 13f2 8180 138e 8171 132b     ..U.........q.+.
100124bc:	8162 12c8 8154 1264 8145 1201 8137 119d     b...T.d.E...7...
100124cc:	812a 1139 811c 10d6 810f 1072 8102 100e     *.9.......r.....
100124dc:	80f6 0fab 80ea 0f47 80de 0ee3 80d2 0e7f     ......G.........
100124ec:	80c7 0e1b 80bc 0db7 80b2 0d53 80a7 0cef     ..........S.....
100124fc:	809d 0c8b 8094 0c27 808a 0bc3 8081 0b5f     ......'......._.
1001250c:	8078 0afb 8070 0a97 8068 0a33 8060 09ce     x...p...h.3.`...
1001251c:	8058 096a 8051 0906 804a 08a2 8043 083d     X.j.Q...J...C.=.
1001252c:	803d 07d9 8037 0775 8031 0710 802c 06ac     =...7.u.1...,...
1001253c:	8027 0647 8022 05e3 801e 057f 801a 051a     '.G."...........
1001254c:	8016 04b6 8012 0451 800f 03ed 800c 0388     ......Q.........
1001255c:	8009 0324 8007 02bf 8005 025b 8003 01f6     ..$.......[.....
1001256c:	8002 0192 8001 012d 8000 00c9 8000 0064     ......-.......d.
1001257c:	8000 0000 8000 ff9b 8000 ff36 8001 fed2     ..........6.....
1001258c:	8002 fe6d 8003 fe09 8005 fda4 8007 fd40     ..m...........@.
1001259c:	8009 fcdb 800c fc77 800f fc12 8012 fbae     ......w.........
100125ac:	8016 fb49 801a fae5 801e fa80 8022 fa1c     ..I........."...
100125bc:	8027 f9b8 802c f953 8031 f8ef 8037 f88a     '...,.S.1...7...
100125cc:	803d f826 8043 f7c2 804a f75d 8051 f6f9     =.&.C...J.].Q...
100125dc:	8058 f695 8060 f631 8068 f5cc 8070 f568     X...`.1.h...p.h.
100125ec:	8078 f504 8081 f4a0 808a f43c 8094 f3d8     x.........<.....
100125fc:	809d f374 80a7 f310 80b2 f2ac 80bc f248     ..t...........H.
1001260c:	80c7 f1e4 80d2 f180 80de f11c 80ea f0b8     ................
1001261c:	80f6 f054 8102 eff1 810f ef8d 811c ef29     ..T...........).
1001262c:	812a eec6 8137 ee62 8145 edfe 8154 ed9b     *...7.b.E...T...
1001263c:	8162 ed37 8171 ecd4 8180 ec71 8190 ec0d     b.7.q.....q.....
1001264c:	81a0 ebaa 81b0 eb47 81c0 eae4 81d1 ea80     ......G.........
1001265c:	81e2 ea1d 81f3 e9ba 8205 e957 8217 e8f5     ..........W.....
1001266c:	8229 e892 823c e82f 824f e7cc 8262 e769     )...<./.O...b.i.
1001267c:	8275 e707 8289 e6a4 829d e642 82b1 e5df     u.........B.....
1001268c:	82c6 e57d 82db e51b 82f0 e4b8 8306 e456     ..}...........V.
1001269c:	831c e3f4 8332 e392 8348 e330 835f e2ce     ....2...H.0._...
100126ac:	8376 e26c 838e e20a 83a5 e1a9 83bd e147     v.l...........G.
100126bc:	83d6 e0e6 83ee e084 8407 e023 8420 dfc1     ..........#. ...
100126cc:	843a df60 8453 deff 846d de9e 8488 de3d     :.`.S...m.....=.
100126dc:	84a2 dddc 84bd dd7b 84d9 dd1a 84f4 dcba     ......{.........
100126ec:	8510 dc59 852c dbf8 8549 db98 8565 db38     ..Y.,...I...e.8.
100126fc:	8582 dad7 85a0 da77 85bd da17 85db d9b7     ......w.........
1001270c:	85fa d957 8618 d8f8 8637 d898 8656 d838     ..W.....7...V.8.
1001271c:	8675 d7d9 8695 d779 86b5 d71a 86d5 d6bb     u.....y.........
1001272c:	86f6 d65c 8717 d5fd 8738 d59e 8759 d53f     ..\.....8...Y.?.
1001273c:	877b d4e0 879d d482 87bf d423 87e2 d3c5     {.........#.....
1001274c:	8805 d367 8828 d308 884b d2aa 886f d24c     ..g.(...K...o.L.
1001275c:	8893 d1ee 88b8 d191 88dc d133 8901 d0d6     ..........3.....
1001276c:	8926 d078 894c d01b 8971 cfbe 8997 cf61     &.x.L...q.....a.
1001277c:	89be cf04 89e4 cea7 8a0b ce4a 8a33 cdee     ..........J.3...
1001278c:	8a5a cd91 8a82 cd35 8aaa ccd9 8ad2 cc7d     Z.....5.......}.
1001279c:	8afb cc21 8b24 cbc5 8b4d cb69 8b76 cb0d     ..!.$...M.i.v...
100127ac:	8ba0 cab2 8bca ca57 8bf4 c9fb 8c1f c9a0     ......W.........
100127bc:	8c4a c945 8c75 c8eb 8ca0 c890 8ccc c835     J.E.u.........5.
100127cc:	8cf8 c7db 8d24 c781 8d50 c727 8d7d c6cd     ....$...P.'.}...
100127dc:	8daa c673 8dd8 c619 8e05 c5bf 8e33 c566     ..s.........3.f.
100127ec:	8e61 c50d 8e90 c4b3 8ebe c45a 8eed c402     a.........Z.....
100127fc:	8f1d c3a9 8f4c c350 8f7c c2f8 8fac c29f     ....L.P.|.......
1001280c:	8fdc c247 900d c1ef 903e c197 906f c140     ..G.....>...o.@.
1001281c:	90a0 c0e8 90d2 c091 9104 c03a 9136 bfe2     ..........:.6...
1001282c:	9169 bf8c 919c bf35 91cf bede 9202 be88     i.....5.........
1001283c:	9235 be31 9269 bddb 929d bd85 92d2 bd2f     5.1.i........./.
1001284c:	9306 bcda 933b bc84 9370 bc2f 93a6 bbda     ....;...p./.....
1001285c:	93db bb85 9411 bb30 9447 badb 947e ba87     ......0.G...~...
1001286c:	94b5 ba32 94ec b9de 9523 b98a 955a b936     ..2.....#...Z.6.
1001287c:	9592 b8e3 95ca b88f 9602 b83c 963b b7e9     ..........<.;...
1001288c:	9673 b796 96ac b743 96e6 b6f0 971f b69e     s.....C.........
1001289c:	9759 b64b 9793 b5f9 97cd b5a7 9808 b556     Y.K...........V.
100128ac:	9842 b504 987d b4b3 98b9 b461 98f4 b410     B...}.....a.....
100128bc:	9930 b3c0 996c b36f 99a8 b31e 99e5 b2ce     0...l.o.........
100128cc:	9a22 b27e 9a5f b22e 9a9c b1de 9ad9 b18f     ".~._...........
100128dc:	9b17 b140 9b55 b0f0 9b93 b0a1 9bd2 b053     ..@.U.........S.
100128ec:	9c10 b004 9c4f afb6 9c8e af68 9cce af1a     ....O.....h.....
100128fc:	9d0d aecc 9d4d ae7e 9d8e ae31 9dce ade3     ....M.~...1.....
1001290c:	9e0e ad96 9e4f ad4a 9e90 acfd 9ed2 acb1     ....O.J.........
1001291c:	9f13 ac64 9f55 ac18 9f97 abcc 9fd9 ab81     ..d.U...........
1001292c:	a01c ab35 a05f aaea a0a1 aa9f a0e5 aa54     ..5._.........T.
1001293c:	a128 aa0a a16c a9bf a1af a975 a1f4 a92b     (...l.....u...+.
1001294c:	a238 a8e2 a27c a898 a2c1 a84f a306 a806     8...|.....O.....
1001295c:	a34b a7bd a391 a774 a3d6 a72b a41c a6e3     K.....t...+.....
1001296c:	a462 a69b a4a9 a653 a4ef a60c a536 a5c4     b.....S.....6...
1001297c:	a57d a57d a5c4 a536 a60c a4ef a653 a4a9     }.}...6.....S...
1001298c:	a69b a462 a6e3 a41c a72b a3d6 a774 a391     ..b.....+...t...
1001299c:	a7bd a34b a806 a306 a84f a2c1 a898 a27c     ..K.....O.....|.
100129ac:	a8e2 a238 a92b a1f4 a975 a1af a9bf a16c     ..8.+...u.....l.
100129bc:	aa0a a128 aa54 a0e5 aa9f a0a1 aaea a05f     ..(.T........._.
100129cc:	ab35 a01c ab81 9fd9 abcc 9f97 ac18 9f55     5.............U.
100129dc:	ac64 9f13 acb1 9ed2 acfd 9e90 ad4a 9e4f     d...........J.O.
100129ec:	ad96 9e0e ade3 9dce ae31 9d8e ae7e 9d4d     ........1...~.M.
100129fc:	aecc 9d0d af1a 9cce af68 9c8e afb6 9c4f     ........h.....O.
10012a0c:	b004 9c10 b053 9bd2 b0a1 9b93 b0f0 9b55     ....S.........U.
10012a1c:	b140 9b17 b18f 9ad9 b1de 9a9c b22e 9a5f     @............._.
10012a2c:	b27e 9a22 b2ce 99e5 b31e 99a8 b36f 996c     ~.".........o.l.
10012a3c:	b3c0 9930 b410 98f4 b461 98b9 b4b3 987d     ..0.....a.....}.
10012a4c:	b504 9842 b556 9808 b5a7 97cd b5f9 9793     ..B.V...........
10012a5c:	b64b 9759 b69e 971f b6f0 96e6 b743 96ac     K.Y.........C...
10012a6c:	b796 9673 b7e9 963b b83c 9602 b88f 95ca     ..s...;.<.......
10012a7c:	b8e3 9592 b936 955a b98a 9523 b9de 94ec     ....6.Z...#.....
10012a8c:	ba32 94b5 ba87 947e badb 9447 bb30 9411     2.....~...G.0...
10012a9c:	bb85 93db bbda 93a6 bc2f 9370 bc84 933b     ......../.p...;.
10012aac:	bcda 9306 bd2f 92d2 bd85 929d bddb 9269     ..../.........i.
10012abc:	be31 9235 be88 9202 bede 91cf bf35 919c     1.5.........5...
10012acc:	bf8c 9169 bfe2 9136 c03a 9104 c091 90d2     ..i...6.:.......
10012adc:	c0e8 90a0 c140 906f c197 903e c1ef 900d     ....@.o...>.....
10012aec:	c247 8fdc c29f 8fac c2f8 8f7c c350 8f4c     G.........|.P.L.
10012afc:	c3a9 8f1d c402 8eed c45a 8ebe c4b3 8e90     ........Z.......
10012b0c:	c50d 8e61 c566 8e33 c5bf 8e05 c619 8dd8     ..a.f.3.........
10012b1c:	c673 8daa c6cd 8d7d c727 8d50 c781 8d24     s.....}.'.P...$.
10012b2c:	c7db 8cf8 c835 8ccc c890 8ca0 c8eb 8c75     ....5.........u.
10012b3c:	c945 8c4a c9a0 8c1f c9fb 8bf4 ca57 8bca     E.J.........W...
10012b4c:	cab2 8ba0 cb0d 8b76 cb69 8b4d cbc5 8b24     ......v.i.M...$.
10012b5c:	cc21 8afb cc7d 8ad2 ccd9 8aaa cd35 8a82     !...}.......5...
10012b6c:	cd91 8a5a cdee 8a33 ce4a 8a0b cea7 89e4     ..Z...3.J.......
10012b7c:	cf04 89be cf61 8997 cfbe 8971 d01b 894c     ....a.....q...L.
10012b8c:	d078 8926 d0d6 8901 d133 88dc d191 88b8     x.&.....3.......
10012b9c:	d1ee 8893 d24c 886f d2aa 884b d308 8828     ....L.o...K...(.
10012bac:	d367 8805 d3c5 87e2 d423 87bf d482 879d     g.......#.......
10012bbc:	d4e0 877b d53f 8759 d59e 8738 d5fd 8717     ..{.?.Y...8.....
10012bcc:	d65c 86f6 d6bb 86d5 d71a 86b5 d779 8695     \...........y...
10012bdc:	d7d9 8675 d838 8656 d898 8637 d8f8 8618     ..u.8.V...7.....
10012bec:	d957 85fa d9b7 85db da17 85bd da77 85a0     W...........w...
10012bfc:	dad7 8582 db38 8565 db98 8549 dbf8 852c     ....8.e...I...,.
10012c0c:	dc59 8510 dcba 84f4 dd1a 84d9 dd7b 84bd     Y...........{...
10012c1c:	dddc 84a2 de3d 8488 de9e 846d deff 8453     ....=.....m...S.
10012c2c:	df60 843a dfc1 8420 e023 8407 e084 83ee     `.:... .#.......
10012c3c:	e0e6 83d6 e147 83bd e1a9 83a5 e20a 838e     ....G...........
10012c4c:	e26c 8376 e2ce 835f e330 8348 e392 8332     l.v..._.0.H...2.
10012c5c:	e3f4 831c e456 8306 e4b8 82f0 e51b 82db     ....V...........
10012c6c:	e57d 82c6 e5df 82b1 e642 829d e6a4 8289     }.......B.......
10012c7c:	e707 8275 e769 8262 e7cc 824f e82f 823c     ..u.i.b...O./.<.
10012c8c:	e892 8229 e8f5 8217 e957 8205 e9ba 81f3     ..).....W.......
10012c9c:	ea1d 81e2 ea80 81d1 eae4 81c0 eb47 81b0     ............G...
10012cac:	ebaa 81a0 ec0d 8190 ec71 8180 ecd4 8171     ........q.....q.
10012cbc:	ed37 8162 ed9b 8154 edfe 8145 ee62 8137     7.b...T...E.b.7.
10012ccc:	eec6 812a ef29 811c ef8d 810f eff1 8102     ..*.)...........
10012cdc:	f054 80f6 f0b8 80ea f11c 80de f180 80d2     T...............
10012cec:	f1e4 80c7 f248 80bc f2ac 80b2 f310 80a7     ....H...........
10012cfc:	f374 809d f3d8 8094 f43c 808a f4a0 8081     t.......<.......
10012d0c:	f504 8078 f568 8070 f5cc 8068 f631 8060     ..x.h.p...h.1.`.
10012d1c:	f695 8058 f6f9 8051 f75d 804a f7c2 8043     ..X...Q.].J...C.
10012d2c:	f826 803d f88a 8037 f8ef 8031 f953 802c     &.=...7...1.S.,.
10012d3c:	f9b8 8027 fa1c 8022 fa80 801e fae5 801a     ..'...".........
10012d4c:	fb49 8016 fbae 8012 fc12 800f fc77 800c     I...........w...
10012d5c:	fcdb 8009 fd40 8007 fda4 8005 fe09 8003     ....@...........
10012d6c:	fe6d 8002 fed2 8001 ff36 8000 ff9b 8000     m.......6.......

10012d7c <twiddleCoef_256_q15>:
10012d7c:	7fff 0000 7ff6 0324 7fd8 0647 7fa7 096a     ......$...G...j.
10012d8c:	7f62 0c8b 7f09 0fab 7e9d 12c8 7e1d 15e2     b........~...~..
10012d9c:	7d8a 18f8 7ce3 1c0b 7c29 1f19 7b5d 2223     .}...|..)|..]{#"
10012dac:	7a7d 2528 798a 2826 7884 2b1f 776c 2e11     }z(%.y&(.x.+lw..
10012dbc:	7641 30fb 7504 33de 73b5 36ba 7255 398c     Av.0.u.3.s.6Ur.9
10012dcc:	70e2 3c56 6f5f 3f17 6dca 41ce 6c24 447a     .pV<_o.?.m.A$lzD
10012ddc:	6a6d 471c 68a6 49b4 66cf 4c3f 64e8 4ebf     mj.G.h.I.f?L.d.N
10012dec:	62f2 5133 60ec 539b 5ed7 55f5 5cb4 5842     .b3Q.`.S.^.U.\BX
10012dfc:	5a82 5a82 5842 5cb4 55f5 5ed7 539b 60ec     .Z.ZBX.\.U.^.S.`
10012e0c:	5133 62f2 4ebf 64e8 4c3f 66cf 49b4 68a6     3Q.b.N.d?L.f.I.h
10012e1c:	471c 6a6d 447a 6c24 41ce 6dca 3f17 6f5f     .GmjzD$l.A.m.?_o
10012e2c:	3c56 70e2 398c 7255 36ba 73b5 33de 7504     V<.p.9Ur.6.s.3.u
10012e3c:	30fb 7641 2e11 776c 2b1f 7884 2826 798a     .0Av..lw.+.x&(.y
10012e4c:	2528 7a7d 2223 7b5d 1f19 7c29 1c0b 7ce3     (%}z#"]{..)|...|
10012e5c:	18f8 7d8a 15e2 7e1d 12c8 7e9d 0fab 7f09     ...}...~...~....
10012e6c:	0c8b 7f62 096a 7fa7 0647 7fd8 0324 7ff6     ..b.j...G...$...
10012e7c:	0000 7fff fcdb 7ff6 f9b8 7fd8 f695 7fa7     ................
10012e8c:	f374 7f62 f054 7f09 ed37 7e9d ea1d 7e1d     t.b.T...7..~...~
10012e9c:	e707 7d8a e3f4 7ce3 e0e6 7c29 dddc 7b5d     ...}...|..)|..]{
10012eac:	dad7 7a7d d7d9 798a d4e0 7884 d1ee 776c     ..}z...y...x..lw
10012ebc:	cf04 7641 cc21 7504 c945 73b5 c673 7255     ..Av!..uE..ss.Ur
10012ecc:	c3a9 70e2 c0e8 6f5f be31 6dca bb85 6c24     ...p.._o1..m..$l
10012edc:	b8e3 6a6d b64b 68a6 b3c0 66cf b140 64e8     ..mjK..h...f@..d
10012eec:	aecc 62f2 ac64 60ec aa0a 5ed7 a7bd 5cb4     ...bd..`...^...\
10012efc:	a57d 5a82 a34b 5842 a128 55f5 9f13 539b     }..ZK.BX(..U...S
10012f0c:	9d0d 5133 9b17 4ebf 9930 4c3f 9759 49b4     ..3Q...N0.?LY..I
10012f1c:	9592 471c 93db 447a 9235 41ce 90a0 3f17     ...G..zD5..A...?
10012f2c:	8f1d 3c56 8daa 398c 8c4a 36ba 8afb 33de     ..V<...9J..6...3
10012f3c:	89be 30fb 8893 2e11 877b 2b1f 8675 2826     ...0....{..+u.&(
10012f4c:	8582 2528 84a2 2223 83d6 1f19 831c 1c0b     ..(%..#"........
10012f5c:	8275 18f8 81e2 15e2 8162 12c8 80f6 0fab     u.......b.......
10012f6c:	809d 0c8b 8058 096a 8027 0647 8009 0324     ....X.j.'.G...$.
10012f7c:	8000 0000 8009 fcdb 8027 f9b8 8058 f695     ........'...X...
10012f8c:	809d f374 80f6 f054 8162 ed37 81e2 ea1d     ..t...T.b.7.....
10012f9c:	8275 e707 831c e3f4 83d6 e0e6 84a2 dddc     u...............
10012fac:	8582 dad7 8675 d7d9 877b d4e0 8893 d1ee     ....u...{.......
10012fbc:	89be cf04 8afb cc21 8c4a c945 8daa c673     ......!.J.E...s.
10012fcc:	8f1d c3a9 90a0 c0e8 9235 be31 93db bb85     ........5.1.....
10012fdc:	9592 b8e3 9759 b64b 9930 b3c0 9b17 b140     ....Y.K.0.....@.
10012fec:	9d0d aecc 9f13 ac64 a128 aa0a a34b a7bd     ......d.(...K...
10012ffc:	a57d a57d a7bd a34b aa0a a128 ac64 9f13     }.}...K...(.d...
1001300c:	aecc 9d0d b140 9b17 b3c0 9930 b64b 9759     ....@.....0.K.Y.
1001301c:	b8e3 9592 bb85 93db be31 9235 c0e8 90a0     ........1.5.....
1001302c:	c3a9 8f1d c673 8daa c945 8c4a cc21 8afb     ....s...E.J.!...
1001303c:	cf04 89be d1ee 8893 d4e0 877b d7d9 8675     ..........{...u.
1001304c:	dad7 8582 dddc 84a2 e0e6 83d6 e3f4 831c     ................
1001305c:	e707 8275 ea1d 81e2 ed37 8162 f054 80f6     ..u.....7.b.T...
1001306c:	f374 809d f695 8058 f9b8 8027 fcdb 8009     t.....X...'.....

1001307c <twiddleCoef_32_q15>:
1001307c:	7fff 0000 7d8a 18f8 7641 30fb 6a6d 471c     .....}..Av.0mj.G
1001308c:	5a82 5a82 471c 6a6d 30fb 7641 18f8 7d8a     .Z.Z.Gmj.0Av...}
1001309c:	0000 7fff e707 7d8a cf04 7641 b8e3 6a6d     .......}..Av..mj
100130ac:	a57d 5a82 9592 471c 89be 30fb 8275 18f8     }..Z...G...0u...
100130bc:	8000 0000 8275 e707 89be cf04 9592 b8e3     ....u...........
100130cc:	a57d a57d b8e3 9592 cf04 89be e707 8275     }.}...........u.

100130dc <twiddleCoef_4096_q15>:
100130dc:	7fff 0000 7fff 0032 7fff 0064 7fff 0096     ......2...d.....
100130ec:	7fff 00c9 7fff 00fb 7ffe 012d 7ffe 015f     ..........-..._.
100130fc:	7ffd 0192 7ffc 01c4 7ffc 01f6 7ffb 0228     ..............(.
1001310c:	7ffa 025b 7ff9 028d 7ff8 02bf 7ff7 02f1     ..[.............
1001311c:	7ff6 0324 7ff4 0356 7ff3 0388 7ff2 03ba     ..$...V.........
1001312c:	7ff0 03ed 7fee 041f 7fed 0451 7feb 0483     ..........Q.....
1001313c:	7fe9 04b6 7fe7 04e8 7fe5 051a 7fe3 054c     ..............L.
1001314c:	7fe1 057f 7fdf 05b1 7fdd 05e3 7fda 0615     ................
1001315c:	7fd8 0647 7fd6 067a 7fd3 06ac 7fd0 06de     ..G...z.........
1001316c:	7fce 0710 7fcb 0742 7fc8 0775 7fc5 07a7     ......B...u.....
1001317c:	7fc2 07d9 7fbf 080b 7fbc 083d 7fb8 086f     ..........=...o.
1001318c:	7fb5 08a2 7fb1 08d4 7fae 0906 7faa 0938     ..............8.
1001319c:	7fa7 096a 7fa3 099c 7f9f 09ce 7f9b 0a00     ..j.............
100131ac:	7f97 0a33 7f93 0a65 7f8f 0a97 7f8b 0ac9     ..3...e.........
100131bc:	7f87 0afb 7f82 0b2d 7f7e 0b5f 7f79 0b91     ......-.~._.y...
100131cc:	7f75 0bc3 7f70 0bf5 7f6b 0c27 7f67 0c59     u...p...k.'.g.Y.
100131dc:	7f62 0c8b 7f5d 0cbd 7f58 0cef 7f53 0d21     b...]...X...S.!.
100131ec:	7f4d 0d53 7f48 0d85 7f43 0db7 7f3d 0de9     M.S.H...C...=...
100131fc:	7f38 0e1b 7f32 0e4d 7f2d 0e7f 7f27 0eb1     8...2.M.-...'...
1001320c:	7f21 0ee3 7f1b 0f15 7f15 0f47 7f0f 0f79     !.........G...y.
1001321c:	7f09 0fab 7f03 0fdd 7efd 100e 7ef6 1040     .........~...~@.
1001322c:	7ef0 1072 7ee9 10a4 7ee3 10d6 7edc 1108     .~r..~...~...~..
1001323c:	7ed5 1139 7ecf 116b 7ec8 119d 7ec1 11cf     .~9..~k..~...~..
1001324c:	7eba 1201 7eb3 1232 7eab 1264 7ea4 1296     .~...~2..~d..~..
1001325c:	7e9d 12c8 7e95 12f9 7e8e 132b 7e86 135d     .~...~...~+..~].
1001326c:	7e7f 138e 7e77 13c0 7e6f 13f2 7e67 1423     .~..w~..o~..g~#.
1001327c:	7e5f 1455 7e57 1487 7e4f 14b8 7e47 14ea     _~U.W~..O~..G~..
1001328c:	7e3f 151b 7e37 154d 7e2e 157f 7e26 15b0     ?~..7~M..~..&~..
1001329c:	7e1d 15e2 7e14 1613 7e0c 1645 7e03 1676     .~...~...~E..~v.
100132ac:	7dfa 16a8 7df1 16d9 7de8 170a 7ddf 173c     .}...}...}...}<.
100132bc:	7dd6 176d 7dcd 179f 7dc3 17d0 7dba 1802     .}m..}...}...}..
100132cc:	7db0 1833 7da7 1864 7d9d 1896 7d94 18c7     .}3..}d..}...}..
100132dc:	7d8a 18f8 7d80 192a 7d76 195b 7d6c 198c     .}...}*.v}[.l}..
100132ec:	7d62 19bd 7d58 19ef 7d4e 1a20 7d43 1a51     b}..X}..N} .C}Q.
100132fc:	7d39 1a82 7d2f 1ab3 7d24 1ae4 7d19 1b16     9}../}..$}...}..
1001330c:	7d0f 1b47 7d04 1b78 7cf9 1ba9 7cee 1bda     .}G..}x..|...|..
1001331c:	7ce3 1c0b 7cd8 1c3c 7ccd 1c6d 7cc2 1c9e     .|...|<..|m..|..
1001332c:	7cb7 1ccf 7cab 1d00 7ca0 1d31 7c94 1d62     .|...|...|1..|b.
1001333c:	7c89 1d93 7c7d 1dc4 7c71 1df5 7c66 1e25     .|..}|..q|..f|%.
1001334c:	7c5a 1e56 7c4e 1e87 7c42 1eb8 7c36 1ee9     Z|V.N|..B|..6|..
1001335c:	7c29 1f19 7c1d 1f4a 7c11 1f7b 7c05 1fac     )|...|J..|{..|..
1001336c:	7bf8 1fdc 7beb 200d 7bdf 203e 7bd2 206e     .{...{. .{> .{n 
1001337c:	7bc5 209f 7bb9 20d0 7bac 2100 7b9f 2131     .{. .{. .{.!.{1!
1001338c:	7b92 2161 7b84 2192 7b77 21c2 7b6a 21f3     .{a!.{.!w{.!j{.!
1001339c:	7b5d 2223 7b4f 2254 7b42 2284 7b34 22b4     ]{#"O{T"B{."4{."
100133ac:	7b26 22e5 7b19 2315 7b0b 2345 7afd 2376     &{.".{.#.{E#.zv#
100133bc:	7aef 23a6 7ae1 23d6 7ad3 2407 7ac5 2437     .z.#.z.#.z.$.z7$
100133cc:	7ab6 2467 7aa8 2497 7a9a 24c7 7a8b 24f7     .zg$.z.$.z.$.z.$
100133dc:	7a7d 2528 7a6e 2558 7a5f 2588 7a50 25b8     }z(%nzX%_z.%Pz.%
100133ec:	7a42 25e8 7a33 2618 7a24 2648 7a15 2678     Bz.%3z.&$zH&.zx&
100133fc:	7a05 26a8 79f6 26d8 79e7 2707 79d8 2737     .z.&.y.&.y.'.y7'
1001340c:	79c8 2767 79b9 2797 79a9 27c7 7999 27f6     .yg'.y.'.y.'.y.'
1001341c:	798a 2826 797a 2856 796a 2886 795a 28b5     .y&(zyV(jy.(Zy.(
1001342c:	794a 28e5 793a 2915 792a 2944 7919 2974     Jy.(:y.)*yD).yt)
1001343c:	7909 29a3 78f9 29d3 78e8 2a02 78d8 2a32     .y.).x.).x.*.x2*
1001344c:	78c7 2a61 78b6 2a91 78a6 2ac0 7895 2aef     .xa*.x.*.x.*.x.*
1001345c:	7884 2b1f 7873 2b4e 7862 2b7d 7851 2bad     .x.+sxN+bx}+Qx.+
1001346c:	7840 2bdc 782e 2c0b 781d 2c3a 780c 2c69     @x.+.x.,.x:,.xi,
1001347c:	77fa 2c98 77e9 2cc8 77d7 2cf7 77c5 2d26     .w.,.w.,.w.,.w&-
1001348c:	77b4 2d55 77a2 2d84 7790 2db3 777e 2de2     .wU-.w.-.w.-~w.-
1001349c:	776c 2e11 775a 2e3f 7747 2e6e 7735 2e9d     lw..Zw?.Gwn.5w..
100134ac:	7723 2ecc 7710 2efb 76fe 2f29 76eb 2f58     #w...w...v)/.vX/
100134bc:	76d9 2f87 76c6 2fb5 76b3 2fe4 76a0 3013     .v./.v./.v./.v.0
100134cc:	768e 3041 767b 3070 7668 309e 7654 30cd     .vA0{vp0hv.0Tv.0
100134dc:	7641 30fb 762e 312a 761b 3158 7607 3186     Av.0.v*1.vX1.v.1
100134ec:	75f4 31b5 75e0 31e3 75cc 3211 75b9 3240     .u.1.u.1.u.2.u@2
100134fc:	75a5 326e 7591 329c 757d 32ca 7569 32f8     .un2.u.2}u.2iu.2
1001350c:	7555 3326 7541 3354 752d 3382 7519 33b0     Uu&3AuT3-u.3.u.3
1001351c:	7504 33de 74f0 340c 74db 343a 74c7 3468     .u.3.t.4.t:4.th4
1001352c:	74b2 3496 749e 34c4 7489 34f2 7474 351f     .t.4.t.4.t.4tt.5
1001353c:	745f 354d 744a 357b 7435 35a8 7420 35d6     _tM5Jt{55t.5 t.5
1001354c:	740b 3604 73f6 3631 73e0 365f 73cb 368c     .t.6.s16.s_6.s.6
1001355c:	73b5 36ba 73a0 36e7 738a 3714 7375 3742     .s.6.s.6.s.7usB7
1001356c:	735f 376f 7349 379c 7333 37ca 731d 37f7     _so7Is.73s.7.s.7
1001357c:	7307 3824 72f1 3851 72db 387e 72c5 38ab     .s$8.rQ8.r~8.r.8
1001358c:	72af 38d8 7298 3906 7282 3932 726b 395f     .r.8.r.9.r29kr_9
1001359c:	7255 398c 723e 39b9 7227 39e6 7211 3a13     Ur.9>r.9'r.9.r.:
100135ac:	71fa 3a40 71e3 3a6c 71cc 3a99 71b5 3ac6     .q@:.ql:.q.:.q.:
100135bc:	719e 3af2 7186 3b1f 716f 3b4c 7158 3b78     .q.:.q.;oqL;Xqx;
100135cc:	7141 3ba5 7129 3bd1 7112 3bfd 70fa 3c2a     Aq.;)q.;.q.;.p*<
100135dc:	70e2 3c56 70cb 3c83 70b3 3caf 709b 3cdb     .pV<.p.<.p.<.p.<
100135ec:	7083 3d07 706b 3d33 7053 3d60 703b 3d8c     .p.=kp3=Sp`=;p.=
100135fc:	7023 3db8 700a 3de4 6ff2 3e10 6fda 3e3c     #p.=.p.=.o.>.o<>
1001360c:	6fc1 3e68 6fa9 3e93 6f90 3ebf 6f77 3eeb     .oh>.o.>.o.>wo.>
1001361c:	6f5f 3f17 6f46 3f43 6f2d 3f6e 6f14 3f9a     _o.?FoC?-on?.o.?
1001362c:	6efb 3fc5 6ee2 3ff1 6ec9 401d 6eaf 4048     .n.?.n.?.n.@.nH@
1001363c:	6e96 4073 6e7d 409f 6e63 40ca 6e4a 40f6     .ns@}n.@cn.@Jn.@
1001364c:	6e30 4121 6e17 414c 6dfd 4177 6de3 41a2     0n!A.nLA.mwA.m.A
1001365c:	6dca 41ce 6db0 41f9 6d96 4224 6d7c 424f     .m.A.m.A.m$B|mOB
1001366c:	6d62 427a 6d48 42a5 6d2d 42d0 6d13 42fa     bmzBHm.B-m.B.m.B
1001367c:	6cf9 4325 6cde 4350 6cc4 437b 6ca9 43a5     .l%C.lPC.l{C.l.C
1001368c:	6c8f 43d0 6c74 43fb 6c59 4425 6c3f 4450     .l.Ctl.CYl%D?lPD
1001369c:	6c24 447a 6c09 44a5 6bee 44cf 6bd3 44fa     $lzD.l.D.k.D.k.D
100136ac:	6bb8 4524 6b9c 454e 6b81 4578 6b66 45a3     .k$E.kNE.kxEfk.E
100136bc:	6b4a 45cd 6b2f 45f7 6b13 4621 6af8 464b     Jk.E/k.E.k!F.jKF
100136cc:	6adc 4675 6ac1 469f 6aa5 46c9 6a89 46f3     .juF.j.F.j.F.j.F
100136dc:	6a6d 471c 6a51 4746 6a35 4770 6a19 479a     mj.GQjFG5jpG.j.G
100136ec:	69fd 47c3 69e1 47ed 69c4 4816 69a8 4840     .i.G.i.G.i.H.i@H
100136fc:	698c 4869 696f 4893 6953 48bc 6936 48e6     .iiHoi.HSi.H6i.H
1001370c:	6919 490f 68fd 4938 68e0 4961 68c3 498a     .i.I.h8I.haI.h.I
1001371c:	68a6 49b4 6889 49dd 686c 4a06 684f 4a2f     .h.I.h.Ilh.JOh/J
1001372c:	6832 4a58 6815 4a81 67f7 4aa9 67da 4ad2     2hXJ.h.J.g.J.g.J
1001373c:	67bd 4afb 679f 4b24 6782 4b4c 6764 4b75     .g.J.g$K.gLKdguK
1001374c:	6746 4b9e 6729 4bc6 670b 4bef 66ed 4c17     Fg.K)g.K.g.K.f.L
1001375c:	66cf 4c3f 66b1 4c68 6693 4c90 6675 4cb8     .f?L.fhL.f.Luf.L
1001376c:	6657 4ce1 6639 4d09 661a 4d31 65fc 4d59     Wf.L9f.M.f1M.eYM
1001377c:	65dd 4d81 65bf 4da9 65a0 4dd1 6582 4df9     .e.M.e.M.e.M.e.M
1001378c:	6563 4e21 6545 4e48 6526 4e70 6507 4e98     ce!NEeHN&epN.e.N
1001379c:	64e8 4ebf 64c9 4ee7 64aa 4f0f 648b 4f36     .d.N.d.N.d.O.d6O
100137ac:	646c 4f5e 644d 4f85 642d 4fac 640e 4fd4     ld^OMd.O-d.O.d.O
100137bc:	63ef 4ffb 63cf 5022 63b0 5049 6390 5070     .c.O.c"P.cIP.cpP
100137cc:	6371 5097 6351 50bf 6331 50e5 6311 510c     qc.PQc.P1c.P.c.Q
100137dc:	62f2 5133 62d2 515a 62b2 5181 6292 51a8     .b3Q.bZQ.b.Q.b.Q
100137ec:	6271 51ce 6251 51f5 6231 521c 6211 5242     qb.QQb.Q1b.R.bBR
100137fc:	61f1 5269 61d0 528f 61b0 52b5 618f 52dc     .aiR.a.R.a.R.a.R
1001380c:	616f 5302 614e 5328 612d 534e 610d 5375     oa.SNa(S-aNS.auS
1001381c:	60ec 539b 60cb 53c1 60aa 53e7 6089 540d     .`.S.`.S.`.S.`.T
1001382c:	6068 5433 6047 5458 6026 547e 6004 54a4     h`3TG`XT&`~T.`.T
1001383c:	5fe3 54ca 5fc2 54ef 5fa0 5515 5f7f 553a     ._.T._.T._.U._:U
1001384c:	5f5e 5560 5f3c 5585 5f1a 55ab 5ef9 55d0     ^_`U<_.U._.U.^.U
1001385c:	5ed7 55f5 5eb5 561a 5e93 5640 5e71 5665     .^.U.^.V.^@Vq^eV
1001386c:	5e50 568a 5e2d 56af 5e0b 56d4 5de9 56f9     P^.V-^.V.^.V.].V
1001387c:	5dc7 571d 5da5 5742 5d83 5767 5d60 578c     .].W.]BW.]gW`].W
1001388c:	5d3e 57b0 5d1b 57d5 5cf9 57f9 5cd6 581e     >].W.].W.\.W.\.X
1001389c:	5cb4 5842 5c91 5867 5c6e 588b 5c4b 58af     .\BX.\gXn\.XK\.X
100138ac:	5c29 58d4 5c06 58f8 5be3 591c 5bc0 5940     )\.X.\.X.[.Y.[@Y
100138bc:	5b9d 5964 5b79 5988 5b56 59ac 5b33 59d0     .[dYy[.YV[.Y3[.Y
100138cc:	5b10 59f3 5aec 5a17 5ac9 5a3b 5aa5 5a5e     .[.Y.Z.Z.Z;Z.Z^Z
100138dc:	5a82 5a82 5a5e 5aa5 5a3b 5ac9 5a17 5aec     .Z.Z^Z.Z;Z.Z.Z.Z
100138ec:	59f3 5b10 59d0 5b33 59ac 5b56 5988 5b79     .Y.[.Y3[.YV[.Yy[
100138fc:	5964 5b9d 5940 5bc0 591c 5be3 58f8 5c06     dY.[@Y.[.Y.[.X.\
1001390c:	58d4 5c29 58af 5c4b 588b 5c6e 5867 5c91     .X)\.XK\.Xn\gX.\
1001391c:	5842 5cb4 581e 5cd6 57f9 5cf9 57d5 5d1b     BX.\.X.\.W.\.W.]
1001392c:	57b0 5d3e 578c 5d60 5767 5d83 5742 5da5     .W>].W`]gW.]BW.]
1001393c:	571d 5dc7 56f9 5de9 56d4 5e0b 56af 5e2d     .W.].V.].V.^.V-^
1001394c:	568a 5e50 5665 5e71 5640 5e93 561a 5eb5     .VP^eVq^@V.^.V.^
1001395c:	55f5 5ed7 55d0 5ef9 55ab 5f1a 5585 5f3c     .U.^.U.^.U._.U<_
1001396c:	5560 5f5e 553a 5f7f 5515 5fa0 54ef 5fc2     `U^_:U._.U._.T._
1001397c:	54ca 5fe3 54a4 6004 547e 6026 5458 6047     .T._.T.`~T&`XTG`
1001398c:	5433 6068 540d 6089 53e7 60aa 53c1 60cb     3Th`.T.`.S.`.S.`
1001399c:	539b 60ec 5375 610d 534e 612d 5328 614e     .S.`uS.aNS-a(SNa
100139ac:	5302 616f 52dc 618f 52b5 61b0 528f 61d0     .Soa.R.a.R.a.R.a
100139bc:	5269 61f1 5242 6211 521c 6231 51f5 6251     iR.aBR.b.R1b.QQb
100139cc:	51ce 6271 51a8 6292 5181 62b2 515a 62d2     .Qqb.Q.b.Q.bZQ.b
100139dc:	5133 62f2 510c 6311 50e5 6331 50bf 6351     3Q.b.Q.c.P1c.PQc
100139ec:	5097 6371 5070 6390 5049 63b0 5022 63cf     .PqcpP.cIP.c"P.c
100139fc:	4ffb 63ef 4fd4 640e 4fac 642d 4f85 644d     .O.c.O.d.O-d.OMd
10013a0c:	4f5e 646c 4f36 648b 4f0f 64aa 4ee7 64c9     ^Old6O.d.O.d.N.d
10013a1c:	4ebf 64e8 4e98 6507 4e70 6526 4e48 6545     .N.d.N.epN&eHNEe
10013a2c:	4e21 6563 4df9 6582 4dd1 65a0 4da9 65bf     !Nce.M.e.M.e.M.e
10013a3c:	4d81 65dd 4d59 65fc 4d31 661a 4d09 6639     .M.eYM.e1M.f.M9f
10013a4c:	4ce1 6657 4cb8 6675 4c90 6693 4c68 66b1     .LWf.Luf.L.fhL.f
10013a5c:	4c3f 66cf 4c17 66ed 4bef 670b 4bc6 6729     ?L.f.L.f.K.g.K)g
10013a6c:	4b9e 6746 4b75 6764 4b4c 6782 4b24 679f     .KFguKdgLK.g$K.g
10013a7c:	4afb 67bd 4ad2 67da 4aa9 67f7 4a81 6815     .J.g.J.g.J.g.J.h
10013a8c:	4a58 6832 4a2f 684f 4a06 686c 49dd 6889     XJ2h/JOh.Jlh.I.h
10013a9c:	49b4 68a6 498a 68c3 4961 68e0 4938 68fd     .I.h.I.haI.h8I.h
10013aac:	490f 6919 48e6 6936 48bc 6953 4893 696f     .I.i.H6i.HSi.Hoi
10013abc:	4869 698c 4840 69a8 4816 69c4 47ed 69e1     iH.i@H.i.H.i.G.i
10013acc:	47c3 69fd 479a 6a19 4770 6a35 4746 6a51     .G.i.G.jpG5jFGQj
10013adc:	471c 6a6d 46f3 6a89 46c9 6aa5 469f 6ac1     .Gmj.F.j.F.j.F.j
10013aec:	4675 6adc 464b 6af8 4621 6b13 45f7 6b2f     uF.jKF.j!F.k.E/k
10013afc:	45cd 6b4a 45a3 6b66 4578 6b81 454e 6b9c     .EJk.EfkxE.kNE.k
10013b0c:	4524 6bb8 44fa 6bd3 44cf 6bee 44a5 6c09     $E.k.D.k.D.k.D.l
10013b1c:	447a 6c24 4450 6c3f 4425 6c59 43fb 6c74     zD$lPD?l%DYl.Ctl
10013b2c:	43d0 6c8f 43a5 6ca9 437b 6cc4 4350 6cde     .C.l.C.l{C.lPC.l
10013b3c:	4325 6cf9 42fa 6d13 42d0 6d2d 42a5 6d48     %C.l.B.m.B-m.BHm
10013b4c:	427a 6d62 424f 6d7c 4224 6d96 41f9 6db0     zBbmOB|m$B.m.A.m
10013b5c:	41ce 6dca 41a2 6de3 4177 6dfd 414c 6e17     .A.m.A.mwA.mLA.n
10013b6c:	4121 6e30 40f6 6e4a 40ca 6e63 409f 6e7d     !A0n.@Jn.@cn.@}n
10013b7c:	4073 6e96 4048 6eaf 401d 6ec9 3ff1 6ee2     s@.nH@.n.@.n.?.n
10013b8c:	3fc5 6efb 3f9a 6f14 3f6e 6f2d 3f43 6f46     .?.n.?.on?-oC?Fo
10013b9c:	3f17 6f5f 3eeb 6f77 3ebf 6f90 3e93 6fa9     .?_o.>wo.>.o.>.o
10013bac:	3e68 6fc1 3e3c 6fda 3e10 6ff2 3de4 700a     h>.o<>.o.>.o.=.p
10013bbc:	3db8 7023 3d8c 703b 3d60 7053 3d33 706b     .=#p.=;p`=Sp3=kp
10013bcc:	3d07 7083 3cdb 709b 3caf 70b3 3c83 70cb     .=.p.<.p.<.p.<.p
10013bdc:	3c56 70e2 3c2a 70fa 3bfd 7112 3bd1 7129     V<.p*<.p.;.q.;)q
10013bec:	3ba5 7141 3b78 7158 3b4c 716f 3b1f 7186     .;Aqx;XqL;oq.;.q
10013bfc:	3af2 719e 3ac6 71b5 3a99 71cc 3a6c 71e3     .:.q.:.q.:.ql:.q
10013c0c:	3a40 71fa 3a13 7211 39e6 7227 39b9 723e     @:.q.:.r.9'r.9>r
10013c1c:	398c 7255 395f 726b 3932 7282 3906 7298     .9Ur_9kr29.r.9.r
10013c2c:	38d8 72af 38ab 72c5 387e 72db 3851 72f1     .8.r.8.r~8.rQ8.r
10013c3c:	3824 7307 37f7 731d 37ca 7333 379c 7349     $8.s.7.s.73s.7Is
10013c4c:	376f 735f 3742 7375 3714 738a 36e7 73a0     o7_sB7us.7.s.6.s
10013c5c:	36ba 73b5 368c 73cb 365f 73e0 3631 73f6     .6.s.6.s_6.s16.s
10013c6c:	3604 740b 35d6 7420 35a8 7435 357b 744a     .6.t.5 t.55t{5Jt
10013c7c:	354d 745f 351f 7474 34f2 7489 34c4 749e     M5_t.5tt.4.t.4.t
10013c8c:	3496 74b2 3468 74c7 343a 74db 340c 74f0     .4.th4.t:4.t.4.t
10013c9c:	33de 7504 33b0 7519 3382 752d 3354 7541     .3.u.3.u.3-uT3Au
10013cac:	3326 7555 32f8 7569 32ca 757d 329c 7591     &3Uu.2iu.2}u.2.u
10013cbc:	326e 75a5 3240 75b9 3211 75cc 31e3 75e0     n2.u@2.u.2.u.1.u
10013ccc:	31b5 75f4 3186 7607 3158 761b 312a 762e     .1.u.1.vX1.v*1.v
10013cdc:	30fb 7641 30cd 7654 309e 7668 3070 767b     .0Av.0Tv.0hvp0{v
10013cec:	3041 768e 3013 76a0 2fe4 76b3 2fb5 76c6     A0.v.0.v./.v./.v
10013cfc:	2f87 76d9 2f58 76eb 2f29 76fe 2efb 7710     ./.vX/.v)/.v...w
10013d0c:	2ecc 7723 2e9d 7735 2e6e 7747 2e3f 775a     ..#w..5wn.Gw?.Zw
10013d1c:	2e11 776c 2de2 777e 2db3 7790 2d84 77a2     ..lw.-~w.-.w.-.w
10013d2c:	2d55 77b4 2d26 77c5 2cf7 77d7 2cc8 77e9     U-.w&-.w.,.w.,.w
10013d3c:	2c98 77fa 2c69 780c 2c3a 781d 2c0b 782e     .,.wi,.x:,.x.,.x
10013d4c:	2bdc 7840 2bad 7851 2b7d 7862 2b4e 7873     .+@x.+Qx}+bxN+sx
10013d5c:	2b1f 7884 2aef 7895 2ac0 78a6 2a91 78b6     .+.x.*.x.*.x.*.x
10013d6c:	2a61 78c7 2a32 78d8 2a02 78e8 29d3 78f9     a*.x2*.x.*.x.).x
10013d7c:	29a3 7909 2974 7919 2944 792a 2915 793a     .).yt).yD)*y.):y
10013d8c:	28e5 794a 28b5 795a 2886 796a 2856 797a     .(Jy.(Zy.(jyV(zy
10013d9c:	2826 798a 27f6 7999 27c7 79a9 2797 79b9     &(.y.'.y.'.y.'.y
10013dac:	2767 79c8 2737 79d8 2707 79e7 26d8 79f6     g'.y7'.y.'.y.&.y
10013dbc:	26a8 7a05 2678 7a15 2648 7a24 2618 7a33     .&.zx&.zH&$z.&3z
10013dcc:	25e8 7a42 25b8 7a50 2588 7a5f 2558 7a6e     .%Bz.%Pz.%_zX%nz
10013ddc:	2528 7a7d 24f7 7a8b 24c7 7a9a 2497 7aa8     (%}z.$.z.$.z.$.z
10013dec:	2467 7ab6 2437 7ac5 2407 7ad3 23d6 7ae1     g$.z7$.z.$.z.#.z
10013dfc:	23a6 7aef 2376 7afd 2345 7b0b 2315 7b19     .#.zv#.zE#.{.#.{
10013e0c:	22e5 7b26 22b4 7b34 2284 7b42 2254 7b4f     ."&{."4{."B{T"O{
10013e1c:	2223 7b5d 21f3 7b6a 21c2 7b77 2192 7b84     #"]{.!j{.!w{.!.{
10013e2c:	2161 7b92 2131 7b9f 2100 7bac 20d0 7bb9     a!.{1!.{.!.{. .{
10013e3c:	209f 7bc5 206e 7bd2 203e 7bdf 200d 7beb     . .{n .{> .{. .{
10013e4c:	1fdc 7bf8 1fac 7c05 1f7b 7c11 1f4a 7c1d     ...{...|{..|J..|
10013e5c:	1f19 7c29 1ee9 7c36 1eb8 7c42 1e87 7c4e     ..)|..6|..B|..N|
10013e6c:	1e56 7c5a 1e25 7c66 1df5 7c71 1dc4 7c7d     V.Z|%.f|..q|..}|
10013e7c:	1d93 7c89 1d62 7c94 1d31 7ca0 1d00 7cab     ...|b..|1..|...|
10013e8c:	1ccf 7cb7 1c9e 7cc2 1c6d 7ccd 1c3c 7cd8     ...|...|m..|<..|
10013e9c:	1c0b 7ce3 1bda 7cee 1ba9 7cf9 1b78 7d04     ...|...|...|x..}
10013eac:	1b47 7d0f 1b16 7d19 1ae4 7d24 1ab3 7d2f     G..}...}..$}../}
10013ebc:	1a82 7d39 1a51 7d43 1a20 7d4e 19ef 7d58     ..9}Q.C} .N}..X}
10013ecc:	19bd 7d62 198c 7d6c 195b 7d76 192a 7d80     ..b}..l}[.v}*..}
10013edc:	18f8 7d8a 18c7 7d94 1896 7d9d 1864 7da7     ...}...}...}d..}
10013eec:	1833 7db0 1802 7dba 17d0 7dc3 179f 7dcd     3..}...}...}...}
10013efc:	176d 7dd6 173c 7ddf 170a 7de8 16d9 7df1     m..}<..}...}...}
10013f0c:	16a8 7dfa 1676 7e03 1645 7e0c 1613 7e14     ...}v..~E..~...~
10013f1c:	15e2 7e1d 15b0 7e26 157f 7e2e 154d 7e37     ...~..&~...~M.7~
10013f2c:	151b 7e3f 14ea 7e47 14b8 7e4f 1487 7e57     ..?~..G~..O~..W~
10013f3c:	1455 7e5f 1423 7e67 13f2 7e6f 13c0 7e77     U._~#.g~..o~..w~
10013f4c:	138e 7e7f 135d 7e86 132b 7e8e 12f9 7e95     ...~]..~+..~...~
10013f5c:	12c8 7e9d 1296 7ea4 1264 7eab 1232 7eb3     ...~...~d..~2..~
10013f6c:	1201 7eba 11cf 7ec1 119d 7ec8 116b 7ecf     ...~...~...~k..~
10013f7c:	1139 7ed5 1108 7edc 10d6 7ee3 10a4 7ee9     9..~...~...~...~
10013f8c:	1072 7ef0 1040 7ef6 100e 7efd 0fdd 7f03     r..~@..~...~....
10013f9c:	0fab 7f09 0f79 7f0f 0f47 7f15 0f15 7f1b     ....y...G.......
10013fac:	0ee3 7f21 0eb1 7f27 0e7f 7f2d 0e4d 7f32     ..!...'...-.M.2.
10013fbc:	0e1b 7f38 0de9 7f3d 0db7 7f43 0d85 7f48     ..8...=...C...H.
10013fcc:	0d53 7f4d 0d21 7f53 0cef 7f58 0cbd 7f5d     S.M.!.S...X...].
10013fdc:	0c8b 7f62 0c59 7f67 0c27 7f6b 0bf5 7f70     ..b.Y.g.'.k...p.
10013fec:	0bc3 7f75 0b91 7f79 0b5f 7f7e 0b2d 7f82     ..u...y._.~.-...
10013ffc:	0afb 7f87 0ac9 7f8b 0a97 7f8f 0a65 7f93     ............e...
1001400c:	0a33 7f97 0a00 7f9b 09ce 7f9f 099c 7fa3     3...............
1001401c:	096a 7fa7 0938 7faa 0906 7fae 08d4 7fb1     j...8...........
1001402c:	08a2 7fb5 086f 7fb8 083d 7fbc 080b 7fbf     ....o...=.......
1001403c:	07d9 7fc2 07a7 7fc5 0775 7fc8 0742 7fcb     ........u...B...
1001404c:	0710 7fce 06de 7fd0 06ac 7fd3 067a 7fd6     ............z...
1001405c:	0647 7fd8 0615 7fda 05e3 7fdd 05b1 7fdf     G...............
1001406c:	057f 7fe1 054c 7fe3 051a 7fe5 04e8 7fe7     ....L...........
1001407c:	04b6 7fe9 0483 7feb 0451 7fed 041f 7fee     ........Q.......
1001408c:	03ed 7ff0 03ba 7ff2 0388 7ff3 0356 7ff4     ............V...
1001409c:	0324 7ff6 02f1 7ff7 02bf 7ff8 028d 7ff9     $...............
100140ac:	025b 7ffa 0228 7ffb 01f6 7ffc 01c4 7ffc     [...(...........
100140bc:	0192 7ffd 015f 7ffe 012d 7ffe 00fb 7fff     ...._...-.......
100140cc:	00c9 7fff 0096 7fff 0064 7fff 0032 7fff     ........d...2...
100140dc:	0000 7fff ffcd 7fff ff9b 7fff ff69 7fff     ............i...
100140ec:	ff36 7fff ff04 7fff fed2 7ffe fea0 7ffe     6...............
100140fc:	fe6d 7ffd fe3b 7ffc fe09 7ffc fdd7 7ffb     m...;...........
1001410c:	fda4 7ffa fd72 7ff9 fd40 7ff8 fd0e 7ff7     ....r...@.......
1001411c:	fcdb 7ff6 fca9 7ff4 fc77 7ff3 fc45 7ff2     ........w...E...
1001412c:	fc12 7ff0 fbe0 7fee fbae 7fed fb7c 7feb     ............|...
1001413c:	fb49 7fe9 fb17 7fe7 fae5 7fe5 fab3 7fe3     I...............
1001414c:	fa80 7fe1 fa4e 7fdf fa1c 7fdd f9ea 7fda     ....N...........
1001415c:	f9b8 7fd8 f985 7fd6 f953 7fd3 f921 7fd0     ........S...!...
1001416c:	f8ef 7fce f8bd 7fcb f88a 7fc8 f858 7fc5     ............X...
1001417c:	f826 7fc2 f7f4 7fbf f7c2 7fbc f790 7fb8     &...............
1001418c:	f75d 7fb5 f72b 7fb1 f6f9 7fae f6c7 7faa     ]...+...........
1001419c:	f695 7fa7 f663 7fa3 f631 7f9f f5ff 7f9b     ....c...1.......
100141ac:	f5cc 7f97 f59a 7f93 f568 7f8f f536 7f8b     ........h...6...
100141bc:	f504 7f87 f4d2 7f82 f4a0 7f7e f46e 7f79     ..........~.n.y.
100141cc:	f43c 7f75 f40a 7f70 f3d8 7f6b f3a6 7f67     <.u...p...k...g.
100141dc:	f374 7f62 f342 7f5d f310 7f58 f2de 7f53     t.b.B.]...X...S.
100141ec:	f2ac 7f4d f27a 7f48 f248 7f43 f216 7f3d     ..M.z.H.H.C...=.
100141fc:	f1e4 7f38 f1b2 7f32 f180 7f2d f14e 7f27     ..8...2...-.N.'.
1001420c:	f11c 7f21 f0ea 7f1b f0b8 7f15 f086 7f0f     ..!.............
1001421c:	f054 7f09 f022 7f03 eff1 7efd efbf 7ef6     T..."......~...~
1001422c:	ef8d 7ef0 ef5b 7ee9 ef29 7ee3 eef7 7edc     ...~[..~)..~...~
1001423c:	eec6 7ed5 ee94 7ecf ee62 7ec8 ee30 7ec1     ...~...~b..~0..~
1001424c:	edfe 7eba edcd 7eb3 ed9b 7eab ed69 7ea4     ...~...~...~i..~
1001425c:	ed37 7e9d ed06 7e95 ecd4 7e8e eca2 7e86     7..~...~...~...~
1001426c:	ec71 7e7f ec3f 7e77 ec0d 7e6f ebdc 7e67     q..~?.w~..o~..g~
1001427c:	ebaa 7e5f eb78 7e57 eb47 7e4f eb15 7e47     .._~x.W~G.O~..G~
1001428c:	eae4 7e3f eab2 7e37 ea80 7e2e ea4f 7e26     ..?~..7~...~O.&~
1001429c:	ea1d 7e1d e9ec 7e14 e9ba 7e0c e989 7e03     ...~...~...~...~
100142ac:	e957 7dfa e926 7df1 e8f5 7de8 e8c3 7ddf     W..}&..}...}...}
100142bc:	e892 7dd6 e860 7dcd e82f 7dc3 e7fd 7dba     ...}`..}/..}...}
100142cc:	e7cc 7db0 e79b 7da7 e769 7d9d e738 7d94     ...}...}i..}8..}
100142dc:	e707 7d8a e6d5 7d80 e6a4 7d76 e673 7d6c     ...}...}..v}s.l}
100142ec:	e642 7d62 e610 7d58 e5df 7d4e e5ae 7d43     B.b}..X}..N}..C}
100142fc:	e57d 7d39 e54c 7d2f e51b 7d24 e4e9 7d19     }.9}L./}..$}...}
1001430c:	e4b8 7d0f e487 7d04 e456 7cf9 e425 7cee     ...}...}V..|%..|
1001431c:	e3f4 7ce3 e3c3 7cd8 e392 7ccd e361 7cc2     ...|...|...|a..|
1001432c:	e330 7cb7 e2ff 7cab e2ce 7ca0 e29d 7c94     0..|...|...|...|
1001433c:	e26c 7c89 e23b 7c7d e20a 7c71 e1da 7c66     l..|;.}|..q|..f|
1001434c:	e1a9 7c5a e178 7c4e e147 7c42 e116 7c36     ..Z|x.N|G.B|..6|
1001435c:	e0e6 7c29 e0b5 7c1d e084 7c11 e053 7c05     ..)|...|...|S..|
1001436c:	e023 7bf8 dff2 7beb dfc1 7bdf df91 7bd2     #..{...{...{...{
1001437c:	df60 7bc5 df2f 7bb9 deff 7bac dece 7b9f     `..{/..{...{...{
1001438c:	de9e 7b92 de6d 7b84 de3d 7b77 de0c 7b6a     ...{m..{=.w{..j{
1001439c:	dddc 7b5d ddab 7b4f dd7b 7b42 dd4b 7b34     ..]{..O{{.B{K.4{
100143ac:	dd1a 7b26 dcea 7b19 dcba 7b0b dc89 7afd     ..&{...{...{...z
100143bc:	dc59 7aef dc29 7ae1 dbf8 7ad3 dbc8 7ac5     Y..z)..z...z...z
100143cc:	db98 7ab6 db68 7aa8 db38 7a9a db08 7a8b     ...zh..z8..z...z
100143dc:	dad7 7a7d daa7 7a6e da77 7a5f da47 7a50     ..}z..nzw._zG.Pz
100143ec:	da17 7a42 d9e7 7a33 d9b7 7a24 d987 7a15     ..Bz..3z..$z...z
100143fc:	d957 7a05 d927 79f6 d8f8 79e7 d8c8 79d8     W..z'..y...y...y
1001440c:	d898 79c8 d868 79b9 d838 79a9 d809 7999     ...yh..y8..y...y
1001441c:	d7d9 798a d7a9 797a d779 796a d74a 795a     ...y..zyy.jyJ.Zy
1001442c:	d71a 794a d6ea 793a d6bb 792a d68b 7919     ..Jy..:y..*y...y
1001443c:	d65c 7909 d62c 78f9 d5fd 78e8 d5cd 78d8     \..y,..x...x...x
1001444c:	d59e 78c7 d56e 78b6 d53f 78a6 d510 7895     ...xn..x?..x...x
1001445c:	d4e0 7884 d4b1 7873 d482 7862 d452 7851     ...x..sx..bxR.Qx
1001446c:	d423 7840 d3f4 782e d3c5 781d d396 780c     #.@x...x...x...x
1001447c:	d367 77fa d337 77e9 d308 77d7 d2d9 77c5     g..w7..w...w...w
1001448c:	d2aa 77b4 d27b 77a2 d24c 7790 d21d 777e     ...w{..wL..w..~w
1001449c:	d1ee 776c d1c0 775a d191 7747 d162 7735     ..lw..Zw..Gwb.5w
100144ac:	d133 7723 d104 7710 d0d6 76fe d0a7 76eb     3.#w...w...v...v
100144bc:	d078 76d9 d04a 76c6 d01b 76b3 cfec 76a0     x..vJ..v...v...v
100144cc:	cfbe 768e cf8f 767b cf61 7668 cf32 7654     ...v..{va.hv2.Tv
100144dc:	cf04 7641 ced5 762e cea7 761b ce79 7607     ..Av...v...vy..v
100144ec:	ce4a 75f4 ce1c 75e0 cdee 75cc cdbf 75b9     J..u...u...u...u
100144fc:	cd91 75a5 cd63 7591 cd35 757d cd07 7569     ...uc..u5.}u..iu
1001450c:	ccd9 7555 ccab 7541 cc7d 752d cc4f 7519     ..Uu..Au}.-uO..u
1001451c:	cc21 7504 cbf3 74f0 cbc5 74db cb97 74c7     !..u...t...t...t
1001452c:	cb69 74b2 cb3b 749e cb0d 7489 cae0 7474     i..t;..t...t..tt
1001453c:	cab2 745f ca84 744a ca57 7435 ca29 7420     .._t..JtW.5t). t
1001454c:	c9fb 740b c9ce 73f6 c9a0 73e0 c973 73cb     ...t...s...ss..s
1001455c:	c945 73b5 c918 73a0 c8eb 738a c8bd 7375     E..s...s...s..us
1001456c:	c890 735f c863 7349 c835 7333 c808 731d     .._sc.Is5.3s...s
1001457c:	c7db 7307 c7ae 72f1 c781 72db c754 72c5     ...s...r...rT..r
1001458c:	c727 72af c6f9 7298 c6cd 7282 c6a0 726b     '..r...r...r..kr
1001459c:	c673 7255 c646 723e c619 7227 c5ec 7211     s.UrF.>r..'r...r
100145ac:	c5bf 71fa c593 71e3 c566 71cc c539 71b5     ...q...qf..q9..q
100145bc:	c50d 719e c4e0 7186 c4b3 716f c487 7158     ...q...q..oq..Xq
100145cc:	c45a 7141 c42e 7129 c402 7112 c3d5 70fa     Z.Aq..)q...q...p
100145dc:	c3a9 70e2 c37c 70cb c350 70b3 c324 709b     ...p|..pP..p$..p
100145ec:	c2f8 7083 c2cc 706b c29f 7053 c273 703b     ...p..kp..Sps.;p
100145fc:	c247 7023 c21b 700a c1ef 6ff2 c1c3 6fda     G.#p...p...o...o
1001460c:	c197 6fc1 c16c 6fa9 c140 6f90 c114 6f77     ...ol..o@..o..wo
1001461c:	c0e8 6f5f c0bc 6f46 c091 6f2d c065 6f14     .._o..Fo..-oe..o
1001462c:	c03a 6efb c00e 6ee2 bfe2 6ec9 bfb7 6eaf     :..n...n...n...n
1001463c:	bf8c 6e96 bf60 6e7d bf35 6e63 bf09 6e4a     ...n`.}n5.cn..Jn
1001464c:	bede 6e30 beb3 6e17 be88 6dfd be5d 6de3     ..0n...n...m]..m
1001465c:	be31 6dca be06 6db0 bddb 6d96 bdb0 6d7c     1..m...m...m..|m
1001466c:	bd85 6d62 bd5a 6d48 bd2f 6d2d bd05 6d13     ..bmZ.Hm/.-m...m
1001467c:	bcda 6cf9 bcaf 6cde bc84 6cc4 bc5a 6ca9     ...l...l...lZ..l
1001468c:	bc2f 6c8f bc04 6c74 bbda 6c59 bbaf 6c3f     /..l..tl..Yl..?l
1001469c:	bb85 6c24 bb5a 6c09 bb30 6bee bb05 6bd3     ..$lZ..l0..k...k
100146ac:	badb 6bb8 bab1 6b9c ba87 6b81 ba5c 6b66     ...k...k...k\.fk
100146bc:	ba32 6b4a ba08 6b2f b9de 6b13 b9b4 6af8     2.Jk../k...k...j
100146cc:	b98a 6adc b960 6ac1 b936 6aa5 b90c 6a89     ...j`..j6..j...j
100146dc:	b8e3 6a6d b8b9 6a51 b88f 6a35 b865 6a19     ..mj..Qj..5je..j
100146ec:	b83c 69fd b812 69e1 b7e9 69c4 b7bf 69a8     <..i...i...i...i
100146fc:	b796 698c b76c 696f b743 6953 b719 6936     ...il.oiC.Si..6i
1001470c:	b6f0 6919 b6c7 68fd b69e 68e0 b675 68c3     ...i...h...hu..h
1001471c:	b64b 68a6 b622 6889 b5f9 686c b5d0 684f     K..h"..h..lh..Oh
1001472c:	b5a7 6832 b57e 6815 b556 67f7 b52d 67da     ..2h~..hV..g-..g
1001473c:	b504 67bd b4db 679f b4b3 6782 b48a 6764     ...g...g...g..dg
1001474c:	b461 6746 b439 6729 b410 670b b3e8 66ed     a.Fg9.)g...g...f
1001475c:	b3c0 66cf b397 66b1 b36f 6693 b347 6675     ...f...fo..fG.uf
1001476c:	b31e 6657 b2f6 6639 b2ce 661a b2a6 65fc     ..Wf..9f...f...e
1001477c:	b27e 65dd b256 65bf b22e 65a0 b206 6582     ~..eV..e...e...e
1001478c:	b1de 6563 b1b7 6545 b18f 6526 b167 6507     ..ce..Ee..&eg..e
1001479c:	b140 64e8 b118 64c9 b0f0 64aa b0c9 648b     @..d...d...d...d
100147ac:	b0a1 646c b07a 644d b053 642d b02b 640e     ..ldz.MdS.-d+..d
100147bc:	b004 63ef afdd 63cf afb6 63b0 af8f 6390     ...c...c...c...c
100147cc:	af68 6371 af40 6351 af1a 6331 aef3 6311     h.qc@.Qc..1c...c
100147dc:	aecc 62f2 aea5 62d2 ae7e 62b2 ae57 6292     ...b...b~..bW..b
100147ec:	ae31 6271 ae0a 6251 ade3 6231 adbd 6211     1.qb..Qb..1b...b
100147fc:	ad96 61f1 ad70 61d0 ad4a 61b0 ad23 618f     ...ap..aJ..a#..a
1001480c:	acfd 616f acd7 614e acb1 612d ac8a 610d     ..oa..Na..-a...a
1001481c:	ac64 60ec ac3e 60cb ac18 60aa abf2 6089     d..`>..`...`...`
1001482c:	abcc 6068 aba7 6047 ab81 6026 ab5b 6004     ..h`..G`..&`[..`
1001483c:	ab35 5fe3 ab10 5fc2 aaea 5fa0 aac5 5f7f     5.._..._..._..._
1001484c:	aa9f 5f5e aa7a 5f3c aa54 5f1a aa2f 5ef9     ..^_z.<_T.._/..^
1001485c:	aa0a 5ed7 a9e5 5eb5 a9bf 5e93 a99a 5e71     ...^...^...^..q^
1001486c:	a975 5e50 a950 5e2d a92b 5e0b a906 5de9     u.P^P.-^+..^...]
1001487c:	a8e2 5dc7 a8bd 5da5 a898 5d83 a873 5d60     ...]...]...]s.`]
1001488c:	a84f 5d3e a82a 5d1b a806 5cf9 a7e1 5cd6     O.>]*..]...\...\
1001489c:	a7bd 5cb4 a798 5c91 a774 5c6e a750 5c4b     ...\...\t.n\P.K\
100148ac:	a72b 5c29 a707 5c06 a6e3 5be3 a6bf 5bc0     +.)\...\...[...[
100148bc:	a69b 5b9d a677 5b79 a653 5b56 a62f 5b33     ...[w.y[S.V[/.3[
100148cc:	a60c 5b10 a5e8 5aec a5c4 5ac9 a5a1 5aa5     ...[...Z...Z...Z
100148dc:	a57d 5a82 a55a 5a5e a536 5a3b a513 5a17     }..ZZ.^Z6.;Z...Z
100148ec:	a4ef 59f3 a4cc 59d0 a4a9 59ac a486 5988     ...Y...Y...Y...Y
100148fc:	a462 5964 a43f 5940 a41c 591c a3f9 58f8     b.dY?.@Y...Y...X
1001490c:	a3d6 58d4 a3b4 58af a391 588b a36e 5867     ...X...X...Xn.gX
1001491c:	a34b 5842 a329 581e a306 57f9 a2e4 57d5     K.BX)..X...W...W
1001492c:	a2c1 57b0 a29f 578c a27c 5767 a25a 5742     ...W...W|.gWZ.BW
1001493c:	a238 571d a216 56f9 a1f4 56d4 a1d2 56af     8..W...V...V...V
1001494c:	a1af 568a a18e 5665 a16c 5640 a14a 561a     ...V..eVl.@VJ..V
1001495c:	a128 55f5 a106 55d0 a0e5 55ab a0c3 5585     (..U...U...U...U
1001496c:	a0a1 5560 a080 553a a05f 5515 a03d 54ef     ..`U..:U_..U=..T
1001497c:	a01c 54ca 9ffb 54a4 9fd9 547e 9fb8 5458     ...T...T..~T..XT
1001498c:	9f97 5433 9f76 540d 9f55 53e7 9f34 53c1     ..3Tv..TU..S4..S
1001499c:	9f13 539b 9ef2 5375 9ed2 534e 9eb1 5328     ...S..uS..NS..(S
100149ac:	9e90 5302 9e70 52dc 9e4f 52b5 9e2f 528f     ...Sp..RO..R/..R
100149bc:	9e0e 5269 9dee 5242 9dce 521c 9dae 51f5     ..iR..BR...R...Q
100149cc:	9d8e 51ce 9d6d 51a8 9d4d 5181 9d2d 515a     ...Qm..QM..Q-.ZQ
100149dc:	9d0d 5133 9cee 510c 9cce 50e5 9cae 50bf     ..3Q...Q...P...P
100149ec:	9c8e 5097 9c6f 5070 9c4f 5049 9c30 5022     ...Po.pPO.IP0."P
100149fc:	9c10 4ffb 9bf1 4fd4 9bd2 4fac 9bb2 4f85     ...O...O...O...O
10014a0c:	9b93 4f5e 9b74 4f36 9b55 4f0f 9b36 4ee7     ..^Ot.6OU..O6..N
10014a1c:	9b17 4ebf 9af8 4e98 9ad9 4e70 9aba 4e48     ...N...N..pN..HN
10014a2c:	9a9c 4e21 9a7d 4df9 9a5f 4dd1 9a40 4da9     ..!N}..M_..M@..M
10014a3c:	9a22 4d81 9a03 4d59 99e5 4d31 99c6 4d09     "..M..YM..1M...M
10014a4c:	99a8 4ce1 998a 4cb8 996c 4c90 994e 4c68     ...L...Ll..LN.hL
10014a5c:	9930 4c3f 9912 4c17 98f4 4bef 98d6 4bc6     0.?L...L...K...K
10014a6c:	98b9 4b9e 989b 4b75 987d 4b4c 9860 4b24     ...K..uK}.LK`.$K
10014a7c:	9842 4afb 9825 4ad2 9808 4aa9 97ea 4a81     B..J%..J...J...J
10014a8c:	97cd 4a58 97b0 4a2f 9793 4a06 9776 49dd     ..XJ../J...Jv..I
10014a9c:	9759 49b4 973c 498a 971f 4961 9702 4938     Y..I<..I..aI..8I
10014aac:	96e6 490f 96c9 48e6 96ac 48bc 9690 4893     ...I...H...H...H
10014abc:	9673 4869 9657 4840 963b 4816 961e 47ed     s.iHW.@H;..H...G
10014acc:	9602 47c3 95e6 479a 95ca 4770 95ae 4746     ...G...G..pG..FG
10014adc:	9592 471c 9576 46f3 955a 46c9 953e 469f     ...Gv..FZ..F>..F
10014aec:	9523 4675 9507 464b 94ec 4621 94d0 45f7     #.uF..KF..!F...E
10014afc:	94b5 45cd 9499 45a3 947e 4578 9463 454e     ...E...E~.xEc.NE
10014b0c:	9447 4524 942c 44fa 9411 44cf 93f6 44a5     G.$E,..D...D...D
10014b1c:	93db 447a 93c0 4450 93a6 4425 938b 43fb     ..zD..PD..%D...C
10014b2c:	9370 43d0 9356 43a5 933b 437b 9321 4350     p..CV..C;.{C!.PC
10014b3c:	9306 4325 92ec 42fa 92d2 42d0 92b7 42a5     ..%C...B...B...B
10014b4c:	929d 427a 9283 424f 9269 4224 924f 41f9     ..zB..OBi.$BO..A
10014b5c:	9235 41ce 921c 41a2 9202 4177 91e8 414c     5..A...A..wA..LA
10014b6c:	91cf 4121 91b5 40f6 919c 40ca 9182 409f     ..!A...@...@...@
10014b7c:	9169 4073 9150 4048 9136 401d 911d 3ff1     i.s@P.H@6..@...?
10014b8c:	9104 3fc5 90eb 3f9a 90d2 3f6e 90b9 3f43     ...?...?..n?..C?
10014b9c:	90a0 3f17 9088 3eeb 906f 3ebf 9056 3e93     ...?...>o..>V..>
10014bac:	903e 3e68 9025 3e3c 900d 3e10 8ff5 3de4     >.h>%.<>...>...=
10014bbc:	8fdc 3db8 8fc4 3d8c 8fac 3d60 8f94 3d33     ...=...=..`=..3=
10014bcc:	8f7c 3d07 8f64 3cdb 8f4c 3caf 8f34 3c83     |..=d..<L..<4..<
10014bdc:	8f1d 3c56 8f05 3c2a 8eed 3bfd 8ed6 3bd1     ..V<..*<...;...;
10014bec:	8ebe 3ba5 8ea7 3b78 8e90 3b4c 8e79 3b1f     ...;..x;..L;y..;
10014bfc:	8e61 3af2 8e4a 3ac6 8e33 3a99 8e1c 3a6c     a..:J..:3..:..l:
10014c0c:	8e05 3a40 8dee 3a13 8dd8 39e6 8dc1 39b9     ..@:...:...9...9
10014c1c:	8daa 398c 8d94 395f 8d7d 3932 8d67 3906     ...9.._9}.29g..9
10014c2c:	8d50 38d8 8d3a 38ab 8d24 387e 8d0e 3851     P..8:..8$.~8..Q8
10014c3c:	8cf8 3824 8ce2 37f7 8ccc 37ca 8cb6 379c     ..$8...7...7...7
10014c4c:	8ca0 376f 8c8a 3742 8c75 3714 8c5f 36e7     ..o7..B7u..7_..6
10014c5c:	8c4a 36ba 8c34 368c 8c1f 365f 8c09 3631     J..64..6.._6..16
10014c6c:	8bf4 3604 8bdf 35d6 8bca 35a8 8bb5 357b     ...6...5...5..{5
10014c7c:	8ba0 354d 8b8b 351f 8b76 34f2 8b61 34c4     ..M5...5v..4a..4
10014c8c:	8b4d 3496 8b38 3468 8b24 343a 8b0f 340c     M..48.h4$.:4...4
10014c9c:	8afb 33de 8ae6 33b0 8ad2 3382 8abe 3354     ...3...3...3..T3
10014cac:	8aaa 3326 8a96 32f8 8a82 32ca 8a6e 329c     ..&3...2...2n..2
10014cbc:	8a5a 326e 8a46 3240 8a33 3211 8a1f 31e3     Z.n2F.@23..2...1
10014ccc:	8a0b 31b5 89f8 3186 89e4 3158 89d1 312a     ...1...1..X1..*1
10014cdc:	89be 30fb 89ab 30cd 8997 309e 8984 3070     ...0...0...0..p0
10014cec:	8971 3041 895f 3013 894c 2fe4 8939 2fb5     q.A0_..0L../9../
10014cfc:	8926 2f87 8914 2f58 8901 2f29 88ef 2efb     &../..X/..)/....
10014d0c:	88dc 2ecc 88ca 2e9d 88b8 2e6e 88a5 2e3f     ..........n...?.
10014d1c:	8893 2e11 8881 2de2 886f 2db3 885d 2d84     .......-o..-]..-
10014d2c:	884b 2d55 883a 2d26 8828 2cf7 8816 2cc8     K.U-:.&-(..,...,
10014d3c:	8805 2c98 87f3 2c69 87e2 2c3a 87d1 2c0b     ...,..i,..:,...,
10014d4c:	87bf 2bdc 87ae 2bad 879d 2b7d 878c 2b4e     ...+...+..}+..N+
10014d5c:	877b 2b1f 876a 2aef 8759 2ac0 8749 2a91     {..+j..*Y..*I..*
10014d6c:	8738 2a61 8727 2a32 8717 2a02 8706 29d3     8.a*'.2*...*...)
10014d7c:	86f6 29a3 86e6 2974 86d5 2944 86c5 2915     ...)..t)..D)...)
10014d8c:	86b5 28e5 86a5 28b5 8695 2886 8685 2856     ...(...(...(..V(
10014d9c:	8675 2826 8666 27f6 8656 27c7 8646 2797     u.&(f..'V..'F..'
10014dac:	8637 2767 8627 2737 8618 2707 8609 26d8     7.g''.7'...'...&
10014dbc:	85fa 26a8 85ea 2678 85db 2648 85cc 2618     ...&..x&..H&...&
10014dcc:	85bd 25e8 85af 25b8 85a0 2588 8591 2558     ...%...%...%..X%
10014ddc:	8582 2528 8574 24f7 8565 24c7 8557 2497     ..(%t..$e..$W..$
10014dec:	8549 2467 853a 2437 852c 2407 851e 23d6     I.g$:.7$,..$...#
10014dfc:	8510 23a6 8502 2376 84f4 2345 84e6 2315     ...#..v#..E#...#
10014e0c:	84d9 22e5 84cb 22b4 84bd 2284 84b0 2254     ..."..."..."..T"
10014e1c:	84a2 2223 8495 21f3 8488 21c2 847b 2192     ..#"...!...!{..!
10014e2c:	846d 2161 8460 2131 8453 2100 8446 20d0     m.a!`.1!S..!F.. 
10014e3c:	843a 209f 842d 206e 8420 203e 8414 200d     :.. -.n  .> ... 
10014e4c:	8407 1fdc 83fa 1fac 83ee 1f7b 83e2 1f4a     ..........{...J.
10014e5c:	83d6 1f19 83c9 1ee9 83bd 1eb8 83b1 1e87     ................
10014e6c:	83a5 1e56 8399 1e25 838e 1df5 8382 1dc4     ..V...%.........
10014e7c:	8376 1d93 836b 1d62 835f 1d31 8354 1d00     v...k.b._.1.T...
10014e8c:	8348 1ccf 833d 1c9e 8332 1c6d 8327 1c3c     H...=...2.m.'.<.
10014e9c:	831c 1c0b 8311 1bda 8306 1ba9 82fb 1b78     ..............x.
10014eac:	82f0 1b47 82e6 1b16 82db 1ae4 82d0 1ab3     ..G.............
10014ebc:	82c6 1a82 82bc 1a51 82b1 1a20 82a7 19ef     ......Q... .....
10014ecc:	829d 19bd 8293 198c 8289 195b 827f 192a     ..........[...*.
10014edc:	8275 18f8 826b 18c7 8262 1896 8258 1864     u...k...b...X.d.
10014eec:	824f 1833 8245 1802 823c 17d0 8232 179f     O.3.E...<...2...
10014efc:	8229 176d 8220 173c 8217 170a 820e 16d9     ).m. .<.........
10014f0c:	8205 16a8 81fc 1676 81f3 1645 81eb 1613     ......v...E.....
10014f1c:	81e2 15e2 81d9 15b0 81d1 157f 81c8 154d     ..............M.
10014f2c:	81c0 151b 81b8 14ea 81b0 14b8 81a8 1487     ................
10014f3c:	81a0 1455 8198 1423 8190 13f2 8188 13c0     ..U...#.........
10014f4c:	8180 138e 8179 135d 8171 132b 816a 12f9     ....y.].q.+.j...
10014f5c:	8162 12c8 815b 1296 8154 1264 814c 1232     b...[...T.d.L.2.
10014f6c:	8145 1201 813e 11cf 8137 119d 8130 116b     E...>...7...0.k.
10014f7c:	812a 1139 8123 1108 811c 10d6 8116 10a4     *.9.#...........
10014f8c:	810f 1072 8109 1040 8102 100e 80fc 0fdd     ..r...@.........
10014f9c:	80f6 0fab 80f0 0f79 80ea 0f47 80e4 0f15     ......y...G.....
10014fac:	80de 0ee3 80d8 0eb1 80d2 0e7f 80cd 0e4d     ..............M.
10014fbc:	80c7 0e1b 80c2 0de9 80bc 0db7 80b7 0d85     ................
10014fcc:	80b2 0d53 80ac 0d21 80a7 0cef 80a2 0cbd     ..S...!.........
10014fdc:	809d 0c8b 8098 0c59 8094 0c27 808f 0bf5     ......Y...'.....
10014fec:	808a 0bc3 8086 0b91 8081 0b5f 807d 0b2d     .........._.}.-.
10014ffc:	8078 0afb 8074 0ac9 8070 0a97 806c 0a65     x...t...p...l.e.
1001500c:	8068 0a33 8064 0a00 8060 09ce 805c 099c     h.3.d...`...\...
1001501c:	8058 096a 8055 0938 8051 0906 804e 08d4     X.j.U.8.Q...N...
1001502c:	804a 08a2 8047 086f 8043 083d 8040 080b     J...G.o.C.=.@...
1001503c:	803d 07d9 803a 07a7 8037 0775 8034 0742     =...:...7.u.4.B.
1001504c:	8031 0710 802f 06de 802c 06ac 8029 067a     1.../...,...).z.
1001505c:	8027 0647 8025 0615 8022 05e3 8020 05b1     '.G.%..."... ...
1001506c:	801e 057f 801c 054c 801a 051a 8018 04e8     ......L.........
1001507c:	8016 04b6 8014 0483 8012 0451 8011 041f     ..........Q.....
1001508c:	800f 03ed 800d 03ba 800c 0388 800b 0356     ..............V.
1001509c:	8009 0324 8008 02f1 8007 02bf 8006 028d     ..$.............
100150ac:	8005 025b 8004 0228 8003 01f6 8003 01c4     ..[...(.........
100150bc:	8002 0192 8001 015f 8001 012d 8000 00fb     ......_...-.....
100150cc:	8000 00c9 8000 0096 8000 0064 8000 0032     ..........d...2.
100150dc:	8000 0000 8000 ffcd 8000 ff9b 8000 ff69     ..............i.
100150ec:	8000 ff36 8000 ff04 8001 fed2 8001 fea0     ..6.............
100150fc:	8002 fe6d 8003 fe3b 8003 fe09 8004 fdd7     ..m...;.........
1001510c:	8005 fda4 8006 fd72 8007 fd40 8008 fd0e     ......r...@.....
1001511c:	8009 fcdb 800b fca9 800c fc77 800d fc45     ..........w...E.
1001512c:	800f fc12 8011 fbe0 8012 fbae 8014 fb7c     ..............|.
1001513c:	8016 fb49 8018 fb17 801a fae5 801c fab3     ..I.............
1001514c:	801e fa80 8020 fa4e 8022 fa1c 8025 f9ea     .... .N."...%...
1001515c:	8027 f9b8 8029 f985 802c f953 802f f921     '...)...,.S./.!.
1001516c:	8031 f8ef 8034 f8bd 8037 f88a 803a f858     1...4...7...:.X.
1001517c:	803d f826 8040 f7f4 8043 f7c2 8047 f790     =.&.@...C...G...
1001518c:	804a f75d 804e f72b 8051 f6f9 8055 f6c7     J.].N.+.Q...U...
1001519c:	8058 f695 805c f663 8060 f631 8064 f5ff     X...\.c.`.1.d...
100151ac:	8068 f5cc 806c f59a 8070 f568 8074 f536     h...l...p.h.t.6.
100151bc:	8078 f504 807d f4d2 8081 f4a0 8086 f46e     x...}.........n.
100151cc:	808a f43c 808f f40a 8094 f3d8 8098 f3a6     ..<.............
100151dc:	809d f374 80a2 f342 80a7 f310 80ac f2de     ..t...B.........
100151ec:	80b2 f2ac 80b7 f27a 80bc f248 80c2 f216     ......z...H.....
100151fc:	80c7 f1e4 80cd f1b2 80d2 f180 80d8 f14e     ..............N.
1001520c:	80de f11c 80e4 f0ea 80ea f0b8 80f0 f086     ................
1001521c:	80f6 f054 80fc f022 8102 eff1 8109 efbf     ..T...".........
1001522c:	810f ef8d 8116 ef5b 811c ef29 8123 eef7     ......[...).#...
1001523c:	812a eec6 8130 ee94 8137 ee62 813e ee30     *...0...7.b.>.0.
1001524c:	8145 edfe 814c edcd 8154 ed9b 815b ed69     E...L...T...[.i.
1001525c:	8162 ed37 816a ed06 8171 ecd4 8179 eca2     b.7.j...q...y...
1001526c:	8180 ec71 8188 ec3f 8190 ec0d 8198 ebdc     ..q...?.........
1001527c:	81a0 ebaa 81a8 eb78 81b0 eb47 81b8 eb15     ......x...G.....
1001528c:	81c0 eae4 81c8 eab2 81d1 ea80 81d9 ea4f     ..............O.
1001529c:	81e2 ea1d 81eb e9ec 81f3 e9ba 81fc e989     ................
100152ac:	8205 e957 820e e926 8217 e8f5 8220 e8c3     ..W...&..... ...
100152bc:	8229 e892 8232 e860 823c e82f 8245 e7fd     )...2.`.<./.E...
100152cc:	824f e7cc 8258 e79b 8262 e769 826b e738     O...X...b.i.k.8.
100152dc:	8275 e707 827f e6d5 8289 e6a4 8293 e673     u.............s.
100152ec:	829d e642 82a7 e610 82b1 e5df 82bc e5ae     ..B.............
100152fc:	82c6 e57d 82d0 e54c 82db e51b 82e6 e4e9     ..}...L.........
1001530c:	82f0 e4b8 82fb e487 8306 e456 8311 e425     ..........V...%.
1001531c:	831c e3f4 8327 e3c3 8332 e392 833d e361     ....'...2...=.a.
1001532c:	8348 e330 8354 e2ff 835f e2ce 836b e29d     H.0.T..._...k...
1001533c:	8376 e26c 8382 e23b 838e e20a 8399 e1da     v.l...;.........
1001534c:	83a5 e1a9 83b1 e178 83bd e147 83c9 e116     ......x...G.....
1001535c:	83d6 e0e6 83e2 e0b5 83ee e084 83fa e053     ..............S.
1001536c:	8407 e023 8414 dff2 8420 dfc1 842d df91     ..#..... ...-...
1001537c:	843a df60 8446 df2f 8453 deff 8460 dece     :.`.F./.S...`...
1001538c:	846d de9e 847b de6d 8488 de3d 8495 de0c     m...{.m...=.....
1001539c:	84a2 dddc 84b0 ddab 84bd dd7b 84cb dd4b     ..........{...K.
100153ac:	84d9 dd1a 84e6 dcea 84f4 dcba 8502 dc89     ................
100153bc:	8510 dc59 851e dc29 852c dbf8 853a dbc8     ..Y...).,...:...
100153cc:	8549 db98 8557 db68 8565 db38 8574 db08     I...W.h.e.8.t...
100153dc:	8582 dad7 8591 daa7 85a0 da77 85af da47     ..........w...G.
100153ec:	85bd da17 85cc d9e7 85db d9b7 85ea d987     ................
100153fc:	85fa d957 8609 d927 8618 d8f8 8627 d8c8     ..W...'.....'...
1001540c:	8637 d898 8646 d868 8656 d838 8666 d809     7...F.h.V.8.f...
1001541c:	8675 d7d9 8685 d7a9 8695 d779 86a5 d74a     u.........y...J.
1001542c:	86b5 d71a 86c5 d6ea 86d5 d6bb 86e6 d68b     ................
1001543c:	86f6 d65c 8706 d62c 8717 d5fd 8727 d5cd     ..\...,.....'...
1001544c:	8738 d59e 8749 d56e 8759 d53f 876a d510     8...I.n.Y.?.j...
1001545c:	877b d4e0 878c d4b1 879d d482 87ae d452     {.............R.
1001546c:	87bf d423 87d1 d3f4 87e2 d3c5 87f3 d396     ..#.............
1001547c:	8805 d367 8816 d337 8828 d308 883a d2d9     ..g...7.(...:...
1001548c:	884b d2aa 885d d27b 886f d24c 8881 d21d     K...].{.o.L.....
1001549c:	8893 d1ee 88a5 d1c0 88b8 d191 88ca d162     ..............b.
100154ac:	88dc d133 88ef d104 8901 d0d6 8914 d0a7     ..3.............
100154bc:	8926 d078 8939 d04a 894c d01b 895f cfec     &.x.9.J.L..._...
100154cc:	8971 cfbe 8984 cf8f 8997 cf61 89ab cf32     q.........a...2.
100154dc:	89be cf04 89d1 ced5 89e4 cea7 89f8 ce79     ..............y.
100154ec:	8a0b ce4a 8a1f ce1c 8a33 cdee 8a46 cdbf     ..J.....3...F...
100154fc:	8a5a cd91 8a6e cd63 8a82 cd35 8a96 cd07     Z...n.c...5.....
1001550c:	8aaa ccd9 8abe ccab 8ad2 cc7d 8ae6 cc4f     ..........}...O.
1001551c:	8afb cc21 8b0f cbf3 8b24 cbc5 8b38 cb97     ..!.....$...8...
1001552c:	8b4d cb69 8b61 cb3b 8b76 cb0d 8b8b cae0     M.i.a.;.v.......
1001553c:	8ba0 cab2 8bb5 ca84 8bca ca57 8bdf ca29     ..........W...).
1001554c:	8bf4 c9fb 8c09 c9ce 8c1f c9a0 8c34 c973     ............4.s.
1001555c:	8c4a c945 8c5f c918 8c75 c8eb 8c8a c8bd     J.E._...u.......
1001556c:	8ca0 c890 8cb6 c863 8ccc c835 8ce2 c808     ......c...5.....
1001557c:	8cf8 c7db 8d0e c7ae 8d24 c781 8d3a c754     ........$...:.T.
1001558c:	8d50 c727 8d67 c6f9 8d7d c6cd 8d94 c6a0     P.'.g...}.......
1001559c:	8daa c673 8dc1 c646 8dd8 c619 8dee c5ec     ..s...F.........
100155ac:	8e05 c5bf 8e1c c593 8e33 c566 8e4a c539     ........3.f.J.9.
100155bc:	8e61 c50d 8e79 c4e0 8e90 c4b3 8ea7 c487     a...y...........
100155cc:	8ebe c45a 8ed6 c42e 8eed c402 8f05 c3d5     ..Z.............
100155dc:	8f1d c3a9 8f34 c37c 8f4c c350 8f64 c324     ....4.|.L.P.d.$.
100155ec:	8f7c c2f8 8f94 c2cc 8fac c29f 8fc4 c273     |.............s.
100155fc:	8fdc c247 8ff5 c21b 900d c1ef 9025 c1c3     ..G.........%...
1001560c:	903e c197 9056 c16c 906f c140 9088 c114     >...V.l.o.@.....
1001561c:	90a0 c0e8 90b9 c0bc 90d2 c091 90eb c065     ..............e.
1001562c:	9104 c03a 911d c00e 9136 bfe2 9150 bfb7     ..:.....6...P...
1001563c:	9169 bf8c 9182 bf60 919c bf35 91b5 bf09     i.....`...5.....
1001564c:	91cf bede 91e8 beb3 9202 be88 921c be5d     ..............].
1001565c:	9235 be31 924f be06 9269 bddb 9283 bdb0     5.1.O...i.......
1001566c:	929d bd85 92b7 bd5a 92d2 bd2f 92ec bd05     ......Z.../.....
1001567c:	9306 bcda 9321 bcaf 933b bc84 9356 bc5a     ....!...;...V.Z.
1001568c:	9370 bc2f 938b bc04 93a6 bbda 93c0 bbaf     p./.............
1001569c:	93db bb85 93f6 bb5a 9411 bb30 942c bb05     ......Z...0.,...
100156ac:	9447 badb 9463 bab1 947e ba87 9499 ba5c     G...c...~.....\.
100156bc:	94b5 ba32 94d0 ba08 94ec b9de 9507 b9b4     ..2.............
100156cc:	9523 b98a 953e b960 955a b936 9576 b90c     #...>.`.Z.6.v...
100156dc:	9592 b8e3 95ae b8b9 95ca b88f 95e6 b865     ..............e.
100156ec:	9602 b83c 961e b812 963b b7e9 9657 b7bf     ..<.....;...W...
100156fc:	9673 b796 9690 b76c 96ac b743 96c9 b719     s.....l...C.....
1001570c:	96e6 b6f0 9702 b6c7 971f b69e 973c b675     ............<.u.
1001571c:	9759 b64b 9776 b622 9793 b5f9 97b0 b5d0     Y.K.v.".........
1001572c:	97cd b5a7 97ea b57e 9808 b556 9825 b52d     ......~...V.%.-.
1001573c:	9842 b504 9860 b4db 987d b4b3 989b b48a     B...`...}.......
1001574c:	98b9 b461 98d6 b439 98f4 b410 9912 b3e8     ..a...9.........
1001575c:	9930 b3c0 994e b397 996c b36f 998a b347     0...N...l.o...G.
1001576c:	99a8 b31e 99c6 b2f6 99e5 b2ce 9a03 b2a6     ................
1001577c:	9a22 b27e 9a40 b256 9a5f b22e 9a7d b206     ".~.@.V._...}...
1001578c:	9a9c b1de 9aba b1b7 9ad9 b18f 9af8 b167     ..............g.
1001579c:	9b17 b140 9b36 b118 9b55 b0f0 9b74 b0c9     ..@.6...U...t...
100157ac:	9b93 b0a1 9bb2 b07a 9bd2 b053 9bf1 b02b     ......z...S...+.
100157bc:	9c10 b004 9c30 afdd 9c4f afb6 9c6f af8f     ....0...O...o...
100157cc:	9c8e af68 9cae af40 9cce af1a 9cee aef3     ..h...@.........
100157dc:	9d0d aecc 9d2d aea5 9d4d ae7e 9d6d ae57     ....-...M.~.m.W.
100157ec:	9d8e ae31 9dae ae0a 9dce ade3 9dee adbd     ..1.............
100157fc:	9e0e ad96 9e2f ad70 9e4f ad4a 9e70 ad23     ..../.p.O.J.p.#.
1001580c:	9e90 acfd 9eb1 acd7 9ed2 acb1 9ef2 ac8a     ................
1001581c:	9f13 ac64 9f34 ac3e 9f55 ac18 9f76 abf2     ..d.4.>.U...v...
1001582c:	9f97 abcc 9fb8 aba7 9fd9 ab81 9ffb ab5b     ..............[.
1001583c:	a01c ab35 a03d ab10 a05f aaea a080 aac5     ..5.=..._.......
1001584c:	a0a1 aa9f a0c3 aa7a a0e5 aa54 a106 aa2f     ......z...T.../.
1001585c:	a128 aa0a a14a a9e5 a16c a9bf a18e a99a     (...J...l.......
1001586c:	a1af a975 a1d2 a950 a1f4 a92b a216 a906     ..u...P...+.....
1001587c:	a238 a8e2 a25a a8bd a27c a898 a29f a873     8...Z...|.....s.
1001588c:	a2c1 a84f a2e4 a82a a306 a806 a329 a7e1     ..O...*.....)...
1001589c:	a34b a7bd a36e a798 a391 a774 a3b4 a750     K...n.....t...P.
100158ac:	a3d6 a72b a3f9 a707 a41c a6e3 a43f a6bf     ..+.........?...
100158bc:	a462 a69b a486 a677 a4a9 a653 a4cc a62f     b.....w...S.../.
100158cc:	a4ef a60c a513 a5e8 a536 a5c4 a55a a5a1     ........6...Z...
100158dc:	a57d a57d a5a1 a55a a5c4 a536 a5e8 a513     }.}...Z...6.....
100158ec:	a60c a4ef a62f a4cc a653 a4a9 a677 a486     ..../...S...w...
100158fc:	a69b a462 a6bf a43f a6e3 a41c a707 a3f9     ..b...?.........
1001590c:	a72b a3d6 a750 a3b4 a774 a391 a798 a36e     +...P...t.....n.
1001591c:	a7bd a34b a7e1 a329 a806 a306 a82a a2e4     ..K...).....*...
1001592c:	a84f a2c1 a873 a29f a898 a27c a8bd a25a     O...s.....|...Z.
1001593c:	a8e2 a238 a906 a216 a92b a1f4 a950 a1d2     ..8.....+...P...
1001594c:	a975 a1af a99a a18e a9bf a16c a9e5 a14a     u.........l...J.
1001595c:	aa0a a128 aa2f a106 aa54 a0e5 aa7a a0c3     ..(./...T...z...
1001596c:	aa9f a0a1 aac5 a080 aaea a05f ab10 a03d     .........._...=.
1001597c:	ab35 a01c ab5b 9ffb ab81 9fd9 aba7 9fb8     5...[...........
1001598c:	abcc 9f97 abf2 9f76 ac18 9f55 ac3e 9f34     ......v...U.>.4.
1001599c:	ac64 9f13 ac8a 9ef2 acb1 9ed2 acd7 9eb1     d...............
100159ac:	acfd 9e90 ad23 9e70 ad4a 9e4f ad70 9e2f     ....#.p.J.O.p./.
100159bc:	ad96 9e0e adbd 9dee ade3 9dce ae0a 9dae     ................
100159cc:	ae31 9d8e ae57 9d6d ae7e 9d4d aea5 9d2d     1...W.m.~.M...-.
100159dc:	aecc 9d0d aef3 9cee af1a 9cce af40 9cae     ............@...
100159ec:	af68 9c8e af8f 9c6f afb6 9c4f afdd 9c30     h.....o...O...0.
100159fc:	b004 9c10 b02b 9bf1 b053 9bd2 b07a 9bb2     ....+...S...z...
10015a0c:	b0a1 9b93 b0c9 9b74 b0f0 9b55 b118 9b36     ......t...U...6.
10015a1c:	b140 9b17 b167 9af8 b18f 9ad9 b1b7 9aba     @...g...........
10015a2c:	b1de 9a9c b206 9a7d b22e 9a5f b256 9a40     ......}..._.V.@.
10015a3c:	b27e 9a22 b2a6 9a03 b2ce 99e5 b2f6 99c6     ~.".............
10015a4c:	b31e 99a8 b347 998a b36f 996c b397 994e     ....G...o.l...N.
10015a5c:	b3c0 9930 b3e8 9912 b410 98f4 b439 98d6     ..0.........9...
10015a6c:	b461 98b9 b48a 989b b4b3 987d b4db 9860     a.........}...`.
10015a7c:	b504 9842 b52d 9825 b556 9808 b57e 97ea     ..B.-.%.V...~...
10015a8c:	b5a7 97cd b5d0 97b0 b5f9 9793 b622 9776     ............".v.
10015a9c:	b64b 9759 b675 973c b69e 971f b6c7 9702     K.Y.u.<.........
10015aac:	b6f0 96e6 b719 96c9 b743 96ac b76c 9690     ........C...l...
10015abc:	b796 9673 b7bf 9657 b7e9 963b b812 961e     ..s...W...;.....
10015acc:	b83c 9602 b865 95e6 b88f 95ca b8b9 95ae     <...e...........
10015adc:	b8e3 9592 b90c 9576 b936 955a b960 953e     ......v.6.Z.`.>.
10015aec:	b98a 9523 b9b4 9507 b9de 94ec ba08 94d0     ..#.............
10015afc:	ba32 94b5 ba5c 9499 ba87 947e bab1 9463     2...\.....~...c.
10015b0c:	badb 9447 bb05 942c bb30 9411 bb5a 93f6     ..G...,.0...Z...
10015b1c:	bb85 93db bbaf 93c0 bbda 93a6 bc04 938b     ................
10015b2c:	bc2f 9370 bc5a 9356 bc84 933b bcaf 9321     /.p.Z.V...;...!.
10015b3c:	bcda 9306 bd05 92ec bd2f 92d2 bd5a 92b7     ......../...Z...
10015b4c:	bd85 929d bdb0 9283 bddb 9269 be06 924f     ..........i...O.
10015b5c:	be31 9235 be5d 921c be88 9202 beb3 91e8     1.5.]...........
10015b6c:	bede 91cf bf09 91b5 bf35 919c bf60 9182     ........5...`...
10015b7c:	bf8c 9169 bfb7 9150 bfe2 9136 c00e 911d     ..i...P...6.....
10015b8c:	c03a 9104 c065 90eb c091 90d2 c0bc 90b9     :...e...........
10015b9c:	c0e8 90a0 c114 9088 c140 906f c16c 9056     ........@.o.l.V.
10015bac:	c197 903e c1c3 9025 c1ef 900d c21b 8ff5     ..>...%.........
10015bbc:	c247 8fdc c273 8fc4 c29f 8fac c2cc 8f94     G...s...........
10015bcc:	c2f8 8f7c c324 8f64 c350 8f4c c37c 8f34     ..|.$.d.P.L.|.4.
10015bdc:	c3a9 8f1d c3d5 8f05 c402 8eed c42e 8ed6     ................
10015bec:	c45a 8ebe c487 8ea7 c4b3 8e90 c4e0 8e79     Z.............y.
10015bfc:	c50d 8e61 c539 8e4a c566 8e33 c593 8e1c     ..a.9.J.f.3.....
10015c0c:	c5bf 8e05 c5ec 8dee c619 8dd8 c646 8dc1     ............F...
10015c1c:	c673 8daa c6a0 8d94 c6cd 8d7d c6f9 8d67     s.........}...g.
10015c2c:	c727 8d50 c754 8d3a c781 8d24 c7ae 8d0e     '.P.T.:...$.....
10015c3c:	c7db 8cf8 c808 8ce2 c835 8ccc c863 8cb6     ........5...c...
10015c4c:	c890 8ca0 c8bd 8c8a c8eb 8c75 c918 8c5f     ..........u..._.
10015c5c:	c945 8c4a c973 8c34 c9a0 8c1f c9ce 8c09     E.J.s.4.........
10015c6c:	c9fb 8bf4 ca29 8bdf ca57 8bca ca84 8bb5     ....)...W.......
10015c7c:	cab2 8ba0 cae0 8b8b cb0d 8b76 cb3b 8b61     ..........v.;.a.
10015c8c:	cb69 8b4d cb97 8b38 cbc5 8b24 cbf3 8b0f     i.M...8...$.....
10015c9c:	cc21 8afb cc4f 8ae6 cc7d 8ad2 ccab 8abe     !...O...}.......
10015cac:	ccd9 8aaa cd07 8a96 cd35 8a82 cd63 8a6e     ........5...c.n.
10015cbc:	cd91 8a5a cdbf 8a46 cdee 8a33 ce1c 8a1f     ..Z...F...3.....
10015ccc:	ce4a 8a0b ce79 89f8 cea7 89e4 ced5 89d1     J...y...........
10015cdc:	cf04 89be cf32 89ab cf61 8997 cf8f 8984     ....2...a.......
10015cec:	cfbe 8971 cfec 895f d01b 894c d04a 8939     ..q..._...L.J.9.
10015cfc:	d078 8926 d0a7 8914 d0d6 8901 d104 88ef     x.&.............
10015d0c:	d133 88dc d162 88ca d191 88b8 d1c0 88a5     3...b...........
10015d1c:	d1ee 8893 d21d 8881 d24c 886f d27b 885d     ........L.o.{.].
10015d2c:	d2aa 884b d2d9 883a d308 8828 d337 8816     ..K...:...(.7...
10015d3c:	d367 8805 d396 87f3 d3c5 87e2 d3f4 87d1     g...............
10015d4c:	d423 87bf d452 87ae d482 879d d4b1 878c     #...R...........
10015d5c:	d4e0 877b d510 876a d53f 8759 d56e 8749     ..{...j.?.Y.n.I.
10015d6c:	d59e 8738 d5cd 8727 d5fd 8717 d62c 8706     ..8...'.....,...
10015d7c:	d65c 86f6 d68b 86e6 d6bb 86d5 d6ea 86c5     \...............
10015d8c:	d71a 86b5 d74a 86a5 d779 8695 d7a9 8685     ....J...y.......
10015d9c:	d7d9 8675 d809 8666 d838 8656 d868 8646     ..u...f.8.V.h.F.
10015dac:	d898 8637 d8c8 8627 d8f8 8618 d927 8609     ..7...'.....'...
10015dbc:	d957 85fa d987 85ea d9b7 85db d9e7 85cc     W...............
10015dcc:	da17 85bd da47 85af da77 85a0 daa7 8591     ....G...w.......
10015ddc:	dad7 8582 db08 8574 db38 8565 db68 8557     ......t.8.e.h.W.
10015dec:	db98 8549 dbc8 853a dbf8 852c dc29 851e     ..I...:...,.)...
10015dfc:	dc59 8510 dc89 8502 dcba 84f4 dcea 84e6     Y...............
10015e0c:	dd1a 84d9 dd4b 84cb dd7b 84bd ddab 84b0     ....K...{.......
10015e1c:	dddc 84a2 de0c 8495 de3d 8488 de6d 847b     ........=...m.{.
10015e2c:	de9e 846d dece 8460 deff 8453 df2f 8446     ..m...`...S./.F.
10015e3c:	df60 843a df91 842d dfc1 8420 dff2 8414     `.:...-... .....
10015e4c:	e023 8407 e053 83fa e084 83ee e0b5 83e2     #...S...........
10015e5c:	e0e6 83d6 e116 83c9 e147 83bd e178 83b1     ........G...x...
10015e6c:	e1a9 83a5 e1da 8399 e20a 838e e23b 8382     ............;...
10015e7c:	e26c 8376 e29d 836b e2ce 835f e2ff 8354     l.v...k..._...T.
10015e8c:	e330 8348 e361 833d e392 8332 e3c3 8327     0.H.a.=...2...'.
10015e9c:	e3f4 831c e425 8311 e456 8306 e487 82fb     ....%...V.......
10015eac:	e4b8 82f0 e4e9 82e6 e51b 82db e54c 82d0     ............L...
10015ebc:	e57d 82c6 e5ae 82bc e5df 82b1 e610 82a7     }...............
10015ecc:	e642 829d e673 8293 e6a4 8289 e6d5 827f     B...s...........
10015edc:	e707 8275 e738 826b e769 8262 e79b 8258     ..u.8.k.i.b...X.
10015eec:	e7cc 824f e7fd 8245 e82f 823c e860 8232     ..O...E./.<.`.2.
10015efc:	e892 8229 e8c3 8220 e8f5 8217 e926 820e     ..)... .....&...
10015f0c:	e957 8205 e989 81fc e9ba 81f3 e9ec 81eb     W...............
10015f1c:	ea1d 81e2 ea4f 81d9 ea80 81d1 eab2 81c8     ....O...........
10015f2c:	eae4 81c0 eb15 81b8 eb47 81b0 eb78 81a8     ........G...x...
10015f3c:	ebaa 81a0 ebdc 8198 ec0d 8190 ec3f 8188     ............?...
10015f4c:	ec71 8180 eca2 8179 ecd4 8171 ed06 816a     q.....y...q...j.
10015f5c:	ed37 8162 ed69 815b ed9b 8154 edcd 814c     7.b.i.[...T...L.
10015f6c:	edfe 8145 ee30 813e ee62 8137 ee94 8130     ..E.0.>.b.7...0.
10015f7c:	eec6 812a eef7 8123 ef29 811c ef5b 8116     ..*...#.)...[...
10015f8c:	ef8d 810f efbf 8109 eff1 8102 f022 80fc     ............"...
10015f9c:	f054 80f6 f086 80f0 f0b8 80ea f0ea 80e4     T...............
10015fac:	f11c 80de f14e 80d8 f180 80d2 f1b2 80cd     ....N...........
10015fbc:	f1e4 80c7 f216 80c2 f248 80bc f27a 80b7     ........H...z...
10015fcc:	f2ac 80b2 f2de 80ac f310 80a7 f342 80a2     ............B...
10015fdc:	f374 809d f3a6 8098 f3d8 8094 f40a 808f     t...............
10015fec:	f43c 808a f46e 8086 f4a0 8081 f4d2 807d     <...n.........}.
10015ffc:	f504 8078 f536 8074 f568 8070 f59a 806c     ..x.6.t.h.p...l.
1001600c:	f5cc 8068 f5ff 8064 f631 8060 f663 805c     ..h...d.1.`.c.\.
1001601c:	f695 8058 f6c7 8055 f6f9 8051 f72b 804e     ..X...U...Q.+.N.
1001602c:	f75d 804a f790 8047 f7c2 8043 f7f4 8040     ].J...G...C...@.
1001603c:	f826 803d f858 803a f88a 8037 f8bd 8034     &.=.X.:...7...4.
1001604c:	f8ef 8031 f921 802f f953 802c f985 8029     ..1.!./.S.,...).
1001605c:	f9b8 8027 f9ea 8025 fa1c 8022 fa4e 8020     ..'...%...".N. .
1001606c:	fa80 801e fab3 801c fae5 801a fb17 8018     ................
1001607c:	fb49 8016 fb7c 8014 fbae 8012 fbe0 8011     I...|...........
1001608c:	fc12 800f fc45 800d fc77 800c fca9 800b     ....E...w.......
1001609c:	fcdb 8009 fd0e 8008 fd40 8007 fd72 8006     ........@...r...
100160ac:	fda4 8005 fdd7 8004 fe09 8003 fe3b 8003     ............;...
100160bc:	fe6d 8002 fea0 8001 fed2 8001 ff04 8000     m...............
100160cc:	ff36 8000 ff69 8000 ff9b 8000 ffcd 8000     6...i...........

100160dc <twiddleCoef_512_q15>:
100160dc:	7fff 0000 7ffd 0192 7ff6 0324 7fe9 04b6     ..........$.....
100160ec:	7fd8 0647 7fc2 07d9 7fa7 096a 7f87 0afb     ..G.......j.....
100160fc:	7f62 0c8b 7f38 0e1b 7f09 0fab 7ed5 1139     b...8........~9.
1001610c:	7e9d 12c8 7e5f 1455 7e1d 15e2 7dd6 176d     .~.._~U..~...}m.
1001611c:	7d8a 18f8 7d39 1a82 7ce3 1c0b 7c89 1d93     .}..9}...|...|..
1001612c:	7c29 1f19 7bc5 209f 7b5d 2223 7aef 23a6     )|...{. ]{#".z.#
1001613c:	7a7d 2528 7a05 26a8 798a 2826 7909 29a3     }z(%.z.&.y&(.y.)
1001614c:	7884 2b1f 77fa 2c98 776c 2e11 76d9 2f87     .x.+.w.,lw...v./
1001615c:	7641 30fb 75a5 326e 7504 33de 745f 354d     Av.0.un2.u.3_tM5
1001616c:	73b5 36ba 7307 3824 7255 398c 719e 3af2     .s.6.s$8Ur.9.q.:
1001617c:	70e2 3c56 7023 3db8 6f5f 3f17 6e96 4073     .pV<#p.=_o.?.ns@
1001618c:	6dca 41ce 6cf9 4325 6c24 447a 6b4a 45cd     .m.A.l%C$lzDJk.E
1001619c:	6a6d 471c 698c 4869 68a6 49b4 67bd 4afb     mj.G.iiH.h.I.g.J
100161ac:	66cf 4c3f 65dd 4d81 64e8 4ebf 63ef 4ffb     .f?L.e.M.d.N.c.O
100161bc:	62f2 5133 61f1 5269 60ec 539b 5fe3 54ca     .b3Q.aiR.`.S._.T
100161cc:	5ed7 55f5 5dc7 571d 5cb4 5842 5b9d 5964     .^.U.].W.\BX.[dY
100161dc:	5a82 5a82 5964 5b9d 5842 5cb4 571d 5dc7     .Z.ZdY.[BX.\.W.]
100161ec:	55f5 5ed7 54ca 5fe3 539b 60ec 5269 61f1     .U.^.T._.S.`iR.a
100161fc:	5133 62f2 4ffb 63ef 4ebf 64e8 4d81 65dd     3Q.b.O.c.N.d.M.e
1001620c:	4c3f 66cf 4afb 67bd 49b4 68a6 4869 698c     ?L.f.J.g.I.hiH.i
1001621c:	471c 6a6d 45cd 6b4a 447a 6c24 4325 6cf9     .Gmj.EJkzD$l%C.l
1001622c:	41ce 6dca 4073 6e96 3f17 6f5f 3db8 7023     .A.ms@.n.?_o.=#p
1001623c:	3c56 70e2 3af2 719e 398c 7255 3824 7307     V<.p.:.q.9Ur$8.s
1001624c:	36ba 73b5 354d 745f 33de 7504 326e 75a5     .6.sM5_t.3.un2.u
1001625c:	30fb 7641 2f87 76d9 2e11 776c 2c98 77fa     .0Av./.v..lw.,.w
1001626c:	2b1f 7884 29a3 7909 2826 798a 26a8 7a05     .+.x.).y&(.y.&.z
1001627c:	2528 7a7d 23a6 7aef 2223 7b5d 209f 7bc5     (%}z.#.z#"]{. .{
1001628c:	1f19 7c29 1d93 7c89 1c0b 7ce3 1a82 7d39     ..)|...|...|..9}
1001629c:	18f8 7d8a 176d 7dd6 15e2 7e1d 1455 7e5f     ...}m..}...~U._~
100162ac:	12c8 7e9d 1139 7ed5 0fab 7f09 0e1b 7f38     ...~9..~......8.
100162bc:	0c8b 7f62 0afb 7f87 096a 7fa7 07d9 7fc2     ..b.....j.......
100162cc:	0647 7fd8 04b6 7fe9 0324 7ff6 0192 7ffd     G.......$.......
100162dc:	0000 7fff fe6d 7ffd fcdb 7ff6 fb49 7fe9     ....m.......I...
100162ec:	f9b8 7fd8 f826 7fc2 f695 7fa7 f504 7f87     ....&...........
100162fc:	f374 7f62 f1e4 7f38 f054 7f09 eec6 7ed5     t.b...8.T......~
1001630c:	ed37 7e9d ebaa 7e5f ea1d 7e1d e892 7dd6     7..~.._~...~...}
1001631c:	e707 7d8a e57d 7d39 e3f4 7ce3 e26c 7c89     ...}}.9}...|l..|
1001632c:	e0e6 7c29 df60 7bc5 dddc 7b5d dc59 7aef     ..)|`..{..]{Y..z
1001633c:	dad7 7a7d d957 7a05 d7d9 798a d65c 7909     ..}zW..z...y\..y
1001634c:	d4e0 7884 d367 77fa d1ee 776c d078 76d9     ...xg..w..lwx..v
1001635c:	cf04 7641 cd91 75a5 cc21 7504 cab2 745f     ..Av...u!..u.._t
1001636c:	c945 73b5 c7db 7307 c673 7255 c50d 719e     E..s...ss.Ur...q
1001637c:	c3a9 70e2 c247 7023 c0e8 6f5f bf8c 6e96     ...pG.#p.._o...n
1001638c:	be31 6dca bcda 6cf9 bb85 6c24 ba32 6b4a     1..m...l..$l2.Jk
1001639c:	b8e3 6a6d b796 698c b64b 68a6 b504 67bd     ..mj...iK..h...g
100163ac:	b3c0 66cf b27e 65dd b140 64e8 b004 63ef     ...f~..e@..d...c
100163bc:	aecc 62f2 ad96 61f1 ac64 60ec ab35 5fe3     ...b...ad..`5.._
100163cc:	aa0a 5ed7 a8e2 5dc7 a7bd 5cb4 a69b 5b9d     ...^...]...\...[
100163dc:	a57d 5a82 a462 5964 a34b 5842 a238 571d     }..Zb.dYK.BX8..W
100163ec:	a128 55f5 a01c 54ca 9f13 539b 9e0e 5269     (..U...T...S..iR
100163fc:	9d0d 5133 9c10 4ffb 9b17 4ebf 9a22 4d81     ..3Q...O...N"..M
1001640c:	9930 4c3f 9842 4afb 9759 49b4 9673 4869     0.?LB..JY..Is.iH
1001641c:	9592 471c 94b5 45cd 93db 447a 9306 4325     ...G...E..zD..%C
1001642c:	9235 41ce 9169 4073 90a0 3f17 8fdc 3db8     5..Ai.s@...?...=
1001643c:	8f1d 3c56 8e61 3af2 8daa 398c 8cf8 3824     ..V<a..:...9..$8
1001644c:	8c4a 36ba 8ba0 354d 8afb 33de 8a5a 326e     J..6..M5...3Z.n2
1001645c:	89be 30fb 8926 2f87 8893 2e11 8805 2c98     ...0&../.......,
1001646c:	877b 2b1f 86f6 29a3 8675 2826 85fa 26a8     {..+...)u.&(...&
1001647c:	8582 2528 8510 23a6 84a2 2223 843a 209f     ..(%...#..#":.. 
1001648c:	83d6 1f19 8376 1d93 831c 1c0b 82c6 1a82     ....v...........
1001649c:	8275 18f8 8229 176d 81e2 15e2 81a0 1455     u...).m.......U.
100164ac:	8162 12c8 812a 1139 80f6 0fab 80c7 0e1b     b...*.9.........
100164bc:	809d 0c8b 8078 0afb 8058 096a 803d 07d9     ....x...X.j.=...
100164cc:	8027 0647 8016 04b6 8009 0324 8002 0192     '.G.......$.....
100164dc:	8000 0000 8002 fe6d 8009 fcdb 8016 fb49     ......m.......I.
100164ec:	8027 f9b8 803d f826 8058 f695 8078 f504     '...=.&.X...x...
100164fc:	809d f374 80c7 f1e4 80f6 f054 812a eec6     ..t.......T.*...
1001650c:	8162 ed37 81a0 ebaa 81e2 ea1d 8229 e892     b.7.........)...
1001651c:	8275 e707 82c6 e57d 831c e3f4 8376 e26c     u.....}.....v.l.
1001652c:	83d6 e0e6 843a df60 84a2 dddc 8510 dc59     ....:.`.......Y.
1001653c:	8582 dad7 85fa d957 8675 d7d9 86f6 d65c     ......W.u.....\.
1001654c:	877b d4e0 8805 d367 8893 d1ee 8926 d078     {.....g.....&.x.
1001655c:	89be cf04 8a5a cd91 8afb cc21 8ba0 cab2     ....Z.....!.....
1001656c:	8c4a c945 8cf8 c7db 8daa c673 8e61 c50d     J.E.......s.a...
1001657c:	8f1d c3a9 8fdc c247 90a0 c0e8 9169 bf8c     ......G.....i...
1001658c:	9235 be31 9306 bcda 93db bb85 94b5 ba32     5.1...........2.
1001659c:	9592 b8e3 9673 b796 9759 b64b 9842 b504     ....s...Y.K.B...
100165ac:	9930 b3c0 9a22 b27e 9b17 b140 9c10 b004     0...".~...@.....
100165bc:	9d0d aecc 9e0e ad96 9f13 ac64 a01c ab35     ..........d...5.
100165cc:	a128 aa0a a238 a8e2 a34b a7bd a462 a69b     (...8...K...b...
100165dc:	a57d a57d a69b a462 a7bd a34b a8e2 a238     }.}...b...K...8.
100165ec:	aa0a a128 ab35 a01c ac64 9f13 ad96 9e0e     ..(.5...d.......
100165fc:	aecc 9d0d b004 9c10 b140 9b17 b27e 9a22     ........@...~.".
1001660c:	b3c0 9930 b504 9842 b64b 9759 b796 9673     ..0...B.K.Y...s.
1001661c:	b8e3 9592 ba32 94b5 bb85 93db bcda 9306     ....2...........
1001662c:	be31 9235 bf8c 9169 c0e8 90a0 c247 8fdc     1.5...i.....G...
1001663c:	c3a9 8f1d c50d 8e61 c673 8daa c7db 8cf8     ......a.s.......
1001664c:	c945 8c4a cab2 8ba0 cc21 8afb cd91 8a5a     E.J.....!.....Z.
1001665c:	cf04 89be d078 8926 d1ee 8893 d367 8805     ....x.&.....g...
1001666c:	d4e0 877b d65c 86f6 d7d9 8675 d957 85fa     ..{.\.....u.W...
1001667c:	dad7 8582 dc59 8510 dddc 84a2 df60 843a     ....Y.......`.:.
1001668c:	e0e6 83d6 e26c 8376 e3f4 831c e57d 82c6     ....l.v.....}...
1001669c:	e707 8275 e892 8229 ea1d 81e2 ebaa 81a0     ..u...).........
100166ac:	ed37 8162 eec6 812a f054 80f6 f1e4 80c7     7.b...*.T.......
100166bc:	f374 809d f504 8078 f695 8058 f826 803d     t.....x...X.&.=.
100166cc:	f9b8 8027 fb49 8016 fcdb 8009 fe6d 8002     ..'.I.......m...

100166dc <twiddleCoef_64_q15>:
100166dc:	7fff 0000 7f62 0c8b 7d8a 18f8 7a7d 2528     ....b....}..}z(%
100166ec:	7641 30fb 70e2 3c56 6a6d 471c 62f2 5133     Av.0.pV<mj.G.b3Q
100166fc:	5a82 5a82 5133 62f2 471c 6a6d 3c56 70e2     .Z.Z3Q.b.GmjV<.p
1001670c:	30fb 7641 2528 7a7d 18f8 7d8a 0c8b 7f62     .0Av(%}z...}..b.
1001671c:	0000 7fff f374 7f62 e707 7d8a dad7 7a7d     ....t.b....}..}z
1001672c:	cf04 7641 c3a9 70e2 b8e3 6a6d aecc 62f2     ..Av...p..mj...b
1001673c:	a57d 5a82 9d0d 5133 9592 471c 8f1d 3c56     }..Z..3Q...G..V<
1001674c:	89be 30fb 8582 2528 8275 18f8 809d 0c8b     ...0..(%u.......
1001675c:	8000 0000 809d f374 8275 e707 8582 dad7     ......t.u.......
1001676c:	89be cf04 8f1d c3a9 9592 b8e3 9d0d aecc     ................
1001677c:	a57d a57d aecc 9d0d b8e3 9592 c3a9 8f1d     }.}.............
1001678c:	cf04 89be dad7 8582 e707 8275 f374 809d     ..........u.t...

1001679c <arm_cfft_sR_q15_len1024>:
1001679c:	0400 0000 07cc 1001 c954 1000 03e0 0000     ........T.......

100167ac <arm_cfft_sR_q15_len128>:
100167ac:	0080 0000 13cc 1001 d114 1000 0070 0000     ............p...

100167bc <arm_cfft_sR_q15_len16>:
100167bc:	0010 0000 154c 1001 d1f4 1000 000c 0000     ....L...........

100167cc <arm_cfft_sR_q15_len2048>:
100167cc:	0800 0000 157c 1001 d20c 1000 07c0 0000     ....|...........

100167dc <arm_cfft_sR_q15_len256>:
100167dc:	0100 0000 2d7c 1001 e18c 1000 00f0 0000     ....|-..........

100167ec <arm_cfft_sR_q15_len32>:
100167ec:	0020 0000 307c 1001 e36c 1000 0018 0000      ...|0..l.......

100167fc <arm_cfft_sR_q15_len4096>:
100167fc:	1000 0000 30dc 1001 e39c 1000 0fc0 0000     .....0..........

1001680c <arm_cfft_sR_q15_len512>:
1001680c:	0200 0000 60dc 1001 031c 1001 01e0 0000     .....`..........

1001681c <arm_cfft_sR_q15_len64>:
1001681c:	0040 0000 66dc 1001 06dc 1001 0038 0000     @....f......8...

1001682c <npio2_hw>:
1001682c:	0f00 3fc9 0f00 4049 cb00 4096 0f00 40c9     ...?..I@...@...@
1001683c:	5300 40fb cb00 4116 ed00 412f 0f00 4149     .S.@...A../A..IA
1001684c:	3100 4162 5300 417b 3a00 418a cb00 4196     .1bA.S{A.:.A...A
1001685c:	5c00 41a3 ed00 41af 7e00 41bc 0f00 41c9     .\.A...A.~.A...A
1001686c:	a000 41d5 3100 41e2 c200 41ee 5300 41fb     ...A.1.A...A.S.A
1001687c:	f200 4203 3a00 420a 8300 4210 cb00 4216     ...B.:.B...B...B
1001688c:	1400 421d 5c00 4223 a500 4229 ed00 422f     ...B.\#B..)B../B
1001689c:	3600 4236 7e00 423c c700 4242 0f00 4249     .66B.~<B..BB..IB

100168ac <two_over_pi>:
100168ac:	00a2 0000 00f9 0000 0083 0000 006e 0000     ............n...
100168bc:	004e 0000 0044 0000 0015 0000 0029 0000     N...D.......)...
100168cc:	00fc 0000 0027 0000 0057 0000 00d1 0000     ....'...W.......
100168dc:	00f5 0000 0034 0000 00dd 0000 00c0 0000     ....4...........
100168ec:	00db 0000 0062 0000 0095 0000 0099 0000     ....b...........
100168fc:	003c 0000 0043 0000 0090 0000 0041 0000     <...C.......A...
1001690c:	00fe 0000 0051 0000 0063 0000 00ab 0000     ....Q...c.......
1001691c:	00de 0000 00bb 0000 00c5 0000 0061 0000     ............a...
1001692c:	00b7 0000 0024 0000 006e 0000 003a 0000     ....$...n...:...
1001693c:	0042 0000 004d 0000 00d2 0000 00e0 0000     B...M...........
1001694c:	0006 0000 0049 0000 002e 0000 00ea 0000     ....I...........
1001695c:	0009 0000 00d1 0000 0092 0000 001c 0000     ................
1001696c:	00fe 0000 001d 0000 00eb 0000 001c 0000     ................
1001697c:	00b1 0000 0029 0000 00a7 0000 003e 0000     ....).......>...
1001698c:	00e8 0000 0082 0000 0035 0000 00f5 0000     ........5.......
1001699c:	002e 0000 00bb 0000 0044 0000 0084 0000     ........D.......
100169ac:	00e9 0000 009c 0000 0070 0000 0026 0000     ........p...&...
100169bc:	00b4 0000 005f 0000 007e 0000 0041 0000     ...._...~...A...
100169cc:	0039 0000 0091 0000 00d6 0000 0039 0000     9...........9...
100169dc:	0083 0000 0053 0000 0039 0000 00f4 0000     ....S...9.......
100169ec:	009c 0000 0084 0000 005f 0000 008b 0000     ........_.......
100169fc:	00bd 0000 00f9 0000 0028 0000 003b 0000     ........(...;...
10016a0c:	001f 0000 00f8 0000 0097 0000 00ff 0000     ................
10016a1c:	00de 0000 0005 0000 0098 0000 000f 0000     ................
10016a2c:	00ef 0000 002f 0000 0011 0000 008b 0000     ..../...........
10016a3c:	005a 0000 000a 0000 006d 0000 001f 0000     Z.......m.......
10016a4c:	006d 0000 0036 0000 007e 0000 00cf 0000     m...6...~.......
10016a5c:	0027 0000 00cb 0000 0009 0000 00b7 0000     '...............
10016a6c:	004f 0000 0046 0000 003f 0000 0066 0000     O...F...?...f...
10016a7c:	009e 0000 005f 0000 00ea 0000 002d 0000     ...._.......-...
10016a8c:	0075 0000 0027 0000 00ba 0000 00c7 0000     u...'...........
10016a9c:	00eb 0000 00e5 0000 00f1 0000 007b 0000     ............{...
10016aac:	003d 0000 0007 0000 0039 0000 00f7 0000     =.......9.......
10016abc:	008a 0000 0052 0000 0092 0000 00ea 0000     ....R...........
10016acc:	006b 0000 00fb 0000 005f 0000 00b1 0000     k......._.......
10016adc:	001f 0000 008d 0000 005d 0000 0008 0000     ........].......
10016aec:	0056 0000 0003 0000 0030 0000 0046 0000     V.......0...F...
10016afc:	00fc 0000 007b 0000 006b 0000 00ab 0000     ....{...k.......
10016b0c:	00f0 0000 00cf 0000 00bc 0000 0020 0000     ............ ...
10016b1c:	009a 0000 00f4 0000 0036 0000 001d 0000     ........6.......
10016b2c:	00a9 0000 00e3 0000 0091 0000 0061 0000     ............a...
10016b3c:	005e 0000 00e6 0000 001b 0000 0008 0000     ^...............
10016b4c:	0065 0000 0099 0000 0085 0000 005f 0000     e..........._...
10016b5c:	0014 0000 00a0 0000 0068 0000 0040 0000     ........h...@...
10016b6c:	008d 0000 00ff 0000 00d8 0000 0080 0000     ................
10016b7c:	004d 0000 0073 0000 0027 0000 0031 0000     M...s...'...1...
10016b8c:	0006 0000 0006 0000 0015 0000 0056 0000     ............V...
10016b9c:	00ca 0000 0073 0000 00a8 0000 00c9 0000     ....s...........
10016bac:	0060 0000 00e2 0000 007b 0000 00c0 0000     `.......{.......
10016bbc:	008c 0000 006b 0000                         ....k...

10016bc4 <PIo2>:
10016bc4:	0000 3fc9 0000 39f0 0000 37da 0000 33a2     ...?...9...7...3
10016bd4:	0000 2e84 0000 2b50 0000 27c2 0000 22d0     ......P+...'..."
10016be4:	0000 1fc4 0000 1bc6 0000 1744               ..........D.

10016bf0 <init_jk>:
10016bf0:	0004 0000 0007 0000 0009 0000 4e49 0046     ............INF.
10016c00:	6e69 0066 414e 004e 616e 006e 0030 3130     inf.NAN.nan.0.01
10016c10:	3332 3534 3736 3938 4241 4443 4645 3000     23456789ABCDEF.0
10016c20:	3231 3433 3635 3837 6139 6362 6564 0066     123456789abcdef.
10016c30:	6e49 6966 696e 7974 4e00 4e61 5200 4545     Infinity.NaN.REE
10016c40:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
10016c50:	6564 0064 642f 7461 2f61 656a 6b6e 6e69     ded./data/jenkin
10016c60:	2f73 6f77 6b72 7073 6361 2f65 4e47 2d55     s/workspace/GNU-
10016c70:	6f74 6c6f 6863 6961 2f6e 7261 2d6d 3131     toolchain/arm-11
10016c80:	732f 6372 6e2f 7765 696c 2d62 7963 7767     /src/newlib-cygw
10016c90:	6e69 6e2f 7765 696c 2f62 696c 6362 732f     in/newlib/libc/s
10016ca0:	6474 696c 2f62 7464 616f 632e 4200 6c61     tdlib/dtoa.c.Bal
10016cb0:	6f6c 2063 7573 6363 6565 6564 0064 642f     loc succeeded./d
10016cc0:	7461 2f61 656a 6b6e 6e69 2f73 6f77 6b72     ata/jenkins/work
10016cd0:	7073 6361 2f65 4e47 2d55 6f74 6c6f 6863     space/GNU-toolch
10016ce0:	6961 2f6e 7261 2d6d 3131 732f 6372 6e2f     ain/arm-11/src/n
10016cf0:	7765 696c 2d62 7963 7767 6e69 6e2f 7765     ewlib-cygwin/new
10016d00:	696c 2f62 696c 6362 732f 6474 696c 2f62     lib/libc/stdlib/
10016d10:	706d 6572 2e63 0063                         mprec.c.

10016d18 <__mprec_bigtens>:
10016d18:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
10016d28:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
10016d38:	bf3c 7f73 4fdd 7515                         <.s..O.u

10016d40 <__mprec_tens>:
10016d40:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
10016d50:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
10016d60:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
10016d70:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
10016d80:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
10016d90:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
10016da0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
10016db0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
10016dc0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
10016dd0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
10016de0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
10016df0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
10016e00:	9db4 79d9 7843 44ea                         ...yCx.D

10016e08 <p05.0>:
10016e08:	0005 0000 0019 0000 007d 0000               ........}...

10016e14 <_ctype_>:
10016e14:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
10016e24:	2020 2020 2020 2020 2020 2020 2020 2020                     
10016e34:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
10016e44:	0410 0404 0404 0404 0404 1004 1010 1010     ................
10016e54:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
10016e64:	0101 0101 0101 0101 0101 0101 1010 1010     ................
10016e74:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
10016e84:	0202 0202 0202 0202 0202 0202 1010 1010     ................
10016e94:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
10016f14:	2300 302d 202b 6800 4c6c 6500 6766 4645     .#-0+ .hlL.efgEF
10016f24:	0047 0043 4f50 4953 0058 002e 202c 7566     G.C.POSIX..., fu
10016f34:	636e 6974 6e6f 203a 6100 7373 7265 6974     nction: .asserti
10016f44:	6e6f 2220 7325 2022 6166 6c69 6465 203a     on "%s" failed: 
10016f54:	6966 656c 2220 7325 2c22 6c20 6e69 2065     file "%s", line 
10016f64:	6425 7325 7325 000a                         %d%s%s..

10016f6c <__EH_FRAME_BEGIN__>:
10016f6c:	0000 0000                                   ....

Disassembly of section .data:

0800228c <SystemCoreClock>:
 800228c:	1200 007a                                   ..z.

08002290 <cy_AhbFreqHz>:
 8002290:	1200 007a                                   ..z.

08002294 <cy_Hfclk0FreqHz>:
 8002294:	1200 007a                                   ..z.

08002298 <cy_PeriClkFreqHz>:
 8002298:	0900 003d                                   ..=.

0800229c <cy_delayFreqKhz>:
 800229c:	1f40 0000                                   @...

080022a0 <cy_delayFreqMhz>:
 80022a0:	0008 0000                                   ....

080022a4 <cybsp_sysclk_pm_callback.1>:
 80022a4:	5a41 1000 0001 0000 0000 0000 2aa8 0800     AZ...........*..
	...
 80022bc:	00ff 0000                                   ....

080022c0 <cyhal_mux_to_sources>:
 80022c0:	beb8 1000 c0ec 1000 c152 1000 c1a8 1000     ........R.......
 80022d0:	c1fe 1000 c254 1000 c2aa 1000 c300 1000     ....T...........
 80022e0:	c356 1000 c3ac 1000 bf1e 1000 bf60 1000     V...........`...
 80022f0:	c022 1000 c05c 1000 c0a0 1000               "...\.......

080022fc <_CYHAL_CLOCK_SOURCE_HF>:
 80022fc:	c614 1000 c626 1000 c617 1000 c61a 1000     ....&...........
 800230c:	c61d 1000 c620 1000 c623 1000               .... ...#...

08002318 <cyhal_dma_dw_pm_callback_args>:
 8002318:	2e85 1000 140e 0000 0000 0000 0000 0000     ................

08002328 <_cyhal_scb_pm_callback_data>:
 8002328:	3425 1000 003e 0000 0000 0000 0000 0000     %4..>...........

08002338 <_cyhal_syspm_callback_ptr>:
 8002338:	0789 0000                                   ....

0800233c <_cyhal_syspm_peripheral_callback_ptr>:
 800233c:	0789 0000                                   ....

08002340 <__sglue>:
 8002340:	0000 0000 0003 0000 2e4c 0800               ........L...

0800234c <_impure_data>:
 800234c:	0000 0000 2e4c 0800 2eb4 0800 2f1c 0800     ....L......../..
	...

08002398 <_impure_ptr>:
 8002398:	234c 0800                                   L#..

0800239c <__global_locale>:
 800239c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
 80023bc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
 80023dc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
 80023fc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
 800241c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
 800243c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
 800245c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
 800247c:	b749 1000 b725 1000 0000 0000 6e14 1001     I...%........n..
 800248c:	6f2e 1001 6f6b 1001 6f6b 1001 6f6b 1001     .o..ko..ko..ko..
 800249c:	6f6b 1001 6f6b 1001 6f6b 1001 6f6b 1001     ko..ko..ko..ko..
 80024ac:	6f6b 1001 6f6b 1001 ffff ffff ffff ffff     ko..ko..........
 80024bc:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
 80024e4:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

08002508 <__frame_dummy_init_array_entry>:
 8002508:	22f5 1000                                   ."..

0800250c <__do_global_dtors_aux_fini_array_entry>:
 800250c:	22cd 1000                                   ."..

08002510 <Cy_Flash_RAMDelay>:
        uint32_t ticks = (microseconds & 0xFFFFUL) * CY_FLASH_TICKS_FOR_1US;
 8002510:	b280      	uxth	r0, r0
    {
 8002512:	b510      	push	{r4, lr}
        if (ticks != CY_FLASH_NO_DELAY)
 8002514:	00c4      	lsls	r4, r0, #3
 8002516:	b308      	cbz	r0, 800255c <Cy_Flash_RAMDelay+0x4c>
            while(0U == _FLD2VAL(IPC_STRUCT_ACQUIRE_SUCCESS, REG_IPC_STRUCT_ACQUIRE(CY_IPC_STRUCT_PTR(CY_IPC_CHAN_DDFT))))
 8002518:	4b11      	ldr	r3, [pc, #68]	@ (8002560 <Cy_Flash_RAMDelay+0x50>)
 800251a:	6819      	ldr	r1, [r3, #0]
 800251c:	f8b1 30be 	ldrh.w	r3, [r1, #190]	@ 0xbe
 8002520:	6a0a      	ldr	r2, [r1, #32]
 8002522:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8002526:	441a      	add	r2, r3
 8002528:	6810      	ldr	r0, [r2, #0]
 800252a:	2800      	cmp	r0, #0
 800252c:	dafc      	bge.n	8002528 <Cy_Flash_RAMDelay+0x18>
            SRSS_TST_DDFT_FAST_CTL_REG  = SRSS_TST_DDFT_FAST_CTL_MASK;
 800252e:	4a0d      	ldr	r2, [pc, #52]	@ (8002564 <Cy_Flash_RAMDelay+0x54>)
 8002530:	203e      	movs	r0, #62	@ 0x3e
 8002532:	f8c2 0104 	str.w	r0, [r2, #260]	@ 0x104
            SRSS_TST_DDFT_SLOW_CTL_REG  = SRSS_TST_DDFT_SLOW_CTL_MASK;
 8002536:	f641 701e 	movw	r0, #7966	@ 0x1f1e
 800253a:	f8c2 0108 	str.w	r0, [r2, #264]	@ 0x108
            SRSS_CLK_OUTPUT_SLOW = _VAL2FLD(SRSS_CLK_OUTPUT_SLOW_SLOW_SEL0, CY_SYSCLK_MEAS_CLK_IMO) |
 800253e:	2006      	movs	r0, #6
 8002540:	f8c2 0518 	str.w	r0, [r2, #1304]	@ 0x518
            SRSS_CLK_CAL_CNT1 = _VAL2FLD(SRSS_CLK_CAL_CNT1_CAL_COUNTER1, ticks);
 8002544:	f8c2 451c 	str.w	r4, [r2, #1308]	@ 0x51c
            REG_IPC_STRUCT_RELEASE(CY_IPC_STRUCT_PTR(CY_IPC_CHAN_DDFT)) = 0U;
 8002548:	6a09      	ldr	r1, [r1, #32]
            ticks = _FLD2VAL(SRSS_CLK_CAL_CNT1_CAL_COUNTER_DONE, SRSS_CLK_CAL_CNT1);
 800254a:	f8d2 051c 	ldr.w	r0, [r2, #1308]	@ 0x51c
            REG_IPC_STRUCT_RELEASE(CY_IPC_STRUCT_PTR(CY_IPC_CHAN_DDFT)) = 0U;
 800254e:	440b      	add	r3, r1
 8002550:	2100      	movs	r1, #0
 8002552:	6059      	str	r1, [r3, #4]
            while (0UL == _FLD2VAL(SRSS_CLK_CAL_CNT1_CAL_COUNTER_DONE, SRSS_CLK_CAL_CNT1))
 8002554:	f8d2 351c 	ldr.w	r3, [r2, #1308]	@ 0x51c
 8002558:	2b00      	cmp	r3, #0
 800255a:	dafb      	bge.n	8002554 <Cy_Flash_RAMDelay+0x44>
    }
 800255c:	bd10      	pop	{r4, pc}
 800255e:	bf00      	nop
 8002560:	08002c40 	.word	0x08002c40
 8002564:	40260000 	.word	0x40260000

08002568 <Cy_Flash_NotifyHandler>:
{
 8002568:	b508      	push	{r3, lr}
    if (CY_FLASH_ENTER_WAIT_LOOP == ipcMsgPtr->pktType)
 800256a:	7843      	ldrb	r3, [r0, #1]
 800256c:	2bff      	cmp	r3, #255	@ 0xff
 800256e:	d113      	bne.n	8002598 <Cy_Flash_NotifyHandler+0x30>
        intr = Cy_SysLib_EnterCriticalSection();
 8002570:	f000 f942 	bl	80027f8 <__Cy_SysLib_EnterCriticalSection_veneer>
 8002574:	4601      	mov	r1, r0
        semaStruct = (cy_stc_ipc_sema_t *)Cy_IPC_Drv_ReadDataValue(Cy_IPC_Drv_GetIpcBaseAddress(CY_IPC_CHAN_SEMA));
 8002576:	2003      	movs	r0, #3
 8002578:	f000 f93a 	bl	80027f0 <__Cy_IPC_Drv_GetIpcBaseAddress_veneer>
 800257c:	68c3      	ldr	r3, [r0, #12]
        semaPtr = &semaStruct->arrayPtr[semaIndex];
 800257e:	685b      	ldr	r3, [r3, #4]
        *semaPtr |= semaMask;
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	f042 0201 	orr.w	r2, r2, #1
 8002586:	601a      	str	r2, [r3, #0]
        while (((*semaPtr) & semaMask) != 0UL)
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	07d2      	lsls	r2, r2, #31
 800258c:	d4fc      	bmi.n	8002588 <Cy_Flash_NotifyHandler+0x20>
}
 800258e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Cy_SysLib_ExitCriticalSection(intr);
 8002592:	4608      	mov	r0, r1
 8002594:	f000 b93c 	b.w	8002810 <__Cy_SysLib_ExitCriticalSection_veneer>
}
 8002598:	bd08      	pop	{r3, pc}

0800259a <Cy_Flash_ResumeIrqHandler>:
        {
 800259a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
                bookmark = FLASHC_FM_CTL_BOOKMARK & 0xffffUL;
 800259c:	4f19      	ldr	r7, [pc, #100]	@ (8002604 <Cy_Flash_ResumeIrqHandler+0x6a>)
            IPC_STRUCT_Type * locIpcBase = Cy_IPC_Drv_GetIpcBaseAddress(CY_IPC_CHAN_CYPIPE_EP0);
 800259e:	2005      	movs	r0, #5
 80025a0:	f000 f926 	bl	80027f0 <__Cy_IPC_Drv_GetIpcBaseAddress_veneer>
                bookmark = FLASHC_FM_CTL_BOOKMARK & 0xffffUL;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
            IPC_STRUCT_Type * locIpcBase = Cy_IPC_Drv_GetIpcBaseAddress(CY_IPC_CHAN_CYPIPE_EP0);
 80025ac:	4606      	mov	r6, r0
                bookmark = FLASHC_FM_CTL_BOOKMARK & 0xffffUL;
 80025ae:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
            uint32_t intr = Cy_SysLib_EnterCriticalSection();
 80025b0:	f000 f922 	bl	80027f8 <__Cy_SysLib_EnterCriticalSection_veneer>
            uint32_t cm0s = CPUSS_CM0_STATUS;
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025bc:	18d1      	adds	r1, r2, r3
 80025be:	58d2      	ldr	r2, [r2, r3]
            bool sflashSingleCore = (0U == SFLASH_SINGLE_CORE);
 80025c0:	f04f 53b0 	mov.w	r3, #369098752	@ 0x16000000
                bookmark = FLASHC_FM_CTL_BOOKMARK & 0xffffUL;
 80025c4:	b2a4      	uxth	r4, r4
            bool sflashSingleCore = (0U == SFLASH_SINGLE_CORE);
 80025c6:	7adb      	ldrb	r3, [r3, #11]
                (bookmark == CY_FLASH_WRITE_ROW_ERASE_BOOKMARK) || (bookmark == CY_FLASH_WRITE_ROW_PROGRAM_BOOKMARK))
 80025c8:	3c01      	subs	r4, #1
            if ((bookmark == CY_FLASH_PROGRAM_ROW_BOOKMARK) || (bookmark == CY_FLASH_ERASE_ROW_BOOKMARK) ||
 80025ca:	2c03      	cmp	r4, #3
            uint32_t intr = Cy_SysLib_EnterCriticalSection();
 80025cc:	4605      	mov	r5, r0
            bool sflashSingleCore = (0U == SFLASH_SINGLE_CORE);
 80025ce:	b2db      	uxtb	r3, r3
            if ((bookmark == CY_FLASH_PROGRAM_ROW_BOOKMARK) || (bookmark == CY_FLASH_ERASE_ROW_BOOKMARK) ||
 80025d0:	d813      	bhi.n	80025fa <Cy_Flash_ResumeIrqHandler+0x60>
                if ((cm0s == (CPUSS_CM0_STATUS_SLEEPING_Msk | CPUSS_CM0_STATUS_SLEEPDEEP_Msk)) && sflashSingleCore)
 80025d2:	2a03      	cmp	r2, #3
 80025d4:	d105      	bne.n	80025e2 <Cy_Flash_ResumeIrqHandler+0x48>
 80025d6:	b923      	cbnz	r3, 80025e2 <Cy_Flash_ResumeIrqHandler+0x48>
                    REG_IPC_STRUCT_NOTIFY(locIpcBase) = _VAL2FLD(IPC_STRUCT_NOTIFY_INTR_NOTIFY, (1UL << CY_IPC_INTR_CYPIPE_EP0));
 80025d8:	2308      	movs	r3, #8
 80025da:	60b3      	str	r3, [r6, #8]
                    while (CPUSS_CM0_STATUS == (CPUSS_CM0_STATUS_SLEEPING_Msk | CPUSS_CM0_STATUS_SLEEPDEEP_Msk))
 80025dc:	680b      	ldr	r3, [r1, #0]
 80025de:	2b03      	cmp	r3, #3
 80025e0:	d0fc      	beq.n	80025dc <Cy_Flash_ResumeIrqHandler+0x42>
                Cy_Flash_RAMDelay(CY_FLASH_FINAL_STAGE_DELAY);
 80025e2:	f000 f921 	bl	8002828 <__Cy_SysClk_ClkSlowGetFrequency_veneer>
 80025e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025ea:	fbb0 f0f3 	udiv	r0, r0, r3
 80025ee:	4b06      	ldr	r3, [pc, #24]	@ (8002608 <Cy_Flash_ResumeIrqHandler+0x6e>)
 80025f0:	fbb3 f0f0 	udiv	r0, r3, r0
 80025f4:	3082      	adds	r0, #130	@ 0x82
 80025f6:	f7ff ff8b 	bl	8002510 <Cy_Flash_RAMDelay>
            Cy_SysLib_ExitCriticalSection(intr);
 80025fa:	4628      	mov	r0, r5
        }
 80025fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            Cy_SysLib_ExitCriticalSection(intr);
 8002600:	f000 b906 	b.w	8002810 <__Cy_SysLib_ExitCriticalSection_veneer>
 8002604:	08002c40 	.word	0x08002c40
 8002608:	000f4240 	.word	0x000f4240

0800260c <Cy_Flash_SendCmd>:
{
 800260c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002610:	4606      	mov	r6, r0
    IPC_STRUCT_Type * locIpcBase = Cy_IPC_Drv_GetIpcBaseAddress(CY_IPC_CHAN_SYSCALL);
 8002612:	2001      	movs	r0, #1
 8002614:	f000 f8ec 	bl	80027f0 <__Cy_IPC_Drv_GetIpcBaseAddress_veneer>
    volatile uint32_t *ipcLockStatus = &REG_IPC_STRUCT_LOCK_STATUS(locIpcBase);
 8002618:	4b41      	ldr	r3, [pc, #260]	@ (8002720 <Cy_Flash_SendCmd+0x114>)
 800261a:	681b      	ldr	r3, [r3, #0]
{
 800261c:	4689      	mov	r9, r1
    volatile uint32_t *ipcLockStatus = &REG_IPC_STRUCT_LOCK_STATUS(locIpcBase);
 800261e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
    if (cy_device->flashRwwRequired != 0U)
 8002622:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
    IPC_STRUCT_Type * locIpcBase = Cy_IPC_Drv_GetIpcBaseAddress(CY_IPC_CHAN_SYSCALL);
 8002626:	4605      	mov	r5, r0
    volatile uint32_t *ipcLockStatus = &REG_IPC_STRUCT_LOCK_STATUS(locIpcBase);
 8002628:	eb00 0801 	add.w	r8, r0, r1
    if (cy_device->flashRwwRequired != 0U)
 800262c:	2b00      	cmp	r3, #0
 800262e:	d061      	beq.n	80026f4 <Cy_Flash_SendCmd+0xe8>
        if (SFLASH_SINGLE_CORE == 0U)
 8002630:	f04f 53b0 	mov.w	r3, #369098752	@ 0x16000000
 8002634:	7adb      	ldrb	r3, [r3, #11]
 8002636:	f003 04ff 	and.w	r4, r3, #255	@ 0xff
 800263a:	2b00      	cmp	r3, #0
 800263c:	d142      	bne.n	80026c4 <Cy_Flash_SendCmd+0xb8>
            if (IS_CY_PIPE_FREE())
 800263e:	2005      	movs	r0, #5
 8002640:	f000 f8d6 	bl	80027f0 <__Cy_IPC_Drv_GetIpcBaseAddress_veneer>
    return ( 0u != _FLD2VAL(IPC_STRUCT_ACQUIRE_SUCCESS, REG_IPC_STRUCT_LOCK_STATUS(base)) );
 8002644:	5843      	ldr	r3, [r0, r1]
 8002646:	2b00      	cmp	r3, #0
 8002648:	da03      	bge.n	8002652 <Cy_Flash_SendCmd+0x46>
    cy_en_flashdrv_status_t result = CY_FLASH_DRV_IPC_BUSY;
 800264a:	4c36      	ldr	r4, [pc, #216]	@ (8002724 <Cy_Flash_SendCmd+0x118>)
}
 800264c:	4620      	mov	r0, r4
 800264e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                if (CY_IPC_SEMA_STATUS_LOCKED != Cy_IPC_Sema_Status(CY_FLASH_WAIT_SEMA))
 8002652:	4620      	mov	r0, r4
 8002654:	f000 f8d8 	bl	8002808 <__Cy_IPC_Sema_Status_veneer>
 8002658:	f8df a0e0 	ldr.w	sl, [pc, #224]	@ 800273c <Cy_Flash_SendCmd+0x130>
 800265c:	4550      	cmp	r0, sl
 800265e:	d0f4      	beq.n	800264a <Cy_Flash_SendCmd+0x3e>
                    if (CY_IPC_PIPE_SUCCESS == NOTIFY_PEER_CORE(ipcWaitMessage))
 8002660:	4a31      	ldr	r2, [pc, #196]	@ (8002728 <Cy_Flash_SendCmd+0x11c>)
 8002662:	4623      	mov	r3, r4
 8002664:	4620      	mov	r0, r4
 8002666:	6812      	ldr	r2, [r2, #0]
 8002668:	2101      	movs	r1, #1
 800266a:	f000 f8bd 	bl	80027e8 <__Cy_IPC_Pipe_SendMessage_veneer>
 800266e:	4604      	mov	r4, r0
 8002670:	2800      	cmp	r0, #0
 8002672:	d1ea      	bne.n	800264a <Cy_Flash_SendCmd+0x3e>
 8002674:	4f2d      	ldr	r7, [pc, #180]	@ (800272c <Cy_Flash_SendCmd+0x120>)
                        while ((CY_IPC_SEMA_STATUS_LOCKED != Cy_IPC_Sema_Status(CY_FLASH_WAIT_SEMA)) && ((semaTryCount < CY_FLASH_SEMA_WAIT_MAX_TRIES)))
 8002676:	2000      	movs	r0, #0
 8002678:	f000 f8c6 	bl	8002808 <__Cy_IPC_Sema_Status_veneer>
 800267c:	4550      	cmp	r0, sl
 800267e:	d003      	beq.n	8002688 <Cy_Flash_SendCmd+0x7c>
 8002680:	42bc      	cmp	r4, r7
 8002682:	d0e2      	beq.n	800264a <Cy_Flash_SendCmd+0x3e>
                            ++semaTryCount;
 8002684:	3401      	adds	r4, #1
 8002686:	e7f6      	b.n	8002676 <Cy_Flash_SendCmd+0x6a>
                        if (semaTryCount < CY_FLASH_SEMA_WAIT_MAX_TRIES)
 8002688:	42bc      	cmp	r4, r7
 800268a:	d0de      	beq.n	800264a <Cy_Flash_SendCmd+0x3e>
            isPeerCoreEnabled = true;
 800268c:	f04f 0a01 	mov.w	sl, #1
            intr = Cy_SysLib_EnterCriticalSection();
 8002690:	f000 f8b2 	bl	80027f8 <__Cy_SysLib_EnterCriticalSection_veneer>
            while (0UL == _FLD2VAL(SRSS_CLK_CAL_CNT1_CAL_COUNTER_DONE, SRSS_CLK_CAL_CNT1))
 8002694:	4b26      	ldr	r3, [pc, #152]	@ (8002730 <Cy_Flash_SendCmd+0x124>)
            intr = Cy_SysLib_EnterCriticalSection();
 8002696:	4607      	mov	r7, r0
            while (0UL == _FLD2VAL(SRSS_CLK_CAL_CNT1_CAL_COUNTER_DONE, SRSS_CLK_CAL_CNT1))
 8002698:	f8d3 251c 	ldr.w	r2, [r3, #1308]	@ 0x51c
 800269c:	2a00      	cmp	r2, #0
 800269e:	dafb      	bge.n	8002698 <Cy_Flash_SendCmd+0x8c>
            if (0UL != _FLD2VAL(SRSS_CLK_CAL_CNT1_CAL_COUNTER_DONE, SRSS_CLK_CAL_CNT1))
 80026a0:	f8d3 351c 	ldr.w	r3, [r3, #1308]	@ 0x51c
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	db10      	blt.n	80026ca <Cy_Flash_SendCmd+0xbe>
                result = CY_FLASH_DRV_IPC_BUSY;
 80026a8:	4c1e      	ldr	r4, [pc, #120]	@ (8002724 <Cy_Flash_SendCmd+0x118>)
            if (isPeerCoreEnabled)
 80026aa:	f1ba 0f00 	cmp.w	sl, #0
 80026ae:	d005      	beq.n	80026bc <Cy_Flash_SendCmd+0xb0>
                while (CY_IPC_SEMA_SUCCESS != Cy_IPC_Sema_Clear(CY_FLASH_WAIT_SEMA, true))
 80026b0:	2101      	movs	r1, #1
 80026b2:	2000      	movs	r0, #0
 80026b4:	f000 f8a4 	bl	8002800 <__Cy_IPC_Sema_Clear_veneer>
 80026b8:	2800      	cmp	r0, #0
 80026ba:	d1f9      	bne.n	80026b0 <Cy_Flash_SendCmd+0xa4>
        Cy_SysLib_ExitCriticalSection(intr);
 80026bc:	4638      	mov	r0, r7
 80026be:	f000 f8a7 	bl	8002810 <__Cy_SysLib_ExitCriticalSection_veneer>
    return (result);
 80026c2:	e7c3      	b.n	800264c <Cy_Flash_SendCmd+0x40>
        bool isPeerCoreEnabled = false;
 80026c4:	f04f 0a00 	mov.w	sl, #0
 80026c8:	e7e2      	b.n	8002690 <Cy_Flash_SendCmd+0x84>
    return Cy_IPC_Drv_SendMsgWord(base, notifyEventIntr, (uint32_t)msgPtr);
 80026ca:	4a1a      	ldr	r2, [pc, #104]	@ (8002734 <Cy_Flash_SendCmd+0x128>)
 80026cc:	2101      	movs	r1, #1
 80026ce:	4628      	mov	r0, r5
 80026d0:	f000 f8a2 	bl	8002818 <__Cy_IPC_Drv_SendMsgWord_veneer>
                if (Cy_IPC_Drv_SendMsgPtr(locIpcBase, CY_FLASH_IPC_NOTIFY_STRUCT0, (void*)&flashContext) == CY_IPC_DRV_SUCCESS)
 80026d4:	2800      	cmp	r0, #0
 80026d6:	d1e7      	bne.n	80026a8 <Cy_Flash_SendCmd+0x9c>
                    Cy_Flash_RAMDelay(microseconds);
 80026d8:	4648      	mov	r0, r9
 80026da:	f7ff ff19 	bl	8002510 <Cy_Flash_RAMDelay>
                    if (mode == CY_FLASH_NON_BLOCKING_MODE)
 80026de:	b13e      	cbz	r6, 80026f0 <Cy_Flash_SendCmd+0xe4>
                        while (0U != _FLD2VAL(IPC_STRUCT_ACQUIRE_SUCCESS, *ipcLockStatus))
 80026e0:	f8d8 3000 	ldr.w	r3, [r8]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	dbfb      	blt.n	80026e0 <Cy_Flash_SendCmd+0xd4>
                        result = Cy_Flash_OperationStatus();
 80026e8:	f000 f89a 	bl	8002820 <__Cy_Flash_OperationStatus_veneer>
 80026ec:	4604      	mov	r4, r0
 80026ee:	e7dc      	b.n	80026aa <Cy_Flash_SendCmd+0x9e>
                        result = CY_FLASH_DRV_OPERATION_STARTED;
 80026f0:	4c11      	ldr	r4, [pc, #68]	@ (8002738 <Cy_Flash_SendCmd+0x12c>)
 80026f2:	e7da      	b.n	80026aa <Cy_Flash_SendCmd+0x9e>
        intr = Cy_SysLib_EnterCriticalSection();
 80026f4:	f000 f880 	bl	80027f8 <__Cy_SysLib_EnterCriticalSection_veneer>
 80026f8:	4a0e      	ldr	r2, [pc, #56]	@ (8002734 <Cy_Flash_SendCmd+0x128>)
 80026fa:	4607      	mov	r7, r0
 80026fc:	2101      	movs	r1, #1
 80026fe:	4628      	mov	r0, r5
 8002700:	f000 f88a 	bl	8002818 <__Cy_IPC_Drv_SendMsgWord_veneer>
        if (Cy_IPC_Drv_SendMsgPtr(locIpcBase, CY_FLASH_IPC_NOTIFY_STRUCT0, (void*)&flashContext) == CY_IPC_DRV_SUCCESS)
 8002704:	b940      	cbnz	r0, 8002718 <Cy_Flash_SendCmd+0x10c>
            if (mode == CY_FLASH_NON_BLOCKING_MODE)
 8002706:	b14e      	cbz	r6, 800271c <Cy_Flash_SendCmd+0x110>
                while (0U != _FLD2VAL(IPC_STRUCT_ACQUIRE_SUCCESS, *ipcLockStatus))
 8002708:	f8d8 3000 	ldr.w	r3, [r8]
 800270c:	2b00      	cmp	r3, #0
 800270e:	dbfb      	blt.n	8002708 <Cy_Flash_SendCmd+0xfc>
                result = Cy_Flash_OperationStatus();
 8002710:	f000 f886 	bl	8002820 <__Cy_Flash_OperationStatus_veneer>
 8002714:	4604      	mov	r4, r0
 8002716:	e7d1      	b.n	80026bc <Cy_Flash_SendCmd+0xb0>
            result = CY_FLASH_DRV_IPC_BUSY;
 8002718:	4c02      	ldr	r4, [pc, #8]	@ (8002724 <Cy_Flash_SendCmd+0x118>)
 800271a:	e7cf      	b.n	80026bc <Cy_Flash_SendCmd+0xb0>
                result = CY_FLASH_DRV_OPERATION_STARTED;
 800271c:	4c06      	ldr	r4, [pc, #24]	@ (8002738 <Cy_Flash_SendCmd+0x12c>)
 800271e:	e7cd      	b.n	80026bc <Cy_Flash_SendCmd+0xb0>
 8002720:	08002c40 	.word	0x08002c40
 8002724:	00520005 	.word	0x00520005
 8002728:	08002c54 	.word	0x08002c54
 800272c:	000249f0 	.word	0x000249f0
 8002730:	40260000 	.word	0x40260000
 8002734:	08002c44 	.word	0x08002c44
 8002738:	00500001 	.word	0x00500001
 800273c:	00880101 	.word	0x00880101

08002740 <EnterDeepSleepRam>:
    volatile uint32_t *delayDoneFlag = DELAY_FLAG_REGISTER_ADDR;
 8002740:	4b24      	ldr	r3, [pc, #144]	@ (80027d4 <EnterDeepSleepRam+0x94>)
 8002742:	681b      	ldr	r3, [r3, #0]
{
 8002744:	b570      	push	{r4, r5, r6, lr}
    volatile uint32_t *cpussCm4PwrCtlAddr = &CPUSS_CM4_PWR_CTL;
 8002746:	e9d3 1400 	ldrd	r1, r4, [r3]
 800274a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
            if(wasEventSent)
 800274e:	4d22      	ldr	r5, [pc, #136]	@ (80027d8 <EnterDeepSleepRam+0x98>)
    volatile uint32_t *cpussCm4PwrCtlAddr = &CPUSS_CM4_PWR_CTL;
 8002750:	4419      	add	r1, r3
        SCB_SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8002752:	4b22      	ldr	r3, [pc, #136]	@ (80027dc <EnterDeepSleepRam+0x9c>)
            wasEventSent = true;
 8002754:	2601      	movs	r6, #1
        SCB_SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8002756:	691a      	ldr	r2, [r3, #16]
 8002758:	f042 0204 	orr.w	r2, r2, #4
 800275c:	611a      	str	r2, [r3, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800275e:	f3bf 8f4f 	dsb	sy
        if(waitFor != CY_SYSPM_WAIT_FOR_EVENT)
 8002762:	2801      	cmp	r0, #1
 8002764:	d02f      	beq.n	80027c6 <EnterDeepSleepRam+0x86>
            __WFI();
 8002766:	bf30      	wfi
        SCB_SCR &= (uint32_t) ~SCB_SCR_SLEEPDEEP_Msk;
 8002768:	691a      	ldr	r2, [r3, #16]
 800276a:	f022 0204 	bic.w	r2, r2, #4
 800276e:	611a      	str	r2, [r3, #16]
    } while (_FLD2VAL(CPUSS_CM4_PWR_CTL_PWR_MODE, (*cpussCm4PwrCtlAddr)) == CM4_PWR_STS_RETAINED);
 8002770:	680a      	ldr	r2, [r1, #0]
 8002772:	f002 0203 	and.w	r2, r2, #3
 8002776:	2a02      	cmp	r2, #2
 8002778:	d0ed      	beq.n	8002756 <EnterDeepSleepRam+0x16>
    if (*delayDoneFlag == NEED_DELAY)
 800277a:	f8d4 310c 	ldr.w	r3, [r4, #268]	@ 0x10c
 800277e:	bb0b      	cbnz	r3, 80027c4 <EnterDeepSleepRam+0x84>
        ddftSlowCtl   = SRSS_TST_DDFT_SLOW_CTL_REG;
 8002780:	4b17      	ldr	r3, [pc, #92]	@ (80027e0 <EnterDeepSleepRam+0xa0>)
        SRSS_TST_DDFT_SLOW_CTL_REG = SRSS_TST_DDFT_SLOW_CTL_MASK;
 8002782:	f641 751e 	movw	r5, #7966	@ 0x1f1e
        ddftSlowCtl   = SRSS_TST_DDFT_SLOW_CTL_REG;
 8002786:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
        clkOutputSlow = SRSS_CLK_OUTPUT_SLOW;
 800278a:	f8d3 1518 	ldr.w	r1, [r3, #1304]	@ 0x518
        ddftFastCtl   = SRSS_TST_DDFT_FAST_CTL_REG;
 800278e:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
        SRSS_TST_DDFT_SLOW_CTL_REG = SRSS_TST_DDFT_SLOW_CTL_MASK;
 8002792:	f8c3 5108 	str.w	r5, [r3, #264]	@ 0x108
        SRSS_CLK_OUTPUT_SLOW       = CLK_OUTPUT_SLOW_MASK;
 8002796:	2506      	movs	r5, #6
 8002798:	f8c3 5518 	str.w	r5, [r3, #1304]	@ 0x518
        SRSS_TST_DDFT_FAST_CTL_REG = TST_DDFT_FAST_CTL_MASK;
 800279c:	253e      	movs	r5, #62	@ 0x3e
 800279e:	f8c3 5104 	str.w	r5, [r3, #260]	@ 0x104
        SRSS_CLK_CAL_CNT1 = IMO_10US_DELAY;
 80027a2:	2544      	movs	r5, #68	@ 0x44
 80027a4:	f8c3 551c 	str.w	r5, [r3, #1308]	@ 0x51c
        while (0U == (SRSS_CLK_CAL_CNT1 & SRSS_CLK_CAL_CNT1_CAL_COUNTER_DONE_Msk))
 80027a8:	f8d3 551c 	ldr.w	r5, [r3, #1308]	@ 0x51c
 80027ac:	2d00      	cmp	r5, #0
 80027ae:	dafb      	bge.n	80027a8 <EnterDeepSleepRam+0x68>
        *delayDoneFlag = DELAY_DONE;
 80027b0:	f04f 35aa 	mov.w	r5, #2863311530	@ 0xaaaaaaaa
 80027b4:	f8c4 510c 	str.w	r5, [r4, #268]	@ 0x10c
        SRSS_TST_DDFT_SLOW_CTL_REG = ddftSlowCtl;
 80027b8:	f8c3 0108 	str.w	r0, [r3, #264]	@ 0x108
        SRSS_CLK_OUTPUT_SLOW       = clkOutputSlow;
 80027bc:	f8c3 1518 	str.w	r1, [r3, #1304]	@ 0x518
        SRSS_TST_DDFT_FAST_CTL_REG = ddftFastCtl;
 80027c0:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
}
 80027c4:	bd70      	pop	{r4, r5, r6, pc}
            __WFE();
 80027c6:	bf20      	wfe
            if(wasEventSent)
 80027c8:	782a      	ldrb	r2, [r5, #0]
 80027ca:	b102      	cbz	r2, 80027ce <EnterDeepSleepRam+0x8e>
                __WFE();
 80027cc:	bf20      	wfe
            wasEventSent = true;
 80027ce:	702e      	strb	r6, [r5, #0]
 80027d0:	e7ca      	b.n	8002768 <EnterDeepSleepRam+0x28>
 80027d2:	bf00      	nop
 80027d4:	08002c40 	.word	0x08002c40
 80027d8:	08002c84 	.word	0x08002c84
 80027dc:	e000ed00 	.word	0xe000ed00
 80027e0:	40260000 	.word	0x40260000
 80027e4:	00000000 	.word	0x00000000

080027e8 <__Cy_IPC_Pipe_SendMessage_veneer>:
 80027e8:	f85f f000 	ldr.w	pc, [pc]	@ 80027ec <__Cy_IPC_Pipe_SendMessage_veneer+0x4>
 80027ec:	10004841 	.word	0x10004841

080027f0 <__Cy_IPC_Drv_GetIpcBaseAddress_veneer>:
 80027f0:	f85f f000 	ldr.w	pc, [pc]	@ 80027f4 <__Cy_IPC_Drv_GetIpcBaseAddress_veneer+0x4>
 80027f4:	100043d9 	.word	0x100043d9

080027f8 <__Cy_SysLib_EnterCriticalSection_veneer>:
 80027f8:	f85f f000 	ldr.w	pc, [pc]	@ 80027fc <__Cy_SysLib_EnterCriticalSection_veneer+0x4>
 80027fc:	10002ac3 	.word	0x10002ac3

08002800 <__Cy_IPC_Sema_Clear_veneer>:
 8002800:	f85f f000 	ldr.w	pc, [pc]	@ 8002804 <__Cy_IPC_Sema_Clear_veneer+0x4>
 8002804:	10004a21 	.word	0x10004a21

08002808 <__Cy_IPC_Sema_Status_veneer>:
 8002808:	f85f f000 	ldr.w	pc, [pc]	@ 800280c <__Cy_IPC_Sema_Status_veneer+0x4>
 800280c:	10004aa5 	.word	0x10004aa5

08002810 <__Cy_SysLib_ExitCriticalSection_veneer>:
 8002810:	f85f f000 	ldr.w	pc, [pc]	@ 8002814 <__Cy_SysLib_ExitCriticalSection_veneer+0x4>
 8002814:	10002acb 	.word	0x10002acb

08002818 <__Cy_IPC_Drv_SendMsgWord_veneer>:
 8002818:	f85f f000 	ldr.w	pc, [pc]	@ 800281c <__Cy_IPC_Drv_SendMsgWord_veneer+0x4>
 800281c:	10004731 	.word	0x10004731

08002820 <__Cy_Flash_OperationStatus_veneer>:
 8002820:	f85f f000 	ldr.w	pc, [pc]	@ 8002824 <__Cy_Flash_OperationStatus_veneer+0x4>
 8002824:	10004499 	.word	0x10004499

08002828 <__Cy_SysClk_ClkSlowGetFrequency_veneer>:
 8002828:	f85f f000 	ldr.w	pc, [pc]	@ 800282c <__Cy_SysClk_ClkSlowGetFrequency_veneer+0x4>
 800282c:	10005d7f 	.word	0x10005d7f
